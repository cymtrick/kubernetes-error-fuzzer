/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package k8s.io.api.node.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// RuntimeClass defines a class of container runtime supported in the cluster.
// The RuntimeClass is used to determine which container runtime is used to run
// all containers in a pod. RuntimeClasses are (currently) manually defined by a
// user or cluster provisioner, and referenced in the PodSpec. The Kubelet is
// responsible for resolving the RuntimeClassName reference before running the
// pod.  For more details, see
// https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
message RuntimeClass {
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the RuntimeClass
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
  optional RuntimeClassSpec spec = 2;
}

// RuntimeClassList is a list of RuntimeClass objects.
message RuntimeClassList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of schema objects.
  repeated RuntimeClass items = 2;
}

// RuntimeClassSpec is a specification of a RuntimeClass. It contains parameters
// that are required to describe the RuntimeClass to the Container Runtime
// Interface (CRI) implementation, as well as any other components that need to
// understand how the pod will be run. The RuntimeClassSpec is immutable.
message RuntimeClassSpec {
  // RuntimeHandler specifies the underlying runtime and configuration that the
  // CRI implementation will use to handle pods of this class. The possible
  // values are specific to the node & CRI configuration.  It is assumed that
  // all handlers are available on every node, and handlers of the same name are
  // equivalent on every node.
  // For example, a handler called "runc" might specify that the runc OCI
  // runtime (using native Linux containers) will be used to run the containers
  // in a pod.
  // The RuntimeHandler must conform to the DNS Label (RFC 1123) requirements
  // and is immutable.
  optional string runtimeHandler = 1;

  // Topology describes the set of nodes in the cluster that support this
  // RuntimeClass. The rules are applied applied to pods running with this
  // RuntimeClass and semantically merged with other scheduling constraints on
  // the pod.
  // If topology is nil, this RuntimeClass is assumed to be supported by all
  // nodes.
  // +optional
  optional Topology topology = 3;
}

// Topology specifies the scheduling constraints for nodes supporting a
// RuntimeClass.
message Topology {
  // NodeSelector selects the set of nodes that support this RuntimeClass.
  // Pods using this RuntimeClass can only be scheduled to a node matched by
  // this selector. The NodeSelector is intersected (AND) with a pod's other
  // NodeAffinity or NodeSelector requirements.
  // A nil NodeSelector selects all nodes.
  // +optional
  optional k8s.io.api.core.v1.NodeSelector nodeSelector = 1;

  // Tolerations are appended (excluding duplicates) to pods running with this
  // RuntimeClass during admission, effectively unioning the set of nodes
  // tolerated by the pod and the RuntimeClass.
  // +optional
  repeated k8s.io.api.core.v1.Toleration tolerations = 2;
}

