/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg5_util.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	if !yyhl45 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				var yynn82 int = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	if !yyhl104 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				var yynn141 int = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
			}
			if yyr141 || yy2arr141 {
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [2]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[1] = x.ReadOnly != false
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(2)
			} else {
				var yynn195 int = 1
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
			}
			if yyr195 || yy2arr195 {
				yym197 := z.EncBinary()
				_ = yym197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym198 := z.EncBinary()
				_ = yym198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[1] {
					yym200 := z.EncBinary()
					_ = yym200
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq195[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym201 := z.EncBinary()
					_ = yym201
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep195 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym202 := z.DecBinary()
	_ = yym202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl203 := r.ReadMapStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl203, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl203 := r.ReadArrayStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys204Slc
	var yyhl204 bool = l >= 0
	for yyj204 := 0; ; yyj204++ {
		if yyhl204 {
			if yyj204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys204Slc = r.DecodeBytes(yys204Slc, true, true)
		yys204 := string(yys204Slc)
		switch yys204 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys204)
		} // end switch yys204
	} // end for yyj204
	if !yyhl204 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj207 int
	var yyb207 bool
	var yyhl207 bool = l >= 0
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj207++
		if yyhl207 {
			yyb207 = yyj207 > l
		} else {
			yyb207 = r.CheckBreak()
		}
		if yyb207 {
			break
		}
		z.DecStructFieldNotFound(yyj207-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym210 := z.EncBinary()
		_ = yym210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep211 := !z.EncBinary()
			yy2arr211 := z.EncBasicHandle().StructToArray
			var yyq211 [11]bool
			_, _, _ = yysep211, yyq211, yy2arr211
			const yyr211 bool = false
			yyq211[0] = x.GCEPersistentDisk != nil
			yyq211[1] = x.AWSElasticBlockStore != nil
			yyq211[2] = x.HostPath != nil
			yyq211[3] = x.Glusterfs != nil
			yyq211[4] = x.NFS != nil
			yyq211[5] = x.RBD != nil
			yyq211[6] = x.ISCSI != nil
			yyq211[7] = x.Cinder != nil
			yyq211[8] = x.CephFS != nil
			yyq211[9] = x.FC != nil
			yyq211[10] = x.Flocker != nil
			if yyr211 || yy2arr211 {
				r.EncodeArrayStart(11)
			} else {
				var yynn211 int = 0
				for _, b := range yyq211 {
					if b {
						yynn211++
					}
				}
				r.EncodeMapStart(yynn211)
			}
			if yyr211 || yy2arr211 {
				if yyq211[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep211 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym223 := z.DecBinary()
	_ = yym223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl224 := r.ReadMapStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl224, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl224 := r.ReadArrayStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys225Slc
	var yyhl225 bool = l >= 0
	for yyj225 := 0; ; yyj225++ {
		if yyhl225 {
			if yyj225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys225Slc = r.DecodeBytes(yys225Slc, true, true)
		yys225 := string(yys225Slc)
		switch yys225 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys225)
		} // end switch yys225
	} // end for yyj225
	if !yyhl225 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj237 int
	var yyb237 bool
	var yyhl237 bool = l >= 0
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj237++
		if yyhl237 {
			yyb237 = yyj237 > l
		} else {
			yyb237 = r.CheckBreak()
		}
		if yyb237 {
			break
		}
		z.DecStructFieldNotFound(yyj237-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				var yynn250 int = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
			}
			if yyr250 || yy2arr250 {
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yysep250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	if !yyhl268 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[0] = len(x.Capacity) != 0
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				var yynn281 int = 0
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
			}
			if yyr281 || yy2arr281 {
				if yyq281[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep281 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	if !yyhl301 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				var yynn338 int = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
			}
			if yyr338 || yy2arr338 {
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep338 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	if !yyhl348 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				var yynn357 int = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
			}
			if yyr357 || yy2arr357 {
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep357 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	if !yyhl374 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				var yynn389 int = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
			}
			if yyr389 || yy2arr389 {
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yysep389 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	if !yyhl407 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				var yynn420 int = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
			}
			if yyr420 || yy2arr420 {
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep420 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	if !yyhl437 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				var yynn452 int = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep452 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	if !yyhl464 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				var yynn475 int = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
			}
			if yyr475 || yy2arr475 {
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep475 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	if !yyhl483 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				var yynn500 int = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
			}
			if yyr500 || yy2arr500 {
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep500 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	if !yyhl506 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			yyq511[0] = x.Medium != ""
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				var yynn511 int = 0
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
			}
			if yyr511 || yy2arr511 {
				if yyq511[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq511[0] {
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yysep511 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	if !yyhl515 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym519 := z.EncBinary()
		_ = yym519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep520 := !z.EncBinary()
			yy2arr520 := z.EncBasicHandle().StructToArray
			var yyq520 [3]bool
			_, _, _ = yysep520, yyq520, yy2arr520
			const yyr520 bool = false
			yyq520[2] = x.ReadOnly != false
			if yyr520 || yy2arr520 {
				r.EncodeArrayStart(3)
			} else {
				var yynn520 int = 2
				for _, b := range yyq520 {
					if b {
						yynn520++
					}
				}
				r.EncodeMapStart(yynn520)
			}
			if yyr520 || yy2arr520 {
				yym522 := z.EncBinary()
				_ = yym522
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym523 := z.EncBinary()
				_ = yym523
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr520 || yy2arr520 {
				yym525 := z.EncBinary()
				_ = yym525
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr520 || yy2arr520 {
				if yyq520[2] {
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq520[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep520 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym530 := z.DecBinary()
	_ = yym530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl531 := r.ReadMapStart()
			if yyl531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl531, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl531 := r.ReadArrayStart()
			if yyl531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys532Slc
	var yyhl532 bool = l >= 0
	for yyj532 := 0; ; yyj532++ {
		if yyhl532 {
			if yyj532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys532Slc = r.DecodeBytes(yys532Slc, true, true)
		yys532 := string(yys532Slc)
		switch yys532 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys532)
		} // end switch yys532
	} // end for yyj532
	if !yyhl532 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj536 int
	var yyb536 bool
	var yyhl536 bool = l >= 0
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj536++
		if yyhl536 {
			yyb536 = yyj536 > l
		} else {
			yyb536 = r.CheckBreak()
		}
		if yyb536 {
			break
		}
		z.DecStructFieldNotFound(yyj536-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym540 := z.EncBinary()
	_ = yym540
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym541 := z.DecBinary()
	_ = yym541
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym542 := z.EncBinary()
		_ = yym542
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep543 := !z.EncBinary()
			yy2arr543 := z.EncBasicHandle().StructToArray
			var yyq543 [8]bool
			_, _, _ = yysep543, yyq543, yy2arr543
			const yyr543 bool = false
			yyq543[2] = x.FSType != ""
			yyq543[7] = x.ReadOnly != false
			if yyr543 || yy2arr543 {
				r.EncodeArrayStart(8)
			} else {
				var yynn543 int = 6
				for _, b := range yyq543 {
					if b {
						yynn543++
					}
				}
				r.EncodeMapStart(yynn543)
			}
			if yyr543 || yy2arr543 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr543 || yy2arr543 {
				yym548 := z.EncBinary()
				_ = yym548
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym549 := z.EncBinary()
				_ = yym549
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr543 || yy2arr543 {
				if yyq543[2] {
					yym551 := z.EncBinary()
					_ = yym551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq543[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr543 || yy2arr543 {
				yym554 := z.EncBinary()
				_ = yym554
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym555 := z.EncBinary()
				_ = yym555
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr543 || yy2arr543 {
				yym557 := z.EncBinary()
				_ = yym557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym558 := z.EncBinary()
				_ = yym558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr543 || yy2arr543 {
				yym560 := z.EncBinary()
				_ = yym560
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym561 := z.EncBinary()
				_ = yym561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr543 || yy2arr543 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr543 || yy2arr543 {
				if yyq543[7] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq543[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep543 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		switch yys568 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv569 := &x.CephMonitors
				yym570 := z.DecBinary()
				_ = yym570
				if false {
				} else {
					z.F.DecSliceStringX(yyv569, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	if !yyhl568 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj578 int
	var yyb578 bool
	var yyhl578 bool = l >= 0
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv579 := &x.CephMonitors
		yym580 := z.DecBinary()
		_ = yym580
		if false {
		} else {
			z.F.DecSliceStringX(yyv579, false, d)
		}
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj578++
		if yyhl578 {
			yyb578 = yyj578 > l
		} else {
			yyb578 = r.CheckBreak()
		}
		if yyb578 {
			break
		}
		z.DecStructFieldNotFound(yyj578-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym588 := z.EncBinary()
		_ = yym588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep589 := !z.EncBinary()
			yy2arr589 := z.EncBasicHandle().StructToArray
			var yyq589 [3]bool
			_, _, _ = yysep589, yyq589, yy2arr589
			const yyr589 bool = false
			yyq589[1] = x.FSType != ""
			yyq589[2] = x.ReadOnly != false
			if yyr589 || yy2arr589 {
				r.EncodeArrayStart(3)
			} else {
				var yynn589 int = 1
				for _, b := range yyq589 {
					if b {
						yynn589++
					}
				}
				r.EncodeMapStart(yynn589)
			}
			if yyr589 || yy2arr589 {
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr589 || yy2arr589 {
				if yyq589[1] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq589[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr589 || yy2arr589 {
				if yyq589[2] {
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq589[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep589 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym599 := z.DecBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl600 := r.ReadMapStart()
			if yyl600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl600, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl600 := r.ReadArrayStart()
			if yyl600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys601Slc
	var yyhl601 bool = l >= 0
	for yyj601 := 0; ; yyj601++ {
		if yyhl601 {
			if yyj601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys601Slc = r.DecodeBytes(yys601Slc, true, true)
		yys601 := string(yys601Slc)
		switch yys601 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys601)
		} // end switch yys601
	} // end for yyj601
	if !yyhl601 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym609 := z.EncBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep610 := !z.EncBinary()
			yy2arr610 := z.EncBasicHandle().StructToArray
			var yyq610 [5]bool
			_, _, _ = yysep610, yyq610, yy2arr610
			const yyr610 bool = false
			yyq610[1] = x.User != ""
			yyq610[2] = x.SecretFile != ""
			yyq610[3] = x.SecretRef != nil
			yyq610[4] = x.ReadOnly != false
			if yyr610 || yy2arr610 {
				r.EncodeArrayStart(5)
			} else {
				var yynn610 int = 1
				for _, b := range yyq610 {
					if b {
						yynn610++
					}
				}
				r.EncodeMapStart(yynn610)
			}
			if yyr610 || yy2arr610 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[1] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[2] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq610[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[4] {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq610[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep610 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl625 := r.ReadMapStart()
			if yyl625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl625, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl625 := r.ReadArrayStart()
			if yyl625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys626Slc
	var yyhl626 bool = l >= 0
	for yyj626 := 0; ; yyj626++ {
		if yyhl626 {
			if yyj626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys626Slc = r.DecodeBytes(yys626Slc, true, true)
		yys626 := string(yys626Slc)
		switch yys626 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv627 := &x.Monitors
				yym628 := z.DecBinary()
				_ = yym628
				if false {
				} else {
					z.F.DecSliceStringX(yyv627, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys626)
		} // end switch yys626
	} // end for yyj626
	if !yyhl626 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv634 := &x.Monitors
		yym635 := z.DecBinary()
		_ = yym635
		if false {
		} else {
			z.F.DecSliceStringX(yyv634, false, d)
		}
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym640 := z.EncBinary()
		_ = yym640
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep641 := !z.EncBinary()
			yy2arr641 := z.EncBasicHandle().StructToArray
			var yyq641 [1]bool
			_, _, _ = yysep641, yyq641, yy2arr641
			const yyr641 bool = false
			if yyr641 || yy2arr641 {
				r.EncodeArrayStart(1)
			} else {
				var yynn641 int = 1
				for _, b := range yyq641 {
					if b {
						yynn641++
					}
				}
				r.EncodeMapStart(yynn641)
			}
			if yyr641 || yy2arr641 {
				yym643 := z.EncBinary()
				_ = yym643
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym644 := z.EncBinary()
				_ = yym644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep641 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym645 := z.DecBinary()
	_ = yym645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl646 := r.ReadMapStart()
			if yyl646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl646, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl646 := r.ReadArrayStart()
			if yyl646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl646, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys647Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys647Slc
	var yyhl647 bool = l >= 0
	for yyj647 := 0; ; yyj647++ {
		if yyhl647 {
			if yyj647 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys647Slc = r.DecodeBytes(yys647Slc, true, true)
		yys647 := string(yys647Slc)
		switch yys647 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys647)
		} // end switch yys647
	} // end for yyj647
	if !yyhl647 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj649 int
	var yyb649 bool
	var yyhl649 bool = l >= 0
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj649++
		if yyhl649 {
			yyb649 = yyj649 > l
		} else {
			yyb649 = r.CheckBreak()
		}
		if yyb649 {
			break
		}
		z.DecStructFieldNotFound(yyj649-1, "")
	}
	r.ReadEnd()
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym651 := z.EncBinary()
	_ = yym651
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym652 := z.DecBinary()
	_ = yym652
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym653 := z.EncBinary()
		_ = yym653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep654 := !z.EncBinary()
			yy2arr654 := z.EncBasicHandle().StructToArray
			var yyq654 [4]bool
			_, _, _ = yysep654, yyq654, yy2arr654
			const yyr654 bool = false
			yyq654[2] = x.Partition != 0
			yyq654[3] = x.ReadOnly != false
			if yyr654 || yy2arr654 {
				r.EncodeArrayStart(4)
			} else {
				var yynn654 int = 2
				for _, b := range yyq654 {
					if b {
						yynn654++
					}
				}
				r.EncodeMapStart(yynn654)
			}
			if yyr654 || yy2arr654 {
				yym656 := z.EncBinary()
				_ = yym656
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr654 || yy2arr654 {
				yym659 := z.EncBinary()
				_ = yym659
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym660 := z.EncBinary()
				_ = yym660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr654 || yy2arr654 {
				if yyq654[2] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq654[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr654 || yy2arr654 {
				if yyq654[3] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq654[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep654 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym667 := z.DecBinary()
	_ = yym667
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl668 := r.ReadMapStart()
			if yyl668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl668, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl668 := r.ReadArrayStart()
			if yyl668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl668, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys669Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys669Slc
	var yyhl669 bool = l >= 0
	for yyj669 := 0; ; yyj669++ {
		if yyhl669 {
			if yyj669 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys669Slc = r.DecodeBytes(yys669Slc, true, true)
		yys669 := string(yys669Slc)
		switch yys669 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys669)
		} // end switch yys669
	} // end for yyj669
	if !yyhl669 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj674 int
	var yyb674 bool
	var yyhl674 bool = l >= 0
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj674++
		if yyhl674 {
			yyb674 = yyj674 > l
		} else {
			yyb674 = r.CheckBreak()
		}
		if yyb674 {
			break
		}
		z.DecStructFieldNotFound(yyj674-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym679 := z.EncBinary()
		_ = yym679
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep680 := !z.EncBinary()
			yy2arr680 := z.EncBasicHandle().StructToArray
			var yyq680 [4]bool
			_, _, _ = yysep680, yyq680, yy2arr680
			const yyr680 bool = false
			yyq680[2] = x.Partition != 0
			yyq680[3] = x.ReadOnly != false
			if yyr680 || yy2arr680 {
				r.EncodeArrayStart(4)
			} else {
				var yynn680 int = 2
				for _, b := range yyq680 {
					if b {
						yynn680++
					}
				}
				r.EncodeMapStart(yynn680)
			}
			if yyr680 || yy2arr680 {
				yym682 := z.EncBinary()
				_ = yym682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym683 := z.EncBinary()
				_ = yym683
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr680 || yy2arr680 {
				yym685 := z.EncBinary()
				_ = yym685
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym686 := z.EncBinary()
				_ = yym686
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr680 || yy2arr680 {
				if yyq680[2] {
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq680[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr680 || yy2arr680 {
				if yyq680[3] {
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq680[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep680 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym693 := z.DecBinary()
	_ = yym693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl694 := r.ReadMapStart()
			if yyl694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl694, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl694 := r.ReadArrayStart()
			if yyl694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys695Slc
	var yyhl695 bool = l >= 0
	for yyj695 := 0; ; yyj695++ {
		if yyhl695 {
			if yyj695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys695Slc = r.DecodeBytes(yys695Slc, true, true)
		yys695 := string(yys695Slc)
		switch yys695 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys695)
		} // end switch yys695
	} // end for yyj695
	if !yyhl695 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj700 int
	var yyb700 bool
	var yyhl700 bool = l >= 0
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj700++
		if yyhl700 {
			yyb700 = yyj700 > l
		} else {
			yyb700 = r.CheckBreak()
		}
		if yyb700 {
			break
		}
		z.DecStructFieldNotFound(yyj700-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym705 := z.EncBinary()
		_ = yym705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep706 := !z.EncBinary()
			yy2arr706 := z.EncBasicHandle().StructToArray
			var yyq706 [2]bool
			_, _, _ = yysep706, yyq706, yy2arr706
			const yyr706 bool = false
			if yyr706 || yy2arr706 {
				r.EncodeArrayStart(2)
			} else {
				var yynn706 int = 2
				for _, b := range yyq706 {
					if b {
						yynn706++
					}
				}
				r.EncodeMapStart(yynn706)
			}
			if yyr706 || yy2arr706 {
				yym708 := z.EncBinary()
				_ = yym708
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym709 := z.EncBinary()
				_ = yym709
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr706 || yy2arr706 {
				yym711 := z.EncBinary()
				_ = yym711
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym712 := z.EncBinary()
				_ = yym712
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep706 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym713 := z.DecBinary()
	_ = yym713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl714 := r.ReadMapStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl714, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl714 := r.ReadArrayStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys715Slc
	var yyhl715 bool = l >= 0
	for yyj715 := 0; ; yyj715++ {
		if yyhl715 {
			if yyj715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys715Slc = r.DecodeBytes(yys715Slc, true, true)
		yys715 := string(yys715Slc)
		switch yys715 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys715)
		} // end switch yys715
	} // end for yyj715
	if !yyhl715 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj718 int
	var yyb718 bool
	var yyhl718 bool = l >= 0
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj718++
		if yyhl718 {
			yyb718 = yyj718 > l
		} else {
			yyb718 = r.CheckBreak()
		}
		if yyb718 {
			break
		}
		z.DecStructFieldNotFound(yyj718-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym721 := z.EncBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep722 := !z.EncBinary()
			yy2arr722 := z.EncBasicHandle().StructToArray
			var yyq722 [1]bool
			_, _, _ = yysep722, yyq722, yy2arr722
			const yyr722 bool = false
			if yyr722 || yy2arr722 {
				r.EncodeArrayStart(1)
			} else {
				var yynn722 int = 1
				for _, b := range yyq722 {
					if b {
						yynn722++
					}
				}
				r.EncodeMapStart(yynn722)
			}
			if yyr722 || yy2arr722 {
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep722 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym726 := z.DecBinary()
	_ = yym726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl727 := r.ReadMapStart()
			if yyl727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl727, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl727 := r.ReadArrayStart()
			if yyl727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys728Slc
	var yyhl728 bool = l >= 0
	for yyj728 := 0; ; yyj728++ {
		if yyhl728 {
			if yyj728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys728Slc = r.DecodeBytes(yys728Slc, true, true)
		yys728 := string(yys728Slc)
		switch yys728 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys728)
		} // end switch yys728
	} // end for yyj728
	if !yyhl728 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj730 int
	var yyb730 bool
	var yyhl730 bool = l >= 0
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj730++
		if yyhl730 {
			yyb730 = yyj730 > l
		} else {
			yyb730 = r.CheckBreak()
		}
		if yyb730 {
			break
		}
		z.DecStructFieldNotFound(yyj730-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym732 := z.EncBinary()
		_ = yym732
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep733 := !z.EncBinary()
			yy2arr733 := z.EncBasicHandle().StructToArray
			var yyq733 [3]bool
			_, _, _ = yysep733, yyq733, yy2arr733
			const yyr733 bool = false
			yyq733[2] = x.ReadOnly != false
			if yyr733 || yy2arr733 {
				r.EncodeArrayStart(3)
			} else {
				var yynn733 int = 2
				for _, b := range yyq733 {
					if b {
						yynn733++
					}
				}
				r.EncodeMapStart(yynn733)
			}
			if yyr733 || yy2arr733 {
				yym735 := z.EncBinary()
				_ = yym735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr733 || yy2arr733 {
				yym738 := z.EncBinary()
				_ = yym738
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym739 := z.EncBinary()
				_ = yym739
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr733 || yy2arr733 {
				if yyq733[2] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq733[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep733 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym743 := z.DecBinary()
	_ = yym743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl744 := r.ReadMapStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl744, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl744 := r.ReadArrayStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys745Slc
	var yyhl745 bool = l >= 0
	for yyj745 := 0; ; yyj745++ {
		if yyhl745 {
			if yyj745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys745Slc = r.DecodeBytes(yys745Slc, true, true)
		yys745 := string(yys745Slc)
		switch yys745 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys745)
		} // end switch yys745
	} // end for yyj745
	if !yyhl745 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj749 int
	var yyb749 bool
	var yyhl749 bool = l >= 0
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj749++
		if yyhl749 {
			yyb749 = yyj749 > l
		} else {
			yyb749 = r.CheckBreak()
		}
		if yyb749 {
			break
		}
		z.DecStructFieldNotFound(yyj749-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym753 := z.EncBinary()
		_ = yym753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep754 := !z.EncBinary()
			yy2arr754 := z.EncBasicHandle().StructToArray
			var yyq754 [5]bool
			_, _, _ = yysep754, yyq754, yy2arr754
			const yyr754 bool = false
			yyq754[4] = x.ReadOnly != false
			if yyr754 || yy2arr754 {
				r.EncodeArrayStart(5)
			} else {
				var yynn754 int = 4
				for _, b := range yyq754 {
					if b {
						yynn754++
					}
				}
				r.EncodeMapStart(yynn754)
			}
			if yyr754 || yy2arr754 {
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr754 || yy2arr754 {
				yym759 := z.EncBinary()
				_ = yym759
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				yym760 := z.EncBinary()
				_ = yym760
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr754 || yy2arr754 {
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				yym763 := z.EncBinary()
				_ = yym763
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr754 || yy2arr754 {
				yym765 := z.EncBinary()
				_ = yym765
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[4] {
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq754[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep754 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym770 := z.DecBinary()
	_ = yym770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl771 := r.ReadMapStart()
			if yyl771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl771, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl771 := r.ReadArrayStart()
			if yyl771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys772Slc
	var yyhl772 bool = l >= 0
	for yyj772 := 0; ; yyj772++ {
		if yyhl772 {
			if yyj772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys772Slc = r.DecodeBytes(yys772Slc, true, true)
		yys772 := string(yys772Slc)
		switch yys772 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys772)
		} // end switch yys772
	} // end for yyj772
	if !yyhl772 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj778 int
	var yyb778 bool
	var yyhl778 bool = l >= 0
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj778++
		if yyhl778 {
			yyb778 = yyj778 > l
		} else {
			yyb778 = r.CheckBreak()
		}
		if yyb778 {
			break
		}
		z.DecStructFieldNotFound(yyj778-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym784 := z.EncBinary()
		_ = yym784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep785 := !z.EncBinary()
			yy2arr785 := z.EncBasicHandle().StructToArray
			var yyq785 [4]bool
			_, _, _ = yysep785, yyq785, yy2arr785
			const yyr785 bool = false
			yyq785[3] = x.ReadOnly != false
			if yyr785 || yy2arr785 {
				r.EncodeArrayStart(4)
			} else {
				var yynn785 int = 3
				for _, b := range yyq785 {
					if b {
						yynn785++
					}
				}
				r.EncodeMapStart(yynn785)
			}
			if yyr785 || yy2arr785 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr785 || yy2arr785 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy790 := *x.Lun
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeInt(int64(yy790))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy792 := *x.Lun
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeInt(int64(yy792))
					}
				}
			}
			if yyr785 || yy2arr785 {
				yym795 := z.EncBinary()
				_ = yym795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym796 := z.EncBinary()
				_ = yym796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[3] {
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq785[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep785 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym800 := z.DecBinary()
	_ = yym800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl801 := r.ReadMapStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl801, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl801 := r.ReadArrayStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys802Slc
	var yyhl802 bool = l >= 0
	for yyj802 := 0; ; yyj802++ {
		if yyhl802 {
			if yyj802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys802Slc = r.DecodeBytes(yys802Slc, true, true)
		yys802 := string(yys802Slc)
		switch yys802 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv803 := &x.TargetWWNs
				yym804 := z.DecBinary()
				_ = yym804
				if false {
				} else {
					z.F.DecSliceStringX(yyv803, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym806 := z.DecBinary()
				_ = yym806
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys802)
		} // end switch yys802
	} // end for yyj802
	if !yyhl802 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj809 int
	var yyb809 bool
	var yyhl809 bool = l >= 0
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv810 := &x.TargetWWNs
		yym811 := z.DecBinary()
		_ = yym811
		if false {
		} else {
			z.F.DecSliceStringX(yyv810, false, d)
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym813 := z.DecBinary()
		_ = yym813
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj809++
		if yyhl809 {
			yyb809 = yyj809 > l
		} else {
			yyb809 = r.CheckBreak()
		}
		if yyb809 {
			break
		}
		z.DecStructFieldNotFound(yyj809-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym816 := z.EncBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep817 := !z.EncBinary()
			yy2arr817 := z.EncBasicHandle().StructToArray
			var yyq817 [5]bool
			_, _, _ = yysep817, yyq817, yy2arr817
			const yyr817 bool = false
			yyq817[0] = x.Name != ""
			yyq817[1] = x.HostPort != 0
			yyq817[3] = x.Protocol != ""
			yyq817[4] = x.HostIP != ""
			if yyr817 || yy2arr817 {
				r.EncodeArrayStart(5)
			} else {
				var yynn817 int = 1
				for _, b := range yyq817 {
					if b {
						yynn817++
					}
				}
				r.EncodeMapStart(yynn817)
			}
			if yyr817 || yy2arr817 {
				if yyq817[0] {
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[1] {
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq817[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr817 || yy2arr817 {
				yym825 := z.EncBinary()
				_ = yym825
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym826 := z.EncBinary()
				_ = yym826
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[4] {
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep817 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym831 := z.DecBinary()
	_ = yym831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl832 := r.ReadMapStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl832, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl832 := r.ReadArrayStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys833Slc
	var yyhl833 bool = l >= 0
	for yyj833 := 0; ; yyj833++ {
		if yyhl833 {
			if yyj833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys833Slc = r.DecodeBytes(yys833Slc, true, true)
		yys833 := string(yys833Slc)
		switch yys833 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys833)
		} // end switch yys833
	} // end for yyj833
	if !yyhl833 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj839 int
	var yyb839 bool
	var yyhl839 bool = l >= 0
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj839++
		if yyhl839 {
			yyb839 = yyj839 > l
		} else {
			yyb839 = r.CheckBreak()
		}
		if yyb839 {
			break
		}
		z.DecStructFieldNotFound(yyj839-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [3]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[1] = x.ReadOnly != false
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(3)
			} else {
				var yynn846 int = 2
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
			}
			if yyr846 || yy2arr846 {
				yym848 := z.EncBinary()
				_ = yym848
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym849 := z.EncBinary()
				_ = yym849
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq846[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr846 || yy2arr846 {
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep846 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym856 := z.DecBinary()
	_ = yym856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl857 := r.ReadMapStart()
			if yyl857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl857, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl857 := r.ReadArrayStart()
			if yyl857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys858Slc
	var yyhl858 bool = l >= 0
	for yyj858 := 0; ; yyj858++ {
		if yyhl858 {
			if yyj858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys858Slc = r.DecodeBytes(yys858Slc, true, true)
		yys858 := string(yys858Slc)
		switch yys858 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys858)
		} // end switch yys858
	} // end for yyj858
	if !yyhl858 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj862 int
	var yyb862 bool
	var yyhl862 bool = l >= 0
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj862++
		if yyhl862 {
			yyb862 = yyj862 > l
		} else {
			yyb862 = r.CheckBreak()
		}
		if yyb862 {
			break
		}
		z.DecStructFieldNotFound(yyj862-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym866 := z.EncBinary()
		_ = yym866
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep867 := !z.EncBinary()
			yy2arr867 := z.EncBasicHandle().StructToArray
			var yyq867 [3]bool
			_, _, _ = yysep867, yyq867, yy2arr867
			const yyr867 bool = false
			yyq867[1] = x.Value != ""
			yyq867[2] = x.ValueFrom != nil
			if yyr867 || yy2arr867 {
				r.EncodeArrayStart(3)
			} else {
				var yynn867 int = 1
				for _, b := range yyq867 {
					if b {
						yynn867++
					}
				}
				r.EncodeMapStart(yynn867)
			}
			if yyr867 || yy2arr867 {
				yym869 := z.EncBinary()
				_ = yym869
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym870 := z.EncBinary()
				_ = yym870
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[1] {
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq867[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq867[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep867 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym875 := z.DecBinary()
	_ = yym875
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl876 := r.ReadMapStart()
			if yyl876 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl876, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl876 := r.ReadArrayStart()
			if yyl876 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl876, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys877Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys877Slc
	var yyhl877 bool = l >= 0
	for yyj877 := 0; ; yyj877++ {
		if yyhl877 {
			if yyj877 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys877Slc = r.DecodeBytes(yys877Slc, true, true)
		yys877 := string(yys877Slc)
		switch yys877 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys877)
		} // end switch yys877
	} // end for yyj877
	if !yyhl877 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj881 int
	var yyb881 bool
	var yyhl881 bool = l >= 0
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj881++
		if yyhl881 {
			yyb881 = yyj881 > l
		} else {
			yyb881 = r.CheckBreak()
		}
		if yyb881 {
			break
		}
		z.DecStructFieldNotFound(yyj881-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym885 := z.EncBinary()
		_ = yym885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep886 := !z.EncBinary()
			yy2arr886 := z.EncBasicHandle().StructToArray
			var yyq886 [1]bool
			_, _, _ = yysep886, yyq886, yy2arr886
			const yyr886 bool = false
			if yyr886 || yy2arr886 {
				r.EncodeArrayStart(1)
			} else {
				var yynn886 int = 1
				for _, b := range yyq886 {
					if b {
						yynn886++
					}
				}
				r.EncodeMapStart(yynn886)
			}
			if yyr886 || yy2arr886 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep886 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym888 := z.DecBinary()
	_ = yym888
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl889 := r.ReadMapStart()
			if yyl889 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl889, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl889 := r.ReadArrayStart()
			if yyl889 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl889, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys890Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys890Slc
	var yyhl890 bool = l >= 0
	for yyj890 := 0; ; yyj890++ {
		if yyhl890 {
			if yyj890 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys890Slc = r.DecodeBytes(yys890Slc, true, true)
		yys890 := string(yys890Slc)
		switch yys890 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys890)
		} // end switch yys890
	} // end for yyj890
	if !yyhl890 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj892 int
	var yyb892 bool
	var yyhl892 bool = l >= 0
	yyj892++
	if yyhl892 {
		yyb892 = yyj892 > l
	} else {
		yyb892 = r.CheckBreak()
	}
	if yyb892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj892++
		if yyhl892 {
			yyb892 = yyj892 > l
		} else {
			yyb892 = r.CheckBreak()
		}
		if yyb892 {
			break
		}
		z.DecStructFieldNotFound(yyj892-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym894 := z.EncBinary()
		_ = yym894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep895 := !z.EncBinary()
			yy2arr895 := z.EncBasicHandle().StructToArray
			var yyq895 [2]bool
			_, _, _ = yysep895, yyq895, yy2arr895
			const yyr895 bool = false
			yyq895[0] = x.APIVersion != ""
			if yyr895 || yy2arr895 {
				r.EncodeArrayStart(2)
			} else {
				var yynn895 int = 1
				for _, b := range yyq895 {
					if b {
						yynn895++
					}
				}
				r.EncodeMapStart(yynn895)
			}
			if yyr895 || yy2arr895 {
				if yyq895[0] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[0] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr895 || yy2arr895 {
				yym900 := z.EncBinary()
				_ = yym900
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym901 := z.EncBinary()
				_ = yym901
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep895 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym902 := z.DecBinary()
	_ = yym902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl903 := r.ReadMapStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl903, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl903 := r.ReadArrayStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys904Slc
	var yyhl904 bool = l >= 0
	for yyj904 := 0; ; yyj904++ {
		if yyhl904 {
			if yyj904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys904Slc = r.DecodeBytes(yys904Slc, true, true)
		yys904 := string(yys904Slc)
		switch yys904 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys904)
		} // end switch yys904
	} // end for yyj904
	if !yyhl904 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj907 int
	var yyb907 bool
	var yyhl907 bool = l >= 0
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj907++
		if yyhl907 {
			yyb907 = yyj907 > l
		} else {
			yyb907 = r.CheckBreak()
		}
		if yyb907 {
			break
		}
		z.DecStructFieldNotFound(yyj907-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym910 := z.EncBinary()
		_ = yym910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep911 := !z.EncBinary()
			yy2arr911 := z.EncBasicHandle().StructToArray
			var yyq911 [4]bool
			_, _, _ = yysep911, yyq911, yy2arr911
			const yyr911 bool = false
			yyq911[0] = x.Path != ""
			yyq911[2] = x.Host != ""
			yyq911[3] = x.Scheme != ""
			if yyr911 || yy2arr911 {
				r.EncodeArrayStart(4)
			} else {
				var yynn911 int = 1
				for _, b := range yyq911 {
					if b {
						yynn911++
					}
				}
				r.EncodeMapStart(yynn911)
			}
			if yyr911 || yy2arr911 {
				if yyq911[0] {
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr911 || yy2arr911 {
				yy916 := &x.Port
				yym917 := z.EncBinary()
				_ = yym917
				if false {
				} else if z.HasExtensions() && z.EncExt(yy916) {
				} else if !yym917 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy916)
				} else {
					z.EncFallback(yy916)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy918 := &x.Port
				yym919 := z.EncBinary()
				_ = yym919
				if false {
				} else if z.HasExtensions() && z.EncExt(yy918) {
				} else if !yym919 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy918)
				} else {
					z.EncFallback(yy918)
				}
			}
			if yyr911 || yy2arr911 {
				if yyq911[2] {
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr911 || yy2arr911 {
				if yyq911[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep911 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym924 := z.DecBinary()
	_ = yym924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl925 := r.ReadMapStart()
			if yyl925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl925, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl925 := r.ReadArrayStart()
			if yyl925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys926Slc
	var yyhl926 bool = l >= 0
	for yyj926 := 0; ; yyj926++ {
		if yyhl926 {
			if yyj926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys926Slc = r.DecodeBytes(yys926Slc, true, true)
		yys926 := string(yys926Slc)
		switch yys926 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv928 := &x.Port
				yym929 := z.DecBinary()
				_ = yym929
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv928) {
				} else if !yym929 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv928)
				} else {
					z.DecFallback(yyv928, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys926)
		} // end switch yys926
	} // end for yyj926
	if !yyhl926 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj932 int
	var yyb932 bool
	var yyhl932 bool = l >= 0
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv934 := &x.Port
		yym935 := z.DecBinary()
		_ = yym935
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv934) {
		} else if !yym935 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv934)
		} else {
			z.DecFallback(yyv934, false)
		}
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj932++
		if yyhl932 {
			yyb932 = yyj932 > l
		} else {
			yyb932 = r.CheckBreak()
		}
		if yyb932 {
			break
		}
		z.DecStructFieldNotFound(yyj932-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym938 := z.EncBinary()
	_ = yym938
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym939 := z.DecBinary()
	_ = yym939
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym940 := z.EncBinary()
		_ = yym940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep941 := !z.EncBinary()
			yy2arr941 := z.EncBasicHandle().StructToArray
			var yyq941 [1]bool
			_, _, _ = yysep941, yyq941, yy2arr941
			const yyr941 bool = false
			if yyr941 || yy2arr941 {
				r.EncodeArrayStart(1)
			} else {
				var yynn941 int = 1
				for _, b := range yyq941 {
					if b {
						yynn941++
					}
				}
				r.EncodeMapStart(yynn941)
			}
			if yyr941 || yy2arr941 {
				yy943 := &x.Port
				yym944 := z.EncBinary()
				_ = yym944
				if false {
				} else if z.HasExtensions() && z.EncExt(yy943) {
				} else if !yym944 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy943)
				} else {
					z.EncFallback(yy943)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy945 := &x.Port
				yym946 := z.EncBinary()
				_ = yym946
				if false {
				} else if z.HasExtensions() && z.EncExt(yy945) {
				} else if !yym946 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy945)
				} else {
					z.EncFallback(yy945)
				}
			}
			if yysep941 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym947 := z.DecBinary()
	_ = yym947
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl948 := r.ReadMapStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl948, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl948 := r.ReadArrayStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl948, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys949Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys949Slc
	var yyhl949 bool = l >= 0
	for yyj949 := 0; ; yyj949++ {
		if yyhl949 {
			if yyj949 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys949Slc = r.DecodeBytes(yys949Slc, true, true)
		yys949 := string(yys949Slc)
		switch yys949 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv950 := &x.Port
				yym951 := z.DecBinary()
				_ = yym951
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv950) {
				} else if !yym951 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv950)
				} else {
					z.DecFallback(yyv950, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys949)
		} // end switch yys949
	} // end for yyj949
	if !yyhl949 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj952 int
	var yyb952 bool
	var yyhl952 bool = l >= 0
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv953 := &x.Port
		yym954 := z.DecBinary()
		_ = yym954
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv953) {
		} else if !yym954 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv953)
		} else {
			z.DecFallback(yyv953, false)
		}
	}
	for {
		yyj952++
		if yyhl952 {
			yyb952 = yyj952 > l
		} else {
			yyb952 = r.CheckBreak()
		}
		if yyb952 {
			break
		}
		z.DecStructFieldNotFound(yyj952-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym955 := z.EncBinary()
		_ = yym955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep956 := !z.EncBinary()
			yy2arr956 := z.EncBasicHandle().StructToArray
			var yyq956 [1]bool
			_, _, _ = yysep956, yyq956, yy2arr956
			const yyr956 bool = false
			yyq956[0] = len(x.Command) != 0
			if yyr956 || yy2arr956 {
				r.EncodeArrayStart(1)
			} else {
				var yynn956 int = 0
				for _, b := range yyq956 {
					if b {
						yynn956++
					}
				}
				r.EncodeMapStart(yynn956)
			}
			if yyr956 || yy2arr956 {
				if yyq956[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym958 := z.EncBinary()
						_ = yym958
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq956[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym959 := z.EncBinary()
						_ = yym959
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep956 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym960 := z.DecBinary()
	_ = yym960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl961 := r.ReadMapStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl961, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl961 := r.ReadArrayStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys962Slc
	var yyhl962 bool = l >= 0
	for yyj962 := 0; ; yyj962++ {
		if yyhl962 {
			if yyj962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys962Slc = r.DecodeBytes(yys962Slc, true, true)
		yys962 := string(yys962Slc)
		switch yys962 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv963 := &x.Command
				yym964 := z.DecBinary()
				_ = yym964
				if false {
				} else {
					z.F.DecSliceStringX(yyv963, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys962)
		} // end switch yys962
	} // end for yyj962
	if !yyhl962 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj965 int
	var yyb965 bool
	var yyhl965 bool = l >= 0
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv966 := &x.Command
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else {
			z.F.DecSliceStringX(yyv966, false, d)
		}
	}
	for {
		yyj965++
		if yyhl965 {
			yyb965 = yyj965 > l
		} else {
			yyb965 = r.CheckBreak()
		}
		if yyb965 {
			break
		}
		z.DecStructFieldNotFound(yyj965-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym968 := z.EncBinary()
		_ = yym968
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep969 := !z.EncBinary()
			yy2arr969 := z.EncBasicHandle().StructToArray
			var yyq969 [5]bool
			_, _, _ = yysep969, yyq969, yy2arr969
			const yyr969 bool = false
			yyq969[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq969[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq969[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq969[3] = x.InitialDelaySeconds != 0
			yyq969[4] = x.TimeoutSeconds != 0
			if yyr969 || yy2arr969 {
				r.EncodeArrayStart(5)
			} else {
				var yynn969 int = 0
				for _, b := range yyq969 {
					if b {
						yynn969++
					}
				}
				r.EncodeMapStart(yynn969)
			}
			var yyn970 bool
			if x.Handler.Exec == nil {
				yyn970 = true
				goto LABEL970
			}
		LABEL970:
			if yyr969 || yy2arr969 {
				if yyn970 {
					r.EncodeNil()
				} else {
					if yyq969[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn970 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn971 bool
			if x.Handler.HTTPGet == nil {
				yyn971 = true
				goto LABEL971
			}
		LABEL971:
			if yyr969 || yy2arr969 {
				if yyn971 {
					r.EncodeNil()
				} else {
					if yyq969[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn971 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn972 bool
			if x.Handler.TCPSocket == nil {
				yyn972 = true
				goto LABEL972
			}
		LABEL972:
			if yyr969 || yy2arr969 {
				if yyn972 {
					r.EncodeNil()
				} else {
					if yyq969[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn972 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[3] {
					yym974 := z.EncBinary()
					_ = yym974
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[4] {
					yym977 := z.EncBinary()
					_ = yym977
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yysep969 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym979 := z.DecBinary()
	_ = yym979
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl980 := r.ReadMapStart()
			if yyl980 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl980, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl980 := r.ReadArrayStart()
			if yyl980 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl980, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys981Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys981Slc
	var yyhl981 bool = l >= 0
	for yyj981 := 0; ; yyj981++ {
		if yyhl981 {
			if yyj981 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys981Slc = r.DecodeBytes(yys981Slc, true, true)
		yys981 := string(yys981Slc)
		switch yys981 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys981)
		} // end switch yys981
	} // end for yyj981
	if !yyhl981 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj987 int
	var yyb987 bool
	var yyhl987 bool = l >= 0
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	for {
		yyj987++
		if yyhl987 {
			yyb987 = yyj987 > l
		} else {
			yyb987 = r.CheckBreak()
		}
		if yyb987 {
			break
		}
		z.DecStructFieldNotFound(yyj987-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym993 := z.EncBinary()
	_ = yym993
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym994 := z.DecBinary()
	_ = yym994
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym995 := z.EncBinary()
	_ = yym995
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym996 := z.DecBinary()
	_ = yym996
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym997 := z.EncBinary()
		_ = yym997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep998 := !z.EncBinary()
			yy2arr998 := z.EncBasicHandle().StructToArray
			var yyq998 [2]bool
			_, _, _ = yysep998, yyq998, yy2arr998
			const yyr998 bool = false
			yyq998[0] = len(x.Add) != 0
			yyq998[1] = len(x.Drop) != 0
			if yyr998 || yy2arr998 {
				r.EncodeArrayStart(2)
			} else {
				var yynn998 int = 0
				for _, b := range yyq998 {
					if b {
						yynn998++
					}
				}
				r.EncodeMapStart(yynn998)
			}
			if yyr998 || yy2arr998 {
				if yyq998[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1000 := z.EncBinary()
						_ = yym1000
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq998[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1001 := z.EncBinary()
						_ = yym1001
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1003 := z.EncBinary()
						_ = yym1003
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq998[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1004 := z.EncBinary()
						_ = yym1004
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep998 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1005 := z.DecBinary()
	_ = yym1005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1006 := r.ReadMapStart()
			if yyl1006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1006, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1006 := r.ReadArrayStart()
			if yyl1006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1007Slc
	var yyhl1007 bool = l >= 0
	for yyj1007 := 0; ; yyj1007++ {
		if yyhl1007 {
			if yyj1007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1007Slc = r.DecodeBytes(yys1007Slc, true, true)
		yys1007 := string(yys1007Slc)
		switch yys1007 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1008 := &x.Add
				yym1009 := z.DecBinary()
				_ = yym1009
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1008), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1010 := &x.Drop
				yym1011 := z.DecBinary()
				_ = yym1011
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1010), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1007)
		} // end switch yys1007
	} // end for yyj1007
	if !yyhl1007 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1012 int
	var yyb1012 bool
	var yyhl1012 bool = l >= 0
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1013 := &x.Add
		yym1014 := z.DecBinary()
		_ = yym1014
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1013), d)
		}
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1015 := &x.Drop
		yym1016 := z.DecBinary()
		_ = yym1016
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1015), d)
		}
	}
	for {
		yyj1012++
		if yyhl1012 {
			yyb1012 = yyj1012 > l
		} else {
			yyb1012 = r.CheckBreak()
		}
		if yyb1012 {
			break
		}
		z.DecStructFieldNotFound(yyj1012-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1017 := z.EncBinary()
		_ = yym1017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1018 := !z.EncBinary()
			yy2arr1018 := z.EncBasicHandle().StructToArray
			var yyq1018 [2]bool
			_, _, _ = yysep1018, yyq1018, yy2arr1018
			const yyr1018 bool = false
			yyq1018[0] = len(x.Limits) != 0
			yyq1018[1] = len(x.Requests) != 0
			if yyr1018 || yy2arr1018 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1018 int = 0
				for _, b := range yyq1018 {
					if b {
						yynn1018++
					}
				}
				r.EncodeMapStart(yynn1018)
			}
			if yyr1018 || yy2arr1018 {
				if yyq1018[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1018[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1018 || yy2arr1018 {
				if yyq1018[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1018[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1018 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1021 := z.DecBinary()
	_ = yym1021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1022 := r.ReadMapStart()
			if yyl1022 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1022, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1022 := r.ReadArrayStart()
			if yyl1022 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1022, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1023Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1023Slc
	var yyhl1023 bool = l >= 0
	for yyj1023 := 0; ; yyj1023++ {
		if yyhl1023 {
			if yyj1023 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1023Slc = r.DecodeBytes(yys1023Slc, true, true)
		yys1023 := string(yys1023Slc)
		switch yys1023 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1024 := &x.Limits
				yyv1024.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1025 := &x.Requests
				yyv1025.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1023)
		} // end switch yys1023
	} // end for yyj1023
	if !yyhl1023 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1026 int
	var yyb1026 bool
	var yyhl1026 bool = l >= 0
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1027 := &x.Limits
		yyv1027.CodecDecodeSelf(d)
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1028 := &x.Requests
		yyv1028.CodecDecodeSelf(d)
	}
	for {
		yyj1026++
		if yyhl1026 {
			yyb1026 = yyj1026 > l
		} else {
			yyb1026 = r.CheckBreak()
		}
		if yyb1026 {
			break
		}
		z.DecStructFieldNotFound(yyj1026-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1029 := z.EncBinary()
		_ = yym1029
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1030 := !z.EncBinary()
			yy2arr1030 := z.EncBasicHandle().StructToArray
			var yyq1030 [18]bool
			_, _, _ = yysep1030, yyq1030, yy2arr1030
			const yyr1030 bool = false
			yyq1030[1] = x.Image != ""
			yyq1030[2] = len(x.Command) != 0
			yyq1030[3] = len(x.Args) != 0
			yyq1030[4] = x.WorkingDir != ""
			yyq1030[5] = len(x.Ports) != 0
			yyq1030[6] = len(x.Env) != 0
			yyq1030[7] = true
			yyq1030[8] = len(x.VolumeMounts) != 0
			yyq1030[9] = x.LivenessProbe != nil
			yyq1030[10] = x.ReadinessProbe != nil
			yyq1030[11] = x.Lifecycle != nil
			yyq1030[12] = x.TerminationMessagePath != ""
			yyq1030[13] = x.ImagePullPolicy != ""
			yyq1030[14] = x.SecurityContext != nil
			yyq1030[15] = x.Stdin != false
			yyq1030[16] = x.StdinOnce != false
			yyq1030[17] = x.TTY != false
			if yyr1030 || yy2arr1030 {
				r.EncodeArrayStart(18)
			} else {
				var yynn1030 int = 1
				for _, b := range yyq1030 {
					if b {
						yynn1030++
					}
				}
				r.EncodeMapStart(yynn1030)
			}
			if yyr1030 || yy2arr1030 {
				yym1032 := z.EncBinary()
				_ = yym1032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1033 := z.EncBinary()
				_ = yym1033
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[1] {
					yym1035 := z.EncBinary()
					_ = yym1035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[1] {
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					yym1036 := z.EncBinary()
					_ = yym1036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1038 := z.EncBinary()
						_ = yym1038
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1039 := z.EncBinary()
						_ = yym1039
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1041 := z.EncBinary()
						_ = yym1041
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1042 := z.EncBinary()
						_ = yym1042
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[4] {
					yym1044 := z.EncBinary()
					_ = yym1044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1045 := z.EncBinary()
					_ = yym1045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1047 := z.EncBinary()
						_ = yym1047
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1048 := z.EncBinary()
						_ = yym1048
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1050 := z.EncBinary()
						_ = yym1050
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1051 := z.EncBinary()
						_ = yym1051
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[7] {
					yy1053 := &x.Resources
					yy1053.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1054 := &x.Resources
					yy1054.CodecEncodeSelf(e)
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1056 := z.EncBinary()
						_ = yym1056
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1057 := z.EncBinary()
						_ = yym1057
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[12] {
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1063 := z.EncBinary()
					_ = yym1063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[13] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[15] {
					yym1067 := z.EncBinary()
					_ = yym1067
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1030[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1068 := z.EncBinary()
					_ = yym1068
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[16] {
					yym1070 := z.EncBinary()
					_ = yym1070
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1030[16] {
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					yym1071 := z.EncBinary()
					_ = yym1071
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[17] {
					yym1073 := z.EncBinary()
					_ = yym1073
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1030[17] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1030 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1075 := z.DecBinary()
	_ = yym1075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1076 := r.ReadMapStart()
			if yyl1076 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1076, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1076 := r.ReadArrayStart()
			if yyl1076 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1077Slc
	var yyhl1077 bool = l >= 0
	for yyj1077 := 0; ; yyj1077++ {
		if yyhl1077 {
			if yyj1077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1077Slc = r.DecodeBytes(yys1077Slc, true, true)
		yys1077 := string(yys1077Slc)
		switch yys1077 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1080 := &x.Command
				yym1081 := z.DecBinary()
				_ = yym1081
				if false {
				} else {
					z.F.DecSliceStringX(yyv1080, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1082 := &x.Args
				yym1083 := z.DecBinary()
				_ = yym1083
				if false {
				} else {
					z.F.DecSliceStringX(yyv1082, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1085 := &x.Ports
				yym1086 := z.DecBinary()
				_ = yym1086
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1085), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1087 := &x.Env
				yym1088 := z.DecBinary()
				_ = yym1088
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1087), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1089 := &x.Resources
				yyv1089.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1090 := &x.VolumeMounts
				yym1091 := z.DecBinary()
				_ = yym1091
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1090), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1077)
		} // end switch yys1077
	} // end for yyj1077
	if !yyhl1077 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1101 int
	var yyb1101 bool
	var yyhl1101 bool = l >= 0
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1104 := &x.Command
		yym1105 := z.DecBinary()
		_ = yym1105
		if false {
		} else {
			z.F.DecSliceStringX(yyv1104, false, d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1106 := &x.Args
		yym1107 := z.DecBinary()
		_ = yym1107
		if false {
		} else {
			z.F.DecSliceStringX(yyv1106, false, d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1109 := &x.Ports
		yym1110 := z.DecBinary()
		_ = yym1110
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1109), d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1111 := &x.Env
		yym1112 := z.DecBinary()
		_ = yym1112
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1111), d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1113 := &x.Resources
		yyv1113.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1114 := &x.VolumeMounts
		yym1115 := z.DecBinary()
		_ = yym1115
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1114), d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1101++
		if yyhl1101 {
			yyb1101 = yyj1101 > l
		} else {
			yyb1101 = r.CheckBreak()
		}
		if yyb1101 {
			break
		}
		z.DecStructFieldNotFound(yyj1101-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1125 := z.EncBinary()
		_ = yym1125
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1126 := !z.EncBinary()
			yy2arr1126 := z.EncBasicHandle().StructToArray
			var yyq1126 [3]bool
			_, _, _ = yysep1126, yyq1126, yy2arr1126
			const yyr1126 bool = false
			yyq1126[0] = x.Exec != nil
			yyq1126[1] = x.HTTPGet != nil
			yyq1126[2] = x.TCPSocket != nil
			if yyr1126 || yy2arr1126 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1126 int = 0
				for _, b := range yyq1126 {
					if b {
						yynn1126++
					}
				}
				r.EncodeMapStart(yynn1126)
			}
			if yyr1126 || yy2arr1126 {
				if yyq1126[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1126[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1126 || yy2arr1126 {
				if yyq1126[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1126[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1126 || yy2arr1126 {
				if yyq1126[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1126[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1126 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1130 := z.DecBinary()
	_ = yym1130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1131 := r.ReadMapStart()
			if yyl1131 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1131, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1131 := r.ReadArrayStart()
			if yyl1131 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1132Slc
	var yyhl1132 bool = l >= 0
	for yyj1132 := 0; ; yyj1132++ {
		if yyhl1132 {
			if yyj1132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1132Slc = r.DecodeBytes(yys1132Slc, true, true)
		yys1132 := string(yys1132Slc)
		switch yys1132 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1132)
		} // end switch yys1132
	} // end for yyj1132
	if !yyhl1132 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1136 int
	var yyb1136 bool
	var yyhl1136 bool = l >= 0
	yyj1136++
	if yyhl1136 {
		yyb1136 = yyj1136 > l
	} else {
		yyb1136 = r.CheckBreak()
	}
	if yyb1136 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1136++
	if yyhl1136 {
		yyb1136 = yyj1136 > l
	} else {
		yyb1136 = r.CheckBreak()
	}
	if yyb1136 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1136++
	if yyhl1136 {
		yyb1136 = yyj1136 > l
	} else {
		yyb1136 = r.CheckBreak()
	}
	if yyb1136 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1136++
		if yyhl1136 {
			yyb1136 = yyj1136 > l
		} else {
			yyb1136 = r.CheckBreak()
		}
		if yyb1136 {
			break
		}
		z.DecStructFieldNotFound(yyj1136-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1140 := z.EncBinary()
		_ = yym1140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1141 := !z.EncBinary()
			yy2arr1141 := z.EncBasicHandle().StructToArray
			var yyq1141 [2]bool
			_, _, _ = yysep1141, yyq1141, yy2arr1141
			const yyr1141 bool = false
			yyq1141[0] = x.PostStart != nil
			yyq1141[1] = x.PreStop != nil
			if yyr1141 || yy2arr1141 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1141 int = 0
				for _, b := range yyq1141 {
					if b {
						yynn1141++
					}
				}
				r.EncodeMapStart(yynn1141)
			}
			if yyr1141 || yy2arr1141 {
				if yyq1141[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1141 || yy2arr1141 {
				if yyq1141[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1144 := z.DecBinary()
	_ = yym1144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1145 := r.ReadMapStart()
			if yyl1145 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1145, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1145 := r.ReadArrayStart()
			if yyl1145 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1145, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1146Slc
	var yyhl1146 bool = l >= 0
	for yyj1146 := 0; ; yyj1146++ {
		if yyhl1146 {
			if yyj1146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1146Slc = r.DecodeBytes(yys1146Slc, true, true)
		yys1146 := string(yys1146Slc)
		switch yys1146 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1146)
		} // end switch yys1146
	} // end for yyj1146
	if !yyhl1146 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1149 int
	var yyb1149 bool
	var yyhl1149 bool = l >= 0
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1149++
		if yyhl1149 {
			yyb1149 = yyj1149 > l
		} else {
			yyb1149 = r.CheckBreak()
		}
		if yyb1149 {
			break
		}
		z.DecStructFieldNotFound(yyj1149-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1152 := z.EncBinary()
	_ = yym1152
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1153 := z.DecBinary()
	_ = yym1153
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1154 := z.EncBinary()
		_ = yym1154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1155 := !z.EncBinary()
			yy2arr1155 := z.EncBasicHandle().StructToArray
			var yyq1155 [2]bool
			_, _, _ = yysep1155, yyq1155, yy2arr1155
			const yyr1155 bool = false
			yyq1155[0] = x.Reason != ""
			yyq1155[1] = x.Message != ""
			if yyr1155 || yy2arr1155 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1155 int = 0
				for _, b := range yyq1155 {
					if b {
						yynn1155++
					}
				}
				r.EncodeMapStart(yynn1155)
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[0] {
					yym1157 := z.EncBinary()
					_ = yym1157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1155[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1158 := z.EncBinary()
					_ = yym1158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[1] {
					yym1160 := z.EncBinary()
					_ = yym1160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1155[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1161 := z.EncBinary()
					_ = yym1161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1155 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1162 := z.DecBinary()
	_ = yym1162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1163 := r.ReadMapStart()
			if yyl1163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1163, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1163 := r.ReadArrayStart()
			if yyl1163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1164Slc
	var yyhl1164 bool = l >= 0
	for yyj1164 := 0; ; yyj1164++ {
		if yyhl1164 {
			if yyj1164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1164Slc = r.DecodeBytes(yys1164Slc, true, true)
		yys1164 := string(yys1164Slc)
		switch yys1164 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1164)
		} // end switch yys1164
	} // end for yyj1164
	if !yyhl1164 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1167 int
	var yyb1167 bool
	var yyhl1167 bool = l >= 0
	yyj1167++
	if yyhl1167 {
		yyb1167 = yyj1167 > l
	} else {
		yyb1167 = r.CheckBreak()
	}
	if yyb1167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1167++
	if yyhl1167 {
		yyb1167 = yyj1167 > l
	} else {
		yyb1167 = r.CheckBreak()
	}
	if yyb1167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1167++
		if yyhl1167 {
			yyb1167 = yyj1167 > l
		} else {
			yyb1167 = r.CheckBreak()
		}
		if yyb1167 {
			break
		}
		z.DecStructFieldNotFound(yyj1167-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1170 := z.EncBinary()
		_ = yym1170
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1171 := !z.EncBinary()
			yy2arr1171 := z.EncBasicHandle().StructToArray
			var yyq1171 [1]bool
			_, _, _ = yysep1171, yyq1171, yy2arr1171
			const yyr1171 bool = false
			yyq1171[0] = true
			if yyr1171 || yy2arr1171 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1171 int = 0
				for _, b := range yyq1171 {
					if b {
						yynn1171++
					}
				}
				r.EncodeMapStart(yynn1171)
			}
			if yyr1171 || yy2arr1171 {
				if yyq1171[0] {
					yy1173 := &x.StartedAt
					yym1174 := z.EncBinary()
					_ = yym1174
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1173) {
					} else if yym1174 {
						z.EncBinaryMarshal(yy1173)
					} else if !yym1174 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1173)
					} else {
						z.EncFallback(yy1173)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1171[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1175 := &x.StartedAt
					yym1176 := z.EncBinary()
					_ = yym1176
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1175) {
					} else if yym1176 {
						z.EncBinaryMarshal(yy1175)
					} else if !yym1176 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1175)
					} else {
						z.EncFallback(yy1175)
					}
				}
			}
			if yysep1171 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1177 := z.DecBinary()
	_ = yym1177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1178 := r.ReadMapStart()
			if yyl1178 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1178, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1178 := r.ReadArrayStart()
			if yyl1178 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1178, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1179Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1179Slc
	var yyhl1179 bool = l >= 0
	for yyj1179 := 0; ; yyj1179++ {
		if yyhl1179 {
			if yyj1179 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1179Slc = r.DecodeBytes(yys1179Slc, true, true)
		yys1179 := string(yys1179Slc)
		switch yys1179 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1180 := &x.StartedAt
				yym1181 := z.DecBinary()
				_ = yym1181
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1180) {
				} else if yym1181 {
					z.DecBinaryUnmarshal(yyv1180)
				} else if !yym1181 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1180)
				} else {
					z.DecFallback(yyv1180, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1179)
		} // end switch yys1179
	} // end for yyj1179
	if !yyhl1179 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1182 int
	var yyb1182 bool
	var yyhl1182 bool = l >= 0
	yyj1182++
	if yyhl1182 {
		yyb1182 = yyj1182 > l
	} else {
		yyb1182 = r.CheckBreak()
	}
	if yyb1182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1183 := &x.StartedAt
		yym1184 := z.DecBinary()
		_ = yym1184
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1183) {
		} else if yym1184 {
			z.DecBinaryUnmarshal(yyv1183)
		} else if !yym1184 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1183)
		} else {
			z.DecFallback(yyv1183, false)
		}
	}
	for {
		yyj1182++
		if yyhl1182 {
			yyb1182 = yyj1182 > l
		} else {
			yyb1182 = r.CheckBreak()
		}
		if yyb1182 {
			break
		}
		z.DecStructFieldNotFound(yyj1182-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1185 := z.EncBinary()
		_ = yym1185
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1186 := !z.EncBinary()
			yy2arr1186 := z.EncBasicHandle().StructToArray
			var yyq1186 [7]bool
			_, _, _ = yysep1186, yyq1186, yy2arr1186
			const yyr1186 bool = false
			yyq1186[1] = x.Signal != 0
			yyq1186[2] = x.Reason != ""
			yyq1186[3] = x.Message != ""
			yyq1186[4] = true
			yyq1186[5] = true
			yyq1186[6] = x.ContainerID != ""
			if yyr1186 || yy2arr1186 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1186 int = 1
				for _, b := range yyq1186 {
					if b {
						yynn1186++
					}
				}
				r.EncodeMapStart(yynn1186)
			}
			if yyr1186 || yy2arr1186 {
				yym1188 := z.EncBinary()
				_ = yym1188
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1189 := z.EncBinary()
				_ = yym1189
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[1] {
					yym1191 := z.EncBinary()
					_ = yym1191
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1186[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[2] {
					yym1194 := z.EncBinary()
					_ = yym1194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1195 := z.EncBinary()
					_ = yym1195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[3] {
					yym1197 := z.EncBinary()
					_ = yym1197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1198 := z.EncBinary()
					_ = yym1198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[4] {
					yy1200 := &x.StartedAt
					yym1201 := z.EncBinary()
					_ = yym1201
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1200) {
					} else if yym1201 {
						z.EncBinaryMarshal(yy1200)
					} else if !yym1201 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1200)
					} else {
						z.EncFallback(yy1200)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1186[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1202 := &x.StartedAt
					yym1203 := z.EncBinary()
					_ = yym1203
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1202) {
					} else if yym1203 {
						z.EncBinaryMarshal(yy1202)
					} else if !yym1203 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1202)
					} else {
						z.EncFallback(yy1202)
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[5] {
					yy1205 := &x.FinishedAt
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1205) {
					} else if yym1206 {
						z.EncBinaryMarshal(yy1205)
					} else if !yym1206 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1205)
					} else {
						z.EncFallback(yy1205)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1186[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1207 := &x.FinishedAt
					yym1208 := z.EncBinary()
					_ = yym1208
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1207) {
					} else if yym1208 {
						z.EncBinaryMarshal(yy1207)
					} else if !yym1208 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1207)
					} else {
						z.EncFallback(yy1207)
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[6] {
					yym1210 := z.EncBinary()
					_ = yym1210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1186 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1212 := z.DecBinary()
	_ = yym1212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1213 := r.ReadMapStart()
			if yyl1213 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1213, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1213 := r.ReadArrayStart()
			if yyl1213 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1214Slc
	var yyhl1214 bool = l >= 0
	for yyj1214 := 0; ; yyj1214++ {
		if yyhl1214 {
			if yyj1214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1214Slc = r.DecodeBytes(yys1214Slc, true, true)
		yys1214 := string(yys1214Slc)
		switch yys1214 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1219 := &x.StartedAt
				yym1220 := z.DecBinary()
				_ = yym1220
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1219) {
				} else if yym1220 {
					z.DecBinaryUnmarshal(yyv1219)
				} else if !yym1220 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1219)
				} else {
					z.DecFallback(yyv1219, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1221 := &x.FinishedAt
				yym1222 := z.DecBinary()
				_ = yym1222
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1221) {
				} else if yym1222 {
					z.DecBinaryUnmarshal(yyv1221)
				} else if !yym1222 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1221)
				} else {
					z.DecFallback(yyv1221, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1214)
		} // end switch yys1214
	} // end for yyj1214
	if !yyhl1214 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1224 int
	var yyb1224 bool
	var yyhl1224 bool = l >= 0
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1229 := &x.StartedAt
		yym1230 := z.DecBinary()
		_ = yym1230
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1229) {
		} else if yym1230 {
			z.DecBinaryUnmarshal(yyv1229)
		} else if !yym1230 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1229)
		} else {
			z.DecFallback(yyv1229, false)
		}
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1231 := &x.FinishedAt
		yym1232 := z.DecBinary()
		_ = yym1232
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1231) {
		} else if yym1232 {
			z.DecBinaryUnmarshal(yyv1231)
		} else if !yym1232 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1231)
		} else {
			z.DecFallback(yyv1231, false)
		}
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1224++
		if yyhl1224 {
			yyb1224 = yyj1224 > l
		} else {
			yyb1224 = r.CheckBreak()
		}
		if yyb1224 {
			break
		}
		z.DecStructFieldNotFound(yyj1224-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1234 := z.EncBinary()
		_ = yym1234
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1235 := !z.EncBinary()
			yy2arr1235 := z.EncBasicHandle().StructToArray
			var yyq1235 [3]bool
			_, _, _ = yysep1235, yyq1235, yy2arr1235
			const yyr1235 bool = false
			yyq1235[0] = x.Waiting != nil
			yyq1235[1] = x.Running != nil
			yyq1235[2] = x.Terminated != nil
			if yyr1235 || yy2arr1235 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1235 int = 0
				for _, b := range yyq1235 {
					if b {
						yynn1235++
					}
				}
				r.EncodeMapStart(yynn1235)
			}
			if yyr1235 || yy2arr1235 {
				if yyq1235[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				if yyq1235[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				if yyq1235[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1235 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1239 := z.DecBinary()
	_ = yym1239
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1240 := r.ReadMapStart()
			if yyl1240 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1240, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1240 := r.ReadArrayStart()
			if yyl1240 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1240, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1241Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1241Slc
	var yyhl1241 bool = l >= 0
	for yyj1241 := 0; ; yyj1241++ {
		if yyhl1241 {
			if yyj1241 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1241Slc = r.DecodeBytes(yys1241Slc, true, true)
		yys1241 := string(yys1241Slc)
		switch yys1241 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1241)
		} // end switch yys1241
	} // end for yyj1241
	if !yyhl1241 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1245 int
	var yyb1245 bool
	var yyhl1245 bool = l >= 0
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1245++
		if yyhl1245 {
			yyb1245 = yyj1245 > l
		} else {
			yyb1245 = r.CheckBreak()
		}
		if yyb1245 {
			break
		}
		z.DecStructFieldNotFound(yyj1245-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1249 := z.EncBinary()
		_ = yym1249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1250 := !z.EncBinary()
			yy2arr1250 := z.EncBasicHandle().StructToArray
			var yyq1250 [8]bool
			_, _, _ = yysep1250, yyq1250, yy2arr1250
			const yyr1250 bool = false
			yyq1250[1] = true
			yyq1250[2] = true
			yyq1250[7] = x.ContainerID != ""
			if yyr1250 || yy2arr1250 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1250 int = 5
				for _, b := range yyq1250 {
					if b {
						yynn1250++
					}
				}
				r.EncodeMapStart(yynn1250)
			}
			if yyr1250 || yy2arr1250 {
				yym1252 := z.EncBinary()
				_ = yym1252
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1253 := z.EncBinary()
				_ = yym1253
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1250 || yy2arr1250 {
				if yyq1250[1] {
					yy1255 := &x.State
					yy1255.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1256 := &x.State
					yy1256.CodecEncodeSelf(e)
				}
			}
			if yyr1250 || yy2arr1250 {
				if yyq1250[2] {
					yy1258 := &x.LastTerminationState
					yy1258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1259 := &x.LastTerminationState
					yy1259.CodecEncodeSelf(e)
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1261 := z.EncBinary()
				_ = yym1261
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1262 := z.EncBinary()
				_ = yym1262
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1264 := z.EncBinary()
				_ = yym1264
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1265 := z.EncBinary()
				_ = yym1265
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1267 := z.EncBinary()
				_ = yym1267
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1268 := z.EncBinary()
				_ = yym1268
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1270 := z.EncBinary()
				_ = yym1270
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1271 := z.EncBinary()
				_ = yym1271
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1250 || yy2arr1250 {
				if yyq1250[7] {
					yym1273 := z.EncBinary()
					_ = yym1273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1250[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1274 := z.EncBinary()
					_ = yym1274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1275 := z.DecBinary()
	_ = yym1275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1276 := r.ReadMapStart()
			if yyl1276 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1276, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1276 := r.ReadArrayStart()
			if yyl1276 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1277Slc
	var yyhl1277 bool = l >= 0
	for yyj1277 := 0; ; yyj1277++ {
		if yyhl1277 {
			if yyj1277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1277Slc = r.DecodeBytes(yys1277Slc, true, true)
		yys1277 := string(yys1277Slc)
		switch yys1277 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1279 := &x.State
				yyv1279.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1280 := &x.LastTerminationState
				yyv1280.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1277)
		} // end switch yys1277
	} // end for yyj1277
	if !yyhl1277 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1286 int
	var yyb1286 bool
	var yyhl1286 bool = l >= 0
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1288 := &x.State
		yyv1288.CodecDecodeSelf(d)
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1289 := &x.LastTerminationState
		yyv1289.CodecDecodeSelf(d)
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1286++
		if yyhl1286 {
			yyb1286 = yyj1286 > l
		} else {
			yyb1286 = r.CheckBreak()
		}
		if yyb1286 {
			break
		}
		z.DecStructFieldNotFound(yyj1286-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1295 := z.EncBinary()
	_ = yym1295
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1296 := z.DecBinary()
	_ = yym1296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1297 := z.EncBinary()
	_ = yym1297
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1298 := z.DecBinary()
	_ = yym1298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1299 := z.EncBinary()
		_ = yym1299
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1300 := !z.EncBinary()
			yy2arr1300 := z.EncBasicHandle().StructToArray
			var yyq1300 [6]bool
			_, _, _ = yysep1300, yyq1300, yy2arr1300
			const yyr1300 bool = false
			yyq1300[2] = true
			yyq1300[3] = true
			yyq1300[4] = x.Reason != ""
			yyq1300[5] = x.Message != ""
			if yyr1300 || yy2arr1300 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1300 int = 2
				for _, b := range yyq1300 {
					if b {
						yynn1300++
					}
				}
				r.EncodeMapStart(yynn1300)
			}
			if yyr1300 || yy2arr1300 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1300 || yy2arr1300 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[2] {
					yy1304 := &x.LastProbeTime
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1304) {
					} else if yym1305 {
						z.EncBinaryMarshal(yy1304)
					} else if !yym1305 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1304)
					} else {
						z.EncFallback(yy1304)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1300[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1306 := &x.LastProbeTime
					yym1307 := z.EncBinary()
					_ = yym1307
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1306) {
					} else if yym1307 {
						z.EncBinaryMarshal(yy1306)
					} else if !yym1307 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1306)
					} else {
						z.EncFallback(yy1306)
					}
				}
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[3] {
					yy1309 := &x.LastTransitionTime
					yym1310 := z.EncBinary()
					_ = yym1310
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1309) {
					} else if yym1310 {
						z.EncBinaryMarshal(yy1309)
					} else if !yym1310 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1309)
					} else {
						z.EncFallback(yy1309)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1300[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1311 := &x.LastTransitionTime
					yym1312 := z.EncBinary()
					_ = yym1312
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1311) {
					} else if yym1312 {
						z.EncBinaryMarshal(yy1311)
					} else if !yym1312 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1311)
					} else {
						z.EncFallback(yy1311)
					}
				}
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[4] {
					yym1314 := z.EncBinary()
					_ = yym1314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1300[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1315 := z.EncBinary()
					_ = yym1315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[5] {
					yym1317 := z.EncBinary()
					_ = yym1317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1300[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1300 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1319 := z.DecBinary()
	_ = yym1319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1320 := r.ReadMapStart()
			if yyl1320 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1320, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1320 := r.ReadArrayStart()
			if yyl1320 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1321Slc
	var yyhl1321 bool = l >= 0
	for yyj1321 := 0; ; yyj1321++ {
		if yyhl1321 {
			if yyj1321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1321Slc = r.DecodeBytes(yys1321Slc, true, true)
		yys1321 := string(yys1321Slc)
		switch yys1321 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1324 := &x.LastProbeTime
				yym1325 := z.DecBinary()
				_ = yym1325
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1324) {
				} else if yym1325 {
					z.DecBinaryUnmarshal(yyv1324)
				} else if !yym1325 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1324)
				} else {
					z.DecFallback(yyv1324, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1326 := &x.LastTransitionTime
				yym1327 := z.DecBinary()
				_ = yym1327
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1326) {
				} else if yym1327 {
					z.DecBinaryUnmarshal(yyv1326)
				} else if !yym1327 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1326)
				} else {
					z.DecFallback(yyv1326, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1321)
		} // end switch yys1321
	} // end for yyj1321
	if !yyhl1321 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1330 int
	var yyb1330 bool
	var yyhl1330 bool = l >= 0
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1333 := &x.LastProbeTime
		yym1334 := z.DecBinary()
		_ = yym1334
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1333) {
		} else if yym1334 {
			z.DecBinaryUnmarshal(yyv1333)
		} else if !yym1334 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1333)
		} else {
			z.DecFallback(yyv1333, false)
		}
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1335 := &x.LastTransitionTime
		yym1336 := z.DecBinary()
		_ = yym1336
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1335) {
		} else if yym1336 {
			z.DecBinaryUnmarshal(yyv1335)
		} else if !yym1336 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1335)
		} else {
			z.DecFallback(yyv1335, false)
		}
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1330++
		if yyhl1330 {
			yyb1330 = yyj1330 > l
		} else {
			yyb1330 = r.CheckBreak()
		}
		if yyb1330 {
			break
		}
		z.DecStructFieldNotFound(yyj1330-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1339 := z.EncBinary()
	_ = yym1339
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1340 := z.DecBinary()
	_ = yym1340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1341 := z.EncBinary()
	_ = yym1341
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1342 := z.DecBinary()
	_ = yym1342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1343 := z.EncBinary()
		_ = yym1343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1344 := !z.EncBinary()
			yy2arr1344 := z.EncBasicHandle().StructToArray
			var yyq1344 [15]bool
			_, _, _ = yysep1344, yyq1344, yy2arr1344
			const yyr1344 bool = false
			yyq1344[0] = len(x.Volumes) != 0
			yyq1344[2] = x.RestartPolicy != ""
			yyq1344[3] = x.TerminationGracePeriodSeconds != nil
			yyq1344[4] = x.ActiveDeadlineSeconds != nil
			yyq1344[5] = x.DNSPolicy != ""
			yyq1344[6] = len(x.NodeSelector) != 0
			yyq1344[7] = x.ServiceAccountName != ""
			yyq1344[8] = x.DeprecatedServiceAccount != ""
			yyq1344[9] = x.NodeName != ""
			yyq1344[10] = x.HostNetwork != false
			yyq1344[11] = x.HostPID != false
			yyq1344[12] = x.HostIPC != false
			yyq1344[13] = x.SecurityContext != nil
			yyq1344[14] = len(x.ImagePullSecrets) != 0
			if yyr1344 || yy2arr1344 {
				r.EncodeArrayStart(15)
			} else {
				var yynn1344 int = 1
				for _, b := range yyq1344 {
					if b {
						yynn1344++
					}
				}
				r.EncodeMapStart(yynn1344)
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1346 := z.EncBinary()
						_ = yym1346
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[0] {
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1347 := z.EncBinary()
						_ = yym1347
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1349 := z.EncBinary()
					_ = yym1349
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1350 := z.EncBinary()
					_ = yym1350
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1353 := *x.TerminationGracePeriodSeconds
						yym1354 := z.EncBinary()
						_ = yym1354
						if false {
						} else {
							r.EncodeInt(int64(yy1353))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1355 := *x.TerminationGracePeriodSeconds
						yym1356 := z.EncBinary()
						_ = yym1356
						if false {
						} else {
							r.EncodeInt(int64(yy1355))
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1358 := *x.ActiveDeadlineSeconds
						yym1359 := z.EncBinary()
						_ = yym1359
						if false {
						} else {
							r.EncodeInt(int64(yy1358))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1360 := *x.ActiveDeadlineSeconds
						yym1361 := z.EncBinary()
						_ = yym1361
						if false {
						} else {
							r.EncodeInt(int64(yy1360))
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1364 := z.EncBinary()
						_ = yym1364
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1365 := z.EncBinary()
						_ = yym1365
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[7] {
					yym1367 := z.EncBinary()
					_ = yym1367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[7] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					yym1368 := z.EncBinary()
					_ = yym1368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[8] {
					yym1370 := z.EncBinary()
					_ = yym1370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[8] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					yym1371 := z.EncBinary()
					_ = yym1371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[9] {
					yym1373 := z.EncBinary()
					_ = yym1373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[9] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[10] {
					yym1376 := z.EncBinary()
					_ = yym1376
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1344[10] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[11] {
					yym1379 := z.EncBinary()
					_ = yym1379
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1344[11] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[12] {
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1344[12] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1383 := z.EncBinary()
					_ = yym1383
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[13] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1386 := z.EncBinary()
						_ = yym1386
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[14] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1387 := z.EncBinary()
						_ = yym1387
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1344 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1388 := z.DecBinary()
	_ = yym1388
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1389 := r.ReadMapStart()
			if yyl1389 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1389, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1389 := r.ReadArrayStart()
			if yyl1389 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1389, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1390Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1390Slc
	var yyhl1390 bool = l >= 0
	for yyj1390 := 0; ; yyj1390++ {
		if yyhl1390 {
			if yyj1390 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1390Slc = r.DecodeBytes(yys1390Slc, true, true)
		yys1390 := string(yys1390Slc)
		switch yys1390 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1391 := &x.Volumes
				yym1392 := z.DecBinary()
				_ = yym1392
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1391), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1393 := &x.Containers
				yym1394 := z.DecBinary()
				_ = yym1394
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1393), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1397 := z.DecBinary()
				_ = yym1397
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1399 := z.DecBinary()
				_ = yym1399
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1401 := &x.NodeSelector
				yym1402 := z.DecBinary()
				_ = yym1402
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1401, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1410 := &x.ImagePullSecrets
				yym1411 := z.DecBinary()
				_ = yym1411
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1410), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1390)
		} // end switch yys1390
	} // end for yyj1390
	if !yyhl1390 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1412 int
	var yyb1412 bool
	var yyhl1412 bool = l >= 0
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1413 := &x.Volumes
		yym1414 := z.DecBinary()
		_ = yym1414
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1413), d)
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1415 := &x.Containers
		yym1416 := z.DecBinary()
		_ = yym1416
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1415), d)
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1419 := z.DecBinary()
		_ = yym1419
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1421 := z.DecBinary()
		_ = yym1421
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1423 := &x.NodeSelector
		yym1424 := z.DecBinary()
		_ = yym1424
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1423, false, d)
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1432 := &x.ImagePullSecrets
		yym1433 := z.DecBinary()
		_ = yym1433
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1432), d)
		}
	}
	for {
		yyj1412++
		if yyhl1412 {
			yyb1412 = yyj1412 > l
		} else {
			yyb1412 = r.CheckBreak()
		}
		if yyb1412 {
			break
		}
		z.DecStructFieldNotFound(yyj1412-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1434 := z.EncBinary()
		_ = yym1434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1435 := !z.EncBinary()
			yy2arr1435 := z.EncBasicHandle().StructToArray
			var yyq1435 [5]bool
			_, _, _ = yysep1435, yyq1435, yy2arr1435
			const yyr1435 bool = false
			yyq1435[0] = x.SELinuxOptions != nil
			yyq1435[1] = x.RunAsUser != nil
			yyq1435[2] = x.RunAsNonRoot != nil
			yyq1435[3] = len(x.SupplementalGroups) != 0
			yyq1435[4] = x.FSGroup != nil
			if yyr1435 || yy2arr1435 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1435 int = 0
				for _, b := range yyq1435 {
					if b {
						yynn1435++
					}
				}
				r.EncodeMapStart(yynn1435)
			}
			if yyr1435 || yy2arr1435 {
				if yyq1435[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[0] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				if yyq1435[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1438 := *x.RunAsUser
						yym1439 := z.EncBinary()
						_ = yym1439
						if false {
						} else {
							r.EncodeInt(int64(yy1438))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[1] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1440 := *x.RunAsUser
						yym1441 := z.EncBinary()
						_ = yym1441
						if false {
						} else {
							r.EncodeInt(int64(yy1440))
						}
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				if yyq1435[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1443 := *x.RunAsNonRoot
						yym1444 := z.EncBinary()
						_ = yym1444
						if false {
						} else {
							r.EncodeBool(bool(yy1443))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[2] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1445 := *x.RunAsNonRoot
						yym1446 := z.EncBinary()
						_ = yym1446
						if false {
						} else {
							r.EncodeBool(bool(yy1445))
						}
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				if yyq1435[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1448 := z.EncBinary()
						_ = yym1448
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[3] {
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1449 := z.EncBinary()
						_ = yym1449
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				if yyq1435[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1451 := *x.FSGroup
						yym1452 := z.EncBinary()
						_ = yym1452
						if false {
						} else {
							r.EncodeInt(int64(yy1451))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[4] {
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1453 := *x.FSGroup
						yym1454 := z.EncBinary()
						_ = yym1454
						if false {
						} else {
							r.EncodeInt(int64(yy1453))
						}
					}
				}
			}
			if yysep1435 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1455 := z.DecBinary()
	_ = yym1455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1456 := r.ReadMapStart()
			if yyl1456 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1456, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1456 := r.ReadArrayStart()
			if yyl1456 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1456, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1457Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1457Slc
	var yyhl1457 bool = l >= 0
	for yyj1457 := 0; ; yyj1457++ {
		if yyhl1457 {
			if yyj1457 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1457Slc = r.DecodeBytes(yys1457Slc, true, true)
		yys1457 := string(yys1457Slc)
		switch yys1457 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1460 := z.DecBinary()
				_ = yym1460
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1462 := z.DecBinary()
				_ = yym1462
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1463 := &x.SupplementalGroups
				yym1464 := z.DecBinary()
				_ = yym1464
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1463, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1466 := z.DecBinary()
				_ = yym1466
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1457)
		} // end switch yys1457
	} // end for yyj1457
	if !yyhl1457 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1467 int
	var yyb1467 bool
	var yyhl1467 bool = l >= 0
	yyj1467++
	if yyhl1467 {
		yyb1467 = yyj1467 > l
	} else {
		yyb1467 = r.CheckBreak()
	}
	if yyb1467 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1467++
	if yyhl1467 {
		yyb1467 = yyj1467 > l
	} else {
		yyb1467 = r.CheckBreak()
	}
	if yyb1467 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1470 := z.DecBinary()
		_ = yym1470
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1467++
	if yyhl1467 {
		yyb1467 = yyj1467 > l
	} else {
		yyb1467 = r.CheckBreak()
	}
	if yyb1467 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1472 := z.DecBinary()
		_ = yym1472
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1467++
	if yyhl1467 {
		yyb1467 = yyj1467 > l
	} else {
		yyb1467 = r.CheckBreak()
	}
	if yyb1467 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1473 := &x.SupplementalGroups
		yym1474 := z.DecBinary()
		_ = yym1474
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1473, false, d)
		}
	}
	yyj1467++
	if yyhl1467 {
		yyb1467 = yyj1467 > l
	} else {
		yyb1467 = r.CheckBreak()
	}
	if yyb1467 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1476 := z.DecBinary()
		_ = yym1476
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1467++
		if yyhl1467 {
			yyb1467 = yyj1467 > l
		} else {
			yyb1467 = r.CheckBreak()
		}
		if yyb1467 {
			break
		}
		z.DecStructFieldNotFound(yyj1467-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1477 := z.EncBinary()
		_ = yym1477
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1478 := !z.EncBinary()
			yy2arr1478 := z.EncBasicHandle().StructToArray
			var yyq1478 [8]bool
			_, _, _ = yysep1478, yyq1478, yy2arr1478
			const yyr1478 bool = false
			yyq1478[0] = x.Phase != ""
			yyq1478[1] = len(x.Conditions) != 0
			yyq1478[2] = x.Message != ""
			yyq1478[3] = x.Reason != ""
			yyq1478[4] = x.HostIP != ""
			yyq1478[5] = x.PodIP != ""
			yyq1478[6] = x.StartTime != nil
			yyq1478[7] = len(x.ContainerStatuses) != 0
			if yyr1478 || yy2arr1478 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1478 int = 0
				for _, b := range yyq1478 {
					if b {
						yynn1478++
					}
				}
				r.EncodeMapStart(yynn1478)
			}
			if yyr1478 || yy2arr1478 {
				if yyq1478[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1478[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1478 || yy2arr1478 {
				if yyq1478[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1481 := z.EncBinary()
						_ = yym1481
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1478[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1482 := z.EncBinary()
						_ = yym1482
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1478 || yy2arr1478 {
				if yyq1478[2] {
					yym1484 := z.EncBinary()
					_ = yym1484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1478[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1485 := z.EncBinary()
					_ = yym1485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1478 || yy2arr1478 {
				if yyq1478[3] {
					yym1487 := z.EncBinary()
					_ = yym1487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1478[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1488 := z.EncBinary()
					_ = yym1488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1478 || yy2arr1478 {
				if yyq1478[4] {
					yym1490 := z.EncBinary()
					_ = yym1490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1478[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1491 := z.EncBinary()
					_ = yym1491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1478 || yy2arr1478 {
				if yyq1478[5] {
					yym1493 := z.EncBinary()
					_ = yym1493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1478[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1494 := z.EncBinary()
					_ = yym1494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1478 || yy2arr1478 {
				if yyq1478[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1496 := z.EncBinary()
						_ = yym1496
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1496 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1496 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1478[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1497 := z.EncBinary()
						_ = yym1497
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1497 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1497 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1478 || yy2arr1478 {
				if yyq1478[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1499 := z.EncBinary()
						_ = yym1499
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1478[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1500 := z.EncBinary()
						_ = yym1500
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1478 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1501 := z.DecBinary()
	_ = yym1501
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1502 := r.ReadMapStart()
			if yyl1502 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1502, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1502 := r.ReadArrayStart()
			if yyl1502 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1502, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1503Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1503Slc
	var yyhl1503 bool = l >= 0
	for yyj1503 := 0; ; yyj1503++ {
		if yyhl1503 {
			if yyj1503 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1503Slc = r.DecodeBytes(yys1503Slc, true, true)
		yys1503 := string(yys1503Slc)
		switch yys1503 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1505 := &x.Conditions
				yym1506 := z.DecBinary()
				_ = yym1506
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1505), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1512 := z.DecBinary()
				_ = yym1512
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1512 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1512 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1513 := &x.ContainerStatuses
				yym1514 := z.DecBinary()
				_ = yym1514
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1513), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1503)
		} // end switch yys1503
	} // end for yyj1503
	if !yyhl1503 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1515 int
	var yyb1515 bool
	var yyhl1515 bool = l >= 0
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1517 := &x.Conditions
		yym1518 := z.DecBinary()
		_ = yym1518
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1517), d)
		}
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1524 := z.DecBinary()
		_ = yym1524
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1524 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1524 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1525 := &x.ContainerStatuses
		yym1526 := z.DecBinary()
		_ = yym1526
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1525), d)
		}
	}
	for {
		yyj1515++
		if yyhl1515 {
			yyb1515 = yyj1515 > l
		} else {
			yyb1515 = r.CheckBreak()
		}
		if yyb1515 {
			break
		}
		z.DecStructFieldNotFound(yyj1515-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1527 := z.EncBinary()
		_ = yym1527
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1528 := !z.EncBinary()
			yy2arr1528 := z.EncBasicHandle().StructToArray
			var yyq1528 [4]bool
			_, _, _ = yysep1528, yyq1528, yy2arr1528
			const yyr1528 bool = false
			yyq1528[0] = x.Kind != ""
			yyq1528[1] = x.APIVersion != ""
			yyq1528[2] = true
			yyq1528[3] = true
			if yyr1528 || yy2arr1528 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1528 int = 0
				for _, b := range yyq1528 {
					if b {
						yynn1528++
					}
				}
				r.EncodeMapStart(yynn1528)
			}
			if yyr1528 || yy2arr1528 {
				if yyq1528[0] {
					yym1530 := z.EncBinary()
					_ = yym1530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1528[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1531 := z.EncBinary()
					_ = yym1531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1528 || yy2arr1528 {
				if yyq1528[1] {
					yym1533 := z.EncBinary()
					_ = yym1533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1528[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1534 := z.EncBinary()
					_ = yym1534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1528 || yy2arr1528 {
				if yyq1528[2] {
					yy1536 := &x.ObjectMeta
					yy1536.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1528[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1537 := &x.ObjectMeta
					yy1537.CodecEncodeSelf(e)
				}
			}
			if yyr1528 || yy2arr1528 {
				if yyq1528[3] {
					yy1539 := &x.Status
					yy1539.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1528[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1540 := &x.Status
					yy1540.CodecEncodeSelf(e)
				}
			}
			if yysep1528 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1541 := z.DecBinary()
	_ = yym1541
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1542 := r.ReadMapStart()
			if yyl1542 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1542, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1542 := r.ReadArrayStart()
			if yyl1542 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1542, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1543Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1543Slc
	var yyhl1543 bool = l >= 0
	for yyj1543 := 0; ; yyj1543++ {
		if yyhl1543 {
			if yyj1543 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1543Slc = r.DecodeBytes(yys1543Slc, true, true)
		yys1543 := string(yys1543Slc)
		switch yys1543 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1546 := &x.ObjectMeta
				yyv1546.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1547 := &x.Status
				yyv1547.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1543)
		} // end switch yys1543
	} // end for yyj1543
	if !yyhl1543 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1548 int
	var yyb1548 bool
	var yyhl1548 bool = l >= 0
	yyj1548++
	if yyhl1548 {
		yyb1548 = yyj1548 > l
	} else {
		yyb1548 = r.CheckBreak()
	}
	if yyb1548 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1548++
	if yyhl1548 {
		yyb1548 = yyj1548 > l
	} else {
		yyb1548 = r.CheckBreak()
	}
	if yyb1548 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1548++
	if yyhl1548 {
		yyb1548 = yyj1548 > l
	} else {
		yyb1548 = r.CheckBreak()
	}
	if yyb1548 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1551 := &x.ObjectMeta
		yyv1551.CodecDecodeSelf(d)
	}
	yyj1548++
	if yyhl1548 {
		yyb1548 = yyj1548 > l
	} else {
		yyb1548 = r.CheckBreak()
	}
	if yyb1548 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1552 := &x.Status
		yyv1552.CodecDecodeSelf(d)
	}
	for {
		yyj1548++
		if yyhl1548 {
			yyb1548 = yyj1548 > l
		} else {
			yyb1548 = r.CheckBreak()
		}
		if yyb1548 {
			break
		}
		z.DecStructFieldNotFound(yyj1548-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1553 := z.EncBinary()
		_ = yym1553
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1554 := !z.EncBinary()
			yy2arr1554 := z.EncBasicHandle().StructToArray
			var yyq1554 [5]bool
			_, _, _ = yysep1554, yyq1554, yy2arr1554
			const yyr1554 bool = false
			yyq1554[0] = x.Kind != ""
			yyq1554[1] = x.APIVersion != ""
			yyq1554[2] = true
			yyq1554[3] = true
			yyq1554[4] = true
			if yyr1554 || yy2arr1554 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1554 int = 0
				for _, b := range yyq1554 {
					if b {
						yynn1554++
					}
				}
				r.EncodeMapStart(yynn1554)
			}
			if yyr1554 || yy2arr1554 {
				if yyq1554[0] {
					yym1556 := z.EncBinary()
					_ = yym1556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1554[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1557 := z.EncBinary()
					_ = yym1557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1554 || yy2arr1554 {
				if yyq1554[1] {
					yym1559 := z.EncBinary()
					_ = yym1559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1554[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1560 := z.EncBinary()
					_ = yym1560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1554 || yy2arr1554 {
				if yyq1554[2] {
					yy1562 := &x.ObjectMeta
					yy1562.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1554[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1563 := &x.ObjectMeta
					yy1563.CodecEncodeSelf(e)
				}
			}
			if yyr1554 || yy2arr1554 {
				if yyq1554[3] {
					yy1565 := &x.Spec
					yy1565.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1554[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1566 := &x.Spec
					yy1566.CodecEncodeSelf(e)
				}
			}
			if yyr1554 || yy2arr1554 {
				if yyq1554[4] {
					yy1568 := &x.Status
					yy1568.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1554[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1569 := &x.Status
					yy1569.CodecEncodeSelf(e)
				}
			}
			if yysep1554 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1570 := z.DecBinary()
	_ = yym1570
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1571 := r.ReadMapStart()
			if yyl1571 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1571, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1571 := r.ReadArrayStart()
			if yyl1571 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1571, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1572Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1572Slc
	var yyhl1572 bool = l >= 0
	for yyj1572 := 0; ; yyj1572++ {
		if yyhl1572 {
			if yyj1572 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1572Slc = r.DecodeBytes(yys1572Slc, true, true)
		yys1572 := string(yys1572Slc)
		switch yys1572 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1575 := &x.ObjectMeta
				yyv1575.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1576 := &x.Spec
				yyv1576.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1577 := &x.Status
				yyv1577.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1572)
		} // end switch yys1572
	} // end for yyj1572
	if !yyhl1572 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1578 int
	var yyb1578 bool
	var yyhl1578 bool = l >= 0
	yyj1578++
	if yyhl1578 {
		yyb1578 = yyj1578 > l
	} else {
		yyb1578 = r.CheckBreak()
	}
	if yyb1578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1578++
	if yyhl1578 {
		yyb1578 = yyj1578 > l
	} else {
		yyb1578 = r.CheckBreak()
	}
	if yyb1578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1578++
	if yyhl1578 {
		yyb1578 = yyj1578 > l
	} else {
		yyb1578 = r.CheckBreak()
	}
	if yyb1578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1581 := &x.ObjectMeta
		yyv1581.CodecDecodeSelf(d)
	}
	yyj1578++
	if yyhl1578 {
		yyb1578 = yyj1578 > l
	} else {
		yyb1578 = r.CheckBreak()
	}
	if yyb1578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1582 := &x.Spec
		yyv1582.CodecDecodeSelf(d)
	}
	yyj1578++
	if yyhl1578 {
		yyb1578 = yyj1578 > l
	} else {
		yyb1578 = r.CheckBreak()
	}
	if yyb1578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1583 := &x.Status
		yyv1583.CodecDecodeSelf(d)
	}
	for {
		yyj1578++
		if yyhl1578 {
			yyb1578 = yyj1578 > l
		} else {
			yyb1578 = r.CheckBreak()
		}
		if yyb1578 {
			break
		}
		z.DecStructFieldNotFound(yyj1578-1, "")
	}
	r.ReadEnd()
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1584 := z.EncBinary()
		_ = yym1584
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1585 := !z.EncBinary()
			yy2arr1585 := z.EncBasicHandle().StructToArray
			var yyq1585 [4]bool
			_, _, _ = yysep1585, yyq1585, yy2arr1585
			const yyr1585 bool = false
			yyq1585[0] = x.Kind != ""
			yyq1585[1] = x.APIVersion != ""
			yyq1585[2] = true
			if yyr1585 || yy2arr1585 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1585 int = 1
				for _, b := range yyq1585 {
					if b {
						yynn1585++
					}
				}
				r.EncodeMapStart(yynn1585)
			}
			if yyr1585 || yy2arr1585 {
				if yyq1585[0] {
					yym1587 := z.EncBinary()
					_ = yym1587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1585[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1588 := z.EncBinary()
					_ = yym1588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				if yyq1585[1] {
					yym1590 := z.EncBinary()
					_ = yym1590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1585[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1591 := z.EncBinary()
					_ = yym1591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				if yyq1585[2] {
					yy1593 := &x.ListMeta
					yym1594 := z.EncBinary()
					_ = yym1594
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1593) {
					} else {
						z.EncFallback(yy1593)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1595 := &x.ListMeta
					yym1596 := z.EncBinary()
					_ = yym1596
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1595) {
					} else {
						z.EncFallback(yy1595)
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1598 := z.EncBinary()
					_ = yym1598
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1599 := z.EncBinary()
					_ = yym1599
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1585 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1600 := z.DecBinary()
	_ = yym1600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1601 := r.ReadMapStart()
			if yyl1601 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1601, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1601 := r.ReadArrayStart()
			if yyl1601 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1601, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1602Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1602Slc
	var yyhl1602 bool = l >= 0
	for yyj1602 := 0; ; yyj1602++ {
		if yyhl1602 {
			if yyj1602 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1602Slc = r.DecodeBytes(yys1602Slc, true, true)
		yys1602 := string(yys1602Slc)
		switch yys1602 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1605 := &x.ListMeta
				yym1606 := z.DecBinary()
				_ = yym1606
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1605) {
				} else {
					z.DecFallback(yyv1605, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1607 := &x.Items
				yym1608 := z.DecBinary()
				_ = yym1608
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1607), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1602)
		} // end switch yys1602
	} // end for yyj1602
	if !yyhl1602 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1609 int
	var yyb1609 bool
	var yyhl1609 bool = l >= 0
	yyj1609++
	if yyhl1609 {
		yyb1609 = yyj1609 > l
	} else {
		yyb1609 = r.CheckBreak()
	}
	if yyb1609 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1609++
	if yyhl1609 {
		yyb1609 = yyj1609 > l
	} else {
		yyb1609 = r.CheckBreak()
	}
	if yyb1609 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1609++
	if yyhl1609 {
		yyb1609 = yyj1609 > l
	} else {
		yyb1609 = r.CheckBreak()
	}
	if yyb1609 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1612 := &x.ListMeta
		yym1613 := z.DecBinary()
		_ = yym1613
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1612) {
		} else {
			z.DecFallback(yyv1612, false)
		}
	}
	yyj1609++
	if yyhl1609 {
		yyb1609 = yyj1609 > l
	} else {
		yyb1609 = r.CheckBreak()
	}
	if yyb1609 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1614 := &x.Items
		yym1615 := z.DecBinary()
		_ = yym1615
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1614), d)
		}
	}
	for {
		yyj1609++
		if yyhl1609 {
			yyb1609 = yyj1609 > l
		} else {
			yyb1609 = r.CheckBreak()
		}
		if yyb1609 {
			break
		}
		z.DecStructFieldNotFound(yyj1609-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1616 := z.EncBinary()
		_ = yym1616
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1617 := !z.EncBinary()
			yy2arr1617 := z.EncBasicHandle().StructToArray
			var yyq1617 [2]bool
			_, _, _ = yysep1617, yyq1617, yy2arr1617
			const yyr1617 bool = false
			yyq1617[0] = true
			yyq1617[1] = true
			if yyr1617 || yy2arr1617 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1617 int = 0
				for _, b := range yyq1617 {
					if b {
						yynn1617++
					}
				}
				r.EncodeMapStart(yynn1617)
			}
			if yyr1617 || yy2arr1617 {
				if yyq1617[0] {
					yy1619 := &x.ObjectMeta
					yy1619.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1617[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1620 := &x.ObjectMeta
					yy1620.CodecEncodeSelf(e)
				}
			}
			if yyr1617 || yy2arr1617 {
				if yyq1617[1] {
					yy1622 := &x.Spec
					yy1622.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1617[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1623 := &x.Spec
					yy1623.CodecEncodeSelf(e)
				}
			}
			if yysep1617 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1624 := z.DecBinary()
	_ = yym1624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1625 := r.ReadMapStart()
			if yyl1625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1625, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1625 := r.ReadArrayStart()
			if yyl1625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1626Slc
	var yyhl1626 bool = l >= 0
	for yyj1626 := 0; ; yyj1626++ {
		if yyhl1626 {
			if yyj1626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1626Slc = r.DecodeBytes(yys1626Slc, true, true)
		yys1626 := string(yys1626Slc)
		switch yys1626 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1627 := &x.ObjectMeta
				yyv1627.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1628 := &x.Spec
				yyv1628.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1626)
		} // end switch yys1626
	} // end for yyj1626
	if !yyhl1626 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1629 int
	var yyb1629 bool
	var yyhl1629 bool = l >= 0
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1630 := &x.ObjectMeta
		yyv1630.CodecDecodeSelf(d)
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1631 := &x.Spec
		yyv1631.CodecDecodeSelf(d)
	}
	for {
		yyj1629++
		if yyhl1629 {
			yyb1629 = yyj1629 > l
		} else {
			yyb1629 = r.CheckBreak()
		}
		if yyb1629 {
			break
		}
		z.DecStructFieldNotFound(yyj1629-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1632 := z.EncBinary()
		_ = yym1632
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1633 := !z.EncBinary()
			yy2arr1633 := z.EncBasicHandle().StructToArray
			var yyq1633 [4]bool
			_, _, _ = yysep1633, yyq1633, yy2arr1633
			const yyr1633 bool = false
			yyq1633[0] = x.Kind != ""
			yyq1633[1] = x.APIVersion != ""
			yyq1633[2] = true
			yyq1633[3] = true
			if yyr1633 || yy2arr1633 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1633 int = 0
				for _, b := range yyq1633 {
					if b {
						yynn1633++
					}
				}
				r.EncodeMapStart(yynn1633)
			}
			if yyr1633 || yy2arr1633 {
				if yyq1633[0] {
					yym1635 := z.EncBinary()
					_ = yym1635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1633[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1636 := z.EncBinary()
					_ = yym1636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1633 || yy2arr1633 {
				if yyq1633[1] {
					yym1638 := z.EncBinary()
					_ = yym1638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1633[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1639 := z.EncBinary()
					_ = yym1639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1633 || yy2arr1633 {
				if yyq1633[2] {
					yy1641 := &x.ObjectMeta
					yy1641.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1633[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1642 := &x.ObjectMeta
					yy1642.CodecEncodeSelf(e)
				}
			}
			if yyr1633 || yy2arr1633 {
				if yyq1633[3] {
					yy1644 := &x.Template
					yy1644.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1633[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1645 := &x.Template
					yy1645.CodecEncodeSelf(e)
				}
			}
			if yysep1633 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1646 := z.DecBinary()
	_ = yym1646
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1647 := r.ReadMapStart()
			if yyl1647 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1647, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1647 := r.ReadArrayStart()
			if yyl1647 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1647, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1648Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1648Slc
	var yyhl1648 bool = l >= 0
	for yyj1648 := 0; ; yyj1648++ {
		if yyhl1648 {
			if yyj1648 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1648Slc = r.DecodeBytes(yys1648Slc, true, true)
		yys1648 := string(yys1648Slc)
		switch yys1648 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1651 := &x.ObjectMeta
				yyv1651.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1652 := &x.Template
				yyv1652.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1648)
		} // end switch yys1648
	} // end for yyj1648
	if !yyhl1648 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1653 int
	var yyb1653 bool
	var yyhl1653 bool = l >= 0
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1656 := &x.ObjectMeta
		yyv1656.CodecDecodeSelf(d)
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1657 := &x.Template
		yyv1657.CodecDecodeSelf(d)
	}
	for {
		yyj1653++
		if yyhl1653 {
			yyb1653 = yyj1653 > l
		} else {
			yyb1653 = r.CheckBreak()
		}
		if yyb1653 {
			break
		}
		z.DecStructFieldNotFound(yyj1653-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1658 := z.EncBinary()
		_ = yym1658
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1659 := !z.EncBinary()
			yy2arr1659 := z.EncBasicHandle().StructToArray
			var yyq1659 [4]bool
			_, _, _ = yysep1659, yyq1659, yy2arr1659
			const yyr1659 bool = false
			yyq1659[0] = x.Kind != ""
			yyq1659[1] = x.APIVersion != ""
			yyq1659[2] = true
			if yyr1659 || yy2arr1659 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1659 int = 1
				for _, b := range yyq1659 {
					if b {
						yynn1659++
					}
				}
				r.EncodeMapStart(yynn1659)
			}
			if yyr1659 || yy2arr1659 {
				if yyq1659[0] {
					yym1661 := z.EncBinary()
					_ = yym1661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1659[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1662 := z.EncBinary()
					_ = yym1662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1659 || yy2arr1659 {
				if yyq1659[1] {
					yym1664 := z.EncBinary()
					_ = yym1664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1659[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1665 := z.EncBinary()
					_ = yym1665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1659 || yy2arr1659 {
				if yyq1659[2] {
					yy1667 := &x.ListMeta
					yym1668 := z.EncBinary()
					_ = yym1668
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1667) {
					} else {
						z.EncFallback(yy1667)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1659[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1669 := &x.ListMeta
					yym1670 := z.EncBinary()
					_ = yym1670
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1669) {
					} else {
						z.EncFallback(yy1669)
					}
				}
			}
			if yyr1659 || yy2arr1659 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1672 := z.EncBinary()
					_ = yym1672
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1673 := z.EncBinary()
					_ = yym1673
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1659 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1674 := z.DecBinary()
	_ = yym1674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1675 := r.ReadMapStart()
			if yyl1675 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1675, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1675 := r.ReadArrayStart()
			if yyl1675 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1676Slc
	var yyhl1676 bool = l >= 0
	for yyj1676 := 0; ; yyj1676++ {
		if yyhl1676 {
			if yyj1676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1676Slc = r.DecodeBytes(yys1676Slc, true, true)
		yys1676 := string(yys1676Slc)
		switch yys1676 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1679 := &x.ListMeta
				yym1680 := z.DecBinary()
				_ = yym1680
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1679) {
				} else {
					z.DecFallback(yyv1679, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1681 := &x.Items
				yym1682 := z.DecBinary()
				_ = yym1682
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1681), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1676)
		} // end switch yys1676
	} // end for yyj1676
	if !yyhl1676 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1683 int
	var yyb1683 bool
	var yyhl1683 bool = l >= 0
	yyj1683++
	if yyhl1683 {
		yyb1683 = yyj1683 > l
	} else {
		yyb1683 = r.CheckBreak()
	}
	if yyb1683 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1683++
	if yyhl1683 {
		yyb1683 = yyj1683 > l
	} else {
		yyb1683 = r.CheckBreak()
	}
	if yyb1683 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1683++
	if yyhl1683 {
		yyb1683 = yyj1683 > l
	} else {
		yyb1683 = r.CheckBreak()
	}
	if yyb1683 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1686 := &x.ListMeta
		yym1687 := z.DecBinary()
		_ = yym1687
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1686) {
		} else {
			z.DecFallback(yyv1686, false)
		}
	}
	yyj1683++
	if yyhl1683 {
		yyb1683 = yyj1683 > l
	} else {
		yyb1683 = r.CheckBreak()
	}
	if yyb1683 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1688 := &x.Items
		yym1689 := z.DecBinary()
		_ = yym1689
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1688), d)
		}
	}
	for {
		yyj1683++
		if yyhl1683 {
			yyb1683 = yyj1683 > l
		} else {
			yyb1683 = r.CheckBreak()
		}
		if yyb1683 {
			break
		}
		z.DecStructFieldNotFound(yyj1683-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1690 := z.EncBinary()
		_ = yym1690
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1691 := !z.EncBinary()
			yy2arr1691 := z.EncBasicHandle().StructToArray
			var yyq1691 [3]bool
			_, _, _ = yysep1691, yyq1691, yy2arr1691
			const yyr1691 bool = false
			yyq1691[0] = x.Replicas != nil
			yyq1691[1] = len(x.Selector) != 0
			yyq1691[2] = x.Template != nil
			if yyr1691 || yy2arr1691 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1691 int = 0
				for _, b := range yyq1691 {
					if b {
						yynn1691++
					}
				}
				r.EncodeMapStart(yynn1691)
			}
			if yyr1691 || yy2arr1691 {
				if yyq1691[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1693 := *x.Replicas
						yym1694 := z.EncBinary()
						_ = yym1694
						if false {
						} else {
							r.EncodeInt(int64(yy1693))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1691[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1695 := *x.Replicas
						yym1696 := z.EncBinary()
						_ = yym1696
						if false {
						} else {
							r.EncodeInt(int64(yy1695))
						}
					}
				}
			}
			if yyr1691 || yy2arr1691 {
				if yyq1691[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1698 := z.EncBinary()
						_ = yym1698
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1691[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1699 := z.EncBinary()
						_ = yym1699
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1691 || yy2arr1691 {
				if yyq1691[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1691[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1691 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1701 := z.DecBinary()
	_ = yym1701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1702 := r.ReadMapStart()
			if yyl1702 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1702, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1702 := r.ReadArrayStart()
			if yyl1702 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1702, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1703Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1703Slc
	var yyhl1703 bool = l >= 0
	for yyj1703 := 0; ; yyj1703++ {
		if yyhl1703 {
			if yyj1703 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1703Slc = r.DecodeBytes(yys1703Slc, true, true)
		yys1703 := string(yys1703Slc)
		switch yys1703 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int)
				}
				yym1705 := z.DecBinary()
				_ = yym1705
				if false {
				} else {
					*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1706 := &x.Selector
				yym1707 := z.DecBinary()
				_ = yym1707
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1706, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1703)
		} // end switch yys1703
	} // end for yyj1703
	if !yyhl1703 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1709 int
	var yyb1709 bool
	var yyhl1709 bool = l >= 0
	yyj1709++
	if yyhl1709 {
		yyb1709 = yyj1709 > l
	} else {
		yyb1709 = r.CheckBreak()
	}
	if yyb1709 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int)
		}
		yym1711 := z.DecBinary()
		_ = yym1711
		if false {
		} else {
			*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj1709++
	if yyhl1709 {
		yyb1709 = yyj1709 > l
	} else {
		yyb1709 = r.CheckBreak()
	}
	if yyb1709 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1712 := &x.Selector
		yym1713 := z.DecBinary()
		_ = yym1713
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1712, false, d)
		}
	}
	yyj1709++
	if yyhl1709 {
		yyb1709 = yyj1709 > l
	} else {
		yyb1709 = r.CheckBreak()
	}
	if yyb1709 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1709++
		if yyhl1709 {
			yyb1709 = yyj1709 > l
		} else {
			yyb1709 = r.CheckBreak()
		}
		if yyb1709 {
			break
		}
		z.DecStructFieldNotFound(yyj1709-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1715 := z.EncBinary()
		_ = yym1715
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1716 := !z.EncBinary()
			yy2arr1716 := z.EncBasicHandle().StructToArray
			var yyq1716 [2]bool
			_, _, _ = yysep1716, yyq1716, yy2arr1716
			const yyr1716 bool = false
			yyq1716[1] = x.ObservedGeneration != 0
			if yyr1716 || yy2arr1716 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1716 int = 1
				for _, b := range yyq1716 {
					if b {
						yynn1716++
					}
				}
				r.EncodeMapStart(yynn1716)
			}
			if yyr1716 || yy2arr1716 {
				yym1718 := z.EncBinary()
				_ = yym1718
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1719 := z.EncBinary()
				_ = yym1719
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1716 || yy2arr1716 {
				if yyq1716[1] {
					yym1721 := z.EncBinary()
					_ = yym1721
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1716[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1722 := z.EncBinary()
					_ = yym1722
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1716 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1723 := z.DecBinary()
	_ = yym1723
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1724 := r.ReadMapStart()
			if yyl1724 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1724, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1724 := r.ReadArrayStart()
			if yyl1724 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1724, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1725Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1725Slc
	var yyhl1725 bool = l >= 0
	for yyj1725 := 0; ; yyj1725++ {
		if yyhl1725 {
			if yyj1725 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1725Slc = r.DecodeBytes(yys1725Slc, true, true)
		yys1725 := string(yys1725Slc)
		switch yys1725 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1725)
		} // end switch yys1725
	} // end for yyj1725
	if !yyhl1725 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1728 int
	var yyb1728 bool
	var yyhl1728 bool = l >= 0
	yyj1728++
	if yyhl1728 {
		yyb1728 = yyj1728 > l
	} else {
		yyb1728 = r.CheckBreak()
	}
	if yyb1728 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1728++
	if yyhl1728 {
		yyb1728 = yyj1728 > l
	} else {
		yyb1728 = r.CheckBreak()
	}
	if yyb1728 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1728++
		if yyhl1728 {
			yyb1728 = yyj1728 > l
		} else {
			yyb1728 = r.CheckBreak()
		}
		if yyb1728 {
			break
		}
		z.DecStructFieldNotFound(yyj1728-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1731 := z.EncBinary()
		_ = yym1731
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1732 := !z.EncBinary()
			yy2arr1732 := z.EncBasicHandle().StructToArray
			var yyq1732 [5]bool
			_, _, _ = yysep1732, yyq1732, yy2arr1732
			const yyr1732 bool = false
			yyq1732[0] = x.Kind != ""
			yyq1732[1] = x.APIVersion != ""
			yyq1732[2] = true
			yyq1732[3] = true
			yyq1732[4] = true
			if yyr1732 || yy2arr1732 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1732 int = 0
				for _, b := range yyq1732 {
					if b {
						yynn1732++
					}
				}
				r.EncodeMapStart(yynn1732)
			}
			if yyr1732 || yy2arr1732 {
				if yyq1732[0] {
					yym1734 := z.EncBinary()
					_ = yym1734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1732[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1735 := z.EncBinary()
					_ = yym1735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1732 || yy2arr1732 {
				if yyq1732[1] {
					yym1737 := z.EncBinary()
					_ = yym1737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1732[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1738 := z.EncBinary()
					_ = yym1738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1732 || yy2arr1732 {
				if yyq1732[2] {
					yy1740 := &x.ObjectMeta
					yy1740.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1732[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1741 := &x.ObjectMeta
					yy1741.CodecEncodeSelf(e)
				}
			}
			if yyr1732 || yy2arr1732 {
				if yyq1732[3] {
					yy1743 := &x.Spec
					yy1743.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1732[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1744 := &x.Spec
					yy1744.CodecEncodeSelf(e)
				}
			}
			if yyr1732 || yy2arr1732 {
				if yyq1732[4] {
					yy1746 := &x.Status
					yy1746.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1732[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1747 := &x.Status
					yy1747.CodecEncodeSelf(e)
				}
			}
			if yysep1732 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1748 := z.DecBinary()
	_ = yym1748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1749 := r.ReadMapStart()
			if yyl1749 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1749, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1749 := r.ReadArrayStart()
			if yyl1749 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1750Slc
	var yyhl1750 bool = l >= 0
	for yyj1750 := 0; ; yyj1750++ {
		if yyhl1750 {
			if yyj1750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1750Slc = r.DecodeBytes(yys1750Slc, true, true)
		yys1750 := string(yys1750Slc)
		switch yys1750 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1753 := &x.ObjectMeta
				yyv1753.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1754 := &x.Spec
				yyv1754.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1755 := &x.Status
				yyv1755.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1750)
		} // end switch yys1750
	} // end for yyj1750
	if !yyhl1750 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1756 int
	var yyb1756 bool
	var yyhl1756 bool = l >= 0
	yyj1756++
	if yyhl1756 {
		yyb1756 = yyj1756 > l
	} else {
		yyb1756 = r.CheckBreak()
	}
	if yyb1756 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1756++
	if yyhl1756 {
		yyb1756 = yyj1756 > l
	} else {
		yyb1756 = r.CheckBreak()
	}
	if yyb1756 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1756++
	if yyhl1756 {
		yyb1756 = yyj1756 > l
	} else {
		yyb1756 = r.CheckBreak()
	}
	if yyb1756 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1759 := &x.ObjectMeta
		yyv1759.CodecDecodeSelf(d)
	}
	yyj1756++
	if yyhl1756 {
		yyb1756 = yyj1756 > l
	} else {
		yyb1756 = r.CheckBreak()
	}
	if yyb1756 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1760 := &x.Spec
		yyv1760.CodecDecodeSelf(d)
	}
	yyj1756++
	if yyhl1756 {
		yyb1756 = yyj1756 > l
	} else {
		yyb1756 = r.CheckBreak()
	}
	if yyb1756 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1761 := &x.Status
		yyv1761.CodecDecodeSelf(d)
	}
	for {
		yyj1756++
		if yyhl1756 {
			yyb1756 = yyj1756 > l
		} else {
			yyb1756 = r.CheckBreak()
		}
		if yyb1756 {
			break
		}
		z.DecStructFieldNotFound(yyj1756-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1762 := z.EncBinary()
		_ = yym1762
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1763 := !z.EncBinary()
			yy2arr1763 := z.EncBasicHandle().StructToArray
			var yyq1763 [4]bool
			_, _, _ = yysep1763, yyq1763, yy2arr1763
			const yyr1763 bool = false
			yyq1763[0] = x.Kind != ""
			yyq1763[1] = x.APIVersion != ""
			yyq1763[2] = true
			if yyr1763 || yy2arr1763 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1763 int = 1
				for _, b := range yyq1763 {
					if b {
						yynn1763++
					}
				}
				r.EncodeMapStart(yynn1763)
			}
			if yyr1763 || yy2arr1763 {
				if yyq1763[0] {
					yym1765 := z.EncBinary()
					_ = yym1765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1763[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1766 := z.EncBinary()
					_ = yym1766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1763 || yy2arr1763 {
				if yyq1763[1] {
					yym1768 := z.EncBinary()
					_ = yym1768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1763[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1769 := z.EncBinary()
					_ = yym1769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1763 || yy2arr1763 {
				if yyq1763[2] {
					yy1771 := &x.ListMeta
					yym1772 := z.EncBinary()
					_ = yym1772
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1771) {
					} else {
						z.EncFallback(yy1771)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1763[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1773 := &x.ListMeta
					yym1774 := z.EncBinary()
					_ = yym1774
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1773) {
					} else {
						z.EncFallback(yy1773)
					}
				}
			}
			if yyr1763 || yy2arr1763 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1776 := z.EncBinary()
					_ = yym1776
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1777 := z.EncBinary()
					_ = yym1777
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1763 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1778 := z.DecBinary()
	_ = yym1778
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1779 := r.ReadMapStart()
			if yyl1779 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1779, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1779 := r.ReadArrayStart()
			if yyl1779 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1779, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1780Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1780Slc
	var yyhl1780 bool = l >= 0
	for yyj1780 := 0; ; yyj1780++ {
		if yyhl1780 {
			if yyj1780 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1780Slc = r.DecodeBytes(yys1780Slc, true, true)
		yys1780 := string(yys1780Slc)
		switch yys1780 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1783 := &x.ListMeta
				yym1784 := z.DecBinary()
				_ = yym1784
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1783) {
				} else {
					z.DecFallback(yyv1783, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1785 := &x.Items
				yym1786 := z.DecBinary()
				_ = yym1786
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1785), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1780)
		} // end switch yys1780
	} // end for yyj1780
	if !yyhl1780 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1787 int
	var yyb1787 bool
	var yyhl1787 bool = l >= 0
	yyj1787++
	if yyhl1787 {
		yyb1787 = yyj1787 > l
	} else {
		yyb1787 = r.CheckBreak()
	}
	if yyb1787 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1787++
	if yyhl1787 {
		yyb1787 = yyj1787 > l
	} else {
		yyb1787 = r.CheckBreak()
	}
	if yyb1787 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1787++
	if yyhl1787 {
		yyb1787 = yyj1787 > l
	} else {
		yyb1787 = r.CheckBreak()
	}
	if yyb1787 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1790 := &x.ListMeta
		yym1791 := z.DecBinary()
		_ = yym1791
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1790) {
		} else {
			z.DecFallback(yyv1790, false)
		}
	}
	yyj1787++
	if yyhl1787 {
		yyb1787 = yyj1787 > l
	} else {
		yyb1787 = r.CheckBreak()
	}
	if yyb1787 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1792 := &x.Items
		yym1793 := z.DecBinary()
		_ = yym1793
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1792), d)
		}
	}
	for {
		yyj1787++
		if yyhl1787 {
			yyb1787 = yyj1787 > l
		} else {
			yyb1787 = r.CheckBreak()
		}
		if yyb1787 {
			break
		}
		z.DecStructFieldNotFound(yyj1787-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1794 := z.EncBinary()
	_ = yym1794
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1795 := z.DecBinary()
	_ = yym1795
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1796 := z.EncBinary()
	_ = yym1796
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1797 := z.DecBinary()
	_ = yym1797
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1798 := z.EncBinary()
		_ = yym1798
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1799 := !z.EncBinary()
			yy2arr1799 := z.EncBasicHandle().StructToArray
			var yyq1799 [1]bool
			_, _, _ = yysep1799, yyq1799, yy2arr1799
			const yyr1799 bool = false
			yyq1799[0] = true
			if yyr1799 || yy2arr1799 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1799 int = 0
				for _, b := range yyq1799 {
					if b {
						yynn1799++
					}
				}
				r.EncodeMapStart(yynn1799)
			}
			if yyr1799 || yy2arr1799 {
				if yyq1799[0] {
					yy1801 := &x.LoadBalancer
					yy1801.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1799[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1802 := &x.LoadBalancer
					yy1802.CodecEncodeSelf(e)
				}
			}
			if yysep1799 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1803 := z.DecBinary()
	_ = yym1803
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1804 := r.ReadMapStart()
			if yyl1804 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1804, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1804 := r.ReadArrayStart()
			if yyl1804 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1804, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1805Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1805Slc
	var yyhl1805 bool = l >= 0
	for yyj1805 := 0; ; yyj1805++ {
		if yyhl1805 {
			if yyj1805 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1805Slc = r.DecodeBytes(yys1805Slc, true, true)
		yys1805 := string(yys1805Slc)
		switch yys1805 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1806 := &x.LoadBalancer
				yyv1806.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1805)
		} // end switch yys1805
	} // end for yyj1805
	if !yyhl1805 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1807 int
	var yyb1807 bool
	var yyhl1807 bool = l >= 0
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1808 := &x.LoadBalancer
		yyv1808.CodecDecodeSelf(d)
	}
	for {
		yyj1807++
		if yyhl1807 {
			yyb1807 = yyj1807 > l
		} else {
			yyb1807 = r.CheckBreak()
		}
		if yyb1807 {
			break
		}
		z.DecStructFieldNotFound(yyj1807-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1809 := z.EncBinary()
		_ = yym1809
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1810 := !z.EncBinary()
			yy2arr1810 := z.EncBasicHandle().StructToArray
			var yyq1810 [1]bool
			_, _, _ = yysep1810, yyq1810, yy2arr1810
			const yyr1810 bool = false
			yyq1810[0] = len(x.Ingress) != 0
			if yyr1810 || yy2arr1810 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1810 int = 0
				for _, b := range yyq1810 {
					if b {
						yynn1810++
					}
				}
				r.EncodeMapStart(yynn1810)
			}
			if yyr1810 || yy2arr1810 {
				if yyq1810[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1812 := z.EncBinary()
						_ = yym1812
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1810[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1813 := z.EncBinary()
						_ = yym1813
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1810 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1814 := z.DecBinary()
	_ = yym1814
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1815 := r.ReadMapStart()
			if yyl1815 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1815, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1815 := r.ReadArrayStart()
			if yyl1815 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1815, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1816Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1816Slc
	var yyhl1816 bool = l >= 0
	for yyj1816 := 0; ; yyj1816++ {
		if yyhl1816 {
			if yyj1816 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1816Slc = r.DecodeBytes(yys1816Slc, true, true)
		yys1816 := string(yys1816Slc)
		switch yys1816 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1817 := &x.Ingress
				yym1818 := z.DecBinary()
				_ = yym1818
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1817), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1816)
		} // end switch yys1816
	} // end for yyj1816
	if !yyhl1816 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1819 int
	var yyb1819 bool
	var yyhl1819 bool = l >= 0
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1820 := &x.Ingress
		yym1821 := z.DecBinary()
		_ = yym1821
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1820), d)
		}
	}
	for {
		yyj1819++
		if yyhl1819 {
			yyb1819 = yyj1819 > l
		} else {
			yyb1819 = r.CheckBreak()
		}
		if yyb1819 {
			break
		}
		z.DecStructFieldNotFound(yyj1819-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1822 := z.EncBinary()
		_ = yym1822
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1823 := !z.EncBinary()
			yy2arr1823 := z.EncBasicHandle().StructToArray
			var yyq1823 [2]bool
			_, _, _ = yysep1823, yyq1823, yy2arr1823
			const yyr1823 bool = false
			yyq1823[0] = x.IP != ""
			yyq1823[1] = x.Hostname != ""
			if yyr1823 || yy2arr1823 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1823 int = 0
				for _, b := range yyq1823 {
					if b {
						yynn1823++
					}
				}
				r.EncodeMapStart(yynn1823)
			}
			if yyr1823 || yy2arr1823 {
				if yyq1823[0] {
					yym1825 := z.EncBinary()
					_ = yym1825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1823[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1826 := z.EncBinary()
					_ = yym1826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1823 || yy2arr1823 {
				if yyq1823[1] {
					yym1828 := z.EncBinary()
					_ = yym1828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1823[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1829 := z.EncBinary()
					_ = yym1829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1823 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1830 := z.DecBinary()
	_ = yym1830
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1831 := r.ReadMapStart()
			if yyl1831 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1831, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1831 := r.ReadArrayStart()
			if yyl1831 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1831, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1832Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1832Slc
	var yyhl1832 bool = l >= 0
	for yyj1832 := 0; ; yyj1832++ {
		if yyhl1832 {
			if yyj1832 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1832Slc = r.DecodeBytes(yys1832Slc, true, true)
		yys1832 := string(yys1832Slc)
		switch yys1832 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1832)
		} // end switch yys1832
	} // end for yyj1832
	if !yyhl1832 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1835 int
	var yyb1835 bool
	var yyhl1835 bool = l >= 0
	yyj1835++
	if yyhl1835 {
		yyb1835 = yyj1835 > l
	} else {
		yyb1835 = r.CheckBreak()
	}
	if yyb1835 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1835++
	if yyhl1835 {
		yyb1835 = yyj1835 > l
	} else {
		yyb1835 = r.CheckBreak()
	}
	if yyb1835 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1835++
		if yyhl1835 {
			yyb1835 = yyj1835 > l
		} else {
			yyb1835 = r.CheckBreak()
		}
		if yyb1835 {
			break
		}
		z.DecStructFieldNotFound(yyj1835-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1838 := z.EncBinary()
		_ = yym1838
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1839 := !z.EncBinary()
			yy2arr1839 := z.EncBasicHandle().StructToArray
			var yyq1839 [8]bool
			_, _, _ = yysep1839, yyq1839, yy2arr1839
			const yyr1839 bool = false
			yyq1839[1] = len(x.Selector) != 0
			yyq1839[2] = x.ClusterIP != ""
			yyq1839[3] = x.Type != ""
			yyq1839[4] = len(x.ExternalIPs) != 0
			yyq1839[5] = len(x.DeprecatedPublicIPs) != 0
			yyq1839[6] = x.SessionAffinity != ""
			yyq1839[7] = x.LoadBalancerIP != ""
			if yyr1839 || yy2arr1839 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1839 int = 1
				for _, b := range yyq1839 {
					if b {
						yynn1839++
					}
				}
				r.EncodeMapStart(yynn1839)
			}
			if yyr1839 || yy2arr1839 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1841 := z.EncBinary()
					_ = yym1841
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1842 := z.EncBinary()
					_ = yym1842
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1839 || yy2arr1839 {
				if yyq1839[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1844 := z.EncBinary()
						_ = yym1844
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1839[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1845 := z.EncBinary()
						_ = yym1845
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1839 || yy2arr1839 {
				if yyq1839[2] {
					yym1847 := z.EncBinary()
					_ = yym1847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1839[2] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1839 || yy2arr1839 {
				if yyq1839[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1839[3] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1839 || yy2arr1839 {
				if yyq1839[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1851 := z.EncBinary()
						_ = yym1851
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1839[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1852 := z.EncBinary()
						_ = yym1852
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1839 || yy2arr1839 {
				if yyq1839[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1854 := z.EncBinary()
						_ = yym1854
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1839[5] {
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1855 := z.EncBinary()
						_ = yym1855
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr1839 || yy2arr1839 {
				if yyq1839[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1839[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1839 || yy2arr1839 {
				if yyq1839[7] {
					yym1858 := z.EncBinary()
					_ = yym1858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1839[7] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1859 := z.EncBinary()
					_ = yym1859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yysep1839 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1860 := z.DecBinary()
	_ = yym1860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1861 := r.ReadMapStart()
			if yyl1861 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1861, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1861 := r.ReadArrayStart()
			if yyl1861 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1861, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1862Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1862Slc
	var yyhl1862 bool = l >= 0
	for yyj1862 := 0; ; yyj1862++ {
		if yyhl1862 {
			if yyj1862 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1862Slc = r.DecodeBytes(yys1862Slc, true, true)
		yys1862 := string(yys1862Slc)
		switch yys1862 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1863 := &x.Ports
				yym1864 := z.DecBinary()
				_ = yym1864
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1863), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1865 := &x.Selector
				yym1866 := z.DecBinary()
				_ = yym1866
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1865, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1869 := &x.ExternalIPs
				yym1870 := z.DecBinary()
				_ = yym1870
				if false {
				} else {
					z.F.DecSliceStringX(yyv1869, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv1871 := &x.DeprecatedPublicIPs
				yym1872 := z.DecBinary()
				_ = yym1872
				if false {
				} else {
					z.F.DecSliceStringX(yyv1871, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1862)
		} // end switch yys1862
	} // end for yyj1862
	if !yyhl1862 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1875 int
	var yyb1875 bool
	var yyhl1875 bool = l >= 0
	yyj1875++
	if yyhl1875 {
		yyb1875 = yyj1875 > l
	} else {
		yyb1875 = r.CheckBreak()
	}
	if yyb1875 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1876 := &x.Ports
		yym1877 := z.DecBinary()
		_ = yym1877
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1876), d)
		}
	}
	yyj1875++
	if yyhl1875 {
		yyb1875 = yyj1875 > l
	} else {
		yyb1875 = r.CheckBreak()
	}
	if yyb1875 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1878 := &x.Selector
		yym1879 := z.DecBinary()
		_ = yym1879
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1878, false, d)
		}
	}
	yyj1875++
	if yyhl1875 {
		yyb1875 = yyj1875 > l
	} else {
		yyb1875 = r.CheckBreak()
	}
	if yyb1875 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1875++
	if yyhl1875 {
		yyb1875 = yyj1875 > l
	} else {
		yyb1875 = r.CheckBreak()
	}
	if yyb1875 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1875++
	if yyhl1875 {
		yyb1875 = yyj1875 > l
	} else {
		yyb1875 = r.CheckBreak()
	}
	if yyb1875 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1882 := &x.ExternalIPs
		yym1883 := z.DecBinary()
		_ = yym1883
		if false {
		} else {
			z.F.DecSliceStringX(yyv1882, false, d)
		}
	}
	yyj1875++
	if yyhl1875 {
		yyb1875 = yyj1875 > l
	} else {
		yyb1875 = r.CheckBreak()
	}
	if yyb1875 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv1884 := &x.DeprecatedPublicIPs
		yym1885 := z.DecBinary()
		_ = yym1885
		if false {
		} else {
			z.F.DecSliceStringX(yyv1884, false, d)
		}
	}
	yyj1875++
	if yyhl1875 {
		yyb1875 = yyj1875 > l
	} else {
		yyb1875 = r.CheckBreak()
	}
	if yyb1875 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj1875++
	if yyhl1875 {
		yyb1875 = yyj1875 > l
	} else {
		yyb1875 = r.CheckBreak()
	}
	if yyb1875 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj1875++
		if yyhl1875 {
			yyb1875 = yyj1875 > l
		} else {
			yyb1875 = r.CheckBreak()
		}
		if yyb1875 {
			break
		}
		z.DecStructFieldNotFound(yyj1875-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1888 := z.EncBinary()
		_ = yym1888
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1889 := !z.EncBinary()
			yy2arr1889 := z.EncBasicHandle().StructToArray
			var yyq1889 [5]bool
			_, _, _ = yysep1889, yyq1889, yy2arr1889
			const yyr1889 bool = false
			yyq1889[0] = x.Name != ""
			yyq1889[1] = x.Protocol != ""
			yyq1889[3] = true
			yyq1889[4] = x.NodePort != 0
			if yyr1889 || yy2arr1889 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1889 int = 1
				for _, b := range yyq1889 {
					if b {
						yynn1889++
					}
				}
				r.EncodeMapStart(yynn1889)
			}
			if yyr1889 || yy2arr1889 {
				if yyq1889[0] {
					yym1891 := z.EncBinary()
					_ = yym1891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1889[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym1892 := z.EncBinary()
					_ = yym1892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1889 || yy2arr1889 {
				if yyq1889[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1889[1] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1889 || yy2arr1889 {
				yym1895 := z.EncBinary()
				_ = yym1895
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym1896 := z.EncBinary()
				_ = yym1896
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1889 || yy2arr1889 {
				if yyq1889[3] {
					yy1898 := &x.TargetPort
					yym1899 := z.EncBinary()
					_ = yym1899
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1898) {
					} else if !yym1899 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1898)
					} else {
						z.EncFallback(yy1898)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1889[3] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					yy1900 := &x.TargetPort
					yym1901 := z.EncBinary()
					_ = yym1901
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1900) {
					} else if !yym1901 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1900)
					} else {
						z.EncFallback(yy1900)
					}
				}
			}
			if yyr1889 || yy2arr1889 {
				if yyq1889[4] {
					yym1903 := z.EncBinary()
					_ = yym1903
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1889[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					yym1904 := z.EncBinary()
					_ = yym1904
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yysep1889 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1905 := z.DecBinary()
	_ = yym1905
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1906 := r.ReadMapStart()
			if yyl1906 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1906, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1906 := r.ReadArrayStart()
			if yyl1906 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1906, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1907Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1907Slc
	var yyhl1907 bool = l >= 0
	for yyj1907 := 0; ; yyj1907++ {
		if yyhl1907 {
			if yyj1907 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1907Slc = r.DecodeBytes(yys1907Slc, true, true)
		yys1907 := string(yys1907Slc)
		switch yys1907 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_util.IntOrString{}
			} else {
				yyv1911 := &x.TargetPort
				yym1912 := z.DecBinary()
				_ = yym1912
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1911) {
				} else if !yym1912 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1911)
				} else {
					z.DecFallback(yyv1911, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1907)
		} // end switch yys1907
	} // end for yyj1907
	if !yyhl1907 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1914 int
	var yyb1914 bool
	var yyhl1914 bool = l >= 0
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_util.IntOrString{}
	} else {
		yyv1918 := &x.TargetPort
		yym1919 := z.DecBinary()
		_ = yym1919
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1918) {
		} else if !yym1919 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1918)
		} else {
			z.DecFallback(yyv1918, false)
		}
	}
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1914++
		if yyhl1914 {
			yyb1914 = yyj1914 > l
		} else {
			yyb1914 = r.CheckBreak()
		}
		if yyb1914 {
			break
		}
		z.DecStructFieldNotFound(yyj1914-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1921 := z.EncBinary()
		_ = yym1921
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1922 := !z.EncBinary()
			yy2arr1922 := z.EncBasicHandle().StructToArray
			var yyq1922 [5]bool
			_, _, _ = yysep1922, yyq1922, yy2arr1922
			const yyr1922 bool = false
			yyq1922[0] = x.Kind != ""
			yyq1922[1] = x.APIVersion != ""
			yyq1922[2] = true
			yyq1922[3] = true
			yyq1922[4] = true
			if yyr1922 || yy2arr1922 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1922 int = 0
				for _, b := range yyq1922 {
					if b {
						yynn1922++
					}
				}
				r.EncodeMapStart(yynn1922)
			}
			if yyr1922 || yy2arr1922 {
				if yyq1922[0] {
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1922[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1925 := z.EncBinary()
					_ = yym1925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1922 || yy2arr1922 {
				if yyq1922[1] {
					yym1927 := z.EncBinary()
					_ = yym1927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1922[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1928 := z.EncBinary()
					_ = yym1928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1922 || yy2arr1922 {
				if yyq1922[2] {
					yy1930 := &x.ObjectMeta
					yy1930.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1922[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1931 := &x.ObjectMeta
					yy1931.CodecEncodeSelf(e)
				}
			}
			if yyr1922 || yy2arr1922 {
				if yyq1922[3] {
					yy1933 := &x.Spec
					yy1933.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1922[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1934 := &x.Spec
					yy1934.CodecEncodeSelf(e)
				}
			}
			if yyr1922 || yy2arr1922 {
				if yyq1922[4] {
					yy1936 := &x.Status
					yy1936.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1922[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1937 := &x.Status
					yy1937.CodecEncodeSelf(e)
				}
			}
			if yysep1922 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1938 := z.DecBinary()
	_ = yym1938
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1939 := r.ReadMapStart()
			if yyl1939 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1939, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1939 := r.ReadArrayStart()
			if yyl1939 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1939, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1940Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1940Slc
	var yyhl1940 bool = l >= 0
	for yyj1940 := 0; ; yyj1940++ {
		if yyhl1940 {
			if yyj1940 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1940Slc = r.DecodeBytes(yys1940Slc, true, true)
		yys1940 := string(yys1940Slc)
		switch yys1940 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1943 := &x.ObjectMeta
				yyv1943.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv1944 := &x.Spec
				yyv1944.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv1945 := &x.Status
				yyv1945.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1940)
		} // end switch yys1940
	} // end for yyj1940
	if !yyhl1940 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1946 int
	var yyb1946 bool
	var yyhl1946 bool = l >= 0
	yyj1946++
	if yyhl1946 {
		yyb1946 = yyj1946 > l
	} else {
		yyb1946 = r.CheckBreak()
	}
	if yyb1946 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1946++
	if yyhl1946 {
		yyb1946 = yyj1946 > l
	} else {
		yyb1946 = r.CheckBreak()
	}
	if yyb1946 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1946++
	if yyhl1946 {
		yyb1946 = yyj1946 > l
	} else {
		yyb1946 = r.CheckBreak()
	}
	if yyb1946 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1949 := &x.ObjectMeta
		yyv1949.CodecDecodeSelf(d)
	}
	yyj1946++
	if yyhl1946 {
		yyb1946 = yyj1946 > l
	} else {
		yyb1946 = r.CheckBreak()
	}
	if yyb1946 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv1950 := &x.Spec
		yyv1950.CodecDecodeSelf(d)
	}
	yyj1946++
	if yyhl1946 {
		yyb1946 = yyj1946 > l
	} else {
		yyb1946 = r.CheckBreak()
	}
	if yyb1946 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv1951 := &x.Status
		yyv1951.CodecDecodeSelf(d)
	}
	for {
		yyj1946++
		if yyhl1946 {
			yyb1946 = yyj1946 > l
		} else {
			yyb1946 = r.CheckBreak()
		}
		if yyb1946 {
			break
		}
		z.DecStructFieldNotFound(yyj1946-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1952 := z.EncBinary()
		_ = yym1952
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1953 := !z.EncBinary()
			yy2arr1953 := z.EncBasicHandle().StructToArray
			var yyq1953 [4]bool
			_, _, _ = yysep1953, yyq1953, yy2arr1953
			const yyr1953 bool = false
			yyq1953[0] = x.Kind != ""
			yyq1953[1] = x.APIVersion != ""
			yyq1953[2] = true
			if yyr1953 || yy2arr1953 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1953 int = 1
				for _, b := range yyq1953 {
					if b {
						yynn1953++
					}
				}
				r.EncodeMapStart(yynn1953)
			}
			if yyr1953 || yy2arr1953 {
				if yyq1953[0] {
					yym1955 := z.EncBinary()
					_ = yym1955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1953[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1956 := z.EncBinary()
					_ = yym1956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1953 || yy2arr1953 {
				if yyq1953[1] {
					yym1958 := z.EncBinary()
					_ = yym1958
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1953[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1959 := z.EncBinary()
					_ = yym1959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1953 || yy2arr1953 {
				if yyq1953[2] {
					yy1961 := &x.ListMeta
					yym1962 := z.EncBinary()
					_ = yym1962
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1961) {
					} else {
						z.EncFallback(yy1961)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1953[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1963 := &x.ListMeta
					yym1964 := z.EncBinary()
					_ = yym1964
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1963) {
					} else {
						z.EncFallback(yy1963)
					}
				}
			}
			if yyr1953 || yy2arr1953 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1966 := z.EncBinary()
					_ = yym1966
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1967 := z.EncBinary()
					_ = yym1967
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1953 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1968 := z.DecBinary()
	_ = yym1968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1969 := r.ReadMapStart()
			if yyl1969 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1969, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1969 := r.ReadArrayStart()
			if yyl1969 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1969, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1970Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1970Slc
	var yyhl1970 bool = l >= 0
	for yyj1970 := 0; ; yyj1970++ {
		if yyhl1970 {
			if yyj1970 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1970Slc = r.DecodeBytes(yys1970Slc, true, true)
		yys1970 := string(yys1970Slc)
		switch yys1970 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1973 := &x.ListMeta
				yym1974 := z.DecBinary()
				_ = yym1974
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1973) {
				} else {
					z.DecFallback(yyv1973, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1975 := &x.Items
				yym1976 := z.DecBinary()
				_ = yym1976
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1975), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1970)
		} // end switch yys1970
	} // end for yyj1970
	if !yyhl1970 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1977 int
	var yyb1977 bool
	var yyhl1977 bool = l >= 0
	yyj1977++
	if yyhl1977 {
		yyb1977 = yyj1977 > l
	} else {
		yyb1977 = r.CheckBreak()
	}
	if yyb1977 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1977++
	if yyhl1977 {
		yyb1977 = yyj1977 > l
	} else {
		yyb1977 = r.CheckBreak()
	}
	if yyb1977 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1977++
	if yyhl1977 {
		yyb1977 = yyj1977 > l
	} else {
		yyb1977 = r.CheckBreak()
	}
	if yyb1977 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1980 := &x.ListMeta
		yym1981 := z.DecBinary()
		_ = yym1981
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1980) {
		} else {
			z.DecFallback(yyv1980, false)
		}
	}
	yyj1977++
	if yyhl1977 {
		yyb1977 = yyj1977 > l
	} else {
		yyb1977 = r.CheckBreak()
	}
	if yyb1977 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1982 := &x.Items
		yym1983 := z.DecBinary()
		_ = yym1983
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1982), d)
		}
	}
	for {
		yyj1977++
		if yyhl1977 {
			yyb1977 = yyj1977 > l
		} else {
			yyb1977 = r.CheckBreak()
		}
		if yyb1977 {
			break
		}
		z.DecStructFieldNotFound(yyj1977-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1984 := z.EncBinary()
		_ = yym1984
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1985 := !z.EncBinary()
			yy2arr1985 := z.EncBasicHandle().StructToArray
			var yyq1985 [5]bool
			_, _, _ = yysep1985, yyq1985, yy2arr1985
			const yyr1985 bool = false
			yyq1985[0] = x.Kind != ""
			yyq1985[1] = x.APIVersion != ""
			yyq1985[2] = true
			yyq1985[3] = len(x.Secrets) != 0
			yyq1985[4] = len(x.ImagePullSecrets) != 0
			if yyr1985 || yy2arr1985 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1985 int = 0
				for _, b := range yyq1985 {
					if b {
						yynn1985++
					}
				}
				r.EncodeMapStart(yynn1985)
			}
			if yyr1985 || yy2arr1985 {
				if yyq1985[0] {
					yym1987 := z.EncBinary()
					_ = yym1987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1985[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1988 := z.EncBinary()
					_ = yym1988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				if yyq1985[1] {
					yym1990 := z.EncBinary()
					_ = yym1990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1985[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1991 := z.EncBinary()
					_ = yym1991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				if yyq1985[2] {
					yy1993 := &x.ObjectMeta
					yy1993.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1985[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1994 := &x.ObjectMeta
					yy1994.CodecEncodeSelf(e)
				}
			}
			if yyr1985 || yy2arr1985 {
				if yyq1985[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym1996 := z.EncBinary()
						_ = yym1996
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1985[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym1997 := z.EncBinary()
						_ = yym1997
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				if yyq1985[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1999 := z.EncBinary()
						_ = yym1999
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1985[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2000 := z.EncBinary()
						_ = yym2000
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1985 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2001 := z.DecBinary()
	_ = yym2001
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2002 := r.ReadMapStart()
			if yyl2002 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2002, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2002 := r.ReadArrayStart()
			if yyl2002 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2002, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2003Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2003Slc
	var yyhl2003 bool = l >= 0
	for yyj2003 := 0; ; yyj2003++ {
		if yyhl2003 {
			if yyj2003 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2003Slc = r.DecodeBytes(yys2003Slc, true, true)
		yys2003 := string(yys2003Slc)
		switch yys2003 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2006 := &x.ObjectMeta
				yyv2006.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2007 := &x.Secrets
				yym2008 := z.DecBinary()
				_ = yym2008
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2007), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2009 := &x.ImagePullSecrets
				yym2010 := z.DecBinary()
				_ = yym2010
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2009), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2003)
		} // end switch yys2003
	} // end for yyj2003
	if !yyhl2003 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2011 int
	var yyb2011 bool
	var yyhl2011 bool = l >= 0
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2014 := &x.ObjectMeta
		yyv2014.CodecDecodeSelf(d)
	}
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2015 := &x.Secrets
		yym2016 := z.DecBinary()
		_ = yym2016
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2015), d)
		}
	}
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2017 := &x.ImagePullSecrets
		yym2018 := z.DecBinary()
		_ = yym2018
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2017), d)
		}
	}
	for {
		yyj2011++
		if yyhl2011 {
			yyb2011 = yyj2011 > l
		} else {
			yyb2011 = r.CheckBreak()
		}
		if yyb2011 {
			break
		}
		z.DecStructFieldNotFound(yyj2011-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2019 := z.EncBinary()
		_ = yym2019
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2020 := !z.EncBinary()
			yy2arr2020 := z.EncBasicHandle().StructToArray
			var yyq2020 [4]bool
			_, _, _ = yysep2020, yyq2020, yy2arr2020
			const yyr2020 bool = false
			yyq2020[0] = x.Kind != ""
			yyq2020[1] = x.APIVersion != ""
			yyq2020[2] = true
			if yyr2020 || yy2arr2020 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2020 int = 1
				for _, b := range yyq2020 {
					if b {
						yynn2020++
					}
				}
				r.EncodeMapStart(yynn2020)
			}
			if yyr2020 || yy2arr2020 {
				if yyq2020[0] {
					yym2022 := z.EncBinary()
					_ = yym2022
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2020[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2023 := z.EncBinary()
					_ = yym2023
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2020 || yy2arr2020 {
				if yyq2020[1] {
					yym2025 := z.EncBinary()
					_ = yym2025
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2020[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2026 := z.EncBinary()
					_ = yym2026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2020 || yy2arr2020 {
				if yyq2020[2] {
					yy2028 := &x.ListMeta
					yym2029 := z.EncBinary()
					_ = yym2029
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2028) {
					} else {
						z.EncFallback(yy2028)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2020[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2030 := &x.ListMeta
					yym2031 := z.EncBinary()
					_ = yym2031
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2030) {
					} else {
						z.EncFallback(yy2030)
					}
				}
			}
			if yyr2020 || yy2arr2020 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2033 := z.EncBinary()
					_ = yym2033
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep2020 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2035 := z.DecBinary()
	_ = yym2035
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2036 := r.ReadMapStart()
			if yyl2036 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2036, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2036 := r.ReadArrayStart()
			if yyl2036 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2036, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2037Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2037Slc
	var yyhl2037 bool = l >= 0
	for yyj2037 := 0; ; yyj2037++ {
		if yyhl2037 {
			if yyj2037 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2037Slc = r.DecodeBytes(yys2037Slc, true, true)
		yys2037 := string(yys2037Slc)
		switch yys2037 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2040 := &x.ListMeta
				yym2041 := z.DecBinary()
				_ = yym2041
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2040) {
				} else {
					z.DecFallback(yyv2040, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2042 := &x.Items
				yym2043 := z.DecBinary()
				_ = yym2043
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2042), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2037)
		} // end switch yys2037
	} // end for yyj2037
	if !yyhl2037 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2044 int
	var yyb2044 bool
	var yyhl2044 bool = l >= 0
	yyj2044++
	if yyhl2044 {
		yyb2044 = yyj2044 > l
	} else {
		yyb2044 = r.CheckBreak()
	}
	if yyb2044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2044++
	if yyhl2044 {
		yyb2044 = yyj2044 > l
	} else {
		yyb2044 = r.CheckBreak()
	}
	if yyb2044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2044++
	if yyhl2044 {
		yyb2044 = yyj2044 > l
	} else {
		yyb2044 = r.CheckBreak()
	}
	if yyb2044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2047 := &x.ListMeta
		yym2048 := z.DecBinary()
		_ = yym2048
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2047) {
		} else {
			z.DecFallback(yyv2047, false)
		}
	}
	yyj2044++
	if yyhl2044 {
		yyb2044 = yyj2044 > l
	} else {
		yyb2044 = r.CheckBreak()
	}
	if yyb2044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2049 := &x.Items
		yym2050 := z.DecBinary()
		_ = yym2050
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2049), d)
		}
	}
	for {
		yyj2044++
		if yyhl2044 {
			yyb2044 = yyj2044 > l
		} else {
			yyb2044 = r.CheckBreak()
		}
		if yyb2044 {
			break
		}
		z.DecStructFieldNotFound(yyj2044-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2051 := z.EncBinary()
		_ = yym2051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2052 := !z.EncBinary()
			yy2arr2052 := z.EncBasicHandle().StructToArray
			var yyq2052 [4]bool
			_, _, _ = yysep2052, yyq2052, yy2arr2052
			const yyr2052 bool = false
			yyq2052[0] = x.Kind != ""
			yyq2052[1] = x.APIVersion != ""
			yyq2052[2] = true
			if yyr2052 || yy2arr2052 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2052 int = 1
				for _, b := range yyq2052 {
					if b {
						yynn2052++
					}
				}
				r.EncodeMapStart(yynn2052)
			}
			if yyr2052 || yy2arr2052 {
				if yyq2052[0] {
					yym2054 := z.EncBinary()
					_ = yym2054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2052[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2055 := z.EncBinary()
					_ = yym2055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2052 || yy2arr2052 {
				if yyq2052[1] {
					yym2057 := z.EncBinary()
					_ = yym2057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2052[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2058 := z.EncBinary()
					_ = yym2058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2052 || yy2arr2052 {
				if yyq2052[2] {
					yy2060 := &x.ObjectMeta
					yy2060.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2052[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2061 := &x.ObjectMeta
					yy2061.CodecEncodeSelf(e)
				}
			}
			if yyr2052 || yy2arr2052 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2063 := z.EncBinary()
					_ = yym2063
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2064 := z.EncBinary()
					_ = yym2064
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2052 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2065 := z.DecBinary()
	_ = yym2065
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2066 := r.ReadMapStart()
			if yyl2066 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2066, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2066 := r.ReadArrayStart()
			if yyl2066 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2066, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2067Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2067Slc
	var yyhl2067 bool = l >= 0
	for yyj2067 := 0; ; yyj2067++ {
		if yyhl2067 {
			if yyj2067 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2067Slc = r.DecodeBytes(yys2067Slc, true, true)
		yys2067 := string(yys2067Slc)
		switch yys2067 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2070 := &x.ObjectMeta
				yyv2070.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2071 := &x.Subsets
				yym2072 := z.DecBinary()
				_ = yym2072
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2071), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2067)
		} // end switch yys2067
	} // end for yyj2067
	if !yyhl2067 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2073 int
	var yyb2073 bool
	var yyhl2073 bool = l >= 0
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2076 := &x.ObjectMeta
		yyv2076.CodecDecodeSelf(d)
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2077 := &x.Subsets
		yym2078 := z.DecBinary()
		_ = yym2078
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2077), d)
		}
	}
	for {
		yyj2073++
		if yyhl2073 {
			yyb2073 = yyj2073 > l
		} else {
			yyb2073 = r.CheckBreak()
		}
		if yyb2073 {
			break
		}
		z.DecStructFieldNotFound(yyj2073-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2079 := z.EncBinary()
		_ = yym2079
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2080 := !z.EncBinary()
			yy2arr2080 := z.EncBasicHandle().StructToArray
			var yyq2080 [3]bool
			_, _, _ = yysep2080, yyq2080, yy2arr2080
			const yyr2080 bool = false
			yyq2080[0] = len(x.Addresses) != 0
			yyq2080[1] = len(x.NotReadyAddresses) != 0
			yyq2080[2] = len(x.Ports) != 0
			if yyr2080 || yy2arr2080 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2080 int = 0
				for _, b := range yyq2080 {
					if b {
						yynn2080++
					}
				}
				r.EncodeMapStart(yynn2080)
			}
			if yyr2080 || yy2arr2080 {
				if yyq2080[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2082 := z.EncBinary()
						_ = yym2082
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2080[0] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2083 := z.EncBinary()
						_ = yym2083
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2080 || yy2arr2080 {
				if yyq2080[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2085 := z.EncBinary()
						_ = yym2085
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2080[1] {
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2086 := z.EncBinary()
						_ = yym2086
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2080 || yy2arr2080 {
				if yyq2080[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2088 := z.EncBinary()
						_ = yym2088
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2080[2] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2089 := z.EncBinary()
						_ = yym2089
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yysep2080 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2090 := z.DecBinary()
	_ = yym2090
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2091 := r.ReadMapStart()
			if yyl2091 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2091, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2091 := r.ReadArrayStart()
			if yyl2091 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2091, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2092Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2092Slc
	var yyhl2092 bool = l >= 0
	for yyj2092 := 0; ; yyj2092++ {
		if yyhl2092 {
			if yyj2092 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2092Slc = r.DecodeBytes(yys2092Slc, true, true)
		yys2092 := string(yys2092Slc)
		switch yys2092 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2093 := &x.Addresses
				yym2094 := z.DecBinary()
				_ = yym2094
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2093), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2095 := &x.NotReadyAddresses
				yym2096 := z.DecBinary()
				_ = yym2096
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2095), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2097 := &x.Ports
				yym2098 := z.DecBinary()
				_ = yym2098
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2097), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2092)
		} // end switch yys2092
	} // end for yyj2092
	if !yyhl2092 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2099 int
	var yyb2099 bool
	var yyhl2099 bool = l >= 0
	yyj2099++
	if yyhl2099 {
		yyb2099 = yyj2099 > l
	} else {
		yyb2099 = r.CheckBreak()
	}
	if yyb2099 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2100 := &x.Addresses
		yym2101 := z.DecBinary()
		_ = yym2101
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2100), d)
		}
	}
	yyj2099++
	if yyhl2099 {
		yyb2099 = yyj2099 > l
	} else {
		yyb2099 = r.CheckBreak()
	}
	if yyb2099 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2102 := &x.NotReadyAddresses
		yym2103 := z.DecBinary()
		_ = yym2103
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2102), d)
		}
	}
	yyj2099++
	if yyhl2099 {
		yyb2099 = yyj2099 > l
	} else {
		yyb2099 = r.CheckBreak()
	}
	if yyb2099 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2104 := &x.Ports
		yym2105 := z.DecBinary()
		_ = yym2105
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2104), d)
		}
	}
	for {
		yyj2099++
		if yyhl2099 {
			yyb2099 = yyj2099 > l
		} else {
			yyb2099 = r.CheckBreak()
		}
		if yyb2099 {
			break
		}
		z.DecStructFieldNotFound(yyj2099-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2106 := z.EncBinary()
		_ = yym2106
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2107 := !z.EncBinary()
			yy2arr2107 := z.EncBasicHandle().StructToArray
			var yyq2107 [2]bool
			_, _, _ = yysep2107, yyq2107, yy2arr2107
			const yyr2107 bool = false
			yyq2107[1] = x.TargetRef != nil
			if yyr2107 || yy2arr2107 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2107 int = 1
				for _, b := range yyq2107 {
					if b {
						yynn2107++
					}
				}
				r.EncodeMapStart(yynn2107)
			}
			if yyr2107 || yy2arr2107 {
				yym2109 := z.EncBinary()
				_ = yym2109
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				yym2110 := z.EncBinary()
				_ = yym2110
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2107 || yy2arr2107 {
				if yyq2107[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2107[1] {
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2107 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2112 := z.DecBinary()
	_ = yym2112
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2113 := r.ReadMapStart()
			if yyl2113 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2113, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2113 := r.ReadArrayStart()
			if yyl2113 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2113, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2114Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2114Slc
	var yyhl2114 bool = l >= 0
	for yyj2114 := 0; ; yyj2114++ {
		if yyhl2114 {
			if yyj2114 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2114Slc = r.DecodeBytes(yys2114Slc, true, true)
		yys2114 := string(yys2114Slc)
		switch yys2114 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2114)
		} // end switch yys2114
	} // end for yyj2114
	if !yyhl2114 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2117 int
	var yyb2117 bool
	var yyhl2117 bool = l >= 0
	yyj2117++
	if yyhl2117 {
		yyb2117 = yyj2117 > l
	} else {
		yyb2117 = r.CheckBreak()
	}
	if yyb2117 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2117++
	if yyhl2117 {
		yyb2117 = yyj2117 > l
	} else {
		yyb2117 = r.CheckBreak()
	}
	if yyb2117 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2117++
		if yyhl2117 {
			yyb2117 = yyj2117 > l
		} else {
			yyb2117 = r.CheckBreak()
		}
		if yyb2117 {
			break
		}
		z.DecStructFieldNotFound(yyj2117-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2120 := z.EncBinary()
		_ = yym2120
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2121 := !z.EncBinary()
			yy2arr2121 := z.EncBasicHandle().StructToArray
			var yyq2121 [3]bool
			_, _, _ = yysep2121, yyq2121, yy2arr2121
			const yyr2121 bool = false
			yyq2121[0] = x.Name != ""
			yyq2121[2] = x.Protocol != ""
			if yyr2121 || yy2arr2121 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2121 int = 1
				for _, b := range yyq2121 {
					if b {
						yynn2121++
					}
				}
				r.EncodeMapStart(yynn2121)
			}
			if yyr2121 || yy2arr2121 {
				if yyq2121[0] {
					yym2123 := z.EncBinary()
					_ = yym2123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2121[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2124 := z.EncBinary()
					_ = yym2124
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2121 || yy2arr2121 {
				yym2126 := z.EncBinary()
				_ = yym2126
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym2127 := z.EncBinary()
				_ = yym2127
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2121 || yy2arr2121 {
				if yyq2121[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2121[2] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yysep2121 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2129 := z.DecBinary()
	_ = yym2129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2130 := r.ReadMapStart()
			if yyl2130 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2130, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2130 := r.ReadArrayStart()
			if yyl2130 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2131Slc
	var yyhl2131 bool = l >= 0
	for yyj2131 := 0; ; yyj2131++ {
		if yyhl2131 {
			if yyj2131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2131Slc = r.DecodeBytes(yys2131Slc, true, true)
		yys2131 := string(yys2131Slc)
		switch yys2131 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2131)
		} // end switch yys2131
	} // end for yyj2131
	if !yyhl2131 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2135 int
	var yyb2135 bool
	var yyhl2135 bool = l >= 0
	yyj2135++
	if yyhl2135 {
		yyb2135 = yyj2135 > l
	} else {
		yyb2135 = r.CheckBreak()
	}
	if yyb2135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2135++
	if yyhl2135 {
		yyb2135 = yyj2135 > l
	} else {
		yyb2135 = r.CheckBreak()
	}
	if yyb2135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2135++
	if yyhl2135 {
		yyb2135 = yyj2135 > l
	} else {
		yyb2135 = r.CheckBreak()
	}
	if yyb2135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2135++
		if yyhl2135 {
			yyb2135 = yyj2135 > l
		} else {
			yyb2135 = r.CheckBreak()
		}
		if yyb2135 {
			break
		}
		z.DecStructFieldNotFound(yyj2135-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2139 := z.EncBinary()
		_ = yym2139
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2140 := !z.EncBinary()
			yy2arr2140 := z.EncBasicHandle().StructToArray
			var yyq2140 [4]bool
			_, _, _ = yysep2140, yyq2140, yy2arr2140
			const yyr2140 bool = false
			yyq2140[0] = x.Kind != ""
			yyq2140[1] = x.APIVersion != ""
			yyq2140[2] = true
			if yyr2140 || yy2arr2140 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2140 int = 1
				for _, b := range yyq2140 {
					if b {
						yynn2140++
					}
				}
				r.EncodeMapStart(yynn2140)
			}
			if yyr2140 || yy2arr2140 {
				if yyq2140[0] {
					yym2142 := z.EncBinary()
					_ = yym2142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2140[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2143 := z.EncBinary()
					_ = yym2143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2140 || yy2arr2140 {
				if yyq2140[1] {
					yym2145 := z.EncBinary()
					_ = yym2145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2140[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2146 := z.EncBinary()
					_ = yym2146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2140 || yy2arr2140 {
				if yyq2140[2] {
					yy2148 := &x.ListMeta
					yym2149 := z.EncBinary()
					_ = yym2149
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2148) {
					} else {
						z.EncFallback(yy2148)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2140[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2150 := &x.ListMeta
					yym2151 := z.EncBinary()
					_ = yym2151
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2150) {
					} else {
						z.EncFallback(yy2150)
					}
				}
			}
			if yyr2140 || yy2arr2140 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2153 := z.EncBinary()
					_ = yym2153
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2154 := z.EncBinary()
					_ = yym2154
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2140 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2155 := z.DecBinary()
	_ = yym2155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2156 := r.ReadMapStart()
			if yyl2156 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2156, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2156 := r.ReadArrayStart()
			if yyl2156 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2157Slc
	var yyhl2157 bool = l >= 0
	for yyj2157 := 0; ; yyj2157++ {
		if yyhl2157 {
			if yyj2157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2157Slc = r.DecodeBytes(yys2157Slc, true, true)
		yys2157 := string(yys2157Slc)
		switch yys2157 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2160 := &x.ListMeta
				yym2161 := z.DecBinary()
				_ = yym2161
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2160) {
				} else {
					z.DecFallback(yyv2160, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2162 := &x.Items
				yym2163 := z.DecBinary()
				_ = yym2163
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2162), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2157)
		} // end switch yys2157
	} // end for yyj2157
	if !yyhl2157 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2164 int
	var yyb2164 bool
	var yyhl2164 bool = l >= 0
	yyj2164++
	if yyhl2164 {
		yyb2164 = yyj2164 > l
	} else {
		yyb2164 = r.CheckBreak()
	}
	if yyb2164 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2164++
	if yyhl2164 {
		yyb2164 = yyj2164 > l
	} else {
		yyb2164 = r.CheckBreak()
	}
	if yyb2164 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2164++
	if yyhl2164 {
		yyb2164 = yyj2164 > l
	} else {
		yyb2164 = r.CheckBreak()
	}
	if yyb2164 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2167 := &x.ListMeta
		yym2168 := z.DecBinary()
		_ = yym2168
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2167) {
		} else {
			z.DecFallback(yyv2167, false)
		}
	}
	yyj2164++
	if yyhl2164 {
		yyb2164 = yyj2164 > l
	} else {
		yyb2164 = r.CheckBreak()
	}
	if yyb2164 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2169 := &x.Items
		yym2170 := z.DecBinary()
		_ = yym2170
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2169), d)
		}
	}
	for {
		yyj2164++
		if yyhl2164 {
			yyb2164 = yyj2164 > l
		} else {
			yyb2164 = r.CheckBreak()
		}
		if yyb2164 {
			break
		}
		z.DecStructFieldNotFound(yyj2164-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2171 := z.EncBinary()
		_ = yym2171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2172 := !z.EncBinary()
			yy2arr2172 := z.EncBasicHandle().StructToArray
			var yyq2172 [4]bool
			_, _, _ = yysep2172, yyq2172, yy2arr2172
			const yyr2172 bool = false
			yyq2172[0] = x.PodCIDR != ""
			yyq2172[1] = x.ExternalID != ""
			yyq2172[2] = x.ProviderID != ""
			yyq2172[3] = x.Unschedulable != false
			if yyr2172 || yy2arr2172 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2172 int = 0
				for _, b := range yyq2172 {
					if b {
						yynn2172++
					}
				}
				r.EncodeMapStart(yynn2172)
			}
			if yyr2172 || yy2arr2172 {
				if yyq2172[0] {
					yym2174 := z.EncBinary()
					_ = yym2174
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2175 := z.EncBinary()
					_ = yym2175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				if yyq2172[1] {
					yym2177 := z.EncBinary()
					_ = yym2177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2178 := z.EncBinary()
					_ = yym2178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				if yyq2172[2] {
					yym2180 := z.EncBinary()
					_ = yym2180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2181 := z.EncBinary()
					_ = yym2181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				if yyq2172[3] {
					yym2183 := z.EncBinary()
					_ = yym2183
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2172[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2172 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2185 := z.DecBinary()
	_ = yym2185
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2186 := r.ReadMapStart()
			if yyl2186 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2186, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2186 := r.ReadArrayStart()
			if yyl2186 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2186, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2187Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2187Slc
	var yyhl2187 bool = l >= 0
	for yyj2187 := 0; ; yyj2187++ {
		if yyhl2187 {
			if yyj2187 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2187Slc = r.DecodeBytes(yys2187Slc, true, true)
		yys2187 := string(yys2187Slc)
		switch yys2187 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2187)
		} // end switch yys2187
	} // end for yyj2187
	if !yyhl2187 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2192 int
	var yyb2192 bool
	var yyhl2192 bool = l >= 0
	yyj2192++
	if yyhl2192 {
		yyb2192 = yyj2192 > l
	} else {
		yyb2192 = r.CheckBreak()
	}
	if yyb2192 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2192++
	if yyhl2192 {
		yyb2192 = yyj2192 > l
	} else {
		yyb2192 = r.CheckBreak()
	}
	if yyb2192 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2192++
	if yyhl2192 {
		yyb2192 = yyj2192 > l
	} else {
		yyb2192 = r.CheckBreak()
	}
	if yyb2192 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2192++
	if yyhl2192 {
		yyb2192 = yyj2192 > l
	} else {
		yyb2192 = r.CheckBreak()
	}
	if yyb2192 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2192++
		if yyhl2192 {
			yyb2192 = yyj2192 > l
		} else {
			yyb2192 = r.CheckBreak()
		}
		if yyb2192 {
			break
		}
		z.DecStructFieldNotFound(yyj2192-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2197 := z.EncBinary()
		_ = yym2197
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2198 := !z.EncBinary()
			yy2arr2198 := z.EncBasicHandle().StructToArray
			var yyq2198 [1]bool
			_, _, _ = yysep2198, yyq2198, yy2arr2198
			const yyr2198 bool = false
			if yyr2198 || yy2arr2198 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2198 int = 1
				for _, b := range yyq2198 {
					if b {
						yynn2198++
					}
				}
				r.EncodeMapStart(yynn2198)
			}
			if yyr2198 || yy2arr2198 {
				yym2200 := z.EncBinary()
				_ = yym2200
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2201 := z.EncBinary()
				_ = yym2201
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2198 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2202 := z.DecBinary()
	_ = yym2202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2203 := r.ReadMapStart()
			if yyl2203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2203, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2203 := r.ReadArrayStart()
			if yyl2203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2204Slc
	var yyhl2204 bool = l >= 0
	for yyj2204 := 0; ; yyj2204++ {
		if yyhl2204 {
			if yyj2204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2204Slc = r.DecodeBytes(yys2204Slc, true, true)
		yys2204 := string(yys2204Slc)
		switch yys2204 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2204)
		} // end switch yys2204
	} // end for yyj2204
	if !yyhl2204 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2206 int
	var yyb2206 bool
	var yyhl2206 bool = l >= 0
	yyj2206++
	if yyhl2206 {
		yyb2206 = yyj2206 > l
	} else {
		yyb2206 = r.CheckBreak()
	}
	if yyb2206 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2206++
		if yyhl2206 {
			yyb2206 = yyj2206 > l
		} else {
			yyb2206 = r.CheckBreak()
		}
		if yyb2206 {
			break
		}
		z.DecStructFieldNotFound(yyj2206-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2208 := z.EncBinary()
		_ = yym2208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2209 := !z.EncBinary()
			yy2arr2209 := z.EncBasicHandle().StructToArray
			var yyq2209 [1]bool
			_, _, _ = yysep2209, yyq2209, yy2arr2209
			const yyr2209 bool = false
			yyq2209[0] = true
			if yyr2209 || yy2arr2209 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2209 int = 0
				for _, b := range yyq2209 {
					if b {
						yynn2209++
					}
				}
				r.EncodeMapStart(yynn2209)
			}
			if yyr2209 || yy2arr2209 {
				if yyq2209[0] {
					yy2211 := &x.KubeletEndpoint
					yy2211.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2209[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2212 := &x.KubeletEndpoint
					yy2212.CodecEncodeSelf(e)
				}
			}
			if yysep2209 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2213 := z.DecBinary()
	_ = yym2213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2214 := r.ReadMapStart()
			if yyl2214 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2214, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2214 := r.ReadArrayStart()
			if yyl2214 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2214, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2215Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2215Slc
	var yyhl2215 bool = l >= 0
	for yyj2215 := 0; ; yyj2215++ {
		if yyhl2215 {
			if yyj2215 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2215Slc = r.DecodeBytes(yys2215Slc, true, true)
		yys2215 := string(yys2215Slc)
		switch yys2215 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2216 := &x.KubeletEndpoint
				yyv2216.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2215)
		} // end switch yys2215
	} // end for yyj2215
	if !yyhl2215 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2217 int
	var yyb2217 bool
	var yyhl2217 bool = l >= 0
	yyj2217++
	if yyhl2217 {
		yyb2217 = yyj2217 > l
	} else {
		yyb2217 = r.CheckBreak()
	}
	if yyb2217 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2218 := &x.KubeletEndpoint
		yyv2218.CodecDecodeSelf(d)
	}
	for {
		yyj2217++
		if yyhl2217 {
			yyb2217 = yyj2217 > l
		} else {
			yyb2217 = r.CheckBreak()
		}
		if yyb2217 {
			break
		}
		z.DecStructFieldNotFound(yyj2217-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2219 := z.EncBinary()
		_ = yym2219
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2220 := !z.EncBinary()
			yy2arr2220 := z.EncBasicHandle().StructToArray
			var yyq2220 [8]bool
			_, _, _ = yysep2220, yyq2220, yy2arr2220
			const yyr2220 bool = false
			if yyr2220 || yy2arr2220 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2220 int = 8
				for _, b := range yyq2220 {
					if b {
						yynn2220++
					}
				}
				r.EncodeMapStart(yynn2220)
			}
			if yyr2220 || yy2arr2220 {
				yym2222 := z.EncBinary()
				_ = yym2222
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2223 := z.EncBinary()
				_ = yym2223
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2220 || yy2arr2220 {
				yym2225 := z.EncBinary()
				_ = yym2225
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2226 := z.EncBinary()
				_ = yym2226
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2220 || yy2arr2220 {
				yym2228 := z.EncBinary()
				_ = yym2228
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2229 := z.EncBinary()
				_ = yym2229
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2220 || yy2arr2220 {
				yym2231 := z.EncBinary()
				_ = yym2231
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2232 := z.EncBinary()
				_ = yym2232
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2220 || yy2arr2220 {
				yym2234 := z.EncBinary()
				_ = yym2234
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2235 := z.EncBinary()
				_ = yym2235
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2220 || yy2arr2220 {
				yym2237 := z.EncBinary()
				_ = yym2237
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2238 := z.EncBinary()
				_ = yym2238
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2220 || yy2arr2220 {
				yym2240 := z.EncBinary()
				_ = yym2240
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2241 := z.EncBinary()
				_ = yym2241
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2220 || yy2arr2220 {
				yym2243 := z.EncBinary()
				_ = yym2243
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2244 := z.EncBinary()
				_ = yym2244
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2220 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2245 := z.DecBinary()
	_ = yym2245
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2246 := r.ReadMapStart()
			if yyl2246 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2246, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2246 := r.ReadArrayStart()
			if yyl2246 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2246, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2247Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2247Slc
	var yyhl2247 bool = l >= 0
	for yyj2247 := 0; ; yyj2247++ {
		if yyhl2247 {
			if yyj2247 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2247Slc = r.DecodeBytes(yys2247Slc, true, true)
		yys2247 := string(yys2247Slc)
		switch yys2247 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2247)
		} // end switch yys2247
	} // end for yyj2247
	if !yyhl2247 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2256 int
	var yyb2256 bool
	var yyhl2256 bool = l >= 0
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2256++
		if yyhl2256 {
			yyb2256 = yyj2256 > l
		} else {
			yyb2256 = r.CheckBreak()
		}
		if yyb2256 {
			break
		}
		z.DecStructFieldNotFound(yyj2256-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2265 := z.EncBinary()
		_ = yym2265
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2266 := !z.EncBinary()
			yy2arr2266 := z.EncBasicHandle().StructToArray
			var yyq2266 [6]bool
			_, _, _ = yysep2266, yyq2266, yy2arr2266
			const yyr2266 bool = false
			yyq2266[0] = len(x.Capacity) != 0
			yyq2266[1] = x.Phase != ""
			yyq2266[2] = len(x.Conditions) != 0
			yyq2266[3] = len(x.Addresses) != 0
			yyq2266[4] = true
			yyq2266[5] = true
			if yyr2266 || yy2arr2266 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2266 int = 0
				for _, b := range yyq2266 {
					if b {
						yynn2266++
					}
				}
				r.EncodeMapStart(yynn2266)
			}
			if yyr2266 || yy2arr2266 {
				if yyq2266[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2266[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2266 || yy2arr2266 {
				if yyq2266[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2266[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2266 || yy2arr2266 {
				if yyq2266[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2270 := z.EncBinary()
						_ = yym2270
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2266[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2271 := z.EncBinary()
						_ = yym2271
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2266 || yy2arr2266 {
				if yyq2266[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2273 := z.EncBinary()
						_ = yym2273
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2266[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2274 := z.EncBinary()
						_ = yym2274
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2266 || yy2arr2266 {
				if yyq2266[4] {
					yy2276 := &x.DaemonEndpoints
					yy2276.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2266[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2277 := &x.DaemonEndpoints
					yy2277.CodecEncodeSelf(e)
				}
			}
			if yyr2266 || yy2arr2266 {
				if yyq2266[5] {
					yy2279 := &x.NodeInfo
					yy2279.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2266[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2280 := &x.NodeInfo
					yy2280.CodecEncodeSelf(e)
				}
			}
			if yysep2266 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2281 := z.DecBinary()
	_ = yym2281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2282 := r.ReadMapStart()
			if yyl2282 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2282, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2282 := r.ReadArrayStart()
			if yyl2282 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2283Slc
	var yyhl2283 bool = l >= 0
	for yyj2283 := 0; ; yyj2283++ {
		if yyhl2283 {
			if yyj2283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2283Slc = r.DecodeBytes(yys2283Slc, true, true)
		yys2283 := string(yys2283Slc)
		switch yys2283 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2284 := &x.Capacity
				yyv2284.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2286 := &x.Conditions
				yym2287 := z.DecBinary()
				_ = yym2287
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2286), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2288 := &x.Addresses
				yym2289 := z.DecBinary()
				_ = yym2289
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2288), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2290 := &x.DaemonEndpoints
				yyv2290.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2291 := &x.NodeInfo
				yyv2291.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2283)
		} // end switch yys2283
	} // end for yyj2283
	if !yyhl2283 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2292 int
	var yyb2292 bool
	var yyhl2292 bool = l >= 0
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2293 := &x.Capacity
		yyv2293.CodecDecodeSelf(d)
	}
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2295 := &x.Conditions
		yym2296 := z.DecBinary()
		_ = yym2296
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2295), d)
		}
	}
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2297 := &x.Addresses
		yym2298 := z.DecBinary()
		_ = yym2298
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2297), d)
		}
	}
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2299 := &x.DaemonEndpoints
		yyv2299.CodecDecodeSelf(d)
	}
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2300 := &x.NodeInfo
		yyv2300.CodecDecodeSelf(d)
	}
	for {
		yyj2292++
		if yyhl2292 {
			yyb2292 = yyj2292 > l
		} else {
			yyb2292 = r.CheckBreak()
		}
		if yyb2292 {
			break
		}
		z.DecStructFieldNotFound(yyj2292-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2301 := z.EncBinary()
	_ = yym2301
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2302 := z.DecBinary()
	_ = yym2302
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2303 := z.EncBinary()
	_ = yym2303
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2304 := z.DecBinary()
	_ = yym2304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2305 := z.EncBinary()
		_ = yym2305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2306 := !z.EncBinary()
			yy2arr2306 := z.EncBasicHandle().StructToArray
			var yyq2306 [6]bool
			_, _, _ = yysep2306, yyq2306, yy2arr2306
			const yyr2306 bool = false
			yyq2306[2] = true
			yyq2306[3] = true
			yyq2306[4] = x.Reason != ""
			yyq2306[5] = x.Message != ""
			if yyr2306 || yy2arr2306 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2306 int = 2
				for _, b := range yyq2306 {
					if b {
						yynn2306++
					}
				}
				r.EncodeMapStart(yynn2306)
			}
			if yyr2306 || yy2arr2306 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2306 || yy2arr2306 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2306 || yy2arr2306 {
				if yyq2306[2] {
					yy2310 := &x.LastHeartbeatTime
					yym2311 := z.EncBinary()
					_ = yym2311
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2310) {
					} else if yym2311 {
						z.EncBinaryMarshal(yy2310)
					} else if !yym2311 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2310)
					} else {
						z.EncFallback(yy2310)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2306[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2312 := &x.LastHeartbeatTime
					yym2313 := z.EncBinary()
					_ = yym2313
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2312) {
					} else if yym2313 {
						z.EncBinaryMarshal(yy2312)
					} else if !yym2313 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2312)
					} else {
						z.EncFallback(yy2312)
					}
				}
			}
			if yyr2306 || yy2arr2306 {
				if yyq2306[3] {
					yy2315 := &x.LastTransitionTime
					yym2316 := z.EncBinary()
					_ = yym2316
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2315) {
					} else if yym2316 {
						z.EncBinaryMarshal(yy2315)
					} else if !yym2316 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2315)
					} else {
						z.EncFallback(yy2315)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2306[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2317 := &x.LastTransitionTime
					yym2318 := z.EncBinary()
					_ = yym2318
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2317) {
					} else if yym2318 {
						z.EncBinaryMarshal(yy2317)
					} else if !yym2318 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2317)
					} else {
						z.EncFallback(yy2317)
					}
				}
			}
			if yyr2306 || yy2arr2306 {
				if yyq2306[4] {
					yym2320 := z.EncBinary()
					_ = yym2320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2306[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2321 := z.EncBinary()
					_ = yym2321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2306 || yy2arr2306 {
				if yyq2306[5] {
					yym2323 := z.EncBinary()
					_ = yym2323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2306[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2324 := z.EncBinary()
					_ = yym2324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2306 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2325 := z.DecBinary()
	_ = yym2325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2326 := r.ReadMapStart()
			if yyl2326 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2326, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2326 := r.ReadArrayStart()
			if yyl2326 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2326, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2327Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2327Slc
	var yyhl2327 bool = l >= 0
	for yyj2327 := 0; ; yyj2327++ {
		if yyhl2327 {
			if yyj2327 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2327Slc = r.DecodeBytes(yys2327Slc, true, true)
		yys2327 := string(yys2327Slc)
		switch yys2327 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2330 := &x.LastHeartbeatTime
				yym2331 := z.DecBinary()
				_ = yym2331
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2330) {
				} else if yym2331 {
					z.DecBinaryUnmarshal(yyv2330)
				} else if !yym2331 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2330)
				} else {
					z.DecFallback(yyv2330, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2332 := &x.LastTransitionTime
				yym2333 := z.DecBinary()
				_ = yym2333
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2332) {
				} else if yym2333 {
					z.DecBinaryUnmarshal(yyv2332)
				} else if !yym2333 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2332)
				} else {
					z.DecFallback(yyv2332, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2327)
		} // end switch yys2327
	} // end for yyj2327
	if !yyhl2327 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2336 int
	var yyb2336 bool
	var yyhl2336 bool = l >= 0
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2339 := &x.LastHeartbeatTime
		yym2340 := z.DecBinary()
		_ = yym2340
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2339) {
		} else if yym2340 {
			z.DecBinaryUnmarshal(yyv2339)
		} else if !yym2340 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2339)
		} else {
			z.DecFallback(yyv2339, false)
		}
	}
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2341 := &x.LastTransitionTime
		yym2342 := z.DecBinary()
		_ = yym2342
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2341) {
		} else if yym2342 {
			z.DecBinaryUnmarshal(yyv2341)
		} else if !yym2342 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2341)
		} else {
			z.DecFallback(yyv2341, false)
		}
	}
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2336++
		if yyhl2336 {
			yyb2336 = yyj2336 > l
		} else {
			yyb2336 = r.CheckBreak()
		}
		if yyb2336 {
			break
		}
		z.DecStructFieldNotFound(yyj2336-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2345 := z.EncBinary()
	_ = yym2345
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2346 := z.DecBinary()
	_ = yym2346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2347 := z.EncBinary()
		_ = yym2347
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2348 := !z.EncBinary()
			yy2arr2348 := z.EncBasicHandle().StructToArray
			var yyq2348 [2]bool
			_, _, _ = yysep2348, yyq2348, yy2arr2348
			const yyr2348 bool = false
			if yyr2348 || yy2arr2348 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2348 int = 2
				for _, b := range yyq2348 {
					if b {
						yynn2348++
					}
				}
				r.EncodeMapStart(yynn2348)
			}
			if yyr2348 || yy2arr2348 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2348 || yy2arr2348 {
				yym2351 := z.EncBinary()
				_ = yym2351
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2352 := z.EncBinary()
				_ = yym2352
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2348 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2353 := z.DecBinary()
	_ = yym2353
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2354 := r.ReadMapStart()
			if yyl2354 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2354, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2354 := r.ReadArrayStart()
			if yyl2354 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2354, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2355Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2355Slc
	var yyhl2355 bool = l >= 0
	for yyj2355 := 0; ; yyj2355++ {
		if yyhl2355 {
			if yyj2355 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2355Slc = r.DecodeBytes(yys2355Slc, true, true)
		yys2355 := string(yys2355Slc)
		switch yys2355 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2355)
		} // end switch yys2355
	} // end for yyj2355
	if !yyhl2355 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2358 int
	var yyb2358 bool
	var yyhl2358 bool = l >= 0
	yyj2358++
	if yyhl2358 {
		yyb2358 = yyj2358 > l
	} else {
		yyb2358 = r.CheckBreak()
	}
	if yyb2358 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2358++
	if yyhl2358 {
		yyb2358 = yyj2358 > l
	} else {
		yyb2358 = r.CheckBreak()
	}
	if yyb2358 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2358++
		if yyhl2358 {
			yyb2358 = yyj2358 > l
		} else {
			yyb2358 = r.CheckBreak()
		}
		if yyb2358 {
			break
		}
		z.DecStructFieldNotFound(yyj2358-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2361 := z.EncBinary()
	_ = yym2361
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2362 := z.DecBinary()
	_ = yym2362
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2363 := z.EncBinary()
		_ = yym2363
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2364 := z.DecBinary()
	_ = yym2364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2365 := z.EncBinary()
		_ = yym2365
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2366 := !z.EncBinary()
			yy2arr2366 := z.EncBasicHandle().StructToArray
			var yyq2366 [5]bool
			_, _, _ = yysep2366, yyq2366, yy2arr2366
			const yyr2366 bool = false
			yyq2366[0] = x.Kind != ""
			yyq2366[1] = x.APIVersion != ""
			yyq2366[2] = true
			yyq2366[3] = true
			yyq2366[4] = true
			if yyr2366 || yy2arr2366 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2366 int = 0
				for _, b := range yyq2366 {
					if b {
						yynn2366++
					}
				}
				r.EncodeMapStart(yynn2366)
			}
			if yyr2366 || yy2arr2366 {
				if yyq2366[0] {
					yym2368 := z.EncBinary()
					_ = yym2368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2366[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2369 := z.EncBinary()
					_ = yym2369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2366 || yy2arr2366 {
				if yyq2366[1] {
					yym2371 := z.EncBinary()
					_ = yym2371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2366[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2372 := z.EncBinary()
					_ = yym2372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2366 || yy2arr2366 {
				if yyq2366[2] {
					yy2374 := &x.ObjectMeta
					yy2374.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2366[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2375 := &x.ObjectMeta
					yy2375.CodecEncodeSelf(e)
				}
			}
			if yyr2366 || yy2arr2366 {
				if yyq2366[3] {
					yy2377 := &x.Spec
					yy2377.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2366[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2378 := &x.Spec
					yy2378.CodecEncodeSelf(e)
				}
			}
			if yyr2366 || yy2arr2366 {
				if yyq2366[4] {
					yy2380 := &x.Status
					yy2380.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2366[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2381 := &x.Status
					yy2381.CodecEncodeSelf(e)
				}
			}
			if yysep2366 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2382 := z.DecBinary()
	_ = yym2382
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2383 := r.ReadMapStart()
			if yyl2383 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2383, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2383 := r.ReadArrayStart()
			if yyl2383 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2383, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2384Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2384Slc
	var yyhl2384 bool = l >= 0
	for yyj2384 := 0; ; yyj2384++ {
		if yyhl2384 {
			if yyj2384 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2384Slc = r.DecodeBytes(yys2384Slc, true, true)
		yys2384 := string(yys2384Slc)
		switch yys2384 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2387 := &x.ObjectMeta
				yyv2387.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2388 := &x.Spec
				yyv2388.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2389 := &x.Status
				yyv2389.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2384)
		} // end switch yys2384
	} // end for yyj2384
	if !yyhl2384 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2390 int
	var yyb2390 bool
	var yyhl2390 bool = l >= 0
	yyj2390++
	if yyhl2390 {
		yyb2390 = yyj2390 > l
	} else {
		yyb2390 = r.CheckBreak()
	}
	if yyb2390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2390++
	if yyhl2390 {
		yyb2390 = yyj2390 > l
	} else {
		yyb2390 = r.CheckBreak()
	}
	if yyb2390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2390++
	if yyhl2390 {
		yyb2390 = yyj2390 > l
	} else {
		yyb2390 = r.CheckBreak()
	}
	if yyb2390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2393 := &x.ObjectMeta
		yyv2393.CodecDecodeSelf(d)
	}
	yyj2390++
	if yyhl2390 {
		yyb2390 = yyj2390 > l
	} else {
		yyb2390 = r.CheckBreak()
	}
	if yyb2390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2394 := &x.Spec
		yyv2394.CodecDecodeSelf(d)
	}
	yyj2390++
	if yyhl2390 {
		yyb2390 = yyj2390 > l
	} else {
		yyb2390 = r.CheckBreak()
	}
	if yyb2390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2395 := &x.Status
		yyv2395.CodecDecodeSelf(d)
	}
	for {
		yyj2390++
		if yyhl2390 {
			yyb2390 = yyj2390 > l
		} else {
			yyb2390 = r.CheckBreak()
		}
		if yyb2390 {
			break
		}
		z.DecStructFieldNotFound(yyj2390-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2396 := z.EncBinary()
		_ = yym2396
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2397 := !z.EncBinary()
			yy2arr2397 := z.EncBasicHandle().StructToArray
			var yyq2397 [4]bool
			_, _, _ = yysep2397, yyq2397, yy2arr2397
			const yyr2397 bool = false
			yyq2397[0] = x.Kind != ""
			yyq2397[1] = x.APIVersion != ""
			yyq2397[2] = true
			if yyr2397 || yy2arr2397 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2397 int = 1
				for _, b := range yyq2397 {
					if b {
						yynn2397++
					}
				}
				r.EncodeMapStart(yynn2397)
			}
			if yyr2397 || yy2arr2397 {
				if yyq2397[0] {
					yym2399 := z.EncBinary()
					_ = yym2399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2397[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2400 := z.EncBinary()
					_ = yym2400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2397 || yy2arr2397 {
				if yyq2397[1] {
					yym2402 := z.EncBinary()
					_ = yym2402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2397[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2403 := z.EncBinary()
					_ = yym2403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2397 || yy2arr2397 {
				if yyq2397[2] {
					yy2405 := &x.ListMeta
					yym2406 := z.EncBinary()
					_ = yym2406
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2405) {
					} else {
						z.EncFallback(yy2405)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2397[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2407 := &x.ListMeta
					yym2408 := z.EncBinary()
					_ = yym2408
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2407) {
					} else {
						z.EncFallback(yy2407)
					}
				}
			}
			if yyr2397 || yy2arr2397 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2410 := z.EncBinary()
					_ = yym2410
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2411 := z.EncBinary()
					_ = yym2411
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2397 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2412 := z.DecBinary()
	_ = yym2412
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2413 := r.ReadMapStart()
			if yyl2413 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2413, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2413 := r.ReadArrayStart()
			if yyl2413 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2413, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2414Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2414Slc
	var yyhl2414 bool = l >= 0
	for yyj2414 := 0; ; yyj2414++ {
		if yyhl2414 {
			if yyj2414 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2414Slc = r.DecodeBytes(yys2414Slc, true, true)
		yys2414 := string(yys2414Slc)
		switch yys2414 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2417 := &x.ListMeta
				yym2418 := z.DecBinary()
				_ = yym2418
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2417) {
				} else {
					z.DecFallback(yyv2417, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2419 := &x.Items
				yym2420 := z.DecBinary()
				_ = yym2420
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2419), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2414)
		} // end switch yys2414
	} // end for yyj2414
	if !yyhl2414 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2421 int
	var yyb2421 bool
	var yyhl2421 bool = l >= 0
	yyj2421++
	if yyhl2421 {
		yyb2421 = yyj2421 > l
	} else {
		yyb2421 = r.CheckBreak()
	}
	if yyb2421 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2421++
	if yyhl2421 {
		yyb2421 = yyj2421 > l
	} else {
		yyb2421 = r.CheckBreak()
	}
	if yyb2421 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2421++
	if yyhl2421 {
		yyb2421 = yyj2421 > l
	} else {
		yyb2421 = r.CheckBreak()
	}
	if yyb2421 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2424 := &x.ListMeta
		yym2425 := z.DecBinary()
		_ = yym2425
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2424) {
		} else {
			z.DecFallback(yyv2424, false)
		}
	}
	yyj2421++
	if yyhl2421 {
		yyb2421 = yyj2421 > l
	} else {
		yyb2421 = r.CheckBreak()
	}
	if yyb2421 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2426 := &x.Items
		yym2427 := z.DecBinary()
		_ = yym2427
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2426), d)
		}
	}
	for {
		yyj2421++
		if yyhl2421 {
			yyb2421 = yyj2421 > l
		} else {
			yyb2421 = r.CheckBreak()
		}
		if yyb2421 {
			break
		}
		z.DecStructFieldNotFound(yyj2421-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2428 := z.EncBinary()
	_ = yym2428
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2429 := z.DecBinary()
	_ = yym2429
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2430 := z.EncBinary()
		_ = yym2430
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2431 := !z.EncBinary()
			yy2arr2431 := z.EncBasicHandle().StructToArray
			var yyq2431 [1]bool
			_, _, _ = yysep2431, yyq2431, yy2arr2431
			const yyr2431 bool = false
			yyq2431[0] = len(x.Finalizers) != 0
			if yyr2431 || yy2arr2431 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2431 int = 0
				for _, b := range yyq2431 {
					if b {
						yynn2431++
					}
				}
				r.EncodeMapStart(yynn2431)
			}
			if yyr2431 || yy2arr2431 {
				if yyq2431[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2433 := z.EncBinary()
						_ = yym2433
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2431[0] {
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2434 := z.EncBinary()
						_ = yym2434
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yysep2431 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2435 := z.DecBinary()
	_ = yym2435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2436 := r.ReadMapStart()
			if yyl2436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2436, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2436 := r.ReadArrayStart()
			if yyl2436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2437Slc
	var yyhl2437 bool = l >= 0
	for yyj2437 := 0; ; yyj2437++ {
		if yyhl2437 {
			if yyj2437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2437Slc = r.DecodeBytes(yys2437Slc, true, true)
		yys2437 := string(yys2437Slc)
		switch yys2437 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2438 := &x.Finalizers
				yym2439 := z.DecBinary()
				_ = yym2439
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2438), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2437)
		} // end switch yys2437
	} // end for yyj2437
	if !yyhl2437 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2440 int
	var yyb2440 bool
	var yyhl2440 bool = l >= 0
	yyj2440++
	if yyhl2440 {
		yyb2440 = yyj2440 > l
	} else {
		yyb2440 = r.CheckBreak()
	}
	if yyb2440 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2441 := &x.Finalizers
		yym2442 := z.DecBinary()
		_ = yym2442
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2441), d)
		}
	}
	for {
		yyj2440++
		if yyhl2440 {
			yyb2440 = yyj2440 > l
		} else {
			yyb2440 = r.CheckBreak()
		}
		if yyb2440 {
			break
		}
		z.DecStructFieldNotFound(yyj2440-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2443 := z.EncBinary()
		_ = yym2443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2444 := !z.EncBinary()
			yy2arr2444 := z.EncBasicHandle().StructToArray
			var yyq2444 [1]bool
			_, _, _ = yysep2444, yyq2444, yy2arr2444
			const yyr2444 bool = false
			yyq2444[0] = x.Phase != ""
			if yyr2444 || yy2arr2444 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2444 int = 0
				for _, b := range yyq2444 {
					if b {
						yynn2444++
					}
				}
				r.EncodeMapStart(yynn2444)
			}
			if yyr2444 || yy2arr2444 {
				if yyq2444[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2444[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2444 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2446 := z.DecBinary()
	_ = yym2446
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2447 := r.ReadMapStart()
			if yyl2447 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2447, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2447 := r.ReadArrayStart()
			if yyl2447 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2447, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2448Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2448Slc
	var yyhl2448 bool = l >= 0
	for yyj2448 := 0; ; yyj2448++ {
		if yyhl2448 {
			if yyj2448 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2448Slc = r.DecodeBytes(yys2448Slc, true, true)
		yys2448 := string(yys2448Slc)
		switch yys2448 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2448)
		} // end switch yys2448
	} // end for yyj2448
	if !yyhl2448 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2450 int
	var yyb2450 bool
	var yyhl2450 bool = l >= 0
	yyj2450++
	if yyhl2450 {
		yyb2450 = yyj2450 > l
	} else {
		yyb2450 = r.CheckBreak()
	}
	if yyb2450 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2450++
		if yyhl2450 {
			yyb2450 = yyj2450 > l
		} else {
			yyb2450 = r.CheckBreak()
		}
		if yyb2450 {
			break
		}
		z.DecStructFieldNotFound(yyj2450-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2452 := z.EncBinary()
	_ = yym2452
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2453 := z.DecBinary()
	_ = yym2453
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2454 := z.EncBinary()
		_ = yym2454
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2455 := !z.EncBinary()
			yy2arr2455 := z.EncBasicHandle().StructToArray
			var yyq2455 [5]bool
			_, _, _ = yysep2455, yyq2455, yy2arr2455
			const yyr2455 bool = false
			yyq2455[0] = x.Kind != ""
			yyq2455[1] = x.APIVersion != ""
			yyq2455[2] = true
			yyq2455[3] = true
			yyq2455[4] = true
			if yyr2455 || yy2arr2455 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2455 int = 0
				for _, b := range yyq2455 {
					if b {
						yynn2455++
					}
				}
				r.EncodeMapStart(yynn2455)
			}
			if yyr2455 || yy2arr2455 {
				if yyq2455[0] {
					yym2457 := z.EncBinary()
					_ = yym2457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2455[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2455 || yy2arr2455 {
				if yyq2455[1] {
					yym2460 := z.EncBinary()
					_ = yym2460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2455[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2461 := z.EncBinary()
					_ = yym2461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2455 || yy2arr2455 {
				if yyq2455[2] {
					yy2463 := &x.ObjectMeta
					yy2463.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2455[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2464 := &x.ObjectMeta
					yy2464.CodecEncodeSelf(e)
				}
			}
			if yyr2455 || yy2arr2455 {
				if yyq2455[3] {
					yy2466 := &x.Spec
					yy2466.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2455[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2467 := &x.Spec
					yy2467.CodecEncodeSelf(e)
				}
			}
			if yyr2455 || yy2arr2455 {
				if yyq2455[4] {
					yy2469 := &x.Status
					yy2469.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2455[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2470 := &x.Status
					yy2470.CodecEncodeSelf(e)
				}
			}
			if yysep2455 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2471 := z.DecBinary()
	_ = yym2471
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2472 := r.ReadMapStart()
			if yyl2472 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2472, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2472 := r.ReadArrayStart()
			if yyl2472 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2472, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2473Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2473Slc
	var yyhl2473 bool = l >= 0
	for yyj2473 := 0; ; yyj2473++ {
		if yyhl2473 {
			if yyj2473 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2473Slc = r.DecodeBytes(yys2473Slc, true, true)
		yys2473 := string(yys2473Slc)
		switch yys2473 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2476 := &x.ObjectMeta
				yyv2476.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2477 := &x.Spec
				yyv2477.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2478 := &x.Status
				yyv2478.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2473)
		} // end switch yys2473
	} // end for yyj2473
	if !yyhl2473 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2479 int
	var yyb2479 bool
	var yyhl2479 bool = l >= 0
	yyj2479++
	if yyhl2479 {
		yyb2479 = yyj2479 > l
	} else {
		yyb2479 = r.CheckBreak()
	}
	if yyb2479 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2479++
	if yyhl2479 {
		yyb2479 = yyj2479 > l
	} else {
		yyb2479 = r.CheckBreak()
	}
	if yyb2479 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2479++
	if yyhl2479 {
		yyb2479 = yyj2479 > l
	} else {
		yyb2479 = r.CheckBreak()
	}
	if yyb2479 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2482 := &x.ObjectMeta
		yyv2482.CodecDecodeSelf(d)
	}
	yyj2479++
	if yyhl2479 {
		yyb2479 = yyj2479 > l
	} else {
		yyb2479 = r.CheckBreak()
	}
	if yyb2479 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2483 := &x.Spec
		yyv2483.CodecDecodeSelf(d)
	}
	yyj2479++
	if yyhl2479 {
		yyb2479 = yyj2479 > l
	} else {
		yyb2479 = r.CheckBreak()
	}
	if yyb2479 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2484 := &x.Status
		yyv2484.CodecDecodeSelf(d)
	}
	for {
		yyj2479++
		if yyhl2479 {
			yyb2479 = yyj2479 > l
		} else {
			yyb2479 = r.CheckBreak()
		}
		if yyb2479 {
			break
		}
		z.DecStructFieldNotFound(yyj2479-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2485 := z.EncBinary()
		_ = yym2485
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2486 := !z.EncBinary()
			yy2arr2486 := z.EncBasicHandle().StructToArray
			var yyq2486 [4]bool
			_, _, _ = yysep2486, yyq2486, yy2arr2486
			const yyr2486 bool = false
			yyq2486[0] = x.Kind != ""
			yyq2486[1] = x.APIVersion != ""
			yyq2486[2] = true
			if yyr2486 || yy2arr2486 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2486 int = 1
				for _, b := range yyq2486 {
					if b {
						yynn2486++
					}
				}
				r.EncodeMapStart(yynn2486)
			}
			if yyr2486 || yy2arr2486 {
				if yyq2486[0] {
					yym2488 := z.EncBinary()
					_ = yym2488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2486[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2489 := z.EncBinary()
					_ = yym2489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2486 || yy2arr2486 {
				if yyq2486[1] {
					yym2491 := z.EncBinary()
					_ = yym2491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2486[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2492 := z.EncBinary()
					_ = yym2492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2486 || yy2arr2486 {
				if yyq2486[2] {
					yy2494 := &x.ListMeta
					yym2495 := z.EncBinary()
					_ = yym2495
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2494) {
					} else {
						z.EncFallback(yy2494)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2486[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2496 := &x.ListMeta
					yym2497 := z.EncBinary()
					_ = yym2497
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2496) {
					} else {
						z.EncFallback(yy2496)
					}
				}
			}
			if yyr2486 || yy2arr2486 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2499 := z.EncBinary()
					_ = yym2499
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2500 := z.EncBinary()
					_ = yym2500
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2486 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2501 := z.DecBinary()
	_ = yym2501
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2502 := r.ReadMapStart()
			if yyl2502 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2502, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2502 := r.ReadArrayStart()
			if yyl2502 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2502, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2503Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2503Slc
	var yyhl2503 bool = l >= 0
	for yyj2503 := 0; ; yyj2503++ {
		if yyhl2503 {
			if yyj2503 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2503Slc = r.DecodeBytes(yys2503Slc, true, true)
		yys2503 := string(yys2503Slc)
		switch yys2503 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2506 := &x.ListMeta
				yym2507 := z.DecBinary()
				_ = yym2507
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2506) {
				} else {
					z.DecFallback(yyv2506, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2508 := &x.Items
				yym2509 := z.DecBinary()
				_ = yym2509
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2508), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2503)
		} // end switch yys2503
	} // end for yyj2503
	if !yyhl2503 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2510 int
	var yyb2510 bool
	var yyhl2510 bool = l >= 0
	yyj2510++
	if yyhl2510 {
		yyb2510 = yyj2510 > l
	} else {
		yyb2510 = r.CheckBreak()
	}
	if yyb2510 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2510++
	if yyhl2510 {
		yyb2510 = yyj2510 > l
	} else {
		yyb2510 = r.CheckBreak()
	}
	if yyb2510 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2510++
	if yyhl2510 {
		yyb2510 = yyj2510 > l
	} else {
		yyb2510 = r.CheckBreak()
	}
	if yyb2510 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2513 := &x.ListMeta
		yym2514 := z.DecBinary()
		_ = yym2514
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2513) {
		} else {
			z.DecFallback(yyv2513, false)
		}
	}
	yyj2510++
	if yyhl2510 {
		yyb2510 = yyj2510 > l
	} else {
		yyb2510 = r.CheckBreak()
	}
	if yyb2510 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2515 := &x.Items
		yym2516 := z.DecBinary()
		_ = yym2516
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2515), d)
		}
	}
	for {
		yyj2510++
		if yyhl2510 {
			yyb2510 = yyj2510 > l
		} else {
			yyb2510 = r.CheckBreak()
		}
		if yyb2510 {
			break
		}
		z.DecStructFieldNotFound(yyj2510-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2517 := z.EncBinary()
		_ = yym2517
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2518 := !z.EncBinary()
			yy2arr2518 := z.EncBasicHandle().StructToArray
			var yyq2518 [4]bool
			_, _, _ = yysep2518, yyq2518, yy2arr2518
			const yyr2518 bool = false
			yyq2518[0] = x.Kind != ""
			yyq2518[1] = x.APIVersion != ""
			yyq2518[2] = true
			if yyr2518 || yy2arr2518 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2518 int = 1
				for _, b := range yyq2518 {
					if b {
						yynn2518++
					}
				}
				r.EncodeMapStart(yynn2518)
			}
			if yyr2518 || yy2arr2518 {
				if yyq2518[0] {
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2518[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2521 := z.EncBinary()
					_ = yym2521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2518 || yy2arr2518 {
				if yyq2518[1] {
					yym2523 := z.EncBinary()
					_ = yym2523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2518[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2524 := z.EncBinary()
					_ = yym2524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2518 || yy2arr2518 {
				if yyq2518[2] {
					yy2526 := &x.ObjectMeta
					yy2526.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2518[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2527 := &x.ObjectMeta
					yy2527.CodecEncodeSelf(e)
				}
			}
			if yyr2518 || yy2arr2518 {
				yy2529 := &x.Target
				yy2529.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2530 := &x.Target
				yy2530.CodecEncodeSelf(e)
			}
			if yysep2518 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2531 := z.DecBinary()
	_ = yym2531
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2532 := r.ReadMapStart()
			if yyl2532 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2532, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2532 := r.ReadArrayStart()
			if yyl2532 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2532, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2533Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2533Slc
	var yyhl2533 bool = l >= 0
	for yyj2533 := 0; ; yyj2533++ {
		if yyhl2533 {
			if yyj2533 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2533Slc = r.DecodeBytes(yys2533Slc, true, true)
		yys2533 := string(yys2533Slc)
		switch yys2533 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2536 := &x.ObjectMeta
				yyv2536.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2537 := &x.Target
				yyv2537.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2533)
		} // end switch yys2533
	} // end for yyj2533
	if !yyhl2533 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2538 int
	var yyb2538 bool
	var yyhl2538 bool = l >= 0
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2541 := &x.ObjectMeta
		yyv2541.CodecDecodeSelf(d)
	}
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2542 := &x.Target
		yyv2542.CodecDecodeSelf(d)
	}
	for {
		yyj2538++
		if yyhl2538 {
			yyb2538 = yyj2538 > l
		} else {
			yyb2538 = r.CheckBreak()
		}
		if yyb2538 {
			break
		}
		z.DecStructFieldNotFound(yyj2538-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2543 := z.EncBinary()
		_ = yym2543
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2544 := !z.EncBinary()
			yy2arr2544 := z.EncBasicHandle().StructToArray
			var yyq2544 [3]bool
			_, _, _ = yysep2544, yyq2544, yy2arr2544
			const yyr2544 bool = false
			yyq2544[0] = x.Kind != ""
			yyq2544[1] = x.APIVersion != ""
			if yyr2544 || yy2arr2544 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2544 int = 1
				for _, b := range yyq2544 {
					if b {
						yynn2544++
					}
				}
				r.EncodeMapStart(yynn2544)
			}
			if yyr2544 || yy2arr2544 {
				if yyq2544[0] {
					yym2546 := z.EncBinary()
					_ = yym2546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2544[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2547 := z.EncBinary()
					_ = yym2547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2544 || yy2arr2544 {
				if yyq2544[1] {
					yym2549 := z.EncBinary()
					_ = yym2549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2544[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2550 := z.EncBinary()
					_ = yym2550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2544 || yy2arr2544 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2552 := *x.GracePeriodSeconds
					yym2553 := z.EncBinary()
					_ = yym2553
					if false {
					} else {
						r.EncodeInt(int64(yy2552))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2554 := *x.GracePeriodSeconds
					yym2555 := z.EncBinary()
					_ = yym2555
					if false {
					} else {
						r.EncodeInt(int64(yy2554))
					}
				}
			}
			if yysep2544 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2556 := z.DecBinary()
	_ = yym2556
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2557 := r.ReadMapStart()
			if yyl2557 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2557, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2557 := r.ReadArrayStart()
			if yyl2557 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2557, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2558Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2558Slc
	var yyhl2558 bool = l >= 0
	for yyj2558 := 0; ; yyj2558++ {
		if yyhl2558 {
			if yyj2558 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2558Slc = r.DecodeBytes(yys2558Slc, true, true)
		yys2558 := string(yys2558Slc)
		switch yys2558 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2562 := z.DecBinary()
				_ = yym2562
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2558)
		} // end switch yys2558
	} // end for yyj2558
	if !yyhl2558 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2563 int
	var yyb2563 bool
	var yyhl2563 bool = l >= 0
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2567 := z.DecBinary()
		_ = yym2567
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2563++
		if yyhl2563 {
			yyb2563 = yyj2563 > l
		} else {
			yyb2563 = r.CheckBreak()
		}
		if yyb2563 {
			break
		}
		z.DecStructFieldNotFound(yyj2563-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2568 := z.EncBinary()
		_ = yym2568
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2569 := !z.EncBinary()
			yy2arr2569 := z.EncBasicHandle().StructToArray
			var yyq2569 [6]bool
			_, _, _ = yysep2569, yyq2569, yy2arr2569
			const yyr2569 bool = false
			yyq2569[0] = x.Kind != ""
			yyq2569[1] = x.APIVersion != ""
			yyq2569[2] = x.LabelSelector != ""
			yyq2569[3] = x.FieldSelector != ""
			yyq2569[4] = x.Watch != false
			yyq2569[5] = x.ResourceVersion != ""
			if yyr2569 || yy2arr2569 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2569 int = 0
				for _, b := range yyq2569 {
					if b {
						yynn2569++
					}
				}
				r.EncodeMapStart(yynn2569)
			}
			if yyr2569 || yy2arr2569 {
				if yyq2569[0] {
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2569[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2572 := z.EncBinary()
					_ = yym2572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2569 || yy2arr2569 {
				if yyq2569[1] {
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2569[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2575 := z.EncBinary()
					_ = yym2575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2569 || yy2arr2569 {
				if yyq2569[2] {
					yym2577 := z.EncBinary()
					_ = yym2577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2569[2] {
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					yym2578 := z.EncBinary()
					_ = yym2578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr2569 || yy2arr2569 {
				if yyq2569[3] {
					yym2580 := z.EncBinary()
					_ = yym2580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2569[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					yym2581 := z.EncBinary()
					_ = yym2581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr2569 || yy2arr2569 {
				if yyq2569[4] {
					yym2583 := z.EncBinary()
					_ = yym2583
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2569[4] {
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					yym2584 := z.EncBinary()
					_ = yym2584
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr2569 || yy2arr2569 {
				if yyq2569[5] {
					yym2586 := z.EncBinary()
					_ = yym2586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2569[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2587 := z.EncBinary()
					_ = yym2587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yysep2569 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2588 := z.DecBinary()
	_ = yym2588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2589 := r.ReadMapStart()
			if yyl2589 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2589, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2589 := r.ReadArrayStart()
			if yyl2589 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2589, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2590Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2590Slc
	var yyhl2590 bool = l >= 0
	for yyj2590 := 0; ; yyj2590++ {
		if yyhl2590 {
			if yyj2590 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2590Slc = r.DecodeBytes(yys2590Slc, true, true)
		yys2590 := string(yys2590Slc)
		switch yys2590 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2590)
		} // end switch yys2590
	} // end for yyj2590
	if !yyhl2590 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2597 int
	var yyb2597 bool
	var yyhl2597 bool = l >= 0
	yyj2597++
	if yyhl2597 {
		yyb2597 = yyj2597 > l
	} else {
		yyb2597 = r.CheckBreak()
	}
	if yyb2597 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2597++
	if yyhl2597 {
		yyb2597 = yyj2597 > l
	} else {
		yyb2597 = r.CheckBreak()
	}
	if yyb2597 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2597++
	if yyhl2597 {
		yyb2597 = yyj2597 > l
	} else {
		yyb2597 = r.CheckBreak()
	}
	if yyb2597 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj2597++
	if yyhl2597 {
		yyb2597 = yyj2597 > l
	} else {
		yyb2597 = r.CheckBreak()
	}
	if yyb2597 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj2597++
	if yyhl2597 {
		yyb2597 = yyj2597 > l
	} else {
		yyb2597 = r.CheckBreak()
	}
	if yyb2597 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2597++
	if yyhl2597 {
		yyb2597 = yyj2597 > l
	} else {
		yyb2597 = r.CheckBreak()
	}
	if yyb2597 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	for {
		yyj2597++
		if yyhl2597 {
			yyb2597 = yyj2597 > l
		} else {
			yyb2597 = r.CheckBreak()
		}
		if yyb2597 {
			break
		}
		z.DecStructFieldNotFound(yyj2597-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2604 := z.EncBinary()
		_ = yym2604
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2605 := !z.EncBinary()
			yy2arr2605 := z.EncBasicHandle().StructToArray
			var yyq2605 [10]bool
			_, _, _ = yysep2605, yyq2605, yy2arr2605
			const yyr2605 bool = false
			yyq2605[0] = x.Kind != ""
			yyq2605[1] = x.APIVersion != ""
			yyq2605[2] = x.Container != ""
			yyq2605[3] = x.Follow != false
			yyq2605[4] = x.Previous != false
			yyq2605[5] = x.SinceSeconds != nil
			yyq2605[6] = x.SinceTime != nil
			yyq2605[7] = x.Timestamps != false
			yyq2605[8] = x.TailLines != nil
			yyq2605[9] = x.LimitBytes != nil
			if yyr2605 || yy2arr2605 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2605 int = 0
				for _, b := range yyq2605 {
					if b {
						yynn2605++
					}
				}
				r.EncodeMapStart(yynn2605)
			}
			if yyr2605 || yy2arr2605 {
				if yyq2605[0] {
					yym2607 := z.EncBinary()
					_ = yym2607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2605[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2608 := z.EncBinary()
					_ = yym2608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2605 || yy2arr2605 {
				if yyq2605[1] {
					yym2610 := z.EncBinary()
					_ = yym2610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2605[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2611 := z.EncBinary()
					_ = yym2611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2605 || yy2arr2605 {
				if yyq2605[2] {
					yym2613 := z.EncBinary()
					_ = yym2613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2605[2] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2614 := z.EncBinary()
					_ = yym2614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2605 || yy2arr2605 {
				if yyq2605[3] {
					yym2616 := z.EncBinary()
					_ = yym2616
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2605[3] {
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr2605 || yy2arr2605 {
				if yyq2605[4] {
					yym2619 := z.EncBinary()
					_ = yym2619
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2605[4] {
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					yym2620 := z.EncBinary()
					_ = yym2620
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr2605 || yy2arr2605 {
				if yyq2605[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2622 := *x.SinceSeconds
						yym2623 := z.EncBinary()
						_ = yym2623
						if false {
						} else {
							r.EncodeInt(int64(yy2622))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2605[5] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2624 := *x.SinceSeconds
						yym2625 := z.EncBinary()
						_ = yym2625
						if false {
						} else {
							r.EncodeInt(int64(yy2624))
						}
					}
				}
			}
			if yyr2605 || yy2arr2605 {
				if yyq2605[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2627 := z.EncBinary()
						_ = yym2627
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2627 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2627 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2605[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2628 := z.EncBinary()
						_ = yym2628
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2628 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2628 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr2605 || yy2arr2605 {
				if yyq2605[7] {
					yym2630 := z.EncBinary()
					_ = yym2630
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2605[7] {
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					yym2631 := z.EncBinary()
					_ = yym2631
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr2605 || yy2arr2605 {
				if yyq2605[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2633 := *x.TailLines
						yym2634 := z.EncBinary()
						_ = yym2634
						if false {
						} else {
							r.EncodeInt(int64(yy2633))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2605[8] {
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2635 := *x.TailLines
						yym2636 := z.EncBinary()
						_ = yym2636
						if false {
						} else {
							r.EncodeInt(int64(yy2635))
						}
					}
				}
			}
			if yyr2605 || yy2arr2605 {
				if yyq2605[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2638 := *x.LimitBytes
						yym2639 := z.EncBinary()
						_ = yym2639
						if false {
						} else {
							r.EncodeInt(int64(yy2638))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2605[9] {
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2640 := *x.LimitBytes
						yym2641 := z.EncBinary()
						_ = yym2641
						if false {
						} else {
							r.EncodeInt(int64(yy2640))
						}
					}
				}
			}
			if yysep2605 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2642 := z.DecBinary()
	_ = yym2642
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2643 := r.ReadMapStart()
			if yyl2643 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2643, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2643 := r.ReadArrayStart()
			if yyl2643 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2643, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2644Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2644Slc
	var yyhl2644 bool = l >= 0
	for yyj2644 := 0; ; yyj2644++ {
		if yyhl2644 {
			if yyj2644 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2644Slc = r.DecodeBytes(yys2644Slc, true, true)
		yys2644 := string(yys2644Slc)
		switch yys2644 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2651 := z.DecBinary()
				_ = yym2651
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2653 := z.DecBinary()
				_ = yym2653
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2653 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2653 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2656 := z.DecBinary()
				_ = yym2656
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2658 := z.DecBinary()
				_ = yym2658
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2644)
		} // end switch yys2644
	} // end for yyj2644
	if !yyhl2644 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2659 int
	var yyb2659 bool
	var yyhl2659 bool = l >= 0
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2666 := z.DecBinary()
		_ = yym2666
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2668 := z.DecBinary()
		_ = yym2668
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2668 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2668 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2671 := z.DecBinary()
		_ = yym2671
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2673 := z.DecBinary()
		_ = yym2673
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2659++
		if yyhl2659 {
			yyb2659 = yyj2659 > l
		} else {
			yyb2659 = r.CheckBreak()
		}
		if yyb2659 {
			break
		}
		z.DecStructFieldNotFound(yyj2659-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2674 := z.EncBinary()
		_ = yym2674
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2675 := !z.EncBinary()
			yy2arr2675 := z.EncBasicHandle().StructToArray
			var yyq2675 [7]bool
			_, _, _ = yysep2675, yyq2675, yy2arr2675
			const yyr2675 bool = false
			yyq2675[0] = x.Kind != ""
			yyq2675[1] = x.APIVersion != ""
			yyq2675[2] = x.Stdin != false
			yyq2675[3] = x.Stdout != false
			yyq2675[4] = x.Stderr != false
			yyq2675[5] = x.TTY != false
			yyq2675[6] = x.Container != ""
			if yyr2675 || yy2arr2675 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2675 int = 0
				for _, b := range yyq2675 {
					if b {
						yynn2675++
					}
				}
				r.EncodeMapStart(yynn2675)
			}
			if yyr2675 || yy2arr2675 {
				if yyq2675[0] {
					yym2677 := z.EncBinary()
					_ = yym2677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2675[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2678 := z.EncBinary()
					_ = yym2678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2675 || yy2arr2675 {
				if yyq2675[1] {
					yym2680 := z.EncBinary()
					_ = yym2680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2675[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2681 := z.EncBinary()
					_ = yym2681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2675 || yy2arr2675 {
				if yyq2675[2] {
					yym2683 := z.EncBinary()
					_ = yym2683
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2675[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2684 := z.EncBinary()
					_ = yym2684
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2675 || yy2arr2675 {
				if yyq2675[3] {
					yym2686 := z.EncBinary()
					_ = yym2686
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2675[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2687 := z.EncBinary()
					_ = yym2687
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2675 || yy2arr2675 {
				if yyq2675[4] {
					yym2689 := z.EncBinary()
					_ = yym2689
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2675[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2690 := z.EncBinary()
					_ = yym2690
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2675 || yy2arr2675 {
				if yyq2675[5] {
					yym2692 := z.EncBinary()
					_ = yym2692
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2675[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2693 := z.EncBinary()
					_ = yym2693
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2675 || yy2arr2675 {
				if yyq2675[6] {
					yym2695 := z.EncBinary()
					_ = yym2695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2675[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2696 := z.EncBinary()
					_ = yym2696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2675 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2697 := z.DecBinary()
	_ = yym2697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2698 := r.ReadMapStart()
			if yyl2698 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2698, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2698 := r.ReadArrayStart()
			if yyl2698 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2699Slc
	var yyhl2699 bool = l >= 0
	for yyj2699 := 0; ; yyj2699++ {
		if yyhl2699 {
			if yyj2699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2699Slc = r.DecodeBytes(yys2699Slc, true, true)
		yys2699 := string(yys2699Slc)
		switch yys2699 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2699)
		} // end switch yys2699
	} // end for yyj2699
	if !yyhl2699 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2707 int
	var yyb2707 bool
	var yyhl2707 bool = l >= 0
	yyj2707++
	if yyhl2707 {
		yyb2707 = yyj2707 > l
	} else {
		yyb2707 = r.CheckBreak()
	}
	if yyb2707 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2707++
	if yyhl2707 {
		yyb2707 = yyj2707 > l
	} else {
		yyb2707 = r.CheckBreak()
	}
	if yyb2707 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2707++
	if yyhl2707 {
		yyb2707 = yyj2707 > l
	} else {
		yyb2707 = r.CheckBreak()
	}
	if yyb2707 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2707++
	if yyhl2707 {
		yyb2707 = yyj2707 > l
	} else {
		yyb2707 = r.CheckBreak()
	}
	if yyb2707 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2707++
	if yyhl2707 {
		yyb2707 = yyj2707 > l
	} else {
		yyb2707 = r.CheckBreak()
	}
	if yyb2707 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2707++
	if yyhl2707 {
		yyb2707 = yyj2707 > l
	} else {
		yyb2707 = r.CheckBreak()
	}
	if yyb2707 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2707++
	if yyhl2707 {
		yyb2707 = yyj2707 > l
	} else {
		yyb2707 = r.CheckBreak()
	}
	if yyb2707 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2707++
		if yyhl2707 {
			yyb2707 = yyj2707 > l
		} else {
			yyb2707 = r.CheckBreak()
		}
		if yyb2707 {
			break
		}
		z.DecStructFieldNotFound(yyj2707-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2715 := z.EncBinary()
		_ = yym2715
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2716 := !z.EncBinary()
			yy2arr2716 := z.EncBasicHandle().StructToArray
			var yyq2716 [8]bool
			_, _, _ = yysep2716, yyq2716, yy2arr2716
			const yyr2716 bool = false
			yyq2716[0] = x.Kind != ""
			yyq2716[1] = x.APIVersion != ""
			yyq2716[2] = x.Stdin != false
			yyq2716[3] = x.Stdout != false
			yyq2716[4] = x.Stderr != false
			yyq2716[5] = x.TTY != false
			yyq2716[6] = x.Container != ""
			if yyr2716 || yy2arr2716 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2716 int = 1
				for _, b := range yyq2716 {
					if b {
						yynn2716++
					}
				}
				r.EncodeMapStart(yynn2716)
			}
			if yyr2716 || yy2arr2716 {
				if yyq2716[0] {
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2716[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2719 := z.EncBinary()
					_ = yym2719
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2716 || yy2arr2716 {
				if yyq2716[1] {
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2716[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2722 := z.EncBinary()
					_ = yym2722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2716 || yy2arr2716 {
				if yyq2716[2] {
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2716[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2725 := z.EncBinary()
					_ = yym2725
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2716 || yy2arr2716 {
				if yyq2716[3] {
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2716[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2716 || yy2arr2716 {
				if yyq2716[4] {
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2716[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2716 || yy2arr2716 {
				if yyq2716[5] {
					yym2733 := z.EncBinary()
					_ = yym2733
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2716[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2734 := z.EncBinary()
					_ = yym2734
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2716 || yy2arr2716 {
				if yyq2716[6] {
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2716[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2737 := z.EncBinary()
					_ = yym2737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2716 || yy2arr2716 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2739 := z.EncBinary()
					_ = yym2739
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2740 := z.EncBinary()
					_ = yym2740
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2716 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2741 := z.DecBinary()
	_ = yym2741
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2742 := r.ReadMapStart()
			if yyl2742 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2742, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2742 := r.ReadArrayStart()
			if yyl2742 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2742, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2743Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2743Slc
	var yyhl2743 bool = l >= 0
	for yyj2743 := 0; ; yyj2743++ {
		if yyhl2743 {
			if yyj2743 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2743Slc = r.DecodeBytes(yys2743Slc, true, true)
		yys2743 := string(yys2743Slc)
		switch yys2743 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2751 := &x.Command
				yym2752 := z.DecBinary()
				_ = yym2752
				if false {
				} else {
					z.F.DecSliceStringX(yyv2751, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2743)
		} // end switch yys2743
	} // end for yyj2743
	if !yyhl2743 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2753 int
	var yyb2753 bool
	var yyhl2753 bool = l >= 0
	yyj2753++
	if yyhl2753 {
		yyb2753 = yyj2753 > l
	} else {
		yyb2753 = r.CheckBreak()
	}
	if yyb2753 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2753++
	if yyhl2753 {
		yyb2753 = yyj2753 > l
	} else {
		yyb2753 = r.CheckBreak()
	}
	if yyb2753 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2753++
	if yyhl2753 {
		yyb2753 = yyj2753 > l
	} else {
		yyb2753 = r.CheckBreak()
	}
	if yyb2753 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2753++
	if yyhl2753 {
		yyb2753 = yyj2753 > l
	} else {
		yyb2753 = r.CheckBreak()
	}
	if yyb2753 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2753++
	if yyhl2753 {
		yyb2753 = yyj2753 > l
	} else {
		yyb2753 = r.CheckBreak()
	}
	if yyb2753 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2753++
	if yyhl2753 {
		yyb2753 = yyj2753 > l
	} else {
		yyb2753 = r.CheckBreak()
	}
	if yyb2753 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2753++
	if yyhl2753 {
		yyb2753 = yyj2753 > l
	} else {
		yyb2753 = r.CheckBreak()
	}
	if yyb2753 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2753++
	if yyhl2753 {
		yyb2753 = yyj2753 > l
	} else {
		yyb2753 = r.CheckBreak()
	}
	if yyb2753 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2761 := &x.Command
		yym2762 := z.DecBinary()
		_ = yym2762
		if false {
		} else {
			z.F.DecSliceStringX(yyv2761, false, d)
		}
	}
	for {
		yyj2753++
		if yyhl2753 {
			yyb2753 = yyj2753 > l
		} else {
			yyb2753 = r.CheckBreak()
		}
		if yyb2753 {
			break
		}
		z.DecStructFieldNotFound(yyj2753-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2763 := z.EncBinary()
		_ = yym2763
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2764 := !z.EncBinary()
			yy2arr2764 := z.EncBasicHandle().StructToArray
			var yyq2764 [3]bool
			_, _, _ = yysep2764, yyq2764, yy2arr2764
			const yyr2764 bool = false
			yyq2764[0] = x.Kind != ""
			yyq2764[1] = x.APIVersion != ""
			yyq2764[2] = x.Path != ""
			if yyr2764 || yy2arr2764 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2764 int = 0
				for _, b := range yyq2764 {
					if b {
						yynn2764++
					}
				}
				r.EncodeMapStart(yynn2764)
			}
			if yyr2764 || yy2arr2764 {
				if yyq2764[0] {
					yym2766 := z.EncBinary()
					_ = yym2766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2764[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2767 := z.EncBinary()
					_ = yym2767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2764 || yy2arr2764 {
				if yyq2764[1] {
					yym2769 := z.EncBinary()
					_ = yym2769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2764[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2770 := z.EncBinary()
					_ = yym2770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2764 || yy2arr2764 {
				if yyq2764[2] {
					yym2772 := z.EncBinary()
					_ = yym2772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2764[2] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym2773 := z.EncBinary()
					_ = yym2773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yysep2764 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2774 := z.DecBinary()
	_ = yym2774
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2775 := r.ReadMapStart()
			if yyl2775 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2775, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2775 := r.ReadArrayStart()
			if yyl2775 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2775, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2776Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2776Slc
	var yyhl2776 bool = l >= 0
	for yyj2776 := 0; ; yyj2776++ {
		if yyhl2776 {
			if yyj2776 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2776Slc = r.DecodeBytes(yys2776Slc, true, true)
		yys2776 := string(yys2776Slc)
		switch yys2776 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2776)
		} // end switch yys2776
	} // end for yyj2776
	if !yyhl2776 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2780 int
	var yyb2780 bool
	var yyhl2780 bool = l >= 0
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2780++
		if yyhl2780 {
			yyb2780 = yyj2780 > l
		} else {
			yyb2780 = r.CheckBreak()
		}
		if yyb2780 {
			break
		}
		z.DecStructFieldNotFound(yyj2780-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2784 := z.EncBinary()
		_ = yym2784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2785 := !z.EncBinary()
			yy2arr2785 := z.EncBasicHandle().StructToArray
			var yyq2785 [7]bool
			_, _, _ = yysep2785, yyq2785, yy2arr2785
			const yyr2785 bool = false
			yyq2785[0] = x.Kind != ""
			yyq2785[1] = x.Namespace != ""
			yyq2785[2] = x.Name != ""
			yyq2785[3] = x.UID != ""
			yyq2785[4] = x.APIVersion != ""
			yyq2785[5] = x.ResourceVersion != ""
			yyq2785[6] = x.FieldPath != ""
			if yyr2785 || yy2arr2785 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2785 int = 0
				for _, b := range yyq2785 {
					if b {
						yynn2785++
					}
				}
				r.EncodeMapStart(yynn2785)
			}
			if yyr2785 || yy2arr2785 {
				if yyq2785[0] {
					yym2787 := z.EncBinary()
					_ = yym2787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2785[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2788 := z.EncBinary()
					_ = yym2788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				if yyq2785[1] {
					yym2790 := z.EncBinary()
					_ = yym2790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2785[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym2791 := z.EncBinary()
					_ = yym2791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				if yyq2785[2] {
					yym2793 := z.EncBinary()
					_ = yym2793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2785[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2794 := z.EncBinary()
					_ = yym2794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				if yyq2785[3] {
					yym2796 := z.EncBinary()
					_ = yym2796
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2785[3] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				if yyq2785[4] {
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2785[4] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2800 := z.EncBinary()
					_ = yym2800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				if yyq2785[5] {
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2785[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2803 := z.EncBinary()
					_ = yym2803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				if yyq2785[6] {
					yym2805 := z.EncBinary()
					_ = yym2805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2785[6] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym2806 := z.EncBinary()
					_ = yym2806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2785 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2807 := z.DecBinary()
	_ = yym2807
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2808 := r.ReadMapStart()
			if yyl2808 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2808, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2808 := r.ReadArrayStart()
			if yyl2808 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2808, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2809Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2809Slc
	var yyhl2809 bool = l >= 0
	for yyj2809 := 0; ; yyj2809++ {
		if yyhl2809 {
			if yyj2809 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2809Slc = r.DecodeBytes(yys2809Slc, true, true)
		yys2809 := string(yys2809Slc)
		switch yys2809 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2809)
		} // end switch yys2809
	} // end for yyj2809
	if !yyhl2809 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2817 int
	var yyb2817 bool
	var yyhl2817 bool = l >= 0
	yyj2817++
	if yyhl2817 {
		yyb2817 = yyj2817 > l
	} else {
		yyb2817 = r.CheckBreak()
	}
	if yyb2817 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2817++
	if yyhl2817 {
		yyb2817 = yyj2817 > l
	} else {
		yyb2817 = r.CheckBreak()
	}
	if yyb2817 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2817++
	if yyhl2817 {
		yyb2817 = yyj2817 > l
	} else {
		yyb2817 = r.CheckBreak()
	}
	if yyb2817 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2817++
	if yyhl2817 {
		yyb2817 = yyj2817 > l
	} else {
		yyb2817 = r.CheckBreak()
	}
	if yyb2817 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2817++
	if yyhl2817 {
		yyb2817 = yyj2817 > l
	} else {
		yyb2817 = r.CheckBreak()
	}
	if yyb2817 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2817++
	if yyhl2817 {
		yyb2817 = yyj2817 > l
	} else {
		yyb2817 = r.CheckBreak()
	}
	if yyb2817 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2817++
	if yyhl2817 {
		yyb2817 = yyj2817 > l
	} else {
		yyb2817 = r.CheckBreak()
	}
	if yyb2817 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2817++
		if yyhl2817 {
			yyb2817 = yyj2817 > l
		} else {
			yyb2817 = r.CheckBreak()
		}
		if yyb2817 {
			break
		}
		z.DecStructFieldNotFound(yyj2817-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2825 := z.EncBinary()
		_ = yym2825
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2826 := !z.EncBinary()
			yy2arr2826 := z.EncBasicHandle().StructToArray
			var yyq2826 [1]bool
			_, _, _ = yysep2826, yyq2826, yy2arr2826
			const yyr2826 bool = false
			yyq2826[0] = x.Name != ""
			if yyr2826 || yy2arr2826 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2826 int = 0
				for _, b := range yyq2826 {
					if b {
						yynn2826++
					}
				}
				r.EncodeMapStart(yynn2826)
			}
			if yyr2826 || yy2arr2826 {
				if yyq2826[0] {
					yym2828 := z.EncBinary()
					_ = yym2828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2826[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2829 := z.EncBinary()
					_ = yym2829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yysep2826 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2830 := z.DecBinary()
	_ = yym2830
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2831 := r.ReadMapStart()
			if yyl2831 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2831, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2831 := r.ReadArrayStart()
			if yyl2831 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2831, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2832Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2832Slc
	var yyhl2832 bool = l >= 0
	for yyj2832 := 0; ; yyj2832++ {
		if yyhl2832 {
			if yyj2832 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2832Slc = r.DecodeBytes(yys2832Slc, true, true)
		yys2832 := string(yys2832Slc)
		switch yys2832 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2832)
		} // end switch yys2832
	} // end for yyj2832
	if !yyhl2832 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2834 int
	var yyb2834 bool
	var yyhl2834 bool = l >= 0
	yyj2834++
	if yyhl2834 {
		yyb2834 = yyj2834 > l
	} else {
		yyb2834 = r.CheckBreak()
	}
	if yyb2834 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2834++
		if yyhl2834 {
			yyb2834 = yyj2834 > l
		} else {
			yyb2834 = r.CheckBreak()
		}
		if yyb2834 {
			break
		}
		z.DecStructFieldNotFound(yyj2834-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2836 := z.EncBinary()
		_ = yym2836
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2837 := !z.EncBinary()
			yy2arr2837 := z.EncBasicHandle().StructToArray
			var yyq2837 [3]bool
			_, _, _ = yysep2837, yyq2837, yy2arr2837
			const yyr2837 bool = false
			yyq2837[0] = x.Kind != ""
			yyq2837[1] = x.APIVersion != ""
			yyq2837[2] = true
			if yyr2837 || yy2arr2837 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2837 int = 0
				for _, b := range yyq2837 {
					if b {
						yynn2837++
					}
				}
				r.EncodeMapStart(yynn2837)
			}
			if yyr2837 || yy2arr2837 {
				if yyq2837[0] {
					yym2839 := z.EncBinary()
					_ = yym2839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2837[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2840 := z.EncBinary()
					_ = yym2840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2837 || yy2arr2837 {
				if yyq2837[1] {
					yym2842 := z.EncBinary()
					_ = yym2842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2837[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2843 := z.EncBinary()
					_ = yym2843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2837 || yy2arr2837 {
				if yyq2837[2] {
					yy2845 := &x.Reference
					yy2845.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2837[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy2846 := &x.Reference
					yy2846.CodecEncodeSelf(e)
				}
			}
			if yysep2837 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2847 := z.DecBinary()
	_ = yym2847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2848 := r.ReadMapStart()
			if yyl2848 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2848, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2848 := r.ReadArrayStart()
			if yyl2848 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2848, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2849Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2849Slc
	var yyhl2849 bool = l >= 0
	for yyj2849 := 0; ; yyj2849++ {
		if yyhl2849 {
			if yyj2849 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2849Slc = r.DecodeBytes(yys2849Slc, true, true)
		yys2849 := string(yys2849Slc)
		switch yys2849 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2852 := &x.Reference
				yyv2852.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2849)
		} // end switch yys2849
	} // end for yyj2849
	if !yyhl2849 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2853 int
	var yyb2853 bool
	var yyhl2853 bool = l >= 0
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2856 := &x.Reference
		yyv2856.CodecDecodeSelf(d)
	}
	for {
		yyj2853++
		if yyhl2853 {
			yyb2853 = yyj2853 > l
		} else {
			yyb2853 = r.CheckBreak()
		}
		if yyb2853 {
			break
		}
		z.DecStructFieldNotFound(yyj2853-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2857 := z.EncBinary()
		_ = yym2857
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2858 := !z.EncBinary()
			yy2arr2858 := z.EncBasicHandle().StructToArray
			var yyq2858 [2]bool
			_, _, _ = yysep2858, yyq2858, yy2arr2858
			const yyr2858 bool = false
			yyq2858[0] = x.Component != ""
			yyq2858[1] = x.Host != ""
			if yyr2858 || yy2arr2858 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2858 int = 0
				for _, b := range yyq2858 {
					if b {
						yynn2858++
					}
				}
				r.EncodeMapStart(yynn2858)
			}
			if yyr2858 || yy2arr2858 {
				if yyq2858[0] {
					yym2860 := z.EncBinary()
					_ = yym2860
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2858[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym2861 := z.EncBinary()
					_ = yym2861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2858 || yy2arr2858 {
				if yyq2858[1] {
					yym2863 := z.EncBinary()
					_ = yym2863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2858[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym2864 := z.EncBinary()
					_ = yym2864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep2858 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2865 := z.DecBinary()
	_ = yym2865
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2866 := r.ReadMapStart()
			if yyl2866 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2866, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2866 := r.ReadArrayStart()
			if yyl2866 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2866, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2867Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2867Slc
	var yyhl2867 bool = l >= 0
	for yyj2867 := 0; ; yyj2867++ {
		if yyhl2867 {
			if yyj2867 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2867Slc = r.DecodeBytes(yys2867Slc, true, true)
		yys2867 := string(yys2867Slc)
		switch yys2867 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2867)
		} // end switch yys2867
	} // end for yyj2867
	if !yyhl2867 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2870 int
	var yyb2870 bool
	var yyhl2870 bool = l >= 0
	yyj2870++
	if yyhl2870 {
		yyb2870 = yyj2870 > l
	} else {
		yyb2870 = r.CheckBreak()
	}
	if yyb2870 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2870++
	if yyhl2870 {
		yyb2870 = yyj2870 > l
	} else {
		yyb2870 = r.CheckBreak()
	}
	if yyb2870 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2870++
		if yyhl2870 {
			yyb2870 = yyj2870 > l
		} else {
			yyb2870 = r.CheckBreak()
		}
		if yyb2870 {
			break
		}
		z.DecStructFieldNotFound(yyj2870-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2873 := z.EncBinary()
		_ = yym2873
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2874 := !z.EncBinary()
			yy2arr2874 := z.EncBasicHandle().StructToArray
			var yyq2874 [10]bool
			_, _, _ = yysep2874, yyq2874, yy2arr2874
			const yyr2874 bool = false
			yyq2874[0] = x.Kind != ""
			yyq2874[1] = x.APIVersion != ""
			yyq2874[4] = x.Reason != ""
			yyq2874[5] = x.Message != ""
			yyq2874[6] = true
			yyq2874[7] = true
			yyq2874[8] = true
			yyq2874[9] = x.Count != 0
			if yyr2874 || yy2arr2874 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2874 int = 2
				for _, b := range yyq2874 {
					if b {
						yynn2874++
					}
				}
				r.EncodeMapStart(yynn2874)
			}
			if yyr2874 || yy2arr2874 {
				if yyq2874[0] {
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2874[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2877 := z.EncBinary()
					_ = yym2877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2874 || yy2arr2874 {
				if yyq2874[1] {
					yym2879 := z.EncBinary()
					_ = yym2879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2874[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2880 := z.EncBinary()
					_ = yym2880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2874 || yy2arr2874 {
				yy2882 := &x.ObjectMeta
				yy2882.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				yy2883 := &x.ObjectMeta
				yy2883.CodecEncodeSelf(e)
			}
			if yyr2874 || yy2arr2874 {
				yy2885 := &x.InvolvedObject
				yy2885.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				yy2886 := &x.InvolvedObject
				yy2886.CodecEncodeSelf(e)
			}
			if yyr2874 || yy2arr2874 {
				if yyq2874[4] {
					yym2888 := z.EncBinary()
					_ = yym2888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2874[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2889 := z.EncBinary()
					_ = yym2889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2874 || yy2arr2874 {
				if yyq2874[5] {
					yym2891 := z.EncBinary()
					_ = yym2891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2874[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2892 := z.EncBinary()
					_ = yym2892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2874 || yy2arr2874 {
				if yyq2874[6] {
					yy2894 := &x.Source
					yy2894.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2874[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy2895 := &x.Source
					yy2895.CodecEncodeSelf(e)
				}
			}
			if yyr2874 || yy2arr2874 {
				if yyq2874[7] {
					yy2897 := &x.FirstTimestamp
					yym2898 := z.EncBinary()
					_ = yym2898
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2897) {
					} else if yym2898 {
						z.EncBinaryMarshal(yy2897)
					} else if !yym2898 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2897)
					} else {
						z.EncFallback(yy2897)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2874[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy2899 := &x.FirstTimestamp
					yym2900 := z.EncBinary()
					_ = yym2900
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2899) {
					} else if yym2900 {
						z.EncBinaryMarshal(yy2899)
					} else if !yym2900 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2899)
					} else {
						z.EncFallback(yy2899)
					}
				}
			}
			if yyr2874 || yy2arr2874 {
				if yyq2874[8] {
					yy2902 := &x.LastTimestamp
					yym2903 := z.EncBinary()
					_ = yym2903
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2902) {
					} else if yym2903 {
						z.EncBinaryMarshal(yy2902)
					} else if !yym2903 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2902)
					} else {
						z.EncFallback(yy2902)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2874[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy2904 := &x.LastTimestamp
					yym2905 := z.EncBinary()
					_ = yym2905
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2904) {
					} else if yym2905 {
						z.EncBinaryMarshal(yy2904)
					} else if !yym2905 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2904)
					} else {
						z.EncFallback(yy2904)
					}
				}
			}
			if yyr2874 || yy2arr2874 {
				if yyq2874[9] {
					yym2907 := z.EncBinary()
					_ = yym2907
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2874[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym2908 := z.EncBinary()
					_ = yym2908
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep2874 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2909 := z.DecBinary()
	_ = yym2909
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2910 := r.ReadMapStart()
			if yyl2910 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2910, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2910 := r.ReadArrayStart()
			if yyl2910 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2910, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2911Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2911Slc
	var yyhl2911 bool = l >= 0
	for yyj2911 := 0; ; yyj2911++ {
		if yyhl2911 {
			if yyj2911 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2911Slc = r.DecodeBytes(yys2911Slc, true, true)
		yys2911 := string(yys2911Slc)
		switch yys2911 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2914 := &x.ObjectMeta
				yyv2914.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2915 := &x.InvolvedObject
				yyv2915.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2918 := &x.Source
				yyv2918.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2919 := &x.FirstTimestamp
				yym2920 := z.DecBinary()
				_ = yym2920
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2919) {
				} else if yym2920 {
					z.DecBinaryUnmarshal(yyv2919)
				} else if !yym2920 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2919)
				} else {
					z.DecFallback(yyv2919, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2921 := &x.LastTimestamp
				yym2922 := z.DecBinary()
				_ = yym2922
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2921) {
				} else if yym2922 {
					z.DecBinaryUnmarshal(yyv2921)
				} else if !yym2922 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2921)
				} else {
					z.DecFallback(yyv2921, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2911)
		} // end switch yys2911
	} // end for yyj2911
	if !yyhl2911 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2924 int
	var yyb2924 bool
	var yyhl2924 bool = l >= 0
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2927 := &x.ObjectMeta
		yyv2927.CodecDecodeSelf(d)
	}
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2928 := &x.InvolvedObject
		yyv2928.CodecDecodeSelf(d)
	}
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2931 := &x.Source
		yyv2931.CodecDecodeSelf(d)
	}
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2932 := &x.FirstTimestamp
		yym2933 := z.DecBinary()
		_ = yym2933
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2932) {
		} else if yym2933 {
			z.DecBinaryUnmarshal(yyv2932)
		} else if !yym2933 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2932)
		} else {
			z.DecFallback(yyv2932, false)
		}
	}
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2934 := &x.LastTimestamp
		yym2935 := z.DecBinary()
		_ = yym2935
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2934) {
		} else if yym2935 {
			z.DecBinaryUnmarshal(yyv2934)
		} else if !yym2935 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2934)
		} else {
			z.DecFallback(yyv2934, false)
		}
	}
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2924++
		if yyhl2924 {
			yyb2924 = yyj2924 > l
		} else {
			yyb2924 = r.CheckBreak()
		}
		if yyb2924 {
			break
		}
		z.DecStructFieldNotFound(yyj2924-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2937 := z.EncBinary()
		_ = yym2937
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2938 := !z.EncBinary()
			yy2arr2938 := z.EncBasicHandle().StructToArray
			var yyq2938 [4]bool
			_, _, _ = yysep2938, yyq2938, yy2arr2938
			const yyr2938 bool = false
			yyq2938[0] = x.Kind != ""
			yyq2938[1] = x.APIVersion != ""
			yyq2938[2] = true
			if yyr2938 || yy2arr2938 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2938 int = 1
				for _, b := range yyq2938 {
					if b {
						yynn2938++
					}
				}
				r.EncodeMapStart(yynn2938)
			}
			if yyr2938 || yy2arr2938 {
				if yyq2938[0] {
					yym2940 := z.EncBinary()
					_ = yym2940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2938[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2941 := z.EncBinary()
					_ = yym2941
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2938 || yy2arr2938 {
				if yyq2938[1] {
					yym2943 := z.EncBinary()
					_ = yym2943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2938[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2944 := z.EncBinary()
					_ = yym2944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2938 || yy2arr2938 {
				if yyq2938[2] {
					yy2946 := &x.ListMeta
					yym2947 := z.EncBinary()
					_ = yym2947
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2946) {
					} else {
						z.EncFallback(yy2946)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2938[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2948 := &x.ListMeta
					yym2949 := z.EncBinary()
					_ = yym2949
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2948) {
					} else {
						z.EncFallback(yy2948)
					}
				}
			}
			if yyr2938 || yy2arr2938 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2951 := z.EncBinary()
					_ = yym2951
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2952 := z.EncBinary()
					_ = yym2952
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep2938 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2953 := z.DecBinary()
	_ = yym2953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2954 := r.ReadMapStart()
			if yyl2954 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2954, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2954 := r.ReadArrayStart()
			if yyl2954 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2954, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2955Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2955Slc
	var yyhl2955 bool = l >= 0
	for yyj2955 := 0; ; yyj2955++ {
		if yyhl2955 {
			if yyj2955 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2955Slc = r.DecodeBytes(yys2955Slc, true, true)
		yys2955 := string(yys2955Slc)
		switch yys2955 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2958 := &x.ListMeta
				yym2959 := z.DecBinary()
				_ = yym2959
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2958) {
				} else {
					z.DecFallback(yyv2958, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2960 := &x.Items
				yym2961 := z.DecBinary()
				_ = yym2961
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv2960), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2955)
		} // end switch yys2955
	} // end for yyj2955
	if !yyhl2955 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2962 int
	var yyb2962 bool
	var yyhl2962 bool = l >= 0
	yyj2962++
	if yyhl2962 {
		yyb2962 = yyj2962 > l
	} else {
		yyb2962 = r.CheckBreak()
	}
	if yyb2962 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2962++
	if yyhl2962 {
		yyb2962 = yyj2962 > l
	} else {
		yyb2962 = r.CheckBreak()
	}
	if yyb2962 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2962++
	if yyhl2962 {
		yyb2962 = yyj2962 > l
	} else {
		yyb2962 = r.CheckBreak()
	}
	if yyb2962 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2965 := &x.ListMeta
		yym2966 := z.DecBinary()
		_ = yym2966
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2965) {
		} else {
			z.DecFallback(yyv2965, false)
		}
	}
	yyj2962++
	if yyhl2962 {
		yyb2962 = yyj2962 > l
	} else {
		yyb2962 = r.CheckBreak()
	}
	if yyb2962 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2967 := &x.Items
		yym2968 := z.DecBinary()
		_ = yym2968
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv2967), d)
		}
	}
	for {
		yyj2962++
		if yyhl2962 {
			yyb2962 = yyj2962 > l
		} else {
			yyb2962 = r.CheckBreak()
		}
		if yyb2962 {
			break
		}
		z.DecStructFieldNotFound(yyj2962-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2969 := z.EncBinary()
		_ = yym2969
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2970 := !z.EncBinary()
			yy2arr2970 := z.EncBasicHandle().StructToArray
			var yyq2970 [4]bool
			_, _, _ = yysep2970, yyq2970, yy2arr2970
			const yyr2970 bool = false
			yyq2970[0] = x.Kind != ""
			yyq2970[1] = x.APIVersion != ""
			yyq2970[2] = true
			if yyr2970 || yy2arr2970 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2970 int = 1
				for _, b := range yyq2970 {
					if b {
						yynn2970++
					}
				}
				r.EncodeMapStart(yynn2970)
			}
			if yyr2970 || yy2arr2970 {
				if yyq2970[0] {
					yym2972 := z.EncBinary()
					_ = yym2972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2970[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2973 := z.EncBinary()
					_ = yym2973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2970 || yy2arr2970 {
				if yyq2970[1] {
					yym2975 := z.EncBinary()
					_ = yym2975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2970[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2976 := z.EncBinary()
					_ = yym2976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2970 || yy2arr2970 {
				if yyq2970[2] {
					yy2978 := &x.ListMeta
					yym2979 := z.EncBinary()
					_ = yym2979
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2978) {
					} else {
						z.EncFallback(yy2978)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2970[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2980 := &x.ListMeta
					yym2981 := z.EncBinary()
					_ = yym2981
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2980) {
					} else {
						z.EncFallback(yy2980)
					}
				}
			}
			if yyr2970 || yy2arr2970 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2983 := z.EncBinary()
					_ = yym2983
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2984 := z.EncBinary()
					_ = yym2984
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yysep2970 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2985 := z.DecBinary()
	_ = yym2985
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2986 := r.ReadMapStart()
			if yyl2986 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2986, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2986 := r.ReadArrayStart()
			if yyl2986 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2986, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2987Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2987Slc
	var yyhl2987 bool = l >= 0
	for yyj2987 := 0; ; yyj2987++ {
		if yyhl2987 {
			if yyj2987 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2987Slc = r.DecodeBytes(yys2987Slc, true, true)
		yys2987 := string(yys2987Slc)
		switch yys2987 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2990 := &x.ListMeta
				yym2991 := z.DecBinary()
				_ = yym2991
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2990) {
				} else {
					z.DecFallback(yyv2990, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2992 := &x.Items
				yym2993 := z.DecBinary()
				_ = yym2993
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv2992), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2987)
		} // end switch yys2987
	} // end for yyj2987
	if !yyhl2987 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2994 int
	var yyb2994 bool
	var yyhl2994 bool = l >= 0
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2997 := &x.ListMeta
		yym2998 := z.DecBinary()
		_ = yym2998
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2997) {
		} else {
			z.DecFallback(yyv2997, false)
		}
	}
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2999 := &x.Items
		yym3000 := z.DecBinary()
		_ = yym3000
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv2999), d)
		}
	}
	for {
		yyj2994++
		if yyhl2994 {
			yyb2994 = yyj2994 > l
		} else {
			yyb2994 = r.CheckBreak()
		}
		if yyb2994 {
			break
		}
		z.DecStructFieldNotFound(yyj2994-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3001 := z.EncBinary()
	_ = yym3001
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3002 := z.DecBinary()
	_ = yym3002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3003 := z.EncBinary()
		_ = yym3003
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3004 := !z.EncBinary()
			yy2arr3004 := z.EncBasicHandle().StructToArray
			var yyq3004 [6]bool
			_, _, _ = yysep3004, yyq3004, yy2arr3004
			const yyr3004 bool = false
			yyq3004[0] = x.Type != ""
			yyq3004[1] = len(x.Max) != 0
			yyq3004[2] = len(x.Min) != 0
			yyq3004[3] = len(x.Default) != 0
			yyq3004[4] = len(x.DefaultRequest) != 0
			yyq3004[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr3004 || yy2arr3004 {
				r.EncodeArrayStart(6)
			} else {
				var yynn3004 int = 0
				for _, b := range yyq3004 {
					if b {
						yynn3004++
					}
				}
				r.EncodeMapStart(yynn3004)
			}
			if yyr3004 || yy2arr3004 {
				if yyq3004[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3004[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3004 || yy2arr3004 {
				if yyq3004[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3004[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3004 || yy2arr3004 {
				if yyq3004[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3004[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3004 || yy2arr3004 {
				if yyq3004[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3004[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3004 || yy2arr3004 {
				if yyq3004[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3004[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3004 || yy2arr3004 {
				if yyq3004[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3004[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3004 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3011 := z.DecBinary()
	_ = yym3011
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3012 := r.ReadMapStart()
			if yyl3012 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3012, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3012 := r.ReadArrayStart()
			if yyl3012 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3012, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3013Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3013Slc
	var yyhl3013 bool = l >= 0
	for yyj3013 := 0; ; yyj3013++ {
		if yyhl3013 {
			if yyj3013 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3013Slc = r.DecodeBytes(yys3013Slc, true, true)
		yys3013 := string(yys3013Slc)
		switch yys3013 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3015 := &x.Max
				yyv3015.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3016 := &x.Min
				yyv3016.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3017 := &x.Default
				yyv3017.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3018 := &x.DefaultRequest
				yyv3018.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3019 := &x.MaxLimitRequestRatio
				yyv3019.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3013)
		} // end switch yys3013
	} // end for yyj3013
	if !yyhl3013 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3020 int
	var yyb3020 bool
	var yyhl3020 bool = l >= 0
	yyj3020++
	if yyhl3020 {
		yyb3020 = yyj3020 > l
	} else {
		yyb3020 = r.CheckBreak()
	}
	if yyb3020 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3020++
	if yyhl3020 {
		yyb3020 = yyj3020 > l
	} else {
		yyb3020 = r.CheckBreak()
	}
	if yyb3020 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3022 := &x.Max
		yyv3022.CodecDecodeSelf(d)
	}
	yyj3020++
	if yyhl3020 {
		yyb3020 = yyj3020 > l
	} else {
		yyb3020 = r.CheckBreak()
	}
	if yyb3020 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3023 := &x.Min
		yyv3023.CodecDecodeSelf(d)
	}
	yyj3020++
	if yyhl3020 {
		yyb3020 = yyj3020 > l
	} else {
		yyb3020 = r.CheckBreak()
	}
	if yyb3020 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3024 := &x.Default
		yyv3024.CodecDecodeSelf(d)
	}
	yyj3020++
	if yyhl3020 {
		yyb3020 = yyj3020 > l
	} else {
		yyb3020 = r.CheckBreak()
	}
	if yyb3020 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3025 := &x.DefaultRequest
		yyv3025.CodecDecodeSelf(d)
	}
	yyj3020++
	if yyhl3020 {
		yyb3020 = yyj3020 > l
	} else {
		yyb3020 = r.CheckBreak()
	}
	if yyb3020 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3026 := &x.MaxLimitRequestRatio
		yyv3026.CodecDecodeSelf(d)
	}
	for {
		yyj3020++
		if yyhl3020 {
			yyb3020 = yyj3020 > l
		} else {
			yyb3020 = r.CheckBreak()
		}
		if yyb3020 {
			break
		}
		z.DecStructFieldNotFound(yyj3020-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3027 := z.EncBinary()
		_ = yym3027
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3028 := !z.EncBinary()
			yy2arr3028 := z.EncBasicHandle().StructToArray
			var yyq3028 [1]bool
			_, _, _ = yysep3028, yyq3028, yy2arr3028
			const yyr3028 bool = false
			if yyr3028 || yy2arr3028 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3028 int = 1
				for _, b := range yyq3028 {
					if b {
						yynn3028++
					}
				}
				r.EncodeMapStart(yynn3028)
			}
			if yyr3028 || yy2arr3028 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3030 := z.EncBinary()
					_ = yym3030
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3031 := z.EncBinary()
					_ = yym3031
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep3028 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3032 := z.DecBinary()
	_ = yym3032
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3033 := r.ReadMapStart()
			if yyl3033 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3033, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3033 := r.ReadArrayStart()
			if yyl3033 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3033, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3034Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3034Slc
	var yyhl3034 bool = l >= 0
	for yyj3034 := 0; ; yyj3034++ {
		if yyhl3034 {
			if yyj3034 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3034Slc = r.DecodeBytes(yys3034Slc, true, true)
		yys3034 := string(yys3034Slc)
		switch yys3034 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3035 := &x.Limits
				yym3036 := z.DecBinary()
				_ = yym3036
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3035), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3034)
		} // end switch yys3034
	} // end for yyj3034
	if !yyhl3034 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3037 int
	var yyb3037 bool
	var yyhl3037 bool = l >= 0
	yyj3037++
	if yyhl3037 {
		yyb3037 = yyj3037 > l
	} else {
		yyb3037 = r.CheckBreak()
	}
	if yyb3037 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3038 := &x.Limits
		yym3039 := z.DecBinary()
		_ = yym3039
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3038), d)
		}
	}
	for {
		yyj3037++
		if yyhl3037 {
			yyb3037 = yyj3037 > l
		} else {
			yyb3037 = r.CheckBreak()
		}
		if yyb3037 {
			break
		}
		z.DecStructFieldNotFound(yyj3037-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3040 := z.EncBinary()
		_ = yym3040
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3041 := !z.EncBinary()
			yy2arr3041 := z.EncBasicHandle().StructToArray
			var yyq3041 [4]bool
			_, _, _ = yysep3041, yyq3041, yy2arr3041
			const yyr3041 bool = false
			yyq3041[0] = x.Kind != ""
			yyq3041[1] = x.APIVersion != ""
			yyq3041[2] = true
			yyq3041[3] = true
			if yyr3041 || yy2arr3041 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3041 int = 0
				for _, b := range yyq3041 {
					if b {
						yynn3041++
					}
				}
				r.EncodeMapStart(yynn3041)
			}
			if yyr3041 || yy2arr3041 {
				if yyq3041[0] {
					yym3043 := z.EncBinary()
					_ = yym3043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3041[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3044 := z.EncBinary()
					_ = yym3044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3041 || yy2arr3041 {
				if yyq3041[1] {
					yym3046 := z.EncBinary()
					_ = yym3046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3041[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3047 := z.EncBinary()
					_ = yym3047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3041 || yy2arr3041 {
				if yyq3041[2] {
					yy3049 := &x.ObjectMeta
					yy3049.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3041[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3050 := &x.ObjectMeta
					yy3050.CodecEncodeSelf(e)
				}
			}
			if yyr3041 || yy2arr3041 {
				if yyq3041[3] {
					yy3052 := &x.Spec
					yy3052.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3041[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3053 := &x.Spec
					yy3053.CodecEncodeSelf(e)
				}
			}
			if yysep3041 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3054 := z.DecBinary()
	_ = yym3054
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3055 := r.ReadMapStart()
			if yyl3055 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3055, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3055 := r.ReadArrayStart()
			if yyl3055 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3055, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3056Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3056Slc
	var yyhl3056 bool = l >= 0
	for yyj3056 := 0; ; yyj3056++ {
		if yyhl3056 {
			if yyj3056 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3056Slc = r.DecodeBytes(yys3056Slc, true, true)
		yys3056 := string(yys3056Slc)
		switch yys3056 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3059 := &x.ObjectMeta
				yyv3059.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3060 := &x.Spec
				yyv3060.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3056)
		} // end switch yys3056
	} // end for yyj3056
	if !yyhl3056 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3061 int
	var yyb3061 bool
	var yyhl3061 bool = l >= 0
	yyj3061++
	if yyhl3061 {
		yyb3061 = yyj3061 > l
	} else {
		yyb3061 = r.CheckBreak()
	}
	if yyb3061 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3061++
	if yyhl3061 {
		yyb3061 = yyj3061 > l
	} else {
		yyb3061 = r.CheckBreak()
	}
	if yyb3061 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3061++
	if yyhl3061 {
		yyb3061 = yyj3061 > l
	} else {
		yyb3061 = r.CheckBreak()
	}
	if yyb3061 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3064 := &x.ObjectMeta
		yyv3064.CodecDecodeSelf(d)
	}
	yyj3061++
	if yyhl3061 {
		yyb3061 = yyj3061 > l
	} else {
		yyb3061 = r.CheckBreak()
	}
	if yyb3061 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3065 := &x.Spec
		yyv3065.CodecDecodeSelf(d)
	}
	for {
		yyj3061++
		if yyhl3061 {
			yyb3061 = yyj3061 > l
		} else {
			yyb3061 = r.CheckBreak()
		}
		if yyb3061 {
			break
		}
		z.DecStructFieldNotFound(yyj3061-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3066 := z.EncBinary()
		_ = yym3066
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3067 := !z.EncBinary()
			yy2arr3067 := z.EncBasicHandle().StructToArray
			var yyq3067 [4]bool
			_, _, _ = yysep3067, yyq3067, yy2arr3067
			const yyr3067 bool = false
			yyq3067[0] = x.Kind != ""
			yyq3067[1] = x.APIVersion != ""
			yyq3067[2] = true
			if yyr3067 || yy2arr3067 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3067 int = 1
				for _, b := range yyq3067 {
					if b {
						yynn3067++
					}
				}
				r.EncodeMapStart(yynn3067)
			}
			if yyr3067 || yy2arr3067 {
				if yyq3067[0] {
					yym3069 := z.EncBinary()
					_ = yym3069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3067[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3070 := z.EncBinary()
					_ = yym3070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3067 || yy2arr3067 {
				if yyq3067[1] {
					yym3072 := z.EncBinary()
					_ = yym3072
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3067[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3073 := z.EncBinary()
					_ = yym3073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3067 || yy2arr3067 {
				if yyq3067[2] {
					yy3075 := &x.ListMeta
					yym3076 := z.EncBinary()
					_ = yym3076
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3075) {
					} else {
						z.EncFallback(yy3075)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3067[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3077 := &x.ListMeta
					yym3078 := z.EncBinary()
					_ = yym3078
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3077) {
					} else {
						z.EncFallback(yy3077)
					}
				}
			}
			if yyr3067 || yy2arr3067 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3080 := z.EncBinary()
					_ = yym3080
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3081 := z.EncBinary()
					_ = yym3081
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3067 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3082 := z.DecBinary()
	_ = yym3082
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3083 := r.ReadMapStart()
			if yyl3083 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3083, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3083 := r.ReadArrayStart()
			if yyl3083 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3083, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3084Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3084Slc
	var yyhl3084 bool = l >= 0
	for yyj3084 := 0; ; yyj3084++ {
		if yyhl3084 {
			if yyj3084 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3084Slc = r.DecodeBytes(yys3084Slc, true, true)
		yys3084 := string(yys3084Slc)
		switch yys3084 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3087 := &x.ListMeta
				yym3088 := z.DecBinary()
				_ = yym3088
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3087) {
				} else {
					z.DecFallback(yyv3087, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3089 := &x.Items
				yym3090 := z.DecBinary()
				_ = yym3090
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3089), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3084)
		} // end switch yys3084
	} // end for yyj3084
	if !yyhl3084 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3091 int
	var yyb3091 bool
	var yyhl3091 bool = l >= 0
	yyj3091++
	if yyhl3091 {
		yyb3091 = yyj3091 > l
	} else {
		yyb3091 = r.CheckBreak()
	}
	if yyb3091 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3091++
	if yyhl3091 {
		yyb3091 = yyj3091 > l
	} else {
		yyb3091 = r.CheckBreak()
	}
	if yyb3091 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3091++
	if yyhl3091 {
		yyb3091 = yyj3091 > l
	} else {
		yyb3091 = r.CheckBreak()
	}
	if yyb3091 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3094 := &x.ListMeta
		yym3095 := z.DecBinary()
		_ = yym3095
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3094) {
		} else {
			z.DecFallback(yyv3094, false)
		}
	}
	yyj3091++
	if yyhl3091 {
		yyb3091 = yyj3091 > l
	} else {
		yyb3091 = r.CheckBreak()
	}
	if yyb3091 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3096 := &x.Items
		yym3097 := z.DecBinary()
		_ = yym3097
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3096), d)
		}
	}
	for {
		yyj3091++
		if yyhl3091 {
			yyb3091 = yyj3091 > l
		} else {
			yyb3091 = r.CheckBreak()
		}
		if yyb3091 {
			break
		}
		z.DecStructFieldNotFound(yyj3091-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3098 := z.EncBinary()
		_ = yym3098
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3099 := !z.EncBinary()
			yy2arr3099 := z.EncBasicHandle().StructToArray
			var yyq3099 [1]bool
			_, _, _ = yysep3099, yyq3099, yy2arr3099
			const yyr3099 bool = false
			yyq3099[0] = len(x.Hard) != 0
			if yyr3099 || yy2arr3099 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3099 int = 0
				for _, b := range yyq3099 {
					if b {
						yynn3099++
					}
				}
				r.EncodeMapStart(yynn3099)
			}
			if yyr3099 || yy2arr3099 {
				if yyq3099[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3099[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3099 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3101 := z.DecBinary()
	_ = yym3101
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3102 := r.ReadMapStart()
			if yyl3102 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3102, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3102 := r.ReadArrayStart()
			if yyl3102 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3102, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3103Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3103Slc
	var yyhl3103 bool = l >= 0
	for yyj3103 := 0; ; yyj3103++ {
		if yyhl3103 {
			if yyj3103 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3103Slc = r.DecodeBytes(yys3103Slc, true, true)
		yys3103 := string(yys3103Slc)
		switch yys3103 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3104 := &x.Hard
				yyv3104.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3103)
		} // end switch yys3103
	} // end for yyj3103
	if !yyhl3103 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3105 int
	var yyb3105 bool
	var yyhl3105 bool = l >= 0
	yyj3105++
	if yyhl3105 {
		yyb3105 = yyj3105 > l
	} else {
		yyb3105 = r.CheckBreak()
	}
	if yyb3105 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3106 := &x.Hard
		yyv3106.CodecDecodeSelf(d)
	}
	for {
		yyj3105++
		if yyhl3105 {
			yyb3105 = yyj3105 > l
		} else {
			yyb3105 = r.CheckBreak()
		}
		if yyb3105 {
			break
		}
		z.DecStructFieldNotFound(yyj3105-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3107 := z.EncBinary()
		_ = yym3107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3108 := !z.EncBinary()
			yy2arr3108 := z.EncBasicHandle().StructToArray
			var yyq3108 [2]bool
			_, _, _ = yysep3108, yyq3108, yy2arr3108
			const yyr3108 bool = false
			yyq3108[0] = len(x.Hard) != 0
			yyq3108[1] = len(x.Used) != 0
			if yyr3108 || yy2arr3108 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3108 int = 0
				for _, b := range yyq3108 {
					if b {
						yynn3108++
					}
				}
				r.EncodeMapStart(yynn3108)
			}
			if yyr3108 || yy2arr3108 {
				if yyq3108[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3108[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3108 || yy2arr3108 {
				if yyq3108[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3108[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3108 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3111 := z.DecBinary()
	_ = yym3111
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3112 := r.ReadMapStart()
			if yyl3112 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3112, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3112 := r.ReadArrayStart()
			if yyl3112 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3112, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3113Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3113Slc
	var yyhl3113 bool = l >= 0
	for yyj3113 := 0; ; yyj3113++ {
		if yyhl3113 {
			if yyj3113 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3113Slc = r.DecodeBytes(yys3113Slc, true, true)
		yys3113 := string(yys3113Slc)
		switch yys3113 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3114 := &x.Hard
				yyv3114.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3115 := &x.Used
				yyv3115.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3113)
		} // end switch yys3113
	} // end for yyj3113
	if !yyhl3113 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3116 int
	var yyb3116 bool
	var yyhl3116 bool = l >= 0
	yyj3116++
	if yyhl3116 {
		yyb3116 = yyj3116 > l
	} else {
		yyb3116 = r.CheckBreak()
	}
	if yyb3116 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3117 := &x.Hard
		yyv3117.CodecDecodeSelf(d)
	}
	yyj3116++
	if yyhl3116 {
		yyb3116 = yyj3116 > l
	} else {
		yyb3116 = r.CheckBreak()
	}
	if yyb3116 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3118 := &x.Used
		yyv3118.CodecDecodeSelf(d)
	}
	for {
		yyj3116++
		if yyhl3116 {
			yyb3116 = yyj3116 > l
		} else {
			yyb3116 = r.CheckBreak()
		}
		if yyb3116 {
			break
		}
		z.DecStructFieldNotFound(yyj3116-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3119 := z.EncBinary()
		_ = yym3119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3120 := !z.EncBinary()
			yy2arr3120 := z.EncBasicHandle().StructToArray
			var yyq3120 [5]bool
			_, _, _ = yysep3120, yyq3120, yy2arr3120
			const yyr3120 bool = false
			yyq3120[0] = x.Kind != ""
			yyq3120[1] = x.APIVersion != ""
			yyq3120[2] = true
			yyq3120[3] = true
			yyq3120[4] = true
			if yyr3120 || yy2arr3120 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3120 int = 0
				for _, b := range yyq3120 {
					if b {
						yynn3120++
					}
				}
				r.EncodeMapStart(yynn3120)
			}
			if yyr3120 || yy2arr3120 {
				if yyq3120[0] {
					yym3122 := z.EncBinary()
					_ = yym3122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3120[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3123 := z.EncBinary()
					_ = yym3123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3120 || yy2arr3120 {
				if yyq3120[1] {
					yym3125 := z.EncBinary()
					_ = yym3125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3120[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3126 := z.EncBinary()
					_ = yym3126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3120 || yy2arr3120 {
				if yyq3120[2] {
					yy3128 := &x.ObjectMeta
					yy3128.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3120[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3129 := &x.ObjectMeta
					yy3129.CodecEncodeSelf(e)
				}
			}
			if yyr3120 || yy2arr3120 {
				if yyq3120[3] {
					yy3131 := &x.Spec
					yy3131.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3120[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3132 := &x.Spec
					yy3132.CodecEncodeSelf(e)
				}
			}
			if yyr3120 || yy2arr3120 {
				if yyq3120[4] {
					yy3134 := &x.Status
					yy3134.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3120[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3135 := &x.Status
					yy3135.CodecEncodeSelf(e)
				}
			}
			if yysep3120 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3136 := z.DecBinary()
	_ = yym3136
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3137 := r.ReadMapStart()
			if yyl3137 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3137, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3137 := r.ReadArrayStart()
			if yyl3137 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3137, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3138Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3138Slc
	var yyhl3138 bool = l >= 0
	for yyj3138 := 0; ; yyj3138++ {
		if yyhl3138 {
			if yyj3138 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3138Slc = r.DecodeBytes(yys3138Slc, true, true)
		yys3138 := string(yys3138Slc)
		switch yys3138 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3141 := &x.ObjectMeta
				yyv3141.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3142 := &x.Spec
				yyv3142.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3143 := &x.Status
				yyv3143.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3138)
		} // end switch yys3138
	} // end for yyj3138
	if !yyhl3138 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3144 int
	var yyb3144 bool
	var yyhl3144 bool = l >= 0
	yyj3144++
	if yyhl3144 {
		yyb3144 = yyj3144 > l
	} else {
		yyb3144 = r.CheckBreak()
	}
	if yyb3144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3144++
	if yyhl3144 {
		yyb3144 = yyj3144 > l
	} else {
		yyb3144 = r.CheckBreak()
	}
	if yyb3144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3144++
	if yyhl3144 {
		yyb3144 = yyj3144 > l
	} else {
		yyb3144 = r.CheckBreak()
	}
	if yyb3144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3147 := &x.ObjectMeta
		yyv3147.CodecDecodeSelf(d)
	}
	yyj3144++
	if yyhl3144 {
		yyb3144 = yyj3144 > l
	} else {
		yyb3144 = r.CheckBreak()
	}
	if yyb3144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3148 := &x.Spec
		yyv3148.CodecDecodeSelf(d)
	}
	yyj3144++
	if yyhl3144 {
		yyb3144 = yyj3144 > l
	} else {
		yyb3144 = r.CheckBreak()
	}
	if yyb3144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3149 := &x.Status
		yyv3149.CodecDecodeSelf(d)
	}
	for {
		yyj3144++
		if yyhl3144 {
			yyb3144 = yyj3144 > l
		} else {
			yyb3144 = r.CheckBreak()
		}
		if yyb3144 {
			break
		}
		z.DecStructFieldNotFound(yyj3144-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3150 := z.EncBinary()
		_ = yym3150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3151 := !z.EncBinary()
			yy2arr3151 := z.EncBasicHandle().StructToArray
			var yyq3151 [4]bool
			_, _, _ = yysep3151, yyq3151, yy2arr3151
			const yyr3151 bool = false
			yyq3151[0] = x.Kind != ""
			yyq3151[1] = x.APIVersion != ""
			yyq3151[2] = true
			if yyr3151 || yy2arr3151 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3151 int = 1
				for _, b := range yyq3151 {
					if b {
						yynn3151++
					}
				}
				r.EncodeMapStart(yynn3151)
			}
			if yyr3151 || yy2arr3151 {
				if yyq3151[0] {
					yym3153 := z.EncBinary()
					_ = yym3153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3151[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3154 := z.EncBinary()
					_ = yym3154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3151 || yy2arr3151 {
				if yyq3151[1] {
					yym3156 := z.EncBinary()
					_ = yym3156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3151[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3157 := z.EncBinary()
					_ = yym3157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3151 || yy2arr3151 {
				if yyq3151[2] {
					yy3159 := &x.ListMeta
					yym3160 := z.EncBinary()
					_ = yym3160
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3159) {
					} else {
						z.EncFallback(yy3159)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3151[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3161 := &x.ListMeta
					yym3162 := z.EncBinary()
					_ = yym3162
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3161) {
					} else {
						z.EncFallback(yy3161)
					}
				}
			}
			if yyr3151 || yy2arr3151 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3164 := z.EncBinary()
					_ = yym3164
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3165 := z.EncBinary()
					_ = yym3165
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3151 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3166 := z.DecBinary()
	_ = yym3166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3167 := r.ReadMapStart()
			if yyl3167 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3167, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3167 := r.ReadArrayStart()
			if yyl3167 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3167, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3168Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3168Slc
	var yyhl3168 bool = l >= 0
	for yyj3168 := 0; ; yyj3168++ {
		if yyhl3168 {
			if yyj3168 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3168Slc = r.DecodeBytes(yys3168Slc, true, true)
		yys3168 := string(yys3168Slc)
		switch yys3168 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3171 := &x.ListMeta
				yym3172 := z.DecBinary()
				_ = yym3172
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3171) {
				} else {
					z.DecFallback(yyv3171, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3173 := &x.Items
				yym3174 := z.DecBinary()
				_ = yym3174
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3173), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3168)
		} // end switch yys3168
	} // end for yyj3168
	if !yyhl3168 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3175 int
	var yyb3175 bool
	var yyhl3175 bool = l >= 0
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3178 := &x.ListMeta
		yym3179 := z.DecBinary()
		_ = yym3179
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3178) {
		} else {
			z.DecFallback(yyv3178, false)
		}
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3180 := &x.Items
		yym3181 := z.DecBinary()
		_ = yym3181
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3180), d)
		}
	}
	for {
		yyj3175++
		if yyhl3175 {
			yyb3175 = yyj3175 > l
		} else {
			yyb3175 = r.CheckBreak()
		}
		if yyb3175 {
			break
		}
		z.DecStructFieldNotFound(yyj3175-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3182 := z.EncBinary()
		_ = yym3182
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3183 := !z.EncBinary()
			yy2arr3183 := z.EncBasicHandle().StructToArray
			var yyq3183 [5]bool
			_, _, _ = yysep3183, yyq3183, yy2arr3183
			const yyr3183 bool = false
			yyq3183[0] = x.Kind != ""
			yyq3183[1] = x.APIVersion != ""
			yyq3183[2] = true
			yyq3183[3] = len(x.Data) != 0
			yyq3183[4] = x.Type != ""
			if yyr3183 || yy2arr3183 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3183 int = 0
				for _, b := range yyq3183 {
					if b {
						yynn3183++
					}
				}
				r.EncodeMapStart(yynn3183)
			}
			if yyr3183 || yy2arr3183 {
				if yyq3183[0] {
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3183[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3186 := z.EncBinary()
					_ = yym3186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3183 || yy2arr3183 {
				if yyq3183[1] {
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3183[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3189 := z.EncBinary()
					_ = yym3189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3183 || yy2arr3183 {
				if yyq3183[2] {
					yy3191 := &x.ObjectMeta
					yy3191.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3183[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3192 := &x.ObjectMeta
					yy3192.CodecEncodeSelf(e)
				}
			}
			if yyr3183 || yy2arr3183 {
				if yyq3183[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3194 := z.EncBinary()
						_ = yym3194
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3183[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3195 := z.EncBinary()
						_ = yym3195
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3183 || yy2arr3183 {
				if yyq3183[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3183[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3183 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3197 := z.DecBinary()
	_ = yym3197
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3198 := r.ReadMapStart()
			if yyl3198 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3198, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3198 := r.ReadArrayStart()
			if yyl3198 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3198, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3199Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3199Slc
	var yyhl3199 bool = l >= 0
	for yyj3199 := 0; ; yyj3199++ {
		if yyhl3199 {
			if yyj3199 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3199Slc = r.DecodeBytes(yys3199Slc, true, true)
		yys3199 := string(yys3199Slc)
		switch yys3199 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3202 := &x.ObjectMeta
				yyv3202.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3203 := &x.Data
				yym3204 := z.DecBinary()
				_ = yym3204
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3203), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3199)
		} // end switch yys3199
	} // end for yyj3199
	if !yyhl3199 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3206 int
	var yyb3206 bool
	var yyhl3206 bool = l >= 0
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3209 := &x.ObjectMeta
		yyv3209.CodecDecodeSelf(d)
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3210 := &x.Data
		yym3211 := z.DecBinary()
		_ = yym3211
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3210), d)
		}
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3206++
		if yyhl3206 {
			yyb3206 = yyj3206 > l
		} else {
			yyb3206 = r.CheckBreak()
		}
		if yyb3206 {
			break
		}
		z.DecStructFieldNotFound(yyj3206-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3213 := z.EncBinary()
	_ = yym3213
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3214 := z.DecBinary()
	_ = yym3214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3215 := z.EncBinary()
		_ = yym3215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3216 := !z.EncBinary()
			yy2arr3216 := z.EncBasicHandle().StructToArray
			var yyq3216 [4]bool
			_, _, _ = yysep3216, yyq3216, yy2arr3216
			const yyr3216 bool = false
			yyq3216[0] = x.Kind != ""
			yyq3216[1] = x.APIVersion != ""
			yyq3216[2] = true
			if yyr3216 || yy2arr3216 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3216 int = 1
				for _, b := range yyq3216 {
					if b {
						yynn3216++
					}
				}
				r.EncodeMapStart(yynn3216)
			}
			if yyr3216 || yy2arr3216 {
				if yyq3216[0] {
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3216[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3219 := z.EncBinary()
					_ = yym3219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				if yyq3216[1] {
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3216[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				if yyq3216[2] {
					yy3224 := &x.ListMeta
					yym3225 := z.EncBinary()
					_ = yym3225
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3224) {
					} else {
						z.EncFallback(yy3224)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3216[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3226 := &x.ListMeta
					yym3227 := z.EncBinary()
					_ = yym3227
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3226) {
					} else {
						z.EncFallback(yy3226)
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3229 := z.EncBinary()
					_ = yym3229
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3230 := z.EncBinary()
					_ = yym3230
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3216 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3231 := z.DecBinary()
	_ = yym3231
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3232 := r.ReadMapStart()
			if yyl3232 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3232, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3232 := r.ReadArrayStart()
			if yyl3232 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3232, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3233Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3233Slc
	var yyhl3233 bool = l >= 0
	for yyj3233 := 0; ; yyj3233++ {
		if yyhl3233 {
			if yyj3233 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3233Slc = r.DecodeBytes(yys3233Slc, true, true)
		yys3233 := string(yys3233Slc)
		switch yys3233 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3236 := &x.ListMeta
				yym3237 := z.DecBinary()
				_ = yym3237
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3236) {
				} else {
					z.DecFallback(yyv3236, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3238 := &x.Items
				yym3239 := z.DecBinary()
				_ = yym3239
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3238), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3233)
		} // end switch yys3233
	} // end for yyj3233
	if !yyhl3233 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3240 int
	var yyb3240 bool
	var yyhl3240 bool = l >= 0
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3243 := &x.ListMeta
		yym3244 := z.DecBinary()
		_ = yym3244
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3243) {
		} else {
			z.DecFallback(yyv3243, false)
		}
	}
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3245 := &x.Items
		yym3246 := z.DecBinary()
		_ = yym3246
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3245), d)
		}
	}
	for {
		yyj3240++
		if yyhl3240 {
			yyb3240 = yyj3240 > l
		} else {
			yyb3240 = r.CheckBreak()
		}
		if yyb3240 {
			break
		}
		z.DecStructFieldNotFound(yyj3240-1, "")
	}
	r.ReadEnd()
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3247 := z.EncBinary()
	_ = yym3247
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3248 := z.DecBinary()
	_ = yym3248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3249 := z.EncBinary()
		_ = yym3249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3250 := !z.EncBinary()
			yy2arr3250 := z.EncBasicHandle().StructToArray
			var yyq3250 [4]bool
			_, _, _ = yysep3250, yyq3250, yy2arr3250
			const yyr3250 bool = false
			yyq3250[2] = x.Message != ""
			yyq3250[3] = x.Error != ""
			if yyr3250 || yy2arr3250 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3250 int = 2
				for _, b := range yyq3250 {
					if b {
						yynn3250++
					}
				}
				r.EncodeMapStart(yynn3250)
			}
			if yyr3250 || yy2arr3250 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3250 || yy2arr3250 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3250 || yy2arr3250 {
				if yyq3250[2] {
					yym3254 := z.EncBinary()
					_ = yym3254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3255 := z.EncBinary()
					_ = yym3255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3250 || yy2arr3250 {
				if yyq3250[3] {
					yym3257 := z.EncBinary()
					_ = yym3257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3250[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3258 := z.EncBinary()
					_ = yym3258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3259 := z.DecBinary()
	_ = yym3259
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3260 := r.ReadMapStart()
			if yyl3260 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3260, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3260 := r.ReadArrayStart()
			if yyl3260 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3260, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3261Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3261Slc
	var yyhl3261 bool = l >= 0
	for yyj3261 := 0; ; yyj3261++ {
		if yyhl3261 {
			if yyj3261 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3261Slc = r.DecodeBytes(yys3261Slc, true, true)
		yys3261 := string(yys3261Slc)
		switch yys3261 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3261)
		} // end switch yys3261
	} // end for yyj3261
	if !yyhl3261 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3266 int
	var yyb3266 bool
	var yyhl3266 bool = l >= 0
	yyj3266++
	if yyhl3266 {
		yyb3266 = yyj3266 > l
	} else {
		yyb3266 = r.CheckBreak()
	}
	if yyb3266 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3266++
	if yyhl3266 {
		yyb3266 = yyj3266 > l
	} else {
		yyb3266 = r.CheckBreak()
	}
	if yyb3266 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3266++
	if yyhl3266 {
		yyb3266 = yyj3266 > l
	} else {
		yyb3266 = r.CheckBreak()
	}
	if yyb3266 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3266++
	if yyhl3266 {
		yyb3266 = yyj3266 > l
	} else {
		yyb3266 = r.CheckBreak()
	}
	if yyb3266 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3266++
		if yyhl3266 {
			yyb3266 = yyj3266 > l
		} else {
			yyb3266 = r.CheckBreak()
		}
		if yyb3266 {
			break
		}
		z.DecStructFieldNotFound(yyj3266-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3271 := z.EncBinary()
		_ = yym3271
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3272 := !z.EncBinary()
			yy2arr3272 := z.EncBasicHandle().StructToArray
			var yyq3272 [4]bool
			_, _, _ = yysep3272, yyq3272, yy2arr3272
			const yyr3272 bool = false
			yyq3272[0] = x.Kind != ""
			yyq3272[1] = x.APIVersion != ""
			yyq3272[2] = true
			yyq3272[3] = len(x.Conditions) != 0
			if yyr3272 || yy2arr3272 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3272 int = 0
				for _, b := range yyq3272 {
					if b {
						yynn3272++
					}
				}
				r.EncodeMapStart(yynn3272)
			}
			if yyr3272 || yy2arr3272 {
				if yyq3272[0] {
					yym3274 := z.EncBinary()
					_ = yym3274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3272[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3275 := z.EncBinary()
					_ = yym3275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3272 || yy2arr3272 {
				if yyq3272[1] {
					yym3277 := z.EncBinary()
					_ = yym3277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3272[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3278 := z.EncBinary()
					_ = yym3278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3272 || yy2arr3272 {
				if yyq3272[2] {
					yy3280 := &x.ObjectMeta
					yy3280.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3272[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3281 := &x.ObjectMeta
					yy3281.CodecEncodeSelf(e)
				}
			}
			if yyr3272 || yy2arr3272 {
				if yyq3272[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3283 := z.EncBinary()
						_ = yym3283
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3272[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3284 := z.EncBinary()
						_ = yym3284
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3272 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3285 := z.DecBinary()
	_ = yym3285
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3286 := r.ReadMapStart()
			if yyl3286 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3286, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3286 := r.ReadArrayStart()
			if yyl3286 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3286, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3287Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3287Slc
	var yyhl3287 bool = l >= 0
	for yyj3287 := 0; ; yyj3287++ {
		if yyhl3287 {
			if yyj3287 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3287Slc = r.DecodeBytes(yys3287Slc, true, true)
		yys3287 := string(yys3287Slc)
		switch yys3287 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3290 := &x.ObjectMeta
				yyv3290.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3291 := &x.Conditions
				yym3292 := z.DecBinary()
				_ = yym3292
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3291), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3287)
		} // end switch yys3287
	} // end for yyj3287
	if !yyhl3287 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3293 int
	var yyb3293 bool
	var yyhl3293 bool = l >= 0
	yyj3293++
	if yyhl3293 {
		yyb3293 = yyj3293 > l
	} else {
		yyb3293 = r.CheckBreak()
	}
	if yyb3293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3293++
	if yyhl3293 {
		yyb3293 = yyj3293 > l
	} else {
		yyb3293 = r.CheckBreak()
	}
	if yyb3293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3293++
	if yyhl3293 {
		yyb3293 = yyj3293 > l
	} else {
		yyb3293 = r.CheckBreak()
	}
	if yyb3293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3296 := &x.ObjectMeta
		yyv3296.CodecDecodeSelf(d)
	}
	yyj3293++
	if yyhl3293 {
		yyb3293 = yyj3293 > l
	} else {
		yyb3293 = r.CheckBreak()
	}
	if yyb3293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3297 := &x.Conditions
		yym3298 := z.DecBinary()
		_ = yym3298
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3297), d)
		}
	}
	for {
		yyj3293++
		if yyhl3293 {
			yyb3293 = yyj3293 > l
		} else {
			yyb3293 = r.CheckBreak()
		}
		if yyb3293 {
			break
		}
		z.DecStructFieldNotFound(yyj3293-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3299 := z.EncBinary()
		_ = yym3299
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3300 := !z.EncBinary()
			yy2arr3300 := z.EncBasicHandle().StructToArray
			var yyq3300 [4]bool
			_, _, _ = yysep3300, yyq3300, yy2arr3300
			const yyr3300 bool = false
			yyq3300[0] = x.Kind != ""
			yyq3300[1] = x.APIVersion != ""
			yyq3300[2] = true
			if yyr3300 || yy2arr3300 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3300 int = 1
				for _, b := range yyq3300 {
					if b {
						yynn3300++
					}
				}
				r.EncodeMapStart(yynn3300)
			}
			if yyr3300 || yy2arr3300 {
				if yyq3300[0] {
					yym3302 := z.EncBinary()
					_ = yym3302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3300[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3303 := z.EncBinary()
					_ = yym3303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3300 || yy2arr3300 {
				if yyq3300[1] {
					yym3305 := z.EncBinary()
					_ = yym3305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3300[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3306 := z.EncBinary()
					_ = yym3306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3300 || yy2arr3300 {
				if yyq3300[2] {
					yy3308 := &x.ListMeta
					yym3309 := z.EncBinary()
					_ = yym3309
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3308) {
					} else {
						z.EncFallback(yy3308)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3300[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3310 := &x.ListMeta
					yym3311 := z.EncBinary()
					_ = yym3311
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3310) {
					} else {
						z.EncFallback(yy3310)
					}
				}
			}
			if yyr3300 || yy2arr3300 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3313 := z.EncBinary()
					_ = yym3313
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3314 := z.EncBinary()
					_ = yym3314
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3300 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3315 := z.DecBinary()
	_ = yym3315
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3316 := r.ReadMapStart()
			if yyl3316 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3316, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3316 := r.ReadArrayStart()
			if yyl3316 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3316, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3317Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3317Slc
	var yyhl3317 bool = l >= 0
	for yyj3317 := 0; ; yyj3317++ {
		if yyhl3317 {
			if yyj3317 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3317Slc = r.DecodeBytes(yys3317Slc, true, true)
		yys3317 := string(yys3317Slc)
		switch yys3317 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3320 := &x.ListMeta
				yym3321 := z.DecBinary()
				_ = yym3321
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3320) {
				} else {
					z.DecFallback(yyv3320, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3322 := &x.Items
				yym3323 := z.DecBinary()
				_ = yym3323
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3322), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3317)
		} // end switch yys3317
	} // end for yyj3317
	if !yyhl3317 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3324 int
	var yyb3324 bool
	var yyhl3324 bool = l >= 0
	yyj3324++
	if yyhl3324 {
		yyb3324 = yyj3324 > l
	} else {
		yyb3324 = r.CheckBreak()
	}
	if yyb3324 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3324++
	if yyhl3324 {
		yyb3324 = yyj3324 > l
	} else {
		yyb3324 = r.CheckBreak()
	}
	if yyb3324 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3324++
	if yyhl3324 {
		yyb3324 = yyj3324 > l
	} else {
		yyb3324 = r.CheckBreak()
	}
	if yyb3324 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3327 := &x.ListMeta
		yym3328 := z.DecBinary()
		_ = yym3328
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3327) {
		} else {
			z.DecFallback(yyv3327, false)
		}
	}
	yyj3324++
	if yyhl3324 {
		yyb3324 = yyj3324 > l
	} else {
		yyb3324 = r.CheckBreak()
	}
	if yyb3324 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3329 := &x.Items
		yym3330 := z.DecBinary()
		_ = yym3330
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3329), d)
		}
	}
	for {
		yyj3324++
		if yyhl3324 {
			yyb3324 = yyj3324 > l
		} else {
			yyb3324 = r.CheckBreak()
		}
		if yyb3324 {
			break
		}
		z.DecStructFieldNotFound(yyj3324-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3331 := z.EncBinary()
		_ = yym3331
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3332 := !z.EncBinary()
			yy2arr3332 := z.EncBasicHandle().StructToArray
			var yyq3332 [1]bool
			_, _, _ = yysep3332, yyq3332, yy2arr3332
			const yyr3332 bool = false
			yyq3332[0] = len(x.Items) != 0
			if yyr3332 || yy2arr3332 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3332 int = 0
				for _, b := range yyq3332 {
					if b {
						yynn3332++
					}
				}
				r.EncodeMapStart(yynn3332)
			}
			if yyr3332 || yy2arr3332 {
				if yyq3332[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3334 := z.EncBinary()
						_ = yym3334
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3332[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3335 := z.EncBinary()
						_ = yym3335
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep3332 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3336 := z.DecBinary()
	_ = yym3336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3337 := r.ReadMapStart()
			if yyl3337 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3337, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3337 := r.ReadArrayStart()
			if yyl3337 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3337, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3338Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3338Slc
	var yyhl3338 bool = l >= 0
	for yyj3338 := 0; ; yyj3338++ {
		if yyhl3338 {
			if yyj3338 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3338Slc = r.DecodeBytes(yys3338Slc, true, true)
		yys3338 := string(yys3338Slc)
		switch yys3338 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3339 := &x.Items
				yym3340 := z.DecBinary()
				_ = yym3340
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3339), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3338)
		} // end switch yys3338
	} // end for yyj3338
	if !yyhl3338 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3341 int
	var yyb3341 bool
	var yyhl3341 bool = l >= 0
	yyj3341++
	if yyhl3341 {
		yyb3341 = yyj3341 > l
	} else {
		yyb3341 = r.CheckBreak()
	}
	if yyb3341 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3342 := &x.Items
		yym3343 := z.DecBinary()
		_ = yym3343
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3342), d)
		}
	}
	for {
		yyj3341++
		if yyhl3341 {
			yyb3341 = yyj3341 > l
		} else {
			yyb3341 = r.CheckBreak()
		}
		if yyb3341 {
			break
		}
		z.DecStructFieldNotFound(yyj3341-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3344 := z.EncBinary()
		_ = yym3344
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3345 := !z.EncBinary()
			yy2arr3345 := z.EncBasicHandle().StructToArray
			var yyq3345 [2]bool
			_, _, _ = yysep3345, yyq3345, yy2arr3345
			const yyr3345 bool = false
			if yyr3345 || yy2arr3345 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3345 int = 2
				for _, b := range yyq3345 {
					if b {
						yynn3345++
					}
				}
				r.EncodeMapStart(yynn3345)
			}
			if yyr3345 || yy2arr3345 {
				yym3347 := z.EncBinary()
				_ = yym3347
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym3348 := z.EncBinary()
				_ = yym3348
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3345 || yy2arr3345 {
				yy3350 := &x.FieldRef
				yy3350.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy3351 := &x.FieldRef
				yy3351.CodecEncodeSelf(e)
			}
			if yysep3345 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3352 := z.DecBinary()
	_ = yym3352
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3353 := r.ReadMapStart()
			if yyl3353 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3353, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3353 := r.ReadArrayStart()
			if yyl3353 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3353, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3354Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3354Slc
	var yyhl3354 bool = l >= 0
	for yyj3354 := 0; ; yyj3354++ {
		if yyhl3354 {
			if yyj3354 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3354Slc = r.DecodeBytes(yys3354Slc, true, true)
		yys3354 := string(yys3354Slc)
		switch yys3354 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3356 := &x.FieldRef
				yyv3356.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3354)
		} // end switch yys3354
	} // end for yyj3354
	if !yyhl3354 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3357 int
	var yyb3357 bool
	var yyhl3357 bool = l >= 0
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3359 := &x.FieldRef
		yyv3359.CodecDecodeSelf(d)
	}
	for {
		yyj3357++
		if yyhl3357 {
			yyb3357 = yyj3357 > l
		} else {
			yyb3357 = r.CheckBreak()
		}
		if yyb3357 {
			break
		}
		z.DecStructFieldNotFound(yyj3357-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3360 := z.EncBinary()
		_ = yym3360
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3361 := !z.EncBinary()
			yy2arr3361 := z.EncBasicHandle().StructToArray
			var yyq3361 [5]bool
			_, _, _ = yysep3361, yyq3361, yy2arr3361
			const yyr3361 bool = false
			yyq3361[0] = x.Capabilities != nil
			yyq3361[1] = x.Privileged != nil
			yyq3361[2] = x.SELinuxOptions != nil
			yyq3361[3] = x.RunAsUser != nil
			yyq3361[4] = x.RunAsNonRoot != nil
			if yyr3361 || yy2arr3361 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3361 int = 0
				for _, b := range yyq3361 {
					if b {
						yynn3361++
					}
				}
				r.EncodeMapStart(yynn3361)
			}
			if yyr3361 || yy2arr3361 {
				if yyq3361[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3361[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3361 || yy2arr3361 {
				if yyq3361[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3364 := *x.Privileged
						yym3365 := z.EncBinary()
						_ = yym3365
						if false {
						} else {
							r.EncodeBool(bool(yy3364))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3361[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3366 := *x.Privileged
						yym3367 := z.EncBinary()
						_ = yym3367
						if false {
						} else {
							r.EncodeBool(bool(yy3366))
						}
					}
				}
			}
			if yyr3361 || yy2arr3361 {
				if yyq3361[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3361[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3361 || yy2arr3361 {
				if yyq3361[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3370 := *x.RunAsUser
						yym3371 := z.EncBinary()
						_ = yym3371
						if false {
						} else {
							r.EncodeInt(int64(yy3370))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3361[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3372 := *x.RunAsUser
						yym3373 := z.EncBinary()
						_ = yym3373
						if false {
						} else {
							r.EncodeInt(int64(yy3372))
						}
					}
				}
			}
			if yyr3361 || yy2arr3361 {
				if yyq3361[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3375 := *x.RunAsNonRoot
						yym3376 := z.EncBinary()
						_ = yym3376
						if false {
						} else {
							r.EncodeBool(bool(yy3375))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3361[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3377 := *x.RunAsNonRoot
						yym3378 := z.EncBinary()
						_ = yym3378
						if false {
						} else {
							r.EncodeBool(bool(yy3377))
						}
					}
				}
			}
			if yysep3361 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3379 := z.DecBinary()
	_ = yym3379
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3380 := r.ReadMapStart()
			if yyl3380 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3380, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3380 := r.ReadArrayStart()
			if yyl3380 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3380, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3381Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3381Slc
	var yyhl3381 bool = l >= 0
	for yyj3381 := 0; ; yyj3381++ {
		if yyhl3381 {
			if yyj3381 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3381Slc = r.DecodeBytes(yys3381Slc, true, true)
		yys3381 := string(yys3381Slc)
		switch yys3381 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3384 := z.DecBinary()
				_ = yym3384
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3387 := z.DecBinary()
				_ = yym3387
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3389 := z.DecBinary()
				_ = yym3389
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3381)
		} // end switch yys3381
	} // end for yyj3381
	if !yyhl3381 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3390 int
	var yyb3390 bool
	var yyhl3390 bool = l >= 0
	yyj3390++
	if yyhl3390 {
		yyb3390 = yyj3390 > l
	} else {
		yyb3390 = r.CheckBreak()
	}
	if yyb3390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3390++
	if yyhl3390 {
		yyb3390 = yyj3390 > l
	} else {
		yyb3390 = r.CheckBreak()
	}
	if yyb3390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3393 := z.DecBinary()
		_ = yym3393
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3390++
	if yyhl3390 {
		yyb3390 = yyj3390 > l
	} else {
		yyb3390 = r.CheckBreak()
	}
	if yyb3390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3390++
	if yyhl3390 {
		yyb3390 = yyj3390 > l
	} else {
		yyb3390 = r.CheckBreak()
	}
	if yyb3390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3396 := z.DecBinary()
		_ = yym3396
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3390++
	if yyhl3390 {
		yyb3390 = yyj3390 > l
	} else {
		yyb3390 = r.CheckBreak()
	}
	if yyb3390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3398 := z.DecBinary()
		_ = yym3398
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3390++
		if yyhl3390 {
			yyb3390 = yyj3390 > l
		} else {
			yyb3390 = r.CheckBreak()
		}
		if yyb3390 {
			break
		}
		z.DecStructFieldNotFound(yyj3390-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3399 := z.EncBinary()
		_ = yym3399
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3400 := !z.EncBinary()
			yy2arr3400 := z.EncBasicHandle().StructToArray
			var yyq3400 [4]bool
			_, _, _ = yysep3400, yyq3400, yy2arr3400
			const yyr3400 bool = false
			yyq3400[0] = x.User != ""
			yyq3400[1] = x.Role != ""
			yyq3400[2] = x.Type != ""
			yyq3400[3] = x.Level != ""
			if yyr3400 || yy2arr3400 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3400 int = 0
				for _, b := range yyq3400 {
					if b {
						yynn3400++
					}
				}
				r.EncodeMapStart(yynn3400)
			}
			if yyr3400 || yy2arr3400 {
				if yyq3400[0] {
					yym3402 := z.EncBinary()
					_ = yym3402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3400[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3403 := z.EncBinary()
					_ = yym3403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3400 || yy2arr3400 {
				if yyq3400[1] {
					yym3405 := z.EncBinary()
					_ = yym3405
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3400[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3406 := z.EncBinary()
					_ = yym3406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3400 || yy2arr3400 {
				if yyq3400[2] {
					yym3408 := z.EncBinary()
					_ = yym3408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3400[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3409 := z.EncBinary()
					_ = yym3409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3400 || yy2arr3400 {
				if yyq3400[3] {
					yym3411 := z.EncBinary()
					_ = yym3411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3400[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3412 := z.EncBinary()
					_ = yym3412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3400 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3413 := z.DecBinary()
	_ = yym3413
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3414 := r.ReadMapStart()
			if yyl3414 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3414, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3414 := r.ReadArrayStart()
			if yyl3414 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3414, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3415Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3415Slc
	var yyhl3415 bool = l >= 0
	for yyj3415 := 0; ; yyj3415++ {
		if yyhl3415 {
			if yyj3415 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3415Slc = r.DecodeBytes(yys3415Slc, true, true)
		yys3415 := string(yys3415Slc)
		switch yys3415 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3415)
		} // end switch yys3415
	} // end for yyj3415
	if !yyhl3415 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3420 int
	var yyb3420 bool
	var yyhl3420 bool = l >= 0
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3420++
		if yyhl3420 {
			yyb3420 = yyj3420 > l
		} else {
			yyb3420 = r.CheckBreak()
		}
		if yyb3420 {
			break
		}
		z.DecStructFieldNotFound(yyj3420-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3425 := z.EncBinary()
		_ = yym3425
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3426 := !z.EncBinary()
			yy2arr3426 := z.EncBasicHandle().StructToArray
			var yyq3426 [5]bool
			_, _, _ = yysep3426, yyq3426, yy2arr3426
			const yyr3426 bool = false
			yyq3426[0] = x.Kind != ""
			yyq3426[1] = x.APIVersion != ""
			yyq3426[2] = true
			if yyr3426 || yy2arr3426 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3426 int = 2
				for _, b := range yyq3426 {
					if b {
						yynn3426++
					}
				}
				r.EncodeMapStart(yynn3426)
			}
			if yyr3426 || yy2arr3426 {
				if yyq3426[0] {
					yym3428 := z.EncBinary()
					_ = yym3428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3426[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3429 := z.EncBinary()
					_ = yym3429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3426 || yy2arr3426 {
				if yyq3426[1] {
					yym3431 := z.EncBinary()
					_ = yym3431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3426[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3432 := z.EncBinary()
					_ = yym3432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3426 || yy2arr3426 {
				if yyq3426[2] {
					yy3434 := &x.ObjectMeta
					yy3434.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3426[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3435 := &x.ObjectMeta
					yy3435.CodecEncodeSelf(e)
				}
			}
			if yyr3426 || yy2arr3426 {
				yym3437 := z.EncBinary()
				_ = yym3437
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3438 := z.EncBinary()
				_ = yym3438
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3426 || yy2arr3426 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3440 := z.EncBinary()
					_ = yym3440
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3441 := z.EncBinary()
					_ = yym3441
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3426 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3442 := z.DecBinary()
	_ = yym3442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3443 := r.ReadMapStart()
			if yyl3443 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3443, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3443 := r.ReadArrayStart()
			if yyl3443 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3443, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3444Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3444Slc
	var yyhl3444 bool = l >= 0
	for yyj3444 := 0; ; yyj3444++ {
		if yyhl3444 {
			if yyj3444 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3444Slc = r.DecodeBytes(yys3444Slc, true, true)
		yys3444 := string(yys3444Slc)
		switch yys3444 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3447 := &x.ObjectMeta
				yyv3447.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3449 := &x.Data
				yym3450 := z.DecBinary()
				_ = yym3450
				if false {
				} else {
					*yyv3449 = r.DecodeBytes(*(*[]byte)(yyv3449), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3444)
		} // end switch yys3444
	} // end for yyj3444
	if !yyhl3444 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3451 int
	var yyb3451 bool
	var yyhl3451 bool = l >= 0
	yyj3451++
	if yyhl3451 {
		yyb3451 = yyj3451 > l
	} else {
		yyb3451 = r.CheckBreak()
	}
	if yyb3451 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3451++
	if yyhl3451 {
		yyb3451 = yyj3451 > l
	} else {
		yyb3451 = r.CheckBreak()
	}
	if yyb3451 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3451++
	if yyhl3451 {
		yyb3451 = yyj3451 > l
	} else {
		yyb3451 = r.CheckBreak()
	}
	if yyb3451 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3454 := &x.ObjectMeta
		yyv3454.CodecDecodeSelf(d)
	}
	yyj3451++
	if yyhl3451 {
		yyb3451 = yyj3451 > l
	} else {
		yyb3451 = r.CheckBreak()
	}
	if yyb3451 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3451++
	if yyhl3451 {
		yyb3451 = yyj3451 > l
	} else {
		yyb3451 = r.CheckBreak()
	}
	if yyb3451 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3456 := &x.Data
		yym3457 := z.DecBinary()
		_ = yym3457
		if false {
		} else {
			*yyv3456 = r.DecodeBytes(*(*[]byte)(yyv3456), false, false)
		}
	}
	for {
		yyj3451++
		if yyhl3451 {
			yyb3451 = yyj3451 > l
		} else {
			yyb3451 = r.CheckBreak()
		}
		if yyb3451 {
			break
		}
		z.DecStructFieldNotFound(yyj3451-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3458 := range v {
		yyv3458.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3459 := *v
	yyh3459, yyl3459 := z.DecSliceHelperStart()

	var yyrr3459, yyrl3459 int
	var yyc3459, yyrt3459 bool
	_, _, _ = yyc3459, yyrt3459, yyrl3459
	yyrr3459 = yyl3459

	if yyv3459 == nil {
		if yyrl3459, yyrt3459 = z.DecInferLen(yyl3459, z.DecBasicHandle().MaxInitLen, 16); yyrt3459 {
			yyrr3459 = yyrl3459
		}
		yyv3459 = make([]PersistentVolumeAccessMode, yyrl3459)
		yyc3459 = true
	}

	if yyl3459 == 0 {
		if len(yyv3459) != 0 {
			yyv3459 = yyv3459[:0]
			yyc3459 = true
		}
	} else if yyl3459 > 0 {

		if yyl3459 > cap(yyv3459) {
			yyrl3459, yyrt3459 = z.DecInferLen(yyl3459, z.DecBasicHandle().MaxInitLen, 16)

			yyv23459 := yyv3459
			yyv3459 = make([]PersistentVolumeAccessMode, yyrl3459)
			if len(yyv3459) > 0 {
				copy(yyv3459, yyv23459[:cap(yyv23459)])
			}
			yyc3459 = true

			yyrr3459 = len(yyv3459)
		} else if yyl3459 != len(yyv3459) {
			yyv3459 = yyv3459[:yyl3459]
			yyc3459 = true
		}
		yyj3459 := 0
		for ; yyj3459 < yyrr3459; yyj3459++ {
			if r.TryDecodeAsNil() {
				yyv3459[yyj3459] = ""
			} else {
				yyv3459[yyj3459] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3459 {
			for ; yyj3459 < yyl3459; yyj3459++ {
				yyv3459 = append(yyv3459, "")
				if r.TryDecodeAsNil() {
					yyv3459[yyj3459] = ""
				} else {
					yyv3459[yyj3459] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3459 := 0; !r.CheckBreak(); yyj3459++ {
			if yyj3459 >= len(yyv3459) {
				yyv3459 = append(yyv3459, "") // var yyz3459 PersistentVolumeAccessMode
				yyc3459 = true
			}

			if yyj3459 < len(yyv3459) {
				if r.TryDecodeAsNil() {
					yyv3459[yyj3459] = ""
				} else {
					yyv3459[yyj3459] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3459.End()
	}
	if yyc3459 {
		*v = yyv3459
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3463 := range v {
		yy3464 := &yyv3463
		yy3464.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3465 := *v
	yyh3465, yyl3465 := z.DecSliceHelperStart()

	var yyrr3465, yyrl3465 int
	var yyc3465, yyrt3465 bool
	_, _, _ = yyc3465, yyrt3465, yyrl3465
	yyrr3465 = yyl3465

	if yyv3465 == nil {
		if yyrl3465, yyrt3465 = z.DecInferLen(yyl3465, z.DecBasicHandle().MaxInitLen, 384); yyrt3465 {
			yyrr3465 = yyrl3465
		}
		yyv3465 = make([]PersistentVolume, yyrl3465)
		yyc3465 = true
	}

	if yyl3465 == 0 {
		if len(yyv3465) != 0 {
			yyv3465 = yyv3465[:0]
			yyc3465 = true
		}
	} else if yyl3465 > 0 {

		if yyl3465 > cap(yyv3465) {
			yyrl3465, yyrt3465 = z.DecInferLen(yyl3465, z.DecBasicHandle().MaxInitLen, 384)
			yyv3465 = make([]PersistentVolume, yyrl3465)
			yyc3465 = true

			yyrr3465 = len(yyv3465)
		} else if yyl3465 != len(yyv3465) {
			yyv3465 = yyv3465[:yyl3465]
			yyc3465 = true
		}
		yyj3465 := 0
		for ; yyj3465 < yyrr3465; yyj3465++ {
			if r.TryDecodeAsNil() {
				yyv3465[yyj3465] = PersistentVolume{}
			} else {
				yyv3466 := &yyv3465[yyj3465]
				yyv3466.CodecDecodeSelf(d)
			}

		}
		if yyrt3465 {
			for ; yyj3465 < yyl3465; yyj3465++ {
				yyv3465 = append(yyv3465, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3465[yyj3465] = PersistentVolume{}
				} else {
					yyv3467 := &yyv3465[yyj3465]
					yyv3467.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3465 := 0; !r.CheckBreak(); yyj3465++ {
			if yyj3465 >= len(yyv3465) {
				yyv3465 = append(yyv3465, PersistentVolume{}) // var yyz3465 PersistentVolume
				yyc3465 = true
			}

			if yyj3465 < len(yyv3465) {
				if r.TryDecodeAsNil() {
					yyv3465[yyj3465] = PersistentVolume{}
				} else {
					yyv3468 := &yyv3465[yyj3465]
					yyv3468.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3465.End()
	}
	if yyc3465 {
		*v = yyv3465
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3469 := range v {
		yy3470 := &yyv3469
		yy3470.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3471 := *v
	yyh3471, yyl3471 := z.DecSliceHelperStart()

	var yyrr3471, yyrl3471 int
	var yyc3471, yyrt3471 bool
	_, _, _ = yyc3471, yyrt3471, yyrl3471
	yyrr3471 = yyl3471

	if yyv3471 == nil {
		if yyrl3471, yyrt3471 = z.DecInferLen(yyl3471, z.DecBasicHandle().MaxInitLen, 296); yyrt3471 {
			yyrr3471 = yyrl3471
		}
		yyv3471 = make([]PersistentVolumeClaim, yyrl3471)
		yyc3471 = true
	}

	if yyl3471 == 0 {
		if len(yyv3471) != 0 {
			yyv3471 = yyv3471[:0]
			yyc3471 = true
		}
	} else if yyl3471 > 0 {

		if yyl3471 > cap(yyv3471) {
			yyrl3471, yyrt3471 = z.DecInferLen(yyl3471, z.DecBasicHandle().MaxInitLen, 296)
			yyv3471 = make([]PersistentVolumeClaim, yyrl3471)
			yyc3471 = true

			yyrr3471 = len(yyv3471)
		} else if yyl3471 != len(yyv3471) {
			yyv3471 = yyv3471[:yyl3471]
			yyc3471 = true
		}
		yyj3471 := 0
		for ; yyj3471 < yyrr3471; yyj3471++ {
			if r.TryDecodeAsNil() {
				yyv3471[yyj3471] = PersistentVolumeClaim{}
			} else {
				yyv3472 := &yyv3471[yyj3471]
				yyv3472.CodecDecodeSelf(d)
			}

		}
		if yyrt3471 {
			for ; yyj3471 < yyl3471; yyj3471++ {
				yyv3471 = append(yyv3471, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3471[yyj3471] = PersistentVolumeClaim{}
				} else {
					yyv3473 := &yyv3471[yyj3471]
					yyv3473.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3471 := 0; !r.CheckBreak(); yyj3471++ {
			if yyj3471 >= len(yyv3471) {
				yyv3471 = append(yyv3471, PersistentVolumeClaim{}) // var yyz3471 PersistentVolumeClaim
				yyc3471 = true
			}

			if yyj3471 < len(yyv3471) {
				if r.TryDecodeAsNil() {
					yyv3471[yyj3471] = PersistentVolumeClaim{}
				} else {
					yyv3474 := &yyv3471[yyj3471]
					yyv3474.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3471.End()
	}
	if yyc3471 {
		*v = yyv3471
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3475 := range v {
		yyv3475.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3476 := *v
	yyh3476, yyl3476 := z.DecSliceHelperStart()

	var yyrr3476, yyrl3476 int
	var yyc3476, yyrt3476 bool
	_, _, _ = yyc3476, yyrt3476, yyrl3476
	yyrr3476 = yyl3476

	if yyv3476 == nil {
		if yyrl3476, yyrt3476 = z.DecInferLen(yyl3476, z.DecBasicHandle().MaxInitLen, 16); yyrt3476 {
			yyrr3476 = yyrl3476
		}
		yyv3476 = make([]Capability, yyrl3476)
		yyc3476 = true
	}

	if yyl3476 == 0 {
		if len(yyv3476) != 0 {
			yyv3476 = yyv3476[:0]
			yyc3476 = true
		}
	} else if yyl3476 > 0 {

		if yyl3476 > cap(yyv3476) {
			yyrl3476, yyrt3476 = z.DecInferLen(yyl3476, z.DecBasicHandle().MaxInitLen, 16)

			yyv23476 := yyv3476
			yyv3476 = make([]Capability, yyrl3476)
			if len(yyv3476) > 0 {
				copy(yyv3476, yyv23476[:cap(yyv23476)])
			}
			yyc3476 = true

			yyrr3476 = len(yyv3476)
		} else if yyl3476 != len(yyv3476) {
			yyv3476 = yyv3476[:yyl3476]
			yyc3476 = true
		}
		yyj3476 := 0
		for ; yyj3476 < yyrr3476; yyj3476++ {
			if r.TryDecodeAsNil() {
				yyv3476[yyj3476] = ""
			} else {
				yyv3476[yyj3476] = Capability(r.DecodeString())
			}

		}
		if yyrt3476 {
			for ; yyj3476 < yyl3476; yyj3476++ {
				yyv3476 = append(yyv3476, "")
				if r.TryDecodeAsNil() {
					yyv3476[yyj3476] = ""
				} else {
					yyv3476[yyj3476] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3476 := 0; !r.CheckBreak(); yyj3476++ {
			if yyj3476 >= len(yyv3476) {
				yyv3476 = append(yyv3476, "") // var yyz3476 Capability
				yyc3476 = true
			}

			if yyj3476 < len(yyv3476) {
				if r.TryDecodeAsNil() {
					yyv3476[yyj3476] = ""
				} else {
					yyv3476[yyj3476] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3476.End()
	}
	if yyc3476 {
		*v = yyv3476
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3480 := range v {
		yy3481 := &yyv3480
		yy3481.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3482 := *v
	yyh3482, yyl3482 := z.DecSliceHelperStart()

	var yyrr3482, yyrl3482 int
	var yyc3482, yyrt3482 bool
	_, _, _ = yyc3482, yyrt3482, yyrl3482
	yyrr3482 = yyl3482

	if yyv3482 == nil {
		if yyrl3482, yyrt3482 = z.DecInferLen(yyl3482, z.DecBasicHandle().MaxInitLen, 64); yyrt3482 {
			yyrr3482 = yyrl3482
		}
		yyv3482 = make([]ContainerPort, yyrl3482)
		yyc3482 = true
	}

	if yyl3482 == 0 {
		if len(yyv3482) != 0 {
			yyv3482 = yyv3482[:0]
			yyc3482 = true
		}
	} else if yyl3482 > 0 {

		if yyl3482 > cap(yyv3482) {
			yyrl3482, yyrt3482 = z.DecInferLen(yyl3482, z.DecBasicHandle().MaxInitLen, 64)
			yyv3482 = make([]ContainerPort, yyrl3482)
			yyc3482 = true

			yyrr3482 = len(yyv3482)
		} else if yyl3482 != len(yyv3482) {
			yyv3482 = yyv3482[:yyl3482]
			yyc3482 = true
		}
		yyj3482 := 0
		for ; yyj3482 < yyrr3482; yyj3482++ {
			if r.TryDecodeAsNil() {
				yyv3482[yyj3482] = ContainerPort{}
			} else {
				yyv3483 := &yyv3482[yyj3482]
				yyv3483.CodecDecodeSelf(d)
			}

		}
		if yyrt3482 {
			for ; yyj3482 < yyl3482; yyj3482++ {
				yyv3482 = append(yyv3482, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3482[yyj3482] = ContainerPort{}
				} else {
					yyv3484 := &yyv3482[yyj3482]
					yyv3484.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3482 := 0; !r.CheckBreak(); yyj3482++ {
			if yyj3482 >= len(yyv3482) {
				yyv3482 = append(yyv3482, ContainerPort{}) // var yyz3482 ContainerPort
				yyc3482 = true
			}

			if yyj3482 < len(yyv3482) {
				if r.TryDecodeAsNil() {
					yyv3482[yyj3482] = ContainerPort{}
				} else {
					yyv3485 := &yyv3482[yyj3482]
					yyv3485.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3482.End()
	}
	if yyc3482 {
		*v = yyv3482
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3486 := range v {
		yy3487 := &yyv3486
		yy3487.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3488 := *v
	yyh3488, yyl3488 := z.DecSliceHelperStart()

	var yyrr3488, yyrl3488 int
	var yyc3488, yyrt3488 bool
	_, _, _ = yyc3488, yyrt3488, yyrl3488
	yyrr3488 = yyl3488

	if yyv3488 == nil {
		if yyrl3488, yyrt3488 = z.DecInferLen(yyl3488, z.DecBasicHandle().MaxInitLen, 40); yyrt3488 {
			yyrr3488 = yyrl3488
		}
		yyv3488 = make([]EnvVar, yyrl3488)
		yyc3488 = true
	}

	if yyl3488 == 0 {
		if len(yyv3488) != 0 {
			yyv3488 = yyv3488[:0]
			yyc3488 = true
		}
	} else if yyl3488 > 0 {

		if yyl3488 > cap(yyv3488) {
			yyrl3488, yyrt3488 = z.DecInferLen(yyl3488, z.DecBasicHandle().MaxInitLen, 40)
			yyv3488 = make([]EnvVar, yyrl3488)
			yyc3488 = true

			yyrr3488 = len(yyv3488)
		} else if yyl3488 != len(yyv3488) {
			yyv3488 = yyv3488[:yyl3488]
			yyc3488 = true
		}
		yyj3488 := 0
		for ; yyj3488 < yyrr3488; yyj3488++ {
			if r.TryDecodeAsNil() {
				yyv3488[yyj3488] = EnvVar{}
			} else {
				yyv3489 := &yyv3488[yyj3488]
				yyv3489.CodecDecodeSelf(d)
			}

		}
		if yyrt3488 {
			for ; yyj3488 < yyl3488; yyj3488++ {
				yyv3488 = append(yyv3488, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3488[yyj3488] = EnvVar{}
				} else {
					yyv3490 := &yyv3488[yyj3488]
					yyv3490.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3488 := 0; !r.CheckBreak(); yyj3488++ {
			if yyj3488 >= len(yyv3488) {
				yyv3488 = append(yyv3488, EnvVar{}) // var yyz3488 EnvVar
				yyc3488 = true
			}

			if yyj3488 < len(yyv3488) {
				if r.TryDecodeAsNil() {
					yyv3488[yyj3488] = EnvVar{}
				} else {
					yyv3491 := &yyv3488[yyj3488]
					yyv3491.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3488.End()
	}
	if yyc3488 {
		*v = yyv3488
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3492 := range v {
		yy3493 := &yyv3492
		yy3493.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3494 := *v
	yyh3494, yyl3494 := z.DecSliceHelperStart()

	var yyrr3494, yyrl3494 int
	var yyc3494, yyrt3494 bool
	_, _, _ = yyc3494, yyrt3494, yyrl3494
	yyrr3494 = yyl3494

	if yyv3494 == nil {
		if yyrl3494, yyrt3494 = z.DecInferLen(yyl3494, z.DecBasicHandle().MaxInitLen, 40); yyrt3494 {
			yyrr3494 = yyrl3494
		}
		yyv3494 = make([]VolumeMount, yyrl3494)
		yyc3494 = true
	}

	if yyl3494 == 0 {
		if len(yyv3494) != 0 {
			yyv3494 = yyv3494[:0]
			yyc3494 = true
		}
	} else if yyl3494 > 0 {

		if yyl3494 > cap(yyv3494) {
			yyrl3494, yyrt3494 = z.DecInferLen(yyl3494, z.DecBasicHandle().MaxInitLen, 40)
			yyv3494 = make([]VolumeMount, yyrl3494)
			yyc3494 = true

			yyrr3494 = len(yyv3494)
		} else if yyl3494 != len(yyv3494) {
			yyv3494 = yyv3494[:yyl3494]
			yyc3494 = true
		}
		yyj3494 := 0
		for ; yyj3494 < yyrr3494; yyj3494++ {
			if r.TryDecodeAsNil() {
				yyv3494[yyj3494] = VolumeMount{}
			} else {
				yyv3495 := &yyv3494[yyj3494]
				yyv3495.CodecDecodeSelf(d)
			}

		}
		if yyrt3494 {
			for ; yyj3494 < yyl3494; yyj3494++ {
				yyv3494 = append(yyv3494, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3494[yyj3494] = VolumeMount{}
				} else {
					yyv3496 := &yyv3494[yyj3494]
					yyv3496.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3494 := 0; !r.CheckBreak(); yyj3494++ {
			if yyj3494 >= len(yyv3494) {
				yyv3494 = append(yyv3494, VolumeMount{}) // var yyz3494 VolumeMount
				yyc3494 = true
			}

			if yyj3494 < len(yyv3494) {
				if r.TryDecodeAsNil() {
					yyv3494[yyj3494] = VolumeMount{}
				} else {
					yyv3497 := &yyv3494[yyj3494]
					yyv3497.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3494.End()
	}
	if yyc3494 {
		*v = yyv3494
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3498 := range v {
		yy3499 := &yyv3498
		yy3499.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3500 := *v
	yyh3500, yyl3500 := z.DecSliceHelperStart()

	var yyrr3500, yyrl3500 int
	var yyc3500, yyrt3500 bool
	_, _, _ = yyc3500, yyrt3500, yyrl3500
	yyrr3500 = yyl3500

	if yyv3500 == nil {
		if yyrl3500, yyrt3500 = z.DecInferLen(yyl3500, z.DecBasicHandle().MaxInitLen, 144); yyrt3500 {
			yyrr3500 = yyrl3500
		}
		yyv3500 = make([]Volume, yyrl3500)
		yyc3500 = true
	}

	if yyl3500 == 0 {
		if len(yyv3500) != 0 {
			yyv3500 = yyv3500[:0]
			yyc3500 = true
		}
	} else if yyl3500 > 0 {

		if yyl3500 > cap(yyv3500) {
			yyrl3500, yyrt3500 = z.DecInferLen(yyl3500, z.DecBasicHandle().MaxInitLen, 144)
			yyv3500 = make([]Volume, yyrl3500)
			yyc3500 = true

			yyrr3500 = len(yyv3500)
		} else if yyl3500 != len(yyv3500) {
			yyv3500 = yyv3500[:yyl3500]
			yyc3500 = true
		}
		yyj3500 := 0
		for ; yyj3500 < yyrr3500; yyj3500++ {
			if r.TryDecodeAsNil() {
				yyv3500[yyj3500] = Volume{}
			} else {
				yyv3501 := &yyv3500[yyj3500]
				yyv3501.CodecDecodeSelf(d)
			}

		}
		if yyrt3500 {
			for ; yyj3500 < yyl3500; yyj3500++ {
				yyv3500 = append(yyv3500, Volume{})
				if r.TryDecodeAsNil() {
					yyv3500[yyj3500] = Volume{}
				} else {
					yyv3502 := &yyv3500[yyj3500]
					yyv3502.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3500 := 0; !r.CheckBreak(); yyj3500++ {
			if yyj3500 >= len(yyv3500) {
				yyv3500 = append(yyv3500, Volume{}) // var yyz3500 Volume
				yyc3500 = true
			}

			if yyj3500 < len(yyv3500) {
				if r.TryDecodeAsNil() {
					yyv3500[yyj3500] = Volume{}
				} else {
					yyv3503 := &yyv3500[yyj3500]
					yyv3503.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3500.End()
	}
	if yyc3500 {
		*v = yyv3500
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3504 := range v {
		yy3505 := &yyv3504
		yy3505.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3506 := *v
	yyh3506, yyl3506 := z.DecSliceHelperStart()

	var yyrr3506, yyrl3506 int
	var yyc3506, yyrt3506 bool
	_, _, _ = yyc3506, yyrt3506, yyrl3506
	yyrr3506 = yyl3506

	if yyv3506 == nil {
		if yyrl3506, yyrt3506 = z.DecInferLen(yyl3506, z.DecBasicHandle().MaxInitLen, 256); yyrt3506 {
			yyrr3506 = yyrl3506
		}
		yyv3506 = make([]Container, yyrl3506)
		yyc3506 = true
	}

	if yyl3506 == 0 {
		if len(yyv3506) != 0 {
			yyv3506 = yyv3506[:0]
			yyc3506 = true
		}
	} else if yyl3506 > 0 {

		if yyl3506 > cap(yyv3506) {
			yyrl3506, yyrt3506 = z.DecInferLen(yyl3506, z.DecBasicHandle().MaxInitLen, 256)
			yyv3506 = make([]Container, yyrl3506)
			yyc3506 = true

			yyrr3506 = len(yyv3506)
		} else if yyl3506 != len(yyv3506) {
			yyv3506 = yyv3506[:yyl3506]
			yyc3506 = true
		}
		yyj3506 := 0
		for ; yyj3506 < yyrr3506; yyj3506++ {
			if r.TryDecodeAsNil() {
				yyv3506[yyj3506] = Container{}
			} else {
				yyv3507 := &yyv3506[yyj3506]
				yyv3507.CodecDecodeSelf(d)
			}

		}
		if yyrt3506 {
			for ; yyj3506 < yyl3506; yyj3506++ {
				yyv3506 = append(yyv3506, Container{})
				if r.TryDecodeAsNil() {
					yyv3506[yyj3506] = Container{}
				} else {
					yyv3508 := &yyv3506[yyj3506]
					yyv3508.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3506 := 0; !r.CheckBreak(); yyj3506++ {
			if yyj3506 >= len(yyv3506) {
				yyv3506 = append(yyv3506, Container{}) // var yyz3506 Container
				yyc3506 = true
			}

			if yyj3506 < len(yyv3506) {
				if r.TryDecodeAsNil() {
					yyv3506[yyj3506] = Container{}
				} else {
					yyv3509 := &yyv3506[yyj3506]
					yyv3509.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3506.End()
	}
	if yyc3506 {
		*v = yyv3506
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3510 := range v {
		yy3511 := &yyv3510
		yy3511.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3512 := *v
	yyh3512, yyl3512 := z.DecSliceHelperStart()

	var yyrr3512, yyrl3512 int
	var yyc3512, yyrt3512 bool
	_, _, _ = yyc3512, yyrt3512, yyrl3512
	yyrr3512 = yyl3512

	if yyv3512 == nil {
		if yyrl3512, yyrt3512 = z.DecInferLen(yyl3512, z.DecBasicHandle().MaxInitLen, 16); yyrt3512 {
			yyrr3512 = yyrl3512
		}
		yyv3512 = make([]LocalObjectReference, yyrl3512)
		yyc3512 = true
	}

	if yyl3512 == 0 {
		if len(yyv3512) != 0 {
			yyv3512 = yyv3512[:0]
			yyc3512 = true
		}
	} else if yyl3512 > 0 {

		if yyl3512 > cap(yyv3512) {
			yyrl3512, yyrt3512 = z.DecInferLen(yyl3512, z.DecBasicHandle().MaxInitLen, 16)
			yyv3512 = make([]LocalObjectReference, yyrl3512)
			yyc3512 = true

			yyrr3512 = len(yyv3512)
		} else if yyl3512 != len(yyv3512) {
			yyv3512 = yyv3512[:yyl3512]
			yyc3512 = true
		}
		yyj3512 := 0
		for ; yyj3512 < yyrr3512; yyj3512++ {
			if r.TryDecodeAsNil() {
				yyv3512[yyj3512] = LocalObjectReference{}
			} else {
				yyv3513 := &yyv3512[yyj3512]
				yyv3513.CodecDecodeSelf(d)
			}

		}
		if yyrt3512 {
			for ; yyj3512 < yyl3512; yyj3512++ {
				yyv3512 = append(yyv3512, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3512[yyj3512] = LocalObjectReference{}
				} else {
					yyv3514 := &yyv3512[yyj3512]
					yyv3514.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3512 := 0; !r.CheckBreak(); yyj3512++ {
			if yyj3512 >= len(yyv3512) {
				yyv3512 = append(yyv3512, LocalObjectReference{}) // var yyz3512 LocalObjectReference
				yyc3512 = true
			}

			if yyj3512 < len(yyv3512) {
				if r.TryDecodeAsNil() {
					yyv3512[yyj3512] = LocalObjectReference{}
				} else {
					yyv3515 := &yyv3512[yyj3512]
					yyv3515.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3512.End()
	}
	if yyc3512 {
		*v = yyv3512
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3516 := range v {
		yy3517 := &yyv3516
		yy3517.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3518 := *v
	yyh3518, yyl3518 := z.DecSliceHelperStart()

	var yyrr3518, yyrl3518 int
	var yyc3518, yyrt3518 bool
	_, _, _ = yyc3518, yyrt3518, yyrl3518
	yyrr3518 = yyl3518

	if yyv3518 == nil {
		if yyrl3518, yyrt3518 = z.DecInferLen(yyl3518, z.DecBasicHandle().MaxInitLen, 112); yyrt3518 {
			yyrr3518 = yyrl3518
		}
		yyv3518 = make([]PodCondition, yyrl3518)
		yyc3518 = true
	}

	if yyl3518 == 0 {
		if len(yyv3518) != 0 {
			yyv3518 = yyv3518[:0]
			yyc3518 = true
		}
	} else if yyl3518 > 0 {

		if yyl3518 > cap(yyv3518) {
			yyrl3518, yyrt3518 = z.DecInferLen(yyl3518, z.DecBasicHandle().MaxInitLen, 112)
			yyv3518 = make([]PodCondition, yyrl3518)
			yyc3518 = true

			yyrr3518 = len(yyv3518)
		} else if yyl3518 != len(yyv3518) {
			yyv3518 = yyv3518[:yyl3518]
			yyc3518 = true
		}
		yyj3518 := 0
		for ; yyj3518 < yyrr3518; yyj3518++ {
			if r.TryDecodeAsNil() {
				yyv3518[yyj3518] = PodCondition{}
			} else {
				yyv3519 := &yyv3518[yyj3518]
				yyv3519.CodecDecodeSelf(d)
			}

		}
		if yyrt3518 {
			for ; yyj3518 < yyl3518; yyj3518++ {
				yyv3518 = append(yyv3518, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3518[yyj3518] = PodCondition{}
				} else {
					yyv3520 := &yyv3518[yyj3518]
					yyv3520.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3518 := 0; !r.CheckBreak(); yyj3518++ {
			if yyj3518 >= len(yyv3518) {
				yyv3518 = append(yyv3518, PodCondition{}) // var yyz3518 PodCondition
				yyc3518 = true
			}

			if yyj3518 < len(yyv3518) {
				if r.TryDecodeAsNil() {
					yyv3518[yyj3518] = PodCondition{}
				} else {
					yyv3521 := &yyv3518[yyj3518]
					yyv3521.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3518.End()
	}
	if yyc3518 {
		*v = yyv3518
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3522 := range v {
		yy3523 := &yyv3522
		yy3523.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3524 := *v
	yyh3524, yyl3524 := z.DecSliceHelperStart()

	var yyrr3524, yyrl3524 int
	var yyc3524, yyrt3524 bool
	_, _, _ = yyc3524, yyrt3524, yyrl3524
	yyrr3524 = yyl3524

	if yyv3524 == nil {
		if yyrl3524, yyrt3524 = z.DecInferLen(yyl3524, z.DecBasicHandle().MaxInitLen, 128); yyrt3524 {
			yyrr3524 = yyrl3524
		}
		yyv3524 = make([]ContainerStatus, yyrl3524)
		yyc3524 = true
	}

	if yyl3524 == 0 {
		if len(yyv3524) != 0 {
			yyv3524 = yyv3524[:0]
			yyc3524 = true
		}
	} else if yyl3524 > 0 {

		if yyl3524 > cap(yyv3524) {
			yyrl3524, yyrt3524 = z.DecInferLen(yyl3524, z.DecBasicHandle().MaxInitLen, 128)
			yyv3524 = make([]ContainerStatus, yyrl3524)
			yyc3524 = true

			yyrr3524 = len(yyv3524)
		} else if yyl3524 != len(yyv3524) {
			yyv3524 = yyv3524[:yyl3524]
			yyc3524 = true
		}
		yyj3524 := 0
		for ; yyj3524 < yyrr3524; yyj3524++ {
			if r.TryDecodeAsNil() {
				yyv3524[yyj3524] = ContainerStatus{}
			} else {
				yyv3525 := &yyv3524[yyj3524]
				yyv3525.CodecDecodeSelf(d)
			}

		}
		if yyrt3524 {
			for ; yyj3524 < yyl3524; yyj3524++ {
				yyv3524 = append(yyv3524, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3524[yyj3524] = ContainerStatus{}
				} else {
					yyv3526 := &yyv3524[yyj3524]
					yyv3526.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3524 := 0; !r.CheckBreak(); yyj3524++ {
			if yyj3524 >= len(yyv3524) {
				yyv3524 = append(yyv3524, ContainerStatus{}) // var yyz3524 ContainerStatus
				yyc3524 = true
			}

			if yyj3524 < len(yyv3524) {
				if r.TryDecodeAsNil() {
					yyv3524[yyj3524] = ContainerStatus{}
				} else {
					yyv3527 := &yyv3524[yyj3524]
					yyv3527.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3524.End()
	}
	if yyc3524 {
		*v = yyv3524
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3528 := range v {
		yy3529 := &yyv3528
		yy3529.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3530 := *v
	yyh3530, yyl3530 := z.DecSliceHelperStart()

	var yyrr3530, yyrl3530 int
	var yyc3530, yyrt3530 bool
	_, _, _ = yyc3530, yyrt3530, yyrl3530
	yyrr3530 = yyl3530

	if yyv3530 == nil {
		if yyrl3530, yyrt3530 = z.DecInferLen(yyl3530, z.DecBasicHandle().MaxInitLen, 520); yyrt3530 {
			yyrr3530 = yyrl3530
		}
		yyv3530 = make([]Pod, yyrl3530)
		yyc3530 = true
	}

	if yyl3530 == 0 {
		if len(yyv3530) != 0 {
			yyv3530 = yyv3530[:0]
			yyc3530 = true
		}
	} else if yyl3530 > 0 {

		if yyl3530 > cap(yyv3530) {
			yyrl3530, yyrt3530 = z.DecInferLen(yyl3530, z.DecBasicHandle().MaxInitLen, 520)
			yyv3530 = make([]Pod, yyrl3530)
			yyc3530 = true

			yyrr3530 = len(yyv3530)
		} else if yyl3530 != len(yyv3530) {
			yyv3530 = yyv3530[:yyl3530]
			yyc3530 = true
		}
		yyj3530 := 0
		for ; yyj3530 < yyrr3530; yyj3530++ {
			if r.TryDecodeAsNil() {
				yyv3530[yyj3530] = Pod{}
			} else {
				yyv3531 := &yyv3530[yyj3530]
				yyv3531.CodecDecodeSelf(d)
			}

		}
		if yyrt3530 {
			for ; yyj3530 < yyl3530; yyj3530++ {
				yyv3530 = append(yyv3530, Pod{})
				if r.TryDecodeAsNil() {
					yyv3530[yyj3530] = Pod{}
				} else {
					yyv3532 := &yyv3530[yyj3530]
					yyv3532.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3530 := 0; !r.CheckBreak(); yyj3530++ {
			if yyj3530 >= len(yyv3530) {
				yyv3530 = append(yyv3530, Pod{}) // var yyz3530 Pod
				yyc3530 = true
			}

			if yyj3530 < len(yyv3530) {
				if r.TryDecodeAsNil() {
					yyv3530[yyj3530] = Pod{}
				} else {
					yyv3533 := &yyv3530[yyj3530]
					yyv3533.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3530.End()
	}
	if yyc3530 {
		*v = yyv3530
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3534 := range v {
		yy3535 := &yyv3534
		yy3535.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3536 := *v
	yyh3536, yyl3536 := z.DecSliceHelperStart()

	var yyrr3536, yyrl3536 int
	var yyc3536, yyrt3536 bool
	_, _, _ = yyc3536, yyrt3536, yyrl3536
	yyrr3536 = yyl3536

	if yyv3536 == nil {
		if yyrl3536, yyrt3536 = z.DecInferLen(yyl3536, z.DecBasicHandle().MaxInitLen, 544); yyrt3536 {
			yyrr3536 = yyrl3536
		}
		yyv3536 = make([]PodTemplate, yyrl3536)
		yyc3536 = true
	}

	if yyl3536 == 0 {
		if len(yyv3536) != 0 {
			yyv3536 = yyv3536[:0]
			yyc3536 = true
		}
	} else if yyl3536 > 0 {

		if yyl3536 > cap(yyv3536) {
			yyrl3536, yyrt3536 = z.DecInferLen(yyl3536, z.DecBasicHandle().MaxInitLen, 544)
			yyv3536 = make([]PodTemplate, yyrl3536)
			yyc3536 = true

			yyrr3536 = len(yyv3536)
		} else if yyl3536 != len(yyv3536) {
			yyv3536 = yyv3536[:yyl3536]
			yyc3536 = true
		}
		yyj3536 := 0
		for ; yyj3536 < yyrr3536; yyj3536++ {
			if r.TryDecodeAsNil() {
				yyv3536[yyj3536] = PodTemplate{}
			} else {
				yyv3537 := &yyv3536[yyj3536]
				yyv3537.CodecDecodeSelf(d)
			}

		}
		if yyrt3536 {
			for ; yyj3536 < yyl3536; yyj3536++ {
				yyv3536 = append(yyv3536, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3536[yyj3536] = PodTemplate{}
				} else {
					yyv3538 := &yyv3536[yyj3536]
					yyv3538.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3536 := 0; !r.CheckBreak(); yyj3536++ {
			if yyj3536 >= len(yyv3536) {
				yyv3536 = append(yyv3536, PodTemplate{}) // var yyz3536 PodTemplate
				yyc3536 = true
			}

			if yyj3536 < len(yyv3536) {
				if r.TryDecodeAsNil() {
					yyv3536[yyj3536] = PodTemplate{}
				} else {
					yyv3539 := &yyv3536[yyj3536]
					yyv3539.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3536.End()
	}
	if yyc3536 {
		*v = yyv3536
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3540 := range v {
		yy3541 := &yyv3540
		yy3541.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3542 := *v
	yyh3542, yyl3542 := z.DecSliceHelperStart()

	var yyrr3542, yyrl3542 int
	var yyc3542, yyrt3542 bool
	_, _, _ = yyc3542, yyrt3542, yyrl3542
	yyrr3542 = yyl3542

	if yyv3542 == nil {
		if yyrl3542, yyrt3542 = z.DecInferLen(yyl3542, z.DecBasicHandle().MaxInitLen, 232); yyrt3542 {
			yyrr3542 = yyrl3542
		}
		yyv3542 = make([]ReplicationController, yyrl3542)
		yyc3542 = true
	}

	if yyl3542 == 0 {
		if len(yyv3542) != 0 {
			yyv3542 = yyv3542[:0]
			yyc3542 = true
		}
	} else if yyl3542 > 0 {

		if yyl3542 > cap(yyv3542) {
			yyrl3542, yyrt3542 = z.DecInferLen(yyl3542, z.DecBasicHandle().MaxInitLen, 232)
			yyv3542 = make([]ReplicationController, yyrl3542)
			yyc3542 = true

			yyrr3542 = len(yyv3542)
		} else if yyl3542 != len(yyv3542) {
			yyv3542 = yyv3542[:yyl3542]
			yyc3542 = true
		}
		yyj3542 := 0
		for ; yyj3542 < yyrr3542; yyj3542++ {
			if r.TryDecodeAsNil() {
				yyv3542[yyj3542] = ReplicationController{}
			} else {
				yyv3543 := &yyv3542[yyj3542]
				yyv3543.CodecDecodeSelf(d)
			}

		}
		if yyrt3542 {
			for ; yyj3542 < yyl3542; yyj3542++ {
				yyv3542 = append(yyv3542, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3542[yyj3542] = ReplicationController{}
				} else {
					yyv3544 := &yyv3542[yyj3542]
					yyv3544.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3542 := 0; !r.CheckBreak(); yyj3542++ {
			if yyj3542 >= len(yyv3542) {
				yyv3542 = append(yyv3542, ReplicationController{}) // var yyz3542 ReplicationController
				yyc3542 = true
			}

			if yyj3542 < len(yyv3542) {
				if r.TryDecodeAsNil() {
					yyv3542[yyj3542] = ReplicationController{}
				} else {
					yyv3545 := &yyv3542[yyj3542]
					yyv3545.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3542.End()
	}
	if yyc3542 {
		*v = yyv3542
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3546 := range v {
		yy3547 := &yyv3546
		yy3547.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3548 := *v
	yyh3548, yyl3548 := z.DecSliceHelperStart()

	var yyrr3548, yyrl3548 int
	var yyc3548, yyrt3548 bool
	_, _, _ = yyc3548, yyrt3548, yyrl3548
	yyrr3548 = yyl3548

	if yyv3548 == nil {
		if yyrl3548, yyrt3548 = z.DecInferLen(yyl3548, z.DecBasicHandle().MaxInitLen, 32); yyrt3548 {
			yyrr3548 = yyrl3548
		}
		yyv3548 = make([]LoadBalancerIngress, yyrl3548)
		yyc3548 = true
	}

	if yyl3548 == 0 {
		if len(yyv3548) != 0 {
			yyv3548 = yyv3548[:0]
			yyc3548 = true
		}
	} else if yyl3548 > 0 {

		if yyl3548 > cap(yyv3548) {
			yyrl3548, yyrt3548 = z.DecInferLen(yyl3548, z.DecBasicHandle().MaxInitLen, 32)
			yyv3548 = make([]LoadBalancerIngress, yyrl3548)
			yyc3548 = true

			yyrr3548 = len(yyv3548)
		} else if yyl3548 != len(yyv3548) {
			yyv3548 = yyv3548[:yyl3548]
			yyc3548 = true
		}
		yyj3548 := 0
		for ; yyj3548 < yyrr3548; yyj3548++ {
			if r.TryDecodeAsNil() {
				yyv3548[yyj3548] = LoadBalancerIngress{}
			} else {
				yyv3549 := &yyv3548[yyj3548]
				yyv3549.CodecDecodeSelf(d)
			}

		}
		if yyrt3548 {
			for ; yyj3548 < yyl3548; yyj3548++ {
				yyv3548 = append(yyv3548, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3548[yyj3548] = LoadBalancerIngress{}
				} else {
					yyv3550 := &yyv3548[yyj3548]
					yyv3550.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3548 := 0; !r.CheckBreak(); yyj3548++ {
			if yyj3548 >= len(yyv3548) {
				yyv3548 = append(yyv3548, LoadBalancerIngress{}) // var yyz3548 LoadBalancerIngress
				yyc3548 = true
			}

			if yyj3548 < len(yyv3548) {
				if r.TryDecodeAsNil() {
					yyv3548[yyj3548] = LoadBalancerIngress{}
				} else {
					yyv3551 := &yyv3548[yyj3548]
					yyv3551.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3548.End()
	}
	if yyc3548 {
		*v = yyv3548
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3552 := range v {
		yy3553 := &yyv3552
		yy3553.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3554 := *v
	yyh3554, yyl3554 := z.DecSliceHelperStart()

	var yyrr3554, yyrl3554 int
	var yyc3554, yyrt3554 bool
	_, _, _ = yyc3554, yyrt3554, yyrl3554
	yyrr3554 = yyl3554

	if yyv3554 == nil {
		if yyrl3554, yyrt3554 = z.DecInferLen(yyl3554, z.DecBasicHandle().MaxInitLen, 80); yyrt3554 {
			yyrr3554 = yyrl3554
		}
		yyv3554 = make([]ServicePort, yyrl3554)
		yyc3554 = true
	}

	if yyl3554 == 0 {
		if len(yyv3554) != 0 {
			yyv3554 = yyv3554[:0]
			yyc3554 = true
		}
	} else if yyl3554 > 0 {

		if yyl3554 > cap(yyv3554) {
			yyrl3554, yyrt3554 = z.DecInferLen(yyl3554, z.DecBasicHandle().MaxInitLen, 80)
			yyv3554 = make([]ServicePort, yyrl3554)
			yyc3554 = true

			yyrr3554 = len(yyv3554)
		} else if yyl3554 != len(yyv3554) {
			yyv3554 = yyv3554[:yyl3554]
			yyc3554 = true
		}
		yyj3554 := 0
		for ; yyj3554 < yyrr3554; yyj3554++ {
			if r.TryDecodeAsNil() {
				yyv3554[yyj3554] = ServicePort{}
			} else {
				yyv3555 := &yyv3554[yyj3554]
				yyv3555.CodecDecodeSelf(d)
			}

		}
		if yyrt3554 {
			for ; yyj3554 < yyl3554; yyj3554++ {
				yyv3554 = append(yyv3554, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3554[yyj3554] = ServicePort{}
				} else {
					yyv3556 := &yyv3554[yyj3554]
					yyv3556.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3554 := 0; !r.CheckBreak(); yyj3554++ {
			if yyj3554 >= len(yyv3554) {
				yyv3554 = append(yyv3554, ServicePort{}) // var yyz3554 ServicePort
				yyc3554 = true
			}

			if yyj3554 < len(yyv3554) {
				if r.TryDecodeAsNil() {
					yyv3554[yyj3554] = ServicePort{}
				} else {
					yyv3557 := &yyv3554[yyj3554]
					yyv3557.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3554.End()
	}
	if yyc3554 {
		*v = yyv3554
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3558 := range v {
		yy3559 := &yyv3558
		yy3559.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3560 := *v
	yyh3560, yyl3560 := z.DecSliceHelperStart()

	var yyrr3560, yyrl3560 int
	var yyc3560, yyrt3560 bool
	_, _, _ = yyc3560, yyrt3560, yyrl3560
	yyrr3560 = yyl3560

	if yyv3560 == nil {
		if yyrl3560, yyrt3560 = z.DecInferLen(yyl3560, z.DecBasicHandle().MaxInitLen, 360); yyrt3560 {
			yyrr3560 = yyrl3560
		}
		yyv3560 = make([]Service, yyrl3560)
		yyc3560 = true
	}

	if yyl3560 == 0 {
		if len(yyv3560) != 0 {
			yyv3560 = yyv3560[:0]
			yyc3560 = true
		}
	} else if yyl3560 > 0 {

		if yyl3560 > cap(yyv3560) {
			yyrl3560, yyrt3560 = z.DecInferLen(yyl3560, z.DecBasicHandle().MaxInitLen, 360)
			yyv3560 = make([]Service, yyrl3560)
			yyc3560 = true

			yyrr3560 = len(yyv3560)
		} else if yyl3560 != len(yyv3560) {
			yyv3560 = yyv3560[:yyl3560]
			yyc3560 = true
		}
		yyj3560 := 0
		for ; yyj3560 < yyrr3560; yyj3560++ {
			if r.TryDecodeAsNil() {
				yyv3560[yyj3560] = Service{}
			} else {
				yyv3561 := &yyv3560[yyj3560]
				yyv3561.CodecDecodeSelf(d)
			}

		}
		if yyrt3560 {
			for ; yyj3560 < yyl3560; yyj3560++ {
				yyv3560 = append(yyv3560, Service{})
				if r.TryDecodeAsNil() {
					yyv3560[yyj3560] = Service{}
				} else {
					yyv3562 := &yyv3560[yyj3560]
					yyv3562.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3560 := 0; !r.CheckBreak(); yyj3560++ {
			if yyj3560 >= len(yyv3560) {
				yyv3560 = append(yyv3560, Service{}) // var yyz3560 Service
				yyc3560 = true
			}

			if yyj3560 < len(yyv3560) {
				if r.TryDecodeAsNil() {
					yyv3560[yyj3560] = Service{}
				} else {
					yyv3563 := &yyv3560[yyj3560]
					yyv3563.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3560.End()
	}
	if yyc3560 {
		*v = yyv3560
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3564 := range v {
		yy3565 := &yyv3564
		yy3565.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3566 := *v
	yyh3566, yyl3566 := z.DecSliceHelperStart()

	var yyrr3566, yyrl3566 int
	var yyc3566, yyrt3566 bool
	_, _, _ = yyc3566, yyrt3566, yyrl3566
	yyrr3566 = yyl3566

	if yyv3566 == nil {
		if yyrl3566, yyrt3566 = z.DecInferLen(yyl3566, z.DecBasicHandle().MaxInitLen, 112); yyrt3566 {
			yyrr3566 = yyrl3566
		}
		yyv3566 = make([]ObjectReference, yyrl3566)
		yyc3566 = true
	}

	if yyl3566 == 0 {
		if len(yyv3566) != 0 {
			yyv3566 = yyv3566[:0]
			yyc3566 = true
		}
	} else if yyl3566 > 0 {

		if yyl3566 > cap(yyv3566) {
			yyrl3566, yyrt3566 = z.DecInferLen(yyl3566, z.DecBasicHandle().MaxInitLen, 112)
			yyv3566 = make([]ObjectReference, yyrl3566)
			yyc3566 = true

			yyrr3566 = len(yyv3566)
		} else if yyl3566 != len(yyv3566) {
			yyv3566 = yyv3566[:yyl3566]
			yyc3566 = true
		}
		yyj3566 := 0
		for ; yyj3566 < yyrr3566; yyj3566++ {
			if r.TryDecodeAsNil() {
				yyv3566[yyj3566] = ObjectReference{}
			} else {
				yyv3567 := &yyv3566[yyj3566]
				yyv3567.CodecDecodeSelf(d)
			}

		}
		if yyrt3566 {
			for ; yyj3566 < yyl3566; yyj3566++ {
				yyv3566 = append(yyv3566, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3566[yyj3566] = ObjectReference{}
				} else {
					yyv3568 := &yyv3566[yyj3566]
					yyv3568.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3566 := 0; !r.CheckBreak(); yyj3566++ {
			if yyj3566 >= len(yyv3566) {
				yyv3566 = append(yyv3566, ObjectReference{}) // var yyz3566 ObjectReference
				yyc3566 = true
			}

			if yyj3566 < len(yyv3566) {
				if r.TryDecodeAsNil() {
					yyv3566[yyj3566] = ObjectReference{}
				} else {
					yyv3569 := &yyv3566[yyj3566]
					yyv3569.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3566.End()
	}
	if yyc3566 {
		*v = yyv3566
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3570 := range v {
		yy3571 := &yyv3570
		yy3571.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3572 := *v
	yyh3572, yyl3572 := z.DecSliceHelperStart()

	var yyrr3572, yyrl3572 int
	var yyc3572, yyrt3572 bool
	_, _, _ = yyc3572, yyrt3572, yyrl3572
	yyrr3572 = yyl3572

	if yyv3572 == nil {
		if yyrl3572, yyrt3572 = z.DecInferLen(yyl3572, z.DecBasicHandle().MaxInitLen, 240); yyrt3572 {
			yyrr3572 = yyrl3572
		}
		yyv3572 = make([]ServiceAccount, yyrl3572)
		yyc3572 = true
	}

	if yyl3572 == 0 {
		if len(yyv3572) != 0 {
			yyv3572 = yyv3572[:0]
			yyc3572 = true
		}
	} else if yyl3572 > 0 {

		if yyl3572 > cap(yyv3572) {
			yyrl3572, yyrt3572 = z.DecInferLen(yyl3572, z.DecBasicHandle().MaxInitLen, 240)
			yyv3572 = make([]ServiceAccount, yyrl3572)
			yyc3572 = true

			yyrr3572 = len(yyv3572)
		} else if yyl3572 != len(yyv3572) {
			yyv3572 = yyv3572[:yyl3572]
			yyc3572 = true
		}
		yyj3572 := 0
		for ; yyj3572 < yyrr3572; yyj3572++ {
			if r.TryDecodeAsNil() {
				yyv3572[yyj3572] = ServiceAccount{}
			} else {
				yyv3573 := &yyv3572[yyj3572]
				yyv3573.CodecDecodeSelf(d)
			}

		}
		if yyrt3572 {
			for ; yyj3572 < yyl3572; yyj3572++ {
				yyv3572 = append(yyv3572, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3572[yyj3572] = ServiceAccount{}
				} else {
					yyv3574 := &yyv3572[yyj3572]
					yyv3574.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3572 := 0; !r.CheckBreak(); yyj3572++ {
			if yyj3572 >= len(yyv3572) {
				yyv3572 = append(yyv3572, ServiceAccount{}) // var yyz3572 ServiceAccount
				yyc3572 = true
			}

			if yyj3572 < len(yyv3572) {
				if r.TryDecodeAsNil() {
					yyv3572[yyj3572] = ServiceAccount{}
				} else {
					yyv3575 := &yyv3572[yyj3572]
					yyv3575.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3572.End()
	}
	if yyc3572 {
		*v = yyv3572
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3576 := range v {
		yy3577 := &yyv3576
		yy3577.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3578 := *v
	yyh3578, yyl3578 := z.DecSliceHelperStart()

	var yyrr3578, yyrl3578 int
	var yyc3578, yyrt3578 bool
	_, _, _ = yyc3578, yyrt3578, yyrl3578
	yyrr3578 = yyl3578

	if yyv3578 == nil {
		if yyrl3578, yyrt3578 = z.DecInferLen(yyl3578, z.DecBasicHandle().MaxInitLen, 72); yyrt3578 {
			yyrr3578 = yyrl3578
		}
		yyv3578 = make([]EndpointSubset, yyrl3578)
		yyc3578 = true
	}

	if yyl3578 == 0 {
		if len(yyv3578) != 0 {
			yyv3578 = yyv3578[:0]
			yyc3578 = true
		}
	} else if yyl3578 > 0 {

		if yyl3578 > cap(yyv3578) {
			yyrl3578, yyrt3578 = z.DecInferLen(yyl3578, z.DecBasicHandle().MaxInitLen, 72)
			yyv3578 = make([]EndpointSubset, yyrl3578)
			yyc3578 = true

			yyrr3578 = len(yyv3578)
		} else if yyl3578 != len(yyv3578) {
			yyv3578 = yyv3578[:yyl3578]
			yyc3578 = true
		}
		yyj3578 := 0
		for ; yyj3578 < yyrr3578; yyj3578++ {
			if r.TryDecodeAsNil() {
				yyv3578[yyj3578] = EndpointSubset{}
			} else {
				yyv3579 := &yyv3578[yyj3578]
				yyv3579.CodecDecodeSelf(d)
			}

		}
		if yyrt3578 {
			for ; yyj3578 < yyl3578; yyj3578++ {
				yyv3578 = append(yyv3578, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3578[yyj3578] = EndpointSubset{}
				} else {
					yyv3580 := &yyv3578[yyj3578]
					yyv3580.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3578 := 0; !r.CheckBreak(); yyj3578++ {
			if yyj3578 >= len(yyv3578) {
				yyv3578 = append(yyv3578, EndpointSubset{}) // var yyz3578 EndpointSubset
				yyc3578 = true
			}

			if yyj3578 < len(yyv3578) {
				if r.TryDecodeAsNil() {
					yyv3578[yyj3578] = EndpointSubset{}
				} else {
					yyv3581 := &yyv3578[yyj3578]
					yyv3581.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3578.End()
	}
	if yyc3578 {
		*v = yyv3578
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3582 := range v {
		yy3583 := &yyv3582
		yy3583.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3584 := *v
	yyh3584, yyl3584 := z.DecSliceHelperStart()

	var yyrr3584, yyrl3584 int
	var yyc3584, yyrt3584 bool
	_, _, _ = yyc3584, yyrt3584, yyrl3584
	yyrr3584 = yyl3584

	if yyv3584 == nil {
		if yyrl3584, yyrt3584 = z.DecInferLen(yyl3584, z.DecBasicHandle().MaxInitLen, 24); yyrt3584 {
			yyrr3584 = yyrl3584
		}
		yyv3584 = make([]EndpointAddress, yyrl3584)
		yyc3584 = true
	}

	if yyl3584 == 0 {
		if len(yyv3584) != 0 {
			yyv3584 = yyv3584[:0]
			yyc3584 = true
		}
	} else if yyl3584 > 0 {

		if yyl3584 > cap(yyv3584) {
			yyrl3584, yyrt3584 = z.DecInferLen(yyl3584, z.DecBasicHandle().MaxInitLen, 24)
			yyv3584 = make([]EndpointAddress, yyrl3584)
			yyc3584 = true

			yyrr3584 = len(yyv3584)
		} else if yyl3584 != len(yyv3584) {
			yyv3584 = yyv3584[:yyl3584]
			yyc3584 = true
		}
		yyj3584 := 0
		for ; yyj3584 < yyrr3584; yyj3584++ {
			if r.TryDecodeAsNil() {
				yyv3584[yyj3584] = EndpointAddress{}
			} else {
				yyv3585 := &yyv3584[yyj3584]
				yyv3585.CodecDecodeSelf(d)
			}

		}
		if yyrt3584 {
			for ; yyj3584 < yyl3584; yyj3584++ {
				yyv3584 = append(yyv3584, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3584[yyj3584] = EndpointAddress{}
				} else {
					yyv3586 := &yyv3584[yyj3584]
					yyv3586.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3584 := 0; !r.CheckBreak(); yyj3584++ {
			if yyj3584 >= len(yyv3584) {
				yyv3584 = append(yyv3584, EndpointAddress{}) // var yyz3584 EndpointAddress
				yyc3584 = true
			}

			if yyj3584 < len(yyv3584) {
				if r.TryDecodeAsNil() {
					yyv3584[yyj3584] = EndpointAddress{}
				} else {
					yyv3587 := &yyv3584[yyj3584]
					yyv3587.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3584.End()
	}
	if yyc3584 {
		*v = yyv3584
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3588 := range v {
		yy3589 := &yyv3588
		yy3589.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3590 := *v
	yyh3590, yyl3590 := z.DecSliceHelperStart()

	var yyrr3590, yyrl3590 int
	var yyc3590, yyrt3590 bool
	_, _, _ = yyc3590, yyrt3590, yyrl3590
	yyrr3590 = yyl3590

	if yyv3590 == nil {
		if yyrl3590, yyrt3590 = z.DecInferLen(yyl3590, z.DecBasicHandle().MaxInitLen, 40); yyrt3590 {
			yyrr3590 = yyrl3590
		}
		yyv3590 = make([]EndpointPort, yyrl3590)
		yyc3590 = true
	}

	if yyl3590 == 0 {
		if len(yyv3590) != 0 {
			yyv3590 = yyv3590[:0]
			yyc3590 = true
		}
	} else if yyl3590 > 0 {

		if yyl3590 > cap(yyv3590) {
			yyrl3590, yyrt3590 = z.DecInferLen(yyl3590, z.DecBasicHandle().MaxInitLen, 40)
			yyv3590 = make([]EndpointPort, yyrl3590)
			yyc3590 = true

			yyrr3590 = len(yyv3590)
		} else if yyl3590 != len(yyv3590) {
			yyv3590 = yyv3590[:yyl3590]
			yyc3590 = true
		}
		yyj3590 := 0
		for ; yyj3590 < yyrr3590; yyj3590++ {
			if r.TryDecodeAsNil() {
				yyv3590[yyj3590] = EndpointPort{}
			} else {
				yyv3591 := &yyv3590[yyj3590]
				yyv3591.CodecDecodeSelf(d)
			}

		}
		if yyrt3590 {
			for ; yyj3590 < yyl3590; yyj3590++ {
				yyv3590 = append(yyv3590, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3590[yyj3590] = EndpointPort{}
				} else {
					yyv3592 := &yyv3590[yyj3590]
					yyv3592.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3590 := 0; !r.CheckBreak(); yyj3590++ {
			if yyj3590 >= len(yyv3590) {
				yyv3590 = append(yyv3590, EndpointPort{}) // var yyz3590 EndpointPort
				yyc3590 = true
			}

			if yyj3590 < len(yyv3590) {
				if r.TryDecodeAsNil() {
					yyv3590[yyj3590] = EndpointPort{}
				} else {
					yyv3593 := &yyv3590[yyj3590]
					yyv3593.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3590.End()
	}
	if yyc3590 {
		*v = yyv3590
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3594 := range v {
		yy3595 := &yyv3594
		yy3595.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3596 := *v
	yyh3596, yyl3596 := z.DecSliceHelperStart()

	var yyrr3596, yyrl3596 int
	var yyc3596, yyrt3596 bool
	_, _, _ = yyc3596, yyrt3596, yyrl3596
	yyrr3596 = yyl3596

	if yyv3596 == nil {
		if yyrl3596, yyrt3596 = z.DecInferLen(yyl3596, z.DecBasicHandle().MaxInitLen, 216); yyrt3596 {
			yyrr3596 = yyrl3596
		}
		yyv3596 = make([]Endpoints, yyrl3596)
		yyc3596 = true
	}

	if yyl3596 == 0 {
		if len(yyv3596) != 0 {
			yyv3596 = yyv3596[:0]
			yyc3596 = true
		}
	} else if yyl3596 > 0 {

		if yyl3596 > cap(yyv3596) {
			yyrl3596, yyrt3596 = z.DecInferLen(yyl3596, z.DecBasicHandle().MaxInitLen, 216)
			yyv3596 = make([]Endpoints, yyrl3596)
			yyc3596 = true

			yyrr3596 = len(yyv3596)
		} else if yyl3596 != len(yyv3596) {
			yyv3596 = yyv3596[:yyl3596]
			yyc3596 = true
		}
		yyj3596 := 0
		for ; yyj3596 < yyrr3596; yyj3596++ {
			if r.TryDecodeAsNil() {
				yyv3596[yyj3596] = Endpoints{}
			} else {
				yyv3597 := &yyv3596[yyj3596]
				yyv3597.CodecDecodeSelf(d)
			}

		}
		if yyrt3596 {
			for ; yyj3596 < yyl3596; yyj3596++ {
				yyv3596 = append(yyv3596, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3596[yyj3596] = Endpoints{}
				} else {
					yyv3598 := &yyv3596[yyj3596]
					yyv3598.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3596 := 0; !r.CheckBreak(); yyj3596++ {
			if yyj3596 >= len(yyv3596) {
				yyv3596 = append(yyv3596, Endpoints{}) // var yyz3596 Endpoints
				yyc3596 = true
			}

			if yyj3596 < len(yyv3596) {
				if r.TryDecodeAsNil() {
					yyv3596[yyj3596] = Endpoints{}
				} else {
					yyv3599 := &yyv3596[yyj3596]
					yyv3599.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3596.End()
	}
	if yyc3596 {
		*v = yyv3596
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3600 := range v {
		yy3601 := &yyv3600
		yy3601.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3602 := *v
	yyh3602, yyl3602 := z.DecSliceHelperStart()

	var yyrr3602, yyrl3602 int
	var yyc3602, yyrt3602 bool
	_, _, _ = yyc3602, yyrt3602, yyrl3602
	yyrr3602 = yyl3602

	if yyv3602 == nil {
		if yyrl3602, yyrt3602 = z.DecInferLen(yyl3602, z.DecBasicHandle().MaxInitLen, 112); yyrt3602 {
			yyrr3602 = yyrl3602
		}
		yyv3602 = make([]NodeCondition, yyrl3602)
		yyc3602 = true
	}

	if yyl3602 == 0 {
		if len(yyv3602) != 0 {
			yyv3602 = yyv3602[:0]
			yyc3602 = true
		}
	} else if yyl3602 > 0 {

		if yyl3602 > cap(yyv3602) {
			yyrl3602, yyrt3602 = z.DecInferLen(yyl3602, z.DecBasicHandle().MaxInitLen, 112)
			yyv3602 = make([]NodeCondition, yyrl3602)
			yyc3602 = true

			yyrr3602 = len(yyv3602)
		} else if yyl3602 != len(yyv3602) {
			yyv3602 = yyv3602[:yyl3602]
			yyc3602 = true
		}
		yyj3602 := 0
		for ; yyj3602 < yyrr3602; yyj3602++ {
			if r.TryDecodeAsNil() {
				yyv3602[yyj3602] = NodeCondition{}
			} else {
				yyv3603 := &yyv3602[yyj3602]
				yyv3603.CodecDecodeSelf(d)
			}

		}
		if yyrt3602 {
			for ; yyj3602 < yyl3602; yyj3602++ {
				yyv3602 = append(yyv3602, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3602[yyj3602] = NodeCondition{}
				} else {
					yyv3604 := &yyv3602[yyj3602]
					yyv3604.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3602 := 0; !r.CheckBreak(); yyj3602++ {
			if yyj3602 >= len(yyv3602) {
				yyv3602 = append(yyv3602, NodeCondition{}) // var yyz3602 NodeCondition
				yyc3602 = true
			}

			if yyj3602 < len(yyv3602) {
				if r.TryDecodeAsNil() {
					yyv3602[yyj3602] = NodeCondition{}
				} else {
					yyv3605 := &yyv3602[yyj3602]
					yyv3605.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3602.End()
	}
	if yyc3602 {
		*v = yyv3602
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3606 := range v {
		yy3607 := &yyv3606
		yy3607.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3608 := *v
	yyh3608, yyl3608 := z.DecSliceHelperStart()

	var yyrr3608, yyrl3608 int
	var yyc3608, yyrt3608 bool
	_, _, _ = yyc3608, yyrt3608, yyrl3608
	yyrr3608 = yyl3608

	if yyv3608 == nil {
		if yyrl3608, yyrt3608 = z.DecInferLen(yyl3608, z.DecBasicHandle().MaxInitLen, 32); yyrt3608 {
			yyrr3608 = yyrl3608
		}
		yyv3608 = make([]NodeAddress, yyrl3608)
		yyc3608 = true
	}

	if yyl3608 == 0 {
		if len(yyv3608) != 0 {
			yyv3608 = yyv3608[:0]
			yyc3608 = true
		}
	} else if yyl3608 > 0 {

		if yyl3608 > cap(yyv3608) {
			yyrl3608, yyrt3608 = z.DecInferLen(yyl3608, z.DecBasicHandle().MaxInitLen, 32)
			yyv3608 = make([]NodeAddress, yyrl3608)
			yyc3608 = true

			yyrr3608 = len(yyv3608)
		} else if yyl3608 != len(yyv3608) {
			yyv3608 = yyv3608[:yyl3608]
			yyc3608 = true
		}
		yyj3608 := 0
		for ; yyj3608 < yyrr3608; yyj3608++ {
			if r.TryDecodeAsNil() {
				yyv3608[yyj3608] = NodeAddress{}
			} else {
				yyv3609 := &yyv3608[yyj3608]
				yyv3609.CodecDecodeSelf(d)
			}

		}
		if yyrt3608 {
			for ; yyj3608 < yyl3608; yyj3608++ {
				yyv3608 = append(yyv3608, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3608[yyj3608] = NodeAddress{}
				} else {
					yyv3610 := &yyv3608[yyj3608]
					yyv3610.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3608 := 0; !r.CheckBreak(); yyj3608++ {
			if yyj3608 >= len(yyv3608) {
				yyv3608 = append(yyv3608, NodeAddress{}) // var yyz3608 NodeAddress
				yyc3608 = true
			}

			if yyj3608 < len(yyv3608) {
				if r.TryDecodeAsNil() {
					yyv3608[yyj3608] = NodeAddress{}
				} else {
					yyv3611 := &yyv3608[yyj3608]
					yyv3611.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3608.End()
	}
	if yyc3608 {
		*v = yyv3608
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3612, yyv3612 := range v {
		yyk3612.CodecEncodeSelf(e)
		yy3613 := &yyv3612
		yym3614 := z.EncBinary()
		_ = yym3614
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3613) {
		} else if !yym3614 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3613)
		} else {
			z.EncFallback(yy3613)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3615 := *v
	yyl3615 := r.ReadMapStart()
	yybh3615 := z.DecBasicHandle()
	if yyv3615 == nil {
		yyrl3615, _ := z.DecInferLen(yyl3615, yybh3615.MaxInitLen, 40)
		yyv3615 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3615)
		*v = yyv3615
	}
	var yymk3615 ResourceName
	var yymv3615 pkg3_resource.Quantity
	var yymg3615 bool
	if yybh3615.MapValueReset {
		yymg3615 = true
	}
	if yyl3615 > 0 {
		for yyj3615 := 0; yyj3615 < yyl3615; yyj3615++ {
			if r.TryDecodeAsNil() {
				yymk3615 = ""
			} else {
				yymk3615 = ResourceName(r.DecodeString())
			}

			if yymg3615 {
				yymv3615 = yyv3615[yymk3615]
			} else {
				yymv3615 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3615 = pkg3_resource.Quantity{}
			} else {
				yyv3617 := &yymv3615
				yym3618 := z.DecBinary()
				_ = yym3618
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3617) {
				} else if !yym3618 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3617)
				} else {
					z.DecFallback(yyv3617, false)
				}
			}

			if yyv3615 != nil {
				yyv3615[yymk3615] = yymv3615
			}
		}
	} else if yyl3615 < 0 {
		for yyj3615 := 0; !r.CheckBreak(); yyj3615++ {
			if r.TryDecodeAsNil() {
				yymk3615 = ""
			} else {
				yymk3615 = ResourceName(r.DecodeString())
			}

			if yymg3615 {
				yymv3615 = yyv3615[yymk3615]
			} else {
				yymv3615 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3615 = pkg3_resource.Quantity{}
			} else {
				yyv3620 := &yymv3615
				yym3621 := z.DecBinary()
				_ = yym3621
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3620) {
				} else if !yym3621 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3620)
				} else {
					z.DecFallback(yyv3620, false)
				}
			}

			if yyv3615 != nil {
				yyv3615[yymk3615] = yymv3615
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3622 := range v {
		yy3623 := &yyv3622
		yy3623.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3624 := *v
	yyh3624, yyl3624 := z.DecSliceHelperStart()

	var yyrr3624, yyrl3624 int
	var yyc3624, yyrt3624 bool
	_, _, _ = yyc3624, yyrt3624, yyrl3624
	yyrr3624 = yyl3624

	if yyv3624 == nil {
		if yyrl3624, yyrt3624 = z.DecInferLen(yyl3624, z.DecBasicHandle().MaxInitLen, 456); yyrt3624 {
			yyrr3624 = yyrl3624
		}
		yyv3624 = make([]Node, yyrl3624)
		yyc3624 = true
	}

	if yyl3624 == 0 {
		if len(yyv3624) != 0 {
			yyv3624 = yyv3624[:0]
			yyc3624 = true
		}
	} else if yyl3624 > 0 {

		if yyl3624 > cap(yyv3624) {
			yyrl3624, yyrt3624 = z.DecInferLen(yyl3624, z.DecBasicHandle().MaxInitLen, 456)
			yyv3624 = make([]Node, yyrl3624)
			yyc3624 = true

			yyrr3624 = len(yyv3624)
		} else if yyl3624 != len(yyv3624) {
			yyv3624 = yyv3624[:yyl3624]
			yyc3624 = true
		}
		yyj3624 := 0
		for ; yyj3624 < yyrr3624; yyj3624++ {
			if r.TryDecodeAsNil() {
				yyv3624[yyj3624] = Node{}
			} else {
				yyv3625 := &yyv3624[yyj3624]
				yyv3625.CodecDecodeSelf(d)
			}

		}
		if yyrt3624 {
			for ; yyj3624 < yyl3624; yyj3624++ {
				yyv3624 = append(yyv3624, Node{})
				if r.TryDecodeAsNil() {
					yyv3624[yyj3624] = Node{}
				} else {
					yyv3626 := &yyv3624[yyj3624]
					yyv3626.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3624 := 0; !r.CheckBreak(); yyj3624++ {
			if yyj3624 >= len(yyv3624) {
				yyv3624 = append(yyv3624, Node{}) // var yyz3624 Node
				yyc3624 = true
			}

			if yyj3624 < len(yyv3624) {
				if r.TryDecodeAsNil() {
					yyv3624[yyj3624] = Node{}
				} else {
					yyv3627 := &yyv3624[yyj3624]
					yyv3627.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3624.End()
	}
	if yyc3624 {
		*v = yyv3624
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3628 := range v {
		yyv3628.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3629 := *v
	yyh3629, yyl3629 := z.DecSliceHelperStart()

	var yyrr3629, yyrl3629 int
	var yyc3629, yyrt3629 bool
	_, _, _ = yyc3629, yyrt3629, yyrl3629
	yyrr3629 = yyl3629

	if yyv3629 == nil {
		if yyrl3629, yyrt3629 = z.DecInferLen(yyl3629, z.DecBasicHandle().MaxInitLen, 16); yyrt3629 {
			yyrr3629 = yyrl3629
		}
		yyv3629 = make([]FinalizerName, yyrl3629)
		yyc3629 = true
	}

	if yyl3629 == 0 {
		if len(yyv3629) != 0 {
			yyv3629 = yyv3629[:0]
			yyc3629 = true
		}
	} else if yyl3629 > 0 {

		if yyl3629 > cap(yyv3629) {
			yyrl3629, yyrt3629 = z.DecInferLen(yyl3629, z.DecBasicHandle().MaxInitLen, 16)

			yyv23629 := yyv3629
			yyv3629 = make([]FinalizerName, yyrl3629)
			if len(yyv3629) > 0 {
				copy(yyv3629, yyv23629[:cap(yyv23629)])
			}
			yyc3629 = true

			yyrr3629 = len(yyv3629)
		} else if yyl3629 != len(yyv3629) {
			yyv3629 = yyv3629[:yyl3629]
			yyc3629 = true
		}
		yyj3629 := 0
		for ; yyj3629 < yyrr3629; yyj3629++ {
			if r.TryDecodeAsNil() {
				yyv3629[yyj3629] = ""
			} else {
				yyv3629[yyj3629] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3629 {
			for ; yyj3629 < yyl3629; yyj3629++ {
				yyv3629 = append(yyv3629, "")
				if r.TryDecodeAsNil() {
					yyv3629[yyj3629] = ""
				} else {
					yyv3629[yyj3629] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3629 := 0; !r.CheckBreak(); yyj3629++ {
			if yyj3629 >= len(yyv3629) {
				yyv3629 = append(yyv3629, "") // var yyz3629 FinalizerName
				yyc3629 = true
			}

			if yyj3629 < len(yyv3629) {
				if r.TryDecodeAsNil() {
					yyv3629[yyj3629] = ""
				} else {
					yyv3629[yyj3629] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3629.End()
	}
	if yyc3629 {
		*v = yyv3629
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3633 := range v {
		yy3634 := &yyv3633
		yy3634.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3635 := *v
	yyh3635, yyl3635 := z.DecSliceHelperStart()

	var yyrr3635, yyrl3635 int
	var yyc3635, yyrt3635 bool
	_, _, _ = yyc3635, yyrt3635, yyrl3635
	yyrr3635 = yyl3635

	if yyv3635 == nil {
		if yyrl3635, yyrt3635 = z.DecInferLen(yyl3635, z.DecBasicHandle().MaxInitLen, 232); yyrt3635 {
			yyrr3635 = yyrl3635
		}
		yyv3635 = make([]Namespace, yyrl3635)
		yyc3635 = true
	}

	if yyl3635 == 0 {
		if len(yyv3635) != 0 {
			yyv3635 = yyv3635[:0]
			yyc3635 = true
		}
	} else if yyl3635 > 0 {

		if yyl3635 > cap(yyv3635) {
			yyrl3635, yyrt3635 = z.DecInferLen(yyl3635, z.DecBasicHandle().MaxInitLen, 232)
			yyv3635 = make([]Namespace, yyrl3635)
			yyc3635 = true

			yyrr3635 = len(yyv3635)
		} else if yyl3635 != len(yyv3635) {
			yyv3635 = yyv3635[:yyl3635]
			yyc3635 = true
		}
		yyj3635 := 0
		for ; yyj3635 < yyrr3635; yyj3635++ {
			if r.TryDecodeAsNil() {
				yyv3635[yyj3635] = Namespace{}
			} else {
				yyv3636 := &yyv3635[yyj3635]
				yyv3636.CodecDecodeSelf(d)
			}

		}
		if yyrt3635 {
			for ; yyj3635 < yyl3635; yyj3635++ {
				yyv3635 = append(yyv3635, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3635[yyj3635] = Namespace{}
				} else {
					yyv3637 := &yyv3635[yyj3635]
					yyv3637.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3635 := 0; !r.CheckBreak(); yyj3635++ {
			if yyj3635 >= len(yyv3635) {
				yyv3635 = append(yyv3635, Namespace{}) // var yyz3635 Namespace
				yyc3635 = true
			}

			if yyj3635 < len(yyv3635) {
				if r.TryDecodeAsNil() {
					yyv3635[yyj3635] = Namespace{}
				} else {
					yyv3638 := &yyv3635[yyj3635]
					yyv3638.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3635.End()
	}
	if yyc3635 {
		*v = yyv3635
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3639 := range v {
		yy3640 := &yyv3639
		yy3640.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3641 := *v
	yyh3641, yyl3641 := z.DecSliceHelperStart()

	var yyrr3641, yyrl3641 int
	var yyc3641, yyrt3641 bool
	_, _, _ = yyc3641, yyrt3641, yyrl3641
	yyrr3641 = yyl3641

	if yyv3641 == nil {
		if yyrl3641, yyrt3641 = z.DecInferLen(yyl3641, z.DecBasicHandle().MaxInitLen, 424); yyrt3641 {
			yyrr3641 = yyrl3641
		}
		yyv3641 = make([]Event, yyrl3641)
		yyc3641 = true
	}

	if yyl3641 == 0 {
		if len(yyv3641) != 0 {
			yyv3641 = yyv3641[:0]
			yyc3641 = true
		}
	} else if yyl3641 > 0 {

		if yyl3641 > cap(yyv3641) {
			yyrl3641, yyrt3641 = z.DecInferLen(yyl3641, z.DecBasicHandle().MaxInitLen, 424)
			yyv3641 = make([]Event, yyrl3641)
			yyc3641 = true

			yyrr3641 = len(yyv3641)
		} else if yyl3641 != len(yyv3641) {
			yyv3641 = yyv3641[:yyl3641]
			yyc3641 = true
		}
		yyj3641 := 0
		for ; yyj3641 < yyrr3641; yyj3641++ {
			if r.TryDecodeAsNil() {
				yyv3641[yyj3641] = Event{}
			} else {
				yyv3642 := &yyv3641[yyj3641]
				yyv3642.CodecDecodeSelf(d)
			}

		}
		if yyrt3641 {
			for ; yyj3641 < yyl3641; yyj3641++ {
				yyv3641 = append(yyv3641, Event{})
				if r.TryDecodeAsNil() {
					yyv3641[yyj3641] = Event{}
				} else {
					yyv3643 := &yyv3641[yyj3641]
					yyv3643.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3641 := 0; !r.CheckBreak(); yyj3641++ {
			if yyj3641 >= len(yyv3641) {
				yyv3641 = append(yyv3641, Event{}) // var yyz3641 Event
				yyc3641 = true
			}

			if yyj3641 < len(yyv3641) {
				if r.TryDecodeAsNil() {
					yyv3641[yyj3641] = Event{}
				} else {
					yyv3644 := &yyv3641[yyj3641]
					yyv3644.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3641.End()
	}
	if yyc3641 {
		*v = yyv3641
	}

}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg6_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3645 := range v {
		yy3646 := &yyv3645
		yym3647 := z.EncBinary()
		_ = yym3647
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3646) {
		} else if !yym3647 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3646)
		} else {
			z.EncFallback(yy3646)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg6_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3648 := *v
	yyh3648, yyl3648 := z.DecSliceHelperStart()

	var yyrr3648, yyrl3648 int
	var yyc3648, yyrt3648 bool
	_, _, _ = yyc3648, yyrt3648, yyrl3648
	yyrr3648 = yyl3648

	if yyv3648 == nil {
		if yyrl3648, yyrt3648 = z.DecInferLen(yyl3648, z.DecBasicHandle().MaxInitLen, 24); yyrt3648 {
			yyrr3648 = yyrl3648
		}
		yyv3648 = make([]pkg6_runtime.RawExtension, yyrl3648)
		yyc3648 = true
	}

	if yyl3648 == 0 {
		if len(yyv3648) != 0 {
			yyv3648 = yyv3648[:0]
			yyc3648 = true
		}
	} else if yyl3648 > 0 {

		if yyl3648 > cap(yyv3648) {
			yyrl3648, yyrt3648 = z.DecInferLen(yyl3648, z.DecBasicHandle().MaxInitLen, 24)
			yyv3648 = make([]pkg6_runtime.RawExtension, yyrl3648)
			yyc3648 = true

			yyrr3648 = len(yyv3648)
		} else if yyl3648 != len(yyv3648) {
			yyv3648 = yyv3648[:yyl3648]
			yyc3648 = true
		}
		yyj3648 := 0
		for ; yyj3648 < yyrr3648; yyj3648++ {
			if r.TryDecodeAsNil() {
				yyv3648[yyj3648] = pkg6_runtime.RawExtension{}
			} else {
				yyv3649 := &yyv3648[yyj3648]
				yym3650 := z.DecBinary()
				_ = yym3650
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3649) {
				} else if !yym3650 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3649)
				} else {
					z.DecFallback(yyv3649, false)
				}
			}

		}
		if yyrt3648 {
			for ; yyj3648 < yyl3648; yyj3648++ {
				yyv3648 = append(yyv3648, pkg6_runtime.RawExtension{})
				if r.TryDecodeAsNil() {
					yyv3648[yyj3648] = pkg6_runtime.RawExtension{}
				} else {
					yyv3651 := &yyv3648[yyj3648]
					yym3652 := z.DecBinary()
					_ = yym3652
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3651) {
					} else if !yym3652 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3651)
					} else {
						z.DecFallback(yyv3651, false)
					}
				}

			}
		}

	} else {
		for yyj3648 := 0; !r.CheckBreak(); yyj3648++ {
			if yyj3648 >= len(yyv3648) {
				yyv3648 = append(yyv3648, pkg6_runtime.RawExtension{}) // var yyz3648 pkg6_runtime.RawExtension
				yyc3648 = true
			}

			if yyj3648 < len(yyv3648) {
				if r.TryDecodeAsNil() {
					yyv3648[yyj3648] = pkg6_runtime.RawExtension{}
				} else {
					yyv3653 := &yyv3648[yyj3648]
					yym3654 := z.DecBinary()
					_ = yym3654
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3653) {
					} else if !yym3654 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3653)
					} else {
						z.DecFallback(yyv3653, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3648.End()
	}
	if yyc3648 {
		*v = yyv3648
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3655 := range v {
		yy3656 := &yyv3655
		yy3656.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3657 := *v
	yyh3657, yyl3657 := z.DecSliceHelperStart()

	var yyrr3657, yyrl3657 int
	var yyc3657, yyrt3657 bool
	_, _, _ = yyc3657, yyrt3657, yyrl3657
	yyrr3657 = yyl3657

	if yyv3657 == nil {
		if yyrl3657, yyrt3657 = z.DecInferLen(yyl3657, z.DecBasicHandle().MaxInitLen, 56); yyrt3657 {
			yyrr3657 = yyrl3657
		}
		yyv3657 = make([]LimitRangeItem, yyrl3657)
		yyc3657 = true
	}

	if yyl3657 == 0 {
		if len(yyv3657) != 0 {
			yyv3657 = yyv3657[:0]
			yyc3657 = true
		}
	} else if yyl3657 > 0 {

		if yyl3657 > cap(yyv3657) {
			yyrl3657, yyrt3657 = z.DecInferLen(yyl3657, z.DecBasicHandle().MaxInitLen, 56)
			yyv3657 = make([]LimitRangeItem, yyrl3657)
			yyc3657 = true

			yyrr3657 = len(yyv3657)
		} else if yyl3657 != len(yyv3657) {
			yyv3657 = yyv3657[:yyl3657]
			yyc3657 = true
		}
		yyj3657 := 0
		for ; yyj3657 < yyrr3657; yyj3657++ {
			if r.TryDecodeAsNil() {
				yyv3657[yyj3657] = LimitRangeItem{}
			} else {
				yyv3658 := &yyv3657[yyj3657]
				yyv3658.CodecDecodeSelf(d)
			}

		}
		if yyrt3657 {
			for ; yyj3657 < yyl3657; yyj3657++ {
				yyv3657 = append(yyv3657, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3657[yyj3657] = LimitRangeItem{}
				} else {
					yyv3659 := &yyv3657[yyj3657]
					yyv3659.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3657 := 0; !r.CheckBreak(); yyj3657++ {
			if yyj3657 >= len(yyv3657) {
				yyv3657 = append(yyv3657, LimitRangeItem{}) // var yyz3657 LimitRangeItem
				yyc3657 = true
			}

			if yyj3657 < len(yyv3657) {
				if r.TryDecodeAsNil() {
					yyv3657[yyj3657] = LimitRangeItem{}
				} else {
					yyv3660 := &yyv3657[yyj3657]
					yyv3660.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3657.End()
	}
	if yyc3657 {
		*v = yyv3657
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3661 := range v {
		yy3662 := &yyv3661
		yy3662.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3663 := *v
	yyh3663, yyl3663 := z.DecSliceHelperStart()

	var yyrr3663, yyrl3663 int
	var yyc3663, yyrt3663 bool
	_, _, _ = yyc3663, yyrt3663, yyrl3663
	yyrr3663 = yyl3663

	if yyv3663 == nil {
		if yyrl3663, yyrt3663 = z.DecInferLen(yyl3663, z.DecBasicHandle().MaxInitLen, 216); yyrt3663 {
			yyrr3663 = yyrl3663
		}
		yyv3663 = make([]LimitRange, yyrl3663)
		yyc3663 = true
	}

	if yyl3663 == 0 {
		if len(yyv3663) != 0 {
			yyv3663 = yyv3663[:0]
			yyc3663 = true
		}
	} else if yyl3663 > 0 {

		if yyl3663 > cap(yyv3663) {
			yyrl3663, yyrt3663 = z.DecInferLen(yyl3663, z.DecBasicHandle().MaxInitLen, 216)
			yyv3663 = make([]LimitRange, yyrl3663)
			yyc3663 = true

			yyrr3663 = len(yyv3663)
		} else if yyl3663 != len(yyv3663) {
			yyv3663 = yyv3663[:yyl3663]
			yyc3663 = true
		}
		yyj3663 := 0
		for ; yyj3663 < yyrr3663; yyj3663++ {
			if r.TryDecodeAsNil() {
				yyv3663[yyj3663] = LimitRange{}
			} else {
				yyv3664 := &yyv3663[yyj3663]
				yyv3664.CodecDecodeSelf(d)
			}

		}
		if yyrt3663 {
			for ; yyj3663 < yyl3663; yyj3663++ {
				yyv3663 = append(yyv3663, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3663[yyj3663] = LimitRange{}
				} else {
					yyv3665 := &yyv3663[yyj3663]
					yyv3665.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3663 := 0; !r.CheckBreak(); yyj3663++ {
			if yyj3663 >= len(yyv3663) {
				yyv3663 = append(yyv3663, LimitRange{}) // var yyz3663 LimitRange
				yyc3663 = true
			}

			if yyj3663 < len(yyv3663) {
				if r.TryDecodeAsNil() {
					yyv3663[yyj3663] = LimitRange{}
				} else {
					yyv3666 := &yyv3663[yyj3663]
					yyv3666.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3663.End()
	}
	if yyc3663 {
		*v = yyv3663
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3667 := range v {
		yy3668 := &yyv3667
		yy3668.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3669 := *v
	yyh3669, yyl3669 := z.DecSliceHelperStart()

	var yyrr3669, yyrl3669 int
	var yyc3669, yyrt3669 bool
	_, _, _ = yyc3669, yyrt3669, yyrl3669
	yyrr3669 = yyl3669

	if yyv3669 == nil {
		if yyrl3669, yyrt3669 = z.DecInferLen(yyl3669, z.DecBasicHandle().MaxInitLen, 216); yyrt3669 {
			yyrr3669 = yyrl3669
		}
		yyv3669 = make([]ResourceQuota, yyrl3669)
		yyc3669 = true
	}

	if yyl3669 == 0 {
		if len(yyv3669) != 0 {
			yyv3669 = yyv3669[:0]
			yyc3669 = true
		}
	} else if yyl3669 > 0 {

		if yyl3669 > cap(yyv3669) {
			yyrl3669, yyrt3669 = z.DecInferLen(yyl3669, z.DecBasicHandle().MaxInitLen, 216)
			yyv3669 = make([]ResourceQuota, yyrl3669)
			yyc3669 = true

			yyrr3669 = len(yyv3669)
		} else if yyl3669 != len(yyv3669) {
			yyv3669 = yyv3669[:yyl3669]
			yyc3669 = true
		}
		yyj3669 := 0
		for ; yyj3669 < yyrr3669; yyj3669++ {
			if r.TryDecodeAsNil() {
				yyv3669[yyj3669] = ResourceQuota{}
			} else {
				yyv3670 := &yyv3669[yyj3669]
				yyv3670.CodecDecodeSelf(d)
			}

		}
		if yyrt3669 {
			for ; yyj3669 < yyl3669; yyj3669++ {
				yyv3669 = append(yyv3669, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3669[yyj3669] = ResourceQuota{}
				} else {
					yyv3671 := &yyv3669[yyj3669]
					yyv3671.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3669 := 0; !r.CheckBreak(); yyj3669++ {
			if yyj3669 >= len(yyv3669) {
				yyv3669 = append(yyv3669, ResourceQuota{}) // var yyz3669 ResourceQuota
				yyc3669 = true
			}

			if yyj3669 < len(yyv3669) {
				if r.TryDecodeAsNil() {
					yyv3669[yyj3669] = ResourceQuota{}
				} else {
					yyv3672 := &yyv3669[yyj3669]
					yyv3672.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3669.End()
	}
	if yyc3669 {
		*v = yyv3669
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3673, yyv3673 := range v {
		yym3674 := z.EncBinary()
		_ = yym3674
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3673))
		}
		if yyv3673 == nil {
			r.EncodeNil()
		} else {
			yym3675 := z.EncBinary()
			_ = yym3675
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3673))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3676 := *v
	yyl3676 := r.ReadMapStart()
	yybh3676 := z.DecBasicHandle()
	if yyv3676 == nil {
		yyrl3676, _ := z.DecInferLen(yyl3676, yybh3676.MaxInitLen, 40)
		yyv3676 = make(map[string][]uint8, yyrl3676)
		*v = yyv3676
	}
	var yymk3676 string
	var yymv3676 []uint8
	var yymg3676 bool
	if yybh3676.MapValueReset {
		yymg3676 = true
	}
	if yyl3676 > 0 {
		for yyj3676 := 0; yyj3676 < yyl3676; yyj3676++ {
			if r.TryDecodeAsNil() {
				yymk3676 = ""
			} else {
				yymk3676 = string(r.DecodeString())
			}

			if yymg3676 {
				yymv3676 = yyv3676[yymk3676]
			} else {
				yymv3676 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3676 = nil
			} else {
				yyv3678 := &yymv3676
				yym3679 := z.DecBinary()
				_ = yym3679
				if false {
				} else {
					*yyv3678 = r.DecodeBytes(*(*[]byte)(yyv3678), false, false)
				}
			}

			if yyv3676 != nil {
				yyv3676[yymk3676] = yymv3676
			}
		}
	} else if yyl3676 < 0 {
		for yyj3676 := 0; !r.CheckBreak(); yyj3676++ {
			if r.TryDecodeAsNil() {
				yymk3676 = ""
			} else {
				yymk3676 = string(r.DecodeString())
			}

			if yymg3676 {
				yymv3676 = yyv3676[yymk3676]
			} else {
				yymv3676 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3676 = nil
			} else {
				yyv3681 := &yymv3676
				yym3682 := z.DecBinary()
				_ = yym3682
				if false {
				} else {
					*yyv3681 = r.DecodeBytes(*(*[]byte)(yyv3681), false, false)
				}
			}

			if yyv3676 != nil {
				yyv3676[yymk3676] = yymv3676
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3683 := range v {
		yy3684 := &yyv3683
		yy3684.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3685 := *v
	yyh3685, yyl3685 := z.DecSliceHelperStart()

	var yyrr3685, yyrl3685 int
	var yyc3685, yyrt3685 bool
	_, _, _ = yyc3685, yyrt3685, yyrl3685
	yyrr3685 = yyl3685

	if yyv3685 == nil {
		if yyrl3685, yyrt3685 = z.DecInferLen(yyl3685, z.DecBasicHandle().MaxInitLen, 216); yyrt3685 {
			yyrr3685 = yyrl3685
		}
		yyv3685 = make([]Secret, yyrl3685)
		yyc3685 = true
	}

	if yyl3685 == 0 {
		if len(yyv3685) != 0 {
			yyv3685 = yyv3685[:0]
			yyc3685 = true
		}
	} else if yyl3685 > 0 {

		if yyl3685 > cap(yyv3685) {
			yyrl3685, yyrt3685 = z.DecInferLen(yyl3685, z.DecBasicHandle().MaxInitLen, 216)
			yyv3685 = make([]Secret, yyrl3685)
			yyc3685 = true

			yyrr3685 = len(yyv3685)
		} else if yyl3685 != len(yyv3685) {
			yyv3685 = yyv3685[:yyl3685]
			yyc3685 = true
		}
		yyj3685 := 0
		for ; yyj3685 < yyrr3685; yyj3685++ {
			if r.TryDecodeAsNil() {
				yyv3685[yyj3685] = Secret{}
			} else {
				yyv3686 := &yyv3685[yyj3685]
				yyv3686.CodecDecodeSelf(d)
			}

		}
		if yyrt3685 {
			for ; yyj3685 < yyl3685; yyj3685++ {
				yyv3685 = append(yyv3685, Secret{})
				if r.TryDecodeAsNil() {
					yyv3685[yyj3685] = Secret{}
				} else {
					yyv3687 := &yyv3685[yyj3685]
					yyv3687.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3685 := 0; !r.CheckBreak(); yyj3685++ {
			if yyj3685 >= len(yyv3685) {
				yyv3685 = append(yyv3685, Secret{}) // var yyz3685 Secret
				yyc3685 = true
			}

			if yyj3685 < len(yyv3685) {
				if r.TryDecodeAsNil() {
					yyv3685[yyj3685] = Secret{}
				} else {
					yyv3688 := &yyv3685[yyj3685]
					yyv3688.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3685.End()
	}
	if yyc3685 {
		*v = yyv3685
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3689 := range v {
		yy3690 := &yyv3689
		yy3690.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3691 := *v
	yyh3691, yyl3691 := z.DecSliceHelperStart()

	var yyrr3691, yyrl3691 int
	var yyc3691, yyrt3691 bool
	_, _, _ = yyc3691, yyrt3691, yyrl3691
	yyrr3691 = yyl3691

	if yyv3691 == nil {
		if yyrl3691, yyrt3691 = z.DecInferLen(yyl3691, z.DecBasicHandle().MaxInitLen, 64); yyrt3691 {
			yyrr3691 = yyrl3691
		}
		yyv3691 = make([]ComponentCondition, yyrl3691)
		yyc3691 = true
	}

	if yyl3691 == 0 {
		if len(yyv3691) != 0 {
			yyv3691 = yyv3691[:0]
			yyc3691 = true
		}
	} else if yyl3691 > 0 {

		if yyl3691 > cap(yyv3691) {
			yyrl3691, yyrt3691 = z.DecInferLen(yyl3691, z.DecBasicHandle().MaxInitLen, 64)
			yyv3691 = make([]ComponentCondition, yyrl3691)
			yyc3691 = true

			yyrr3691 = len(yyv3691)
		} else if yyl3691 != len(yyv3691) {
			yyv3691 = yyv3691[:yyl3691]
			yyc3691 = true
		}
		yyj3691 := 0
		for ; yyj3691 < yyrr3691; yyj3691++ {
			if r.TryDecodeAsNil() {
				yyv3691[yyj3691] = ComponentCondition{}
			} else {
				yyv3692 := &yyv3691[yyj3691]
				yyv3692.CodecDecodeSelf(d)
			}

		}
		if yyrt3691 {
			for ; yyj3691 < yyl3691; yyj3691++ {
				yyv3691 = append(yyv3691, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3691[yyj3691] = ComponentCondition{}
				} else {
					yyv3693 := &yyv3691[yyj3691]
					yyv3693.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3691 := 0; !r.CheckBreak(); yyj3691++ {
			if yyj3691 >= len(yyv3691) {
				yyv3691 = append(yyv3691, ComponentCondition{}) // var yyz3691 ComponentCondition
				yyc3691 = true
			}

			if yyj3691 < len(yyv3691) {
				if r.TryDecodeAsNil() {
					yyv3691[yyj3691] = ComponentCondition{}
				} else {
					yyv3694 := &yyv3691[yyj3691]
					yyv3694.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3691.End()
	}
	if yyc3691 {
		*v = yyv3691
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3695 := range v {
		yy3696 := &yyv3695
		yy3696.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3697 := *v
	yyh3697, yyl3697 := z.DecSliceHelperStart()

	var yyrr3697, yyrl3697 int
	var yyc3697, yyrt3697 bool
	_, _, _ = yyc3697, yyrt3697, yyrl3697
	yyrr3697 = yyl3697

	if yyv3697 == nil {
		if yyrl3697, yyrt3697 = z.DecInferLen(yyl3697, z.DecBasicHandle().MaxInitLen, 216); yyrt3697 {
			yyrr3697 = yyrl3697
		}
		yyv3697 = make([]ComponentStatus, yyrl3697)
		yyc3697 = true
	}

	if yyl3697 == 0 {
		if len(yyv3697) != 0 {
			yyv3697 = yyv3697[:0]
			yyc3697 = true
		}
	} else if yyl3697 > 0 {

		if yyl3697 > cap(yyv3697) {
			yyrl3697, yyrt3697 = z.DecInferLen(yyl3697, z.DecBasicHandle().MaxInitLen, 216)
			yyv3697 = make([]ComponentStatus, yyrl3697)
			yyc3697 = true

			yyrr3697 = len(yyv3697)
		} else if yyl3697 != len(yyv3697) {
			yyv3697 = yyv3697[:yyl3697]
			yyc3697 = true
		}
		yyj3697 := 0
		for ; yyj3697 < yyrr3697; yyj3697++ {
			if r.TryDecodeAsNil() {
				yyv3697[yyj3697] = ComponentStatus{}
			} else {
				yyv3698 := &yyv3697[yyj3697]
				yyv3698.CodecDecodeSelf(d)
			}

		}
		if yyrt3697 {
			for ; yyj3697 < yyl3697; yyj3697++ {
				yyv3697 = append(yyv3697, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3697[yyj3697] = ComponentStatus{}
				} else {
					yyv3699 := &yyv3697[yyj3697]
					yyv3699.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3697 := 0; !r.CheckBreak(); yyj3697++ {
			if yyj3697 >= len(yyv3697) {
				yyv3697 = append(yyv3697, ComponentStatus{}) // var yyz3697 ComponentStatus
				yyc3697 = true
			}

			if yyj3697 < len(yyv3697) {
				if r.TryDecodeAsNil() {
					yyv3697[yyj3697] = ComponentStatus{}
				} else {
					yyv3700 := &yyv3697[yyj3697]
					yyv3700.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3697.End()
	}
	if yyc3697 {
		*v = yyv3697
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3701 := range v {
		yy3702 := &yyv3701
		yy3702.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3703 := *v
	yyh3703, yyl3703 := z.DecSliceHelperStart()

	var yyrr3703, yyrl3703 int
	var yyc3703, yyrt3703 bool
	_, _, _ = yyc3703, yyrt3703, yyrl3703
	yyrr3703 = yyl3703

	if yyv3703 == nil {
		if yyrl3703, yyrt3703 = z.DecInferLen(yyl3703, z.DecBasicHandle().MaxInitLen, 48); yyrt3703 {
			yyrr3703 = yyrl3703
		}
		yyv3703 = make([]DownwardAPIVolumeFile, yyrl3703)
		yyc3703 = true
	}

	if yyl3703 == 0 {
		if len(yyv3703) != 0 {
			yyv3703 = yyv3703[:0]
			yyc3703 = true
		}
	} else if yyl3703 > 0 {

		if yyl3703 > cap(yyv3703) {
			yyrl3703, yyrt3703 = z.DecInferLen(yyl3703, z.DecBasicHandle().MaxInitLen, 48)
			yyv3703 = make([]DownwardAPIVolumeFile, yyrl3703)
			yyc3703 = true

			yyrr3703 = len(yyv3703)
		} else if yyl3703 != len(yyv3703) {
			yyv3703 = yyv3703[:yyl3703]
			yyc3703 = true
		}
		yyj3703 := 0
		for ; yyj3703 < yyrr3703; yyj3703++ {
			if r.TryDecodeAsNil() {
				yyv3703[yyj3703] = DownwardAPIVolumeFile{}
			} else {
				yyv3704 := &yyv3703[yyj3703]
				yyv3704.CodecDecodeSelf(d)
			}

		}
		if yyrt3703 {
			for ; yyj3703 < yyl3703; yyj3703++ {
				yyv3703 = append(yyv3703, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3703[yyj3703] = DownwardAPIVolumeFile{}
				} else {
					yyv3705 := &yyv3703[yyj3703]
					yyv3705.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3703 := 0; !r.CheckBreak(); yyj3703++ {
			if yyj3703 >= len(yyv3703) {
				yyv3703 = append(yyv3703, DownwardAPIVolumeFile{}) // var yyz3703 DownwardAPIVolumeFile
				yyc3703 = true
			}

			if yyj3703 < len(yyv3703) {
				if r.TryDecodeAsNil() {
					yyv3703[yyj3703] = DownwardAPIVolumeFile{}
				} else {
					yyv3706 := &yyv3703[yyj3703]
					yyv3706.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3703.End()
	}
	if yyc3703 {
		*v = yyv3703
	}

}
