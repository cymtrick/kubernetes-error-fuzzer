/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg5_util.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	if !yyhl45 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				var yynn82 int = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	if !yyhl104 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				var yynn141 int = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
			}
			if yyr141 || yy2arr141 {
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [2]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[1] = x.ReadOnly != false
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(2)
			} else {
				var yynn195 int = 1
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
			}
			if yyr195 || yy2arr195 {
				yym197 := z.EncBinary()
				_ = yym197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym198 := z.EncBinary()
				_ = yym198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[1] {
					yym200 := z.EncBinary()
					_ = yym200
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq195[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym201 := z.EncBinary()
					_ = yym201
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep195 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym202 := z.DecBinary()
	_ = yym202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl203 := r.ReadMapStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl203, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl203 := r.ReadArrayStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys204Slc
	var yyhl204 bool = l >= 0
	for yyj204 := 0; ; yyj204++ {
		if yyhl204 {
			if yyj204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys204Slc = r.DecodeBytes(yys204Slc, true, true)
		yys204 := string(yys204Slc)
		switch yys204 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys204)
		} // end switch yys204
	} // end for yyj204
	if !yyhl204 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj207 int
	var yyb207 bool
	var yyhl207 bool = l >= 0
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj207++
		if yyhl207 {
			yyb207 = yyj207 > l
		} else {
			yyb207 = r.CheckBreak()
		}
		if yyb207 {
			break
		}
		z.DecStructFieldNotFound(yyj207-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym210 := z.EncBinary()
		_ = yym210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep211 := !z.EncBinary()
			yy2arr211 := z.EncBasicHandle().StructToArray
			var yyq211 [11]bool
			_, _, _ = yysep211, yyq211, yy2arr211
			const yyr211 bool = false
			yyq211[0] = x.GCEPersistentDisk != nil
			yyq211[1] = x.AWSElasticBlockStore != nil
			yyq211[2] = x.HostPath != nil
			yyq211[3] = x.Glusterfs != nil
			yyq211[4] = x.NFS != nil
			yyq211[5] = x.RBD != nil
			yyq211[6] = x.ISCSI != nil
			yyq211[7] = x.Cinder != nil
			yyq211[8] = x.CephFS != nil
			yyq211[9] = x.FC != nil
			yyq211[10] = x.Flocker != nil
			if yyr211 || yy2arr211 {
				r.EncodeArrayStart(11)
			} else {
				var yynn211 int = 0
				for _, b := range yyq211 {
					if b {
						yynn211++
					}
				}
				r.EncodeMapStart(yynn211)
			}
			if yyr211 || yy2arr211 {
				if yyq211[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep211 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym223 := z.DecBinary()
	_ = yym223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl224 := r.ReadMapStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl224, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl224 := r.ReadArrayStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys225Slc
	var yyhl225 bool = l >= 0
	for yyj225 := 0; ; yyj225++ {
		if yyhl225 {
			if yyj225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys225Slc = r.DecodeBytes(yys225Slc, true, true)
		yys225 := string(yys225Slc)
		switch yys225 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys225)
		} // end switch yys225
	} // end for yyj225
	if !yyhl225 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj237 int
	var yyb237 bool
	var yyhl237 bool = l >= 0
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj237++
		if yyhl237 {
			yyb237 = yyj237 > l
		} else {
			yyb237 = r.CheckBreak()
		}
		if yyb237 {
			break
		}
		z.DecStructFieldNotFound(yyj237-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				var yynn250 int = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
			}
			if yyr250 || yy2arr250 {
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yysep250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	if !yyhl268 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[0] = len(x.Capacity) != 0
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				var yynn281 int = 0
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
			}
			if yyr281 || yy2arr281 {
				if yyq281[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep281 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	if !yyhl301 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				var yynn338 int = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
			}
			if yyr338 || yy2arr338 {
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep338 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	if !yyhl348 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				var yynn357 int = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
			}
			if yyr357 || yy2arr357 {
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep357 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	if !yyhl374 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				var yynn389 int = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
			}
			if yyr389 || yy2arr389 {
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yysep389 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	if !yyhl407 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				var yynn420 int = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
			}
			if yyr420 || yy2arr420 {
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep420 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	if !yyhl437 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				var yynn452 int = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep452 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	if !yyhl464 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				var yynn475 int = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
			}
			if yyr475 || yy2arr475 {
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep475 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	if !yyhl483 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				var yynn500 int = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
			}
			if yyr500 || yy2arr500 {
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep500 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	if !yyhl506 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			yyq511[0] = x.Medium != ""
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				var yynn511 int = 0
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
			}
			if yyr511 || yy2arr511 {
				if yyq511[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq511[0] {
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yysep511 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	if !yyhl515 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym519 := z.EncBinary()
		_ = yym519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep520 := !z.EncBinary()
			yy2arr520 := z.EncBasicHandle().StructToArray
			var yyq520 [3]bool
			_, _, _ = yysep520, yyq520, yy2arr520
			const yyr520 bool = false
			yyq520[2] = x.ReadOnly != false
			if yyr520 || yy2arr520 {
				r.EncodeArrayStart(3)
			} else {
				var yynn520 int = 2
				for _, b := range yyq520 {
					if b {
						yynn520++
					}
				}
				r.EncodeMapStart(yynn520)
			}
			if yyr520 || yy2arr520 {
				yym522 := z.EncBinary()
				_ = yym522
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym523 := z.EncBinary()
				_ = yym523
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr520 || yy2arr520 {
				yym525 := z.EncBinary()
				_ = yym525
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr520 || yy2arr520 {
				if yyq520[2] {
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq520[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep520 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym530 := z.DecBinary()
	_ = yym530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl531 := r.ReadMapStart()
			if yyl531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl531, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl531 := r.ReadArrayStart()
			if yyl531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys532Slc
	var yyhl532 bool = l >= 0
	for yyj532 := 0; ; yyj532++ {
		if yyhl532 {
			if yyj532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys532Slc = r.DecodeBytes(yys532Slc, true, true)
		yys532 := string(yys532Slc)
		switch yys532 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys532)
		} // end switch yys532
	} // end for yyj532
	if !yyhl532 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj536 int
	var yyb536 bool
	var yyhl536 bool = l >= 0
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj536++
		if yyhl536 {
			yyb536 = yyj536 > l
		} else {
			yyb536 = r.CheckBreak()
		}
		if yyb536 {
			break
		}
		z.DecStructFieldNotFound(yyj536-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym540 := z.EncBinary()
	_ = yym540
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym541 := z.DecBinary()
	_ = yym541
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym542 := z.EncBinary()
		_ = yym542
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep543 := !z.EncBinary()
			yy2arr543 := z.EncBasicHandle().StructToArray
			var yyq543 [8]bool
			_, _, _ = yysep543, yyq543, yy2arr543
			const yyr543 bool = false
			yyq543[2] = x.FSType != ""
			yyq543[7] = x.ReadOnly != false
			if yyr543 || yy2arr543 {
				r.EncodeArrayStart(8)
			} else {
				var yynn543 int = 6
				for _, b := range yyq543 {
					if b {
						yynn543++
					}
				}
				r.EncodeMapStart(yynn543)
			}
			if yyr543 || yy2arr543 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr543 || yy2arr543 {
				yym548 := z.EncBinary()
				_ = yym548
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym549 := z.EncBinary()
				_ = yym549
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr543 || yy2arr543 {
				if yyq543[2] {
					yym551 := z.EncBinary()
					_ = yym551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq543[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr543 || yy2arr543 {
				yym554 := z.EncBinary()
				_ = yym554
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym555 := z.EncBinary()
				_ = yym555
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr543 || yy2arr543 {
				yym557 := z.EncBinary()
				_ = yym557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym558 := z.EncBinary()
				_ = yym558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr543 || yy2arr543 {
				yym560 := z.EncBinary()
				_ = yym560
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym561 := z.EncBinary()
				_ = yym561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr543 || yy2arr543 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr543 || yy2arr543 {
				if yyq543[7] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq543[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep543 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		switch yys568 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv569 := &x.CephMonitors
				yym570 := z.DecBinary()
				_ = yym570
				if false {
				} else {
					z.F.DecSliceStringX(yyv569, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	if !yyhl568 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj578 int
	var yyb578 bool
	var yyhl578 bool = l >= 0
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv579 := &x.CephMonitors
		yym580 := z.DecBinary()
		_ = yym580
		if false {
		} else {
			z.F.DecSliceStringX(yyv579, false, d)
		}
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj578++
		if yyhl578 {
			yyb578 = yyj578 > l
		} else {
			yyb578 = r.CheckBreak()
		}
		if yyb578 {
			break
		}
		z.DecStructFieldNotFound(yyj578-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym588 := z.EncBinary()
		_ = yym588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep589 := !z.EncBinary()
			yy2arr589 := z.EncBasicHandle().StructToArray
			var yyq589 [3]bool
			_, _, _ = yysep589, yyq589, yy2arr589
			const yyr589 bool = false
			yyq589[1] = x.FSType != ""
			yyq589[2] = x.ReadOnly != false
			if yyr589 || yy2arr589 {
				r.EncodeArrayStart(3)
			} else {
				var yynn589 int = 1
				for _, b := range yyq589 {
					if b {
						yynn589++
					}
				}
				r.EncodeMapStart(yynn589)
			}
			if yyr589 || yy2arr589 {
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr589 || yy2arr589 {
				if yyq589[1] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq589[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr589 || yy2arr589 {
				if yyq589[2] {
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq589[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep589 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym599 := z.DecBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl600 := r.ReadMapStart()
			if yyl600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl600, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl600 := r.ReadArrayStart()
			if yyl600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys601Slc
	var yyhl601 bool = l >= 0
	for yyj601 := 0; ; yyj601++ {
		if yyhl601 {
			if yyj601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys601Slc = r.DecodeBytes(yys601Slc, true, true)
		yys601 := string(yys601Slc)
		switch yys601 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys601)
		} // end switch yys601
	} // end for yyj601
	if !yyhl601 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym609 := z.EncBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep610 := !z.EncBinary()
			yy2arr610 := z.EncBasicHandle().StructToArray
			var yyq610 [5]bool
			_, _, _ = yysep610, yyq610, yy2arr610
			const yyr610 bool = false
			yyq610[1] = x.User != ""
			yyq610[2] = x.SecretFile != ""
			yyq610[3] = x.SecretRef != nil
			yyq610[4] = x.ReadOnly != false
			if yyr610 || yy2arr610 {
				r.EncodeArrayStart(5)
			} else {
				var yynn610 int = 1
				for _, b := range yyq610 {
					if b {
						yynn610++
					}
				}
				r.EncodeMapStart(yynn610)
			}
			if yyr610 || yy2arr610 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[1] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[2] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq610[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[4] {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq610[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep610 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl625 := r.ReadMapStart()
			if yyl625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl625, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl625 := r.ReadArrayStart()
			if yyl625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys626Slc
	var yyhl626 bool = l >= 0
	for yyj626 := 0; ; yyj626++ {
		if yyhl626 {
			if yyj626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys626Slc = r.DecodeBytes(yys626Slc, true, true)
		yys626 := string(yys626Slc)
		switch yys626 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv627 := &x.Monitors
				yym628 := z.DecBinary()
				_ = yym628
				if false {
				} else {
					z.F.DecSliceStringX(yyv627, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys626)
		} // end switch yys626
	} // end for yyj626
	if !yyhl626 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv634 := &x.Monitors
		yym635 := z.DecBinary()
		_ = yym635
		if false {
		} else {
			z.F.DecSliceStringX(yyv634, false, d)
		}
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym640 := z.EncBinary()
		_ = yym640
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep641 := !z.EncBinary()
			yy2arr641 := z.EncBasicHandle().StructToArray
			var yyq641 [1]bool
			_, _, _ = yysep641, yyq641, yy2arr641
			const yyr641 bool = false
			if yyr641 || yy2arr641 {
				r.EncodeArrayStart(1)
			} else {
				var yynn641 int = 1
				for _, b := range yyq641 {
					if b {
						yynn641++
					}
				}
				r.EncodeMapStart(yynn641)
			}
			if yyr641 || yy2arr641 {
				yym643 := z.EncBinary()
				_ = yym643
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym644 := z.EncBinary()
				_ = yym644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep641 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym645 := z.DecBinary()
	_ = yym645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl646 := r.ReadMapStart()
			if yyl646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl646, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl646 := r.ReadArrayStart()
			if yyl646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl646, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys647Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys647Slc
	var yyhl647 bool = l >= 0
	for yyj647 := 0; ; yyj647++ {
		if yyhl647 {
			if yyj647 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys647Slc = r.DecodeBytes(yys647Slc, true, true)
		yys647 := string(yys647Slc)
		switch yys647 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys647)
		} // end switch yys647
	} // end for yyj647
	if !yyhl647 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj649 int
	var yyb649 bool
	var yyhl649 bool = l >= 0
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj649++
		if yyhl649 {
			yyb649 = yyj649 > l
		} else {
			yyb649 = r.CheckBreak()
		}
		if yyb649 {
			break
		}
		z.DecStructFieldNotFound(yyj649-1, "")
	}
	r.ReadEnd()
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym651 := z.EncBinary()
	_ = yym651
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym652 := z.DecBinary()
	_ = yym652
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym653 := z.EncBinary()
		_ = yym653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep654 := !z.EncBinary()
			yy2arr654 := z.EncBasicHandle().StructToArray
			var yyq654 [4]bool
			_, _, _ = yysep654, yyq654, yy2arr654
			const yyr654 bool = false
			yyq654[2] = x.Partition != 0
			yyq654[3] = x.ReadOnly != false
			if yyr654 || yy2arr654 {
				r.EncodeArrayStart(4)
			} else {
				var yynn654 int = 2
				for _, b := range yyq654 {
					if b {
						yynn654++
					}
				}
				r.EncodeMapStart(yynn654)
			}
			if yyr654 || yy2arr654 {
				yym656 := z.EncBinary()
				_ = yym656
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr654 || yy2arr654 {
				yym659 := z.EncBinary()
				_ = yym659
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym660 := z.EncBinary()
				_ = yym660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr654 || yy2arr654 {
				if yyq654[2] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq654[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr654 || yy2arr654 {
				if yyq654[3] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq654[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep654 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym667 := z.DecBinary()
	_ = yym667
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl668 := r.ReadMapStart()
			if yyl668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl668, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl668 := r.ReadArrayStart()
			if yyl668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl668, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys669Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys669Slc
	var yyhl669 bool = l >= 0
	for yyj669 := 0; ; yyj669++ {
		if yyhl669 {
			if yyj669 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys669Slc = r.DecodeBytes(yys669Slc, true, true)
		yys669 := string(yys669Slc)
		switch yys669 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys669)
		} // end switch yys669
	} // end for yyj669
	if !yyhl669 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj674 int
	var yyb674 bool
	var yyhl674 bool = l >= 0
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj674++
		if yyhl674 {
			yyb674 = yyj674 > l
		} else {
			yyb674 = r.CheckBreak()
		}
		if yyb674 {
			break
		}
		z.DecStructFieldNotFound(yyj674-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym679 := z.EncBinary()
		_ = yym679
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep680 := !z.EncBinary()
			yy2arr680 := z.EncBasicHandle().StructToArray
			var yyq680 [4]bool
			_, _, _ = yysep680, yyq680, yy2arr680
			const yyr680 bool = false
			yyq680[2] = x.Partition != 0
			yyq680[3] = x.ReadOnly != false
			if yyr680 || yy2arr680 {
				r.EncodeArrayStart(4)
			} else {
				var yynn680 int = 2
				for _, b := range yyq680 {
					if b {
						yynn680++
					}
				}
				r.EncodeMapStart(yynn680)
			}
			if yyr680 || yy2arr680 {
				yym682 := z.EncBinary()
				_ = yym682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym683 := z.EncBinary()
				_ = yym683
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr680 || yy2arr680 {
				yym685 := z.EncBinary()
				_ = yym685
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym686 := z.EncBinary()
				_ = yym686
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr680 || yy2arr680 {
				if yyq680[2] {
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq680[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr680 || yy2arr680 {
				if yyq680[3] {
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq680[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep680 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym693 := z.DecBinary()
	_ = yym693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl694 := r.ReadMapStart()
			if yyl694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl694, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl694 := r.ReadArrayStart()
			if yyl694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys695Slc
	var yyhl695 bool = l >= 0
	for yyj695 := 0; ; yyj695++ {
		if yyhl695 {
			if yyj695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys695Slc = r.DecodeBytes(yys695Slc, true, true)
		yys695 := string(yys695Slc)
		switch yys695 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys695)
		} // end switch yys695
	} // end for yyj695
	if !yyhl695 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj700 int
	var yyb700 bool
	var yyhl700 bool = l >= 0
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj700++
		if yyhl700 {
			yyb700 = yyj700 > l
		} else {
			yyb700 = r.CheckBreak()
		}
		if yyb700 {
			break
		}
		z.DecStructFieldNotFound(yyj700-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym705 := z.EncBinary()
		_ = yym705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep706 := !z.EncBinary()
			yy2arr706 := z.EncBasicHandle().StructToArray
			var yyq706 [2]bool
			_, _, _ = yysep706, yyq706, yy2arr706
			const yyr706 bool = false
			if yyr706 || yy2arr706 {
				r.EncodeArrayStart(2)
			} else {
				var yynn706 int = 2
				for _, b := range yyq706 {
					if b {
						yynn706++
					}
				}
				r.EncodeMapStart(yynn706)
			}
			if yyr706 || yy2arr706 {
				yym708 := z.EncBinary()
				_ = yym708
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym709 := z.EncBinary()
				_ = yym709
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr706 || yy2arr706 {
				yym711 := z.EncBinary()
				_ = yym711
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym712 := z.EncBinary()
				_ = yym712
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep706 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym713 := z.DecBinary()
	_ = yym713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl714 := r.ReadMapStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl714, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl714 := r.ReadArrayStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys715Slc
	var yyhl715 bool = l >= 0
	for yyj715 := 0; ; yyj715++ {
		if yyhl715 {
			if yyj715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys715Slc = r.DecodeBytes(yys715Slc, true, true)
		yys715 := string(yys715Slc)
		switch yys715 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys715)
		} // end switch yys715
	} // end for yyj715
	if !yyhl715 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj718 int
	var yyb718 bool
	var yyhl718 bool = l >= 0
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj718++
		if yyhl718 {
			yyb718 = yyj718 > l
		} else {
			yyb718 = r.CheckBreak()
		}
		if yyb718 {
			break
		}
		z.DecStructFieldNotFound(yyj718-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym721 := z.EncBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep722 := !z.EncBinary()
			yy2arr722 := z.EncBasicHandle().StructToArray
			var yyq722 [1]bool
			_, _, _ = yysep722, yyq722, yy2arr722
			const yyr722 bool = false
			if yyr722 || yy2arr722 {
				r.EncodeArrayStart(1)
			} else {
				var yynn722 int = 1
				for _, b := range yyq722 {
					if b {
						yynn722++
					}
				}
				r.EncodeMapStart(yynn722)
			}
			if yyr722 || yy2arr722 {
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep722 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym726 := z.DecBinary()
	_ = yym726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl727 := r.ReadMapStart()
			if yyl727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl727, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl727 := r.ReadArrayStart()
			if yyl727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys728Slc
	var yyhl728 bool = l >= 0
	for yyj728 := 0; ; yyj728++ {
		if yyhl728 {
			if yyj728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys728Slc = r.DecodeBytes(yys728Slc, true, true)
		yys728 := string(yys728Slc)
		switch yys728 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys728)
		} // end switch yys728
	} // end for yyj728
	if !yyhl728 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj730 int
	var yyb730 bool
	var yyhl730 bool = l >= 0
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj730++
		if yyhl730 {
			yyb730 = yyj730 > l
		} else {
			yyb730 = r.CheckBreak()
		}
		if yyb730 {
			break
		}
		z.DecStructFieldNotFound(yyj730-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym732 := z.EncBinary()
		_ = yym732
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep733 := !z.EncBinary()
			yy2arr733 := z.EncBasicHandle().StructToArray
			var yyq733 [3]bool
			_, _, _ = yysep733, yyq733, yy2arr733
			const yyr733 bool = false
			yyq733[2] = x.ReadOnly != false
			if yyr733 || yy2arr733 {
				r.EncodeArrayStart(3)
			} else {
				var yynn733 int = 2
				for _, b := range yyq733 {
					if b {
						yynn733++
					}
				}
				r.EncodeMapStart(yynn733)
			}
			if yyr733 || yy2arr733 {
				yym735 := z.EncBinary()
				_ = yym735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr733 || yy2arr733 {
				yym738 := z.EncBinary()
				_ = yym738
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym739 := z.EncBinary()
				_ = yym739
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr733 || yy2arr733 {
				if yyq733[2] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq733[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep733 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym743 := z.DecBinary()
	_ = yym743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl744 := r.ReadMapStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl744, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl744 := r.ReadArrayStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys745Slc
	var yyhl745 bool = l >= 0
	for yyj745 := 0; ; yyj745++ {
		if yyhl745 {
			if yyj745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys745Slc = r.DecodeBytes(yys745Slc, true, true)
		yys745 := string(yys745Slc)
		switch yys745 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys745)
		} // end switch yys745
	} // end for yyj745
	if !yyhl745 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj749 int
	var yyb749 bool
	var yyhl749 bool = l >= 0
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj749++
		if yyhl749 {
			yyb749 = yyj749 > l
		} else {
			yyb749 = r.CheckBreak()
		}
		if yyb749 {
			break
		}
		z.DecStructFieldNotFound(yyj749-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym753 := z.EncBinary()
		_ = yym753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep754 := !z.EncBinary()
			yy2arr754 := z.EncBasicHandle().StructToArray
			var yyq754 [5]bool
			_, _, _ = yysep754, yyq754, yy2arr754
			const yyr754 bool = false
			yyq754[4] = x.ReadOnly != false
			if yyr754 || yy2arr754 {
				r.EncodeArrayStart(5)
			} else {
				var yynn754 int = 4
				for _, b := range yyq754 {
					if b {
						yynn754++
					}
				}
				r.EncodeMapStart(yynn754)
			}
			if yyr754 || yy2arr754 {
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr754 || yy2arr754 {
				yym759 := z.EncBinary()
				_ = yym759
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				yym760 := z.EncBinary()
				_ = yym760
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr754 || yy2arr754 {
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				yym763 := z.EncBinary()
				_ = yym763
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr754 || yy2arr754 {
				yym765 := z.EncBinary()
				_ = yym765
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[4] {
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq754[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep754 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym770 := z.DecBinary()
	_ = yym770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl771 := r.ReadMapStart()
			if yyl771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl771, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl771 := r.ReadArrayStart()
			if yyl771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys772Slc
	var yyhl772 bool = l >= 0
	for yyj772 := 0; ; yyj772++ {
		if yyhl772 {
			if yyj772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys772Slc = r.DecodeBytes(yys772Slc, true, true)
		yys772 := string(yys772Slc)
		switch yys772 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys772)
		} // end switch yys772
	} // end for yyj772
	if !yyhl772 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj778 int
	var yyb778 bool
	var yyhl778 bool = l >= 0
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj778++
		if yyhl778 {
			yyb778 = yyj778 > l
		} else {
			yyb778 = r.CheckBreak()
		}
		if yyb778 {
			break
		}
		z.DecStructFieldNotFound(yyj778-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym784 := z.EncBinary()
		_ = yym784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep785 := !z.EncBinary()
			yy2arr785 := z.EncBasicHandle().StructToArray
			var yyq785 [4]bool
			_, _, _ = yysep785, yyq785, yy2arr785
			const yyr785 bool = false
			yyq785[3] = x.ReadOnly != false
			if yyr785 || yy2arr785 {
				r.EncodeArrayStart(4)
			} else {
				var yynn785 int = 3
				for _, b := range yyq785 {
					if b {
						yynn785++
					}
				}
				r.EncodeMapStart(yynn785)
			}
			if yyr785 || yy2arr785 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr785 || yy2arr785 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy790 := *x.Lun
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeInt(int64(yy790))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy792 := *x.Lun
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeInt(int64(yy792))
					}
				}
			}
			if yyr785 || yy2arr785 {
				yym795 := z.EncBinary()
				_ = yym795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym796 := z.EncBinary()
				_ = yym796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[3] {
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq785[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep785 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym800 := z.DecBinary()
	_ = yym800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl801 := r.ReadMapStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl801, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl801 := r.ReadArrayStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys802Slc
	var yyhl802 bool = l >= 0
	for yyj802 := 0; ; yyj802++ {
		if yyhl802 {
			if yyj802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys802Slc = r.DecodeBytes(yys802Slc, true, true)
		yys802 := string(yys802Slc)
		switch yys802 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv803 := &x.TargetWWNs
				yym804 := z.DecBinary()
				_ = yym804
				if false {
				} else {
					z.F.DecSliceStringX(yyv803, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym806 := z.DecBinary()
				_ = yym806
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys802)
		} // end switch yys802
	} // end for yyj802
	if !yyhl802 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj809 int
	var yyb809 bool
	var yyhl809 bool = l >= 0
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv810 := &x.TargetWWNs
		yym811 := z.DecBinary()
		_ = yym811
		if false {
		} else {
			z.F.DecSliceStringX(yyv810, false, d)
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym813 := z.DecBinary()
		_ = yym813
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj809++
		if yyhl809 {
			yyb809 = yyj809 > l
		} else {
			yyb809 = r.CheckBreak()
		}
		if yyb809 {
			break
		}
		z.DecStructFieldNotFound(yyj809-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym816 := z.EncBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep817 := !z.EncBinary()
			yy2arr817 := z.EncBasicHandle().StructToArray
			var yyq817 [5]bool
			_, _, _ = yysep817, yyq817, yy2arr817
			const yyr817 bool = false
			yyq817[0] = x.Name != ""
			yyq817[1] = x.HostPort != 0
			yyq817[3] = x.Protocol != ""
			yyq817[4] = x.HostIP != ""
			if yyr817 || yy2arr817 {
				r.EncodeArrayStart(5)
			} else {
				var yynn817 int = 1
				for _, b := range yyq817 {
					if b {
						yynn817++
					}
				}
				r.EncodeMapStart(yynn817)
			}
			if yyr817 || yy2arr817 {
				if yyq817[0] {
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[1] {
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq817[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr817 || yy2arr817 {
				yym825 := z.EncBinary()
				_ = yym825
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym826 := z.EncBinary()
				_ = yym826
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[4] {
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep817 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym831 := z.DecBinary()
	_ = yym831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl832 := r.ReadMapStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl832, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl832 := r.ReadArrayStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys833Slc
	var yyhl833 bool = l >= 0
	for yyj833 := 0; ; yyj833++ {
		if yyhl833 {
			if yyj833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys833Slc = r.DecodeBytes(yys833Slc, true, true)
		yys833 := string(yys833Slc)
		switch yys833 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys833)
		} // end switch yys833
	} // end for yyj833
	if !yyhl833 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj839 int
	var yyb839 bool
	var yyhl839 bool = l >= 0
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj839++
		if yyhl839 {
			yyb839 = yyj839 > l
		} else {
			yyb839 = r.CheckBreak()
		}
		if yyb839 {
			break
		}
		z.DecStructFieldNotFound(yyj839-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [3]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[1] = x.ReadOnly != false
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(3)
			} else {
				var yynn846 int = 2
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
			}
			if yyr846 || yy2arr846 {
				yym848 := z.EncBinary()
				_ = yym848
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym849 := z.EncBinary()
				_ = yym849
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq846[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr846 || yy2arr846 {
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep846 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym856 := z.DecBinary()
	_ = yym856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl857 := r.ReadMapStart()
			if yyl857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl857, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl857 := r.ReadArrayStart()
			if yyl857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys858Slc
	var yyhl858 bool = l >= 0
	for yyj858 := 0; ; yyj858++ {
		if yyhl858 {
			if yyj858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys858Slc = r.DecodeBytes(yys858Slc, true, true)
		yys858 := string(yys858Slc)
		switch yys858 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys858)
		} // end switch yys858
	} // end for yyj858
	if !yyhl858 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj862 int
	var yyb862 bool
	var yyhl862 bool = l >= 0
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj862++
		if yyhl862 {
			yyb862 = yyj862 > l
		} else {
			yyb862 = r.CheckBreak()
		}
		if yyb862 {
			break
		}
		z.DecStructFieldNotFound(yyj862-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym866 := z.EncBinary()
		_ = yym866
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep867 := !z.EncBinary()
			yy2arr867 := z.EncBasicHandle().StructToArray
			var yyq867 [3]bool
			_, _, _ = yysep867, yyq867, yy2arr867
			const yyr867 bool = false
			yyq867[1] = x.Value != ""
			yyq867[2] = x.ValueFrom != nil
			if yyr867 || yy2arr867 {
				r.EncodeArrayStart(3)
			} else {
				var yynn867 int = 1
				for _, b := range yyq867 {
					if b {
						yynn867++
					}
				}
				r.EncodeMapStart(yynn867)
			}
			if yyr867 || yy2arr867 {
				yym869 := z.EncBinary()
				_ = yym869
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym870 := z.EncBinary()
				_ = yym870
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[1] {
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq867[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq867[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep867 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym875 := z.DecBinary()
	_ = yym875
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl876 := r.ReadMapStart()
			if yyl876 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl876, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl876 := r.ReadArrayStart()
			if yyl876 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl876, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys877Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys877Slc
	var yyhl877 bool = l >= 0
	for yyj877 := 0; ; yyj877++ {
		if yyhl877 {
			if yyj877 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys877Slc = r.DecodeBytes(yys877Slc, true, true)
		yys877 := string(yys877Slc)
		switch yys877 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys877)
		} // end switch yys877
	} // end for yyj877
	if !yyhl877 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj881 int
	var yyb881 bool
	var yyhl881 bool = l >= 0
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj881++
		if yyhl881 {
			yyb881 = yyj881 > l
		} else {
			yyb881 = r.CheckBreak()
		}
		if yyb881 {
			break
		}
		z.DecStructFieldNotFound(yyj881-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym885 := z.EncBinary()
		_ = yym885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep886 := !z.EncBinary()
			yy2arr886 := z.EncBasicHandle().StructToArray
			var yyq886 [1]bool
			_, _, _ = yysep886, yyq886, yy2arr886
			const yyr886 bool = false
			if yyr886 || yy2arr886 {
				r.EncodeArrayStart(1)
			} else {
				var yynn886 int = 1
				for _, b := range yyq886 {
					if b {
						yynn886++
					}
				}
				r.EncodeMapStart(yynn886)
			}
			if yyr886 || yy2arr886 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep886 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym888 := z.DecBinary()
	_ = yym888
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl889 := r.ReadMapStart()
			if yyl889 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl889, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl889 := r.ReadArrayStart()
			if yyl889 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl889, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys890Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys890Slc
	var yyhl890 bool = l >= 0
	for yyj890 := 0; ; yyj890++ {
		if yyhl890 {
			if yyj890 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys890Slc = r.DecodeBytes(yys890Slc, true, true)
		yys890 := string(yys890Slc)
		switch yys890 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys890)
		} // end switch yys890
	} // end for yyj890
	if !yyhl890 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj892 int
	var yyb892 bool
	var yyhl892 bool = l >= 0
	yyj892++
	if yyhl892 {
		yyb892 = yyj892 > l
	} else {
		yyb892 = r.CheckBreak()
	}
	if yyb892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj892++
		if yyhl892 {
			yyb892 = yyj892 > l
		} else {
			yyb892 = r.CheckBreak()
		}
		if yyb892 {
			break
		}
		z.DecStructFieldNotFound(yyj892-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym894 := z.EncBinary()
		_ = yym894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep895 := !z.EncBinary()
			yy2arr895 := z.EncBasicHandle().StructToArray
			var yyq895 [2]bool
			_, _, _ = yysep895, yyq895, yy2arr895
			const yyr895 bool = false
			yyq895[0] = x.APIVersion != ""
			if yyr895 || yy2arr895 {
				r.EncodeArrayStart(2)
			} else {
				var yynn895 int = 1
				for _, b := range yyq895 {
					if b {
						yynn895++
					}
				}
				r.EncodeMapStart(yynn895)
			}
			if yyr895 || yy2arr895 {
				if yyq895[0] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[0] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr895 || yy2arr895 {
				yym900 := z.EncBinary()
				_ = yym900
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym901 := z.EncBinary()
				_ = yym901
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep895 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym902 := z.DecBinary()
	_ = yym902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl903 := r.ReadMapStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl903, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl903 := r.ReadArrayStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys904Slc
	var yyhl904 bool = l >= 0
	for yyj904 := 0; ; yyj904++ {
		if yyhl904 {
			if yyj904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys904Slc = r.DecodeBytes(yys904Slc, true, true)
		yys904 := string(yys904Slc)
		switch yys904 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys904)
		} // end switch yys904
	} // end for yyj904
	if !yyhl904 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj907 int
	var yyb907 bool
	var yyhl907 bool = l >= 0
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj907++
		if yyhl907 {
			yyb907 = yyj907 > l
		} else {
			yyb907 = r.CheckBreak()
		}
		if yyb907 {
			break
		}
		z.DecStructFieldNotFound(yyj907-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym910 := z.EncBinary()
		_ = yym910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep911 := !z.EncBinary()
			yy2arr911 := z.EncBasicHandle().StructToArray
			var yyq911 [4]bool
			_, _, _ = yysep911, yyq911, yy2arr911
			const yyr911 bool = false
			yyq911[0] = x.Path != ""
			yyq911[2] = x.Host != ""
			yyq911[3] = x.Scheme != ""
			if yyr911 || yy2arr911 {
				r.EncodeArrayStart(4)
			} else {
				var yynn911 int = 1
				for _, b := range yyq911 {
					if b {
						yynn911++
					}
				}
				r.EncodeMapStart(yynn911)
			}
			if yyr911 || yy2arr911 {
				if yyq911[0] {
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr911 || yy2arr911 {
				yy916 := &x.Port
				yym917 := z.EncBinary()
				_ = yym917
				if false {
				} else if z.HasExtensions() && z.EncExt(yy916) {
				} else if !yym917 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy916)
				} else {
					z.EncFallback(yy916)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy918 := &x.Port
				yym919 := z.EncBinary()
				_ = yym919
				if false {
				} else if z.HasExtensions() && z.EncExt(yy918) {
				} else if !yym919 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy918)
				} else {
					z.EncFallback(yy918)
				}
			}
			if yyr911 || yy2arr911 {
				if yyq911[2] {
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr911 || yy2arr911 {
				if yyq911[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep911 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym924 := z.DecBinary()
	_ = yym924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl925 := r.ReadMapStart()
			if yyl925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl925, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl925 := r.ReadArrayStart()
			if yyl925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys926Slc
	var yyhl926 bool = l >= 0
	for yyj926 := 0; ; yyj926++ {
		if yyhl926 {
			if yyj926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys926Slc = r.DecodeBytes(yys926Slc, true, true)
		yys926 := string(yys926Slc)
		switch yys926 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv928 := &x.Port
				yym929 := z.DecBinary()
				_ = yym929
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv928) {
				} else if !yym929 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv928)
				} else {
					z.DecFallback(yyv928, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys926)
		} // end switch yys926
	} // end for yyj926
	if !yyhl926 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj932 int
	var yyb932 bool
	var yyhl932 bool = l >= 0
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv934 := &x.Port
		yym935 := z.DecBinary()
		_ = yym935
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv934) {
		} else if !yym935 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv934)
		} else {
			z.DecFallback(yyv934, false)
		}
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj932++
		if yyhl932 {
			yyb932 = yyj932 > l
		} else {
			yyb932 = r.CheckBreak()
		}
		if yyb932 {
			break
		}
		z.DecStructFieldNotFound(yyj932-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym938 := z.EncBinary()
	_ = yym938
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym939 := z.DecBinary()
	_ = yym939
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym940 := z.EncBinary()
		_ = yym940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep941 := !z.EncBinary()
			yy2arr941 := z.EncBasicHandle().StructToArray
			var yyq941 [1]bool
			_, _, _ = yysep941, yyq941, yy2arr941
			const yyr941 bool = false
			if yyr941 || yy2arr941 {
				r.EncodeArrayStart(1)
			} else {
				var yynn941 int = 1
				for _, b := range yyq941 {
					if b {
						yynn941++
					}
				}
				r.EncodeMapStart(yynn941)
			}
			if yyr941 || yy2arr941 {
				yy943 := &x.Port
				yym944 := z.EncBinary()
				_ = yym944
				if false {
				} else if z.HasExtensions() && z.EncExt(yy943) {
				} else if !yym944 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy943)
				} else {
					z.EncFallback(yy943)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy945 := &x.Port
				yym946 := z.EncBinary()
				_ = yym946
				if false {
				} else if z.HasExtensions() && z.EncExt(yy945) {
				} else if !yym946 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy945)
				} else {
					z.EncFallback(yy945)
				}
			}
			if yysep941 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym947 := z.DecBinary()
	_ = yym947
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl948 := r.ReadMapStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl948, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl948 := r.ReadArrayStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl948, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys949Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys949Slc
	var yyhl949 bool = l >= 0
	for yyj949 := 0; ; yyj949++ {
		if yyhl949 {
			if yyj949 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys949Slc = r.DecodeBytes(yys949Slc, true, true)
		yys949 := string(yys949Slc)
		switch yys949 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv950 := &x.Port
				yym951 := z.DecBinary()
				_ = yym951
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv950) {
				} else if !yym951 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv950)
				} else {
					z.DecFallback(yyv950, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys949)
		} // end switch yys949
	} // end for yyj949
	if !yyhl949 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj952 int
	var yyb952 bool
	var yyhl952 bool = l >= 0
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv953 := &x.Port
		yym954 := z.DecBinary()
		_ = yym954
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv953) {
		} else if !yym954 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv953)
		} else {
			z.DecFallback(yyv953, false)
		}
	}
	for {
		yyj952++
		if yyhl952 {
			yyb952 = yyj952 > l
		} else {
			yyb952 = r.CheckBreak()
		}
		if yyb952 {
			break
		}
		z.DecStructFieldNotFound(yyj952-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym955 := z.EncBinary()
		_ = yym955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep956 := !z.EncBinary()
			yy2arr956 := z.EncBasicHandle().StructToArray
			var yyq956 [1]bool
			_, _, _ = yysep956, yyq956, yy2arr956
			const yyr956 bool = false
			yyq956[0] = len(x.Command) != 0
			if yyr956 || yy2arr956 {
				r.EncodeArrayStart(1)
			} else {
				var yynn956 int = 0
				for _, b := range yyq956 {
					if b {
						yynn956++
					}
				}
				r.EncodeMapStart(yynn956)
			}
			if yyr956 || yy2arr956 {
				if yyq956[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym958 := z.EncBinary()
						_ = yym958
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq956[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym959 := z.EncBinary()
						_ = yym959
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep956 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym960 := z.DecBinary()
	_ = yym960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl961 := r.ReadMapStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl961, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl961 := r.ReadArrayStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys962Slc
	var yyhl962 bool = l >= 0
	for yyj962 := 0; ; yyj962++ {
		if yyhl962 {
			if yyj962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys962Slc = r.DecodeBytes(yys962Slc, true, true)
		yys962 := string(yys962Slc)
		switch yys962 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv963 := &x.Command
				yym964 := z.DecBinary()
				_ = yym964
				if false {
				} else {
					z.F.DecSliceStringX(yyv963, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys962)
		} // end switch yys962
	} // end for yyj962
	if !yyhl962 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj965 int
	var yyb965 bool
	var yyhl965 bool = l >= 0
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv966 := &x.Command
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else {
			z.F.DecSliceStringX(yyv966, false, d)
		}
	}
	for {
		yyj965++
		if yyhl965 {
			yyb965 = yyj965 > l
		} else {
			yyb965 = r.CheckBreak()
		}
		if yyb965 {
			break
		}
		z.DecStructFieldNotFound(yyj965-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym968 := z.EncBinary()
		_ = yym968
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep969 := !z.EncBinary()
			yy2arr969 := z.EncBasicHandle().StructToArray
			var yyq969 [5]bool
			_, _, _ = yysep969, yyq969, yy2arr969
			const yyr969 bool = false
			yyq969[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq969[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq969[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq969[3] = x.InitialDelaySeconds != 0
			yyq969[4] = x.TimeoutSeconds != 0
			if yyr969 || yy2arr969 {
				r.EncodeArrayStart(5)
			} else {
				var yynn969 int = 0
				for _, b := range yyq969 {
					if b {
						yynn969++
					}
				}
				r.EncodeMapStart(yynn969)
			}
			var yyn970 bool
			if x.Handler.Exec == nil {
				yyn970 = true
				goto LABEL970
			}
		LABEL970:
			if yyr969 || yy2arr969 {
				if yyn970 {
					r.EncodeNil()
				} else {
					if yyq969[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn970 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn971 bool
			if x.Handler.HTTPGet == nil {
				yyn971 = true
				goto LABEL971
			}
		LABEL971:
			if yyr969 || yy2arr969 {
				if yyn971 {
					r.EncodeNil()
				} else {
					if yyq969[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn971 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn972 bool
			if x.Handler.TCPSocket == nil {
				yyn972 = true
				goto LABEL972
			}
		LABEL972:
			if yyr969 || yy2arr969 {
				if yyn972 {
					r.EncodeNil()
				} else {
					if yyq969[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn972 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[3] {
					yym974 := z.EncBinary()
					_ = yym974
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[4] {
					yym977 := z.EncBinary()
					_ = yym977
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yysep969 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym979 := z.DecBinary()
	_ = yym979
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl980 := r.ReadMapStart()
			if yyl980 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl980, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl980 := r.ReadArrayStart()
			if yyl980 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl980, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys981Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys981Slc
	var yyhl981 bool = l >= 0
	for yyj981 := 0; ; yyj981++ {
		if yyhl981 {
			if yyj981 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys981Slc = r.DecodeBytes(yys981Slc, true, true)
		yys981 := string(yys981Slc)
		switch yys981 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys981)
		} // end switch yys981
	} // end for yyj981
	if !yyhl981 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj987 int
	var yyb987 bool
	var yyhl987 bool = l >= 0
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	for {
		yyj987++
		if yyhl987 {
			yyb987 = yyj987 > l
		} else {
			yyb987 = r.CheckBreak()
		}
		if yyb987 {
			break
		}
		z.DecStructFieldNotFound(yyj987-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym993 := z.EncBinary()
	_ = yym993
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym994 := z.DecBinary()
	_ = yym994
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym995 := z.EncBinary()
	_ = yym995
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym996 := z.DecBinary()
	_ = yym996
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym997 := z.EncBinary()
		_ = yym997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep998 := !z.EncBinary()
			yy2arr998 := z.EncBasicHandle().StructToArray
			var yyq998 [2]bool
			_, _, _ = yysep998, yyq998, yy2arr998
			const yyr998 bool = false
			yyq998[0] = len(x.Add) != 0
			yyq998[1] = len(x.Drop) != 0
			if yyr998 || yy2arr998 {
				r.EncodeArrayStart(2)
			} else {
				var yynn998 int = 0
				for _, b := range yyq998 {
					if b {
						yynn998++
					}
				}
				r.EncodeMapStart(yynn998)
			}
			if yyr998 || yy2arr998 {
				if yyq998[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1000 := z.EncBinary()
						_ = yym1000
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq998[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1001 := z.EncBinary()
						_ = yym1001
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1003 := z.EncBinary()
						_ = yym1003
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq998[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1004 := z.EncBinary()
						_ = yym1004
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep998 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1005 := z.DecBinary()
	_ = yym1005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1006 := r.ReadMapStart()
			if yyl1006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1006, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1006 := r.ReadArrayStart()
			if yyl1006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1007Slc
	var yyhl1007 bool = l >= 0
	for yyj1007 := 0; ; yyj1007++ {
		if yyhl1007 {
			if yyj1007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1007Slc = r.DecodeBytes(yys1007Slc, true, true)
		yys1007 := string(yys1007Slc)
		switch yys1007 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1008 := &x.Add
				yym1009 := z.DecBinary()
				_ = yym1009
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1008), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1010 := &x.Drop
				yym1011 := z.DecBinary()
				_ = yym1011
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1010), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1007)
		} // end switch yys1007
	} // end for yyj1007
	if !yyhl1007 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1012 int
	var yyb1012 bool
	var yyhl1012 bool = l >= 0
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1013 := &x.Add
		yym1014 := z.DecBinary()
		_ = yym1014
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1013), d)
		}
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1015 := &x.Drop
		yym1016 := z.DecBinary()
		_ = yym1016
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1015), d)
		}
	}
	for {
		yyj1012++
		if yyhl1012 {
			yyb1012 = yyj1012 > l
		} else {
			yyb1012 = r.CheckBreak()
		}
		if yyb1012 {
			break
		}
		z.DecStructFieldNotFound(yyj1012-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1017 := z.EncBinary()
		_ = yym1017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1018 := !z.EncBinary()
			yy2arr1018 := z.EncBasicHandle().StructToArray
			var yyq1018 [2]bool
			_, _, _ = yysep1018, yyq1018, yy2arr1018
			const yyr1018 bool = false
			yyq1018[0] = len(x.Limits) != 0
			yyq1018[1] = len(x.Requests) != 0
			if yyr1018 || yy2arr1018 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1018 int = 0
				for _, b := range yyq1018 {
					if b {
						yynn1018++
					}
				}
				r.EncodeMapStart(yynn1018)
			}
			if yyr1018 || yy2arr1018 {
				if yyq1018[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1018[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1018 || yy2arr1018 {
				if yyq1018[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1018[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1018 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1021 := z.DecBinary()
	_ = yym1021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1022 := r.ReadMapStart()
			if yyl1022 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1022, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1022 := r.ReadArrayStart()
			if yyl1022 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1022, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1023Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1023Slc
	var yyhl1023 bool = l >= 0
	for yyj1023 := 0; ; yyj1023++ {
		if yyhl1023 {
			if yyj1023 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1023Slc = r.DecodeBytes(yys1023Slc, true, true)
		yys1023 := string(yys1023Slc)
		switch yys1023 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1024 := &x.Limits
				yyv1024.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1025 := &x.Requests
				yyv1025.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1023)
		} // end switch yys1023
	} // end for yyj1023
	if !yyhl1023 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1026 int
	var yyb1026 bool
	var yyhl1026 bool = l >= 0
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1027 := &x.Limits
		yyv1027.CodecDecodeSelf(d)
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1028 := &x.Requests
		yyv1028.CodecDecodeSelf(d)
	}
	for {
		yyj1026++
		if yyhl1026 {
			yyb1026 = yyj1026 > l
		} else {
			yyb1026 = r.CheckBreak()
		}
		if yyb1026 {
			break
		}
		z.DecStructFieldNotFound(yyj1026-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1029 := z.EncBinary()
		_ = yym1029
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1030 := !z.EncBinary()
			yy2arr1030 := z.EncBasicHandle().StructToArray
			var yyq1030 [18]bool
			_, _, _ = yysep1030, yyq1030, yy2arr1030
			const yyr1030 bool = false
			yyq1030[1] = x.Image != ""
			yyq1030[2] = len(x.Command) != 0
			yyq1030[3] = len(x.Args) != 0
			yyq1030[4] = x.WorkingDir != ""
			yyq1030[5] = len(x.Ports) != 0
			yyq1030[6] = len(x.Env) != 0
			yyq1030[7] = true
			yyq1030[8] = len(x.VolumeMounts) != 0
			yyq1030[9] = x.LivenessProbe != nil
			yyq1030[10] = x.ReadinessProbe != nil
			yyq1030[11] = x.Lifecycle != nil
			yyq1030[12] = x.TerminationMessagePath != ""
			yyq1030[13] = x.ImagePullPolicy != ""
			yyq1030[14] = x.SecurityContext != nil
			yyq1030[15] = x.Stdin != false
			yyq1030[16] = x.StdinOnce != false
			yyq1030[17] = x.TTY != false
			if yyr1030 || yy2arr1030 {
				r.EncodeArrayStart(18)
			} else {
				var yynn1030 int = 1
				for _, b := range yyq1030 {
					if b {
						yynn1030++
					}
				}
				r.EncodeMapStart(yynn1030)
			}
			if yyr1030 || yy2arr1030 {
				yym1032 := z.EncBinary()
				_ = yym1032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1033 := z.EncBinary()
				_ = yym1033
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[1] {
					yym1035 := z.EncBinary()
					_ = yym1035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[1] {
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					yym1036 := z.EncBinary()
					_ = yym1036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1038 := z.EncBinary()
						_ = yym1038
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1039 := z.EncBinary()
						_ = yym1039
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1041 := z.EncBinary()
						_ = yym1041
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1042 := z.EncBinary()
						_ = yym1042
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[4] {
					yym1044 := z.EncBinary()
					_ = yym1044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1045 := z.EncBinary()
					_ = yym1045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1047 := z.EncBinary()
						_ = yym1047
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1048 := z.EncBinary()
						_ = yym1048
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1050 := z.EncBinary()
						_ = yym1050
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1051 := z.EncBinary()
						_ = yym1051
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[7] {
					yy1053 := &x.Resources
					yy1053.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1054 := &x.Resources
					yy1054.CodecEncodeSelf(e)
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1056 := z.EncBinary()
						_ = yym1056
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1057 := z.EncBinary()
						_ = yym1057
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[12] {
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1063 := z.EncBinary()
					_ = yym1063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[13] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[15] {
					yym1067 := z.EncBinary()
					_ = yym1067
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1030[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1068 := z.EncBinary()
					_ = yym1068
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[16] {
					yym1070 := z.EncBinary()
					_ = yym1070
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1030[16] {
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					yym1071 := z.EncBinary()
					_ = yym1071
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[17] {
					yym1073 := z.EncBinary()
					_ = yym1073
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1030[17] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1030 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1075 := z.DecBinary()
	_ = yym1075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1076 := r.ReadMapStart()
			if yyl1076 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1076, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1076 := r.ReadArrayStart()
			if yyl1076 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1077Slc
	var yyhl1077 bool = l >= 0
	for yyj1077 := 0; ; yyj1077++ {
		if yyhl1077 {
			if yyj1077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1077Slc = r.DecodeBytes(yys1077Slc, true, true)
		yys1077 := string(yys1077Slc)
		switch yys1077 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1080 := &x.Command
				yym1081 := z.DecBinary()
				_ = yym1081
				if false {
				} else {
					z.F.DecSliceStringX(yyv1080, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1082 := &x.Args
				yym1083 := z.DecBinary()
				_ = yym1083
				if false {
				} else {
					z.F.DecSliceStringX(yyv1082, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1085 := &x.Ports
				yym1086 := z.DecBinary()
				_ = yym1086
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1085), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1087 := &x.Env
				yym1088 := z.DecBinary()
				_ = yym1088
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1087), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1089 := &x.Resources
				yyv1089.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1090 := &x.VolumeMounts
				yym1091 := z.DecBinary()
				_ = yym1091
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1090), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1077)
		} // end switch yys1077
	} // end for yyj1077
	if !yyhl1077 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1101 int
	var yyb1101 bool
	var yyhl1101 bool = l >= 0
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1104 := &x.Command
		yym1105 := z.DecBinary()
		_ = yym1105
		if false {
		} else {
			z.F.DecSliceStringX(yyv1104, false, d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1106 := &x.Args
		yym1107 := z.DecBinary()
		_ = yym1107
		if false {
		} else {
			z.F.DecSliceStringX(yyv1106, false, d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1109 := &x.Ports
		yym1110 := z.DecBinary()
		_ = yym1110
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1109), d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1111 := &x.Env
		yym1112 := z.DecBinary()
		_ = yym1112
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1111), d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1113 := &x.Resources
		yyv1113.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1114 := &x.VolumeMounts
		yym1115 := z.DecBinary()
		_ = yym1115
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1114), d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1101++
		if yyhl1101 {
			yyb1101 = yyj1101 > l
		} else {
			yyb1101 = r.CheckBreak()
		}
		if yyb1101 {
			break
		}
		z.DecStructFieldNotFound(yyj1101-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1125 := z.EncBinary()
		_ = yym1125
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1126 := !z.EncBinary()
			yy2arr1126 := z.EncBasicHandle().StructToArray
			var yyq1126 [3]bool
			_, _, _ = yysep1126, yyq1126, yy2arr1126
			const yyr1126 bool = false
			yyq1126[0] = x.Exec != nil
			yyq1126[1] = x.HTTPGet != nil
			yyq1126[2] = x.TCPSocket != nil
			if yyr1126 || yy2arr1126 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1126 int = 0
				for _, b := range yyq1126 {
					if b {
						yynn1126++
					}
				}
				r.EncodeMapStart(yynn1126)
			}
			if yyr1126 || yy2arr1126 {
				if yyq1126[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1126[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1126 || yy2arr1126 {
				if yyq1126[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1126[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1126 || yy2arr1126 {
				if yyq1126[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1126[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1126 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1130 := z.DecBinary()
	_ = yym1130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1131 := r.ReadMapStart()
			if yyl1131 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1131, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1131 := r.ReadArrayStart()
			if yyl1131 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1132Slc
	var yyhl1132 bool = l >= 0
	for yyj1132 := 0; ; yyj1132++ {
		if yyhl1132 {
			if yyj1132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1132Slc = r.DecodeBytes(yys1132Slc, true, true)
		yys1132 := string(yys1132Slc)
		switch yys1132 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1132)
		} // end switch yys1132
	} // end for yyj1132
	if !yyhl1132 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1136 int
	var yyb1136 bool
	var yyhl1136 bool = l >= 0
	yyj1136++
	if yyhl1136 {
		yyb1136 = yyj1136 > l
	} else {
		yyb1136 = r.CheckBreak()
	}
	if yyb1136 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1136++
	if yyhl1136 {
		yyb1136 = yyj1136 > l
	} else {
		yyb1136 = r.CheckBreak()
	}
	if yyb1136 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1136++
	if yyhl1136 {
		yyb1136 = yyj1136 > l
	} else {
		yyb1136 = r.CheckBreak()
	}
	if yyb1136 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1136++
		if yyhl1136 {
			yyb1136 = yyj1136 > l
		} else {
			yyb1136 = r.CheckBreak()
		}
		if yyb1136 {
			break
		}
		z.DecStructFieldNotFound(yyj1136-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1140 := z.EncBinary()
		_ = yym1140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1141 := !z.EncBinary()
			yy2arr1141 := z.EncBasicHandle().StructToArray
			var yyq1141 [2]bool
			_, _, _ = yysep1141, yyq1141, yy2arr1141
			const yyr1141 bool = false
			yyq1141[0] = x.PostStart != nil
			yyq1141[1] = x.PreStop != nil
			if yyr1141 || yy2arr1141 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1141 int = 0
				for _, b := range yyq1141 {
					if b {
						yynn1141++
					}
				}
				r.EncodeMapStart(yynn1141)
			}
			if yyr1141 || yy2arr1141 {
				if yyq1141[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1141 || yy2arr1141 {
				if yyq1141[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1144 := z.DecBinary()
	_ = yym1144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1145 := r.ReadMapStart()
			if yyl1145 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1145, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1145 := r.ReadArrayStart()
			if yyl1145 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1145, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1146Slc
	var yyhl1146 bool = l >= 0
	for yyj1146 := 0; ; yyj1146++ {
		if yyhl1146 {
			if yyj1146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1146Slc = r.DecodeBytes(yys1146Slc, true, true)
		yys1146 := string(yys1146Slc)
		switch yys1146 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1146)
		} // end switch yys1146
	} // end for yyj1146
	if !yyhl1146 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1149 int
	var yyb1149 bool
	var yyhl1149 bool = l >= 0
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1149++
		if yyhl1149 {
			yyb1149 = yyj1149 > l
		} else {
			yyb1149 = r.CheckBreak()
		}
		if yyb1149 {
			break
		}
		z.DecStructFieldNotFound(yyj1149-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1152 := z.EncBinary()
	_ = yym1152
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1153 := z.DecBinary()
	_ = yym1153
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1154 := z.EncBinary()
		_ = yym1154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1155 := !z.EncBinary()
			yy2arr1155 := z.EncBasicHandle().StructToArray
			var yyq1155 [2]bool
			_, _, _ = yysep1155, yyq1155, yy2arr1155
			const yyr1155 bool = false
			yyq1155[0] = x.Reason != ""
			yyq1155[1] = x.Message != ""
			if yyr1155 || yy2arr1155 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1155 int = 0
				for _, b := range yyq1155 {
					if b {
						yynn1155++
					}
				}
				r.EncodeMapStart(yynn1155)
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[0] {
					yym1157 := z.EncBinary()
					_ = yym1157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1155[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1158 := z.EncBinary()
					_ = yym1158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[1] {
					yym1160 := z.EncBinary()
					_ = yym1160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1155[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1161 := z.EncBinary()
					_ = yym1161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1155 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1162 := z.DecBinary()
	_ = yym1162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1163 := r.ReadMapStart()
			if yyl1163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1163, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1163 := r.ReadArrayStart()
			if yyl1163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1164Slc
	var yyhl1164 bool = l >= 0
	for yyj1164 := 0; ; yyj1164++ {
		if yyhl1164 {
			if yyj1164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1164Slc = r.DecodeBytes(yys1164Slc, true, true)
		yys1164 := string(yys1164Slc)
		switch yys1164 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1164)
		} // end switch yys1164
	} // end for yyj1164
	if !yyhl1164 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1167 int
	var yyb1167 bool
	var yyhl1167 bool = l >= 0
	yyj1167++
	if yyhl1167 {
		yyb1167 = yyj1167 > l
	} else {
		yyb1167 = r.CheckBreak()
	}
	if yyb1167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1167++
	if yyhl1167 {
		yyb1167 = yyj1167 > l
	} else {
		yyb1167 = r.CheckBreak()
	}
	if yyb1167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1167++
		if yyhl1167 {
			yyb1167 = yyj1167 > l
		} else {
			yyb1167 = r.CheckBreak()
		}
		if yyb1167 {
			break
		}
		z.DecStructFieldNotFound(yyj1167-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1170 := z.EncBinary()
		_ = yym1170
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1171 := !z.EncBinary()
			yy2arr1171 := z.EncBasicHandle().StructToArray
			var yyq1171 [1]bool
			_, _, _ = yysep1171, yyq1171, yy2arr1171
			const yyr1171 bool = false
			yyq1171[0] = true
			if yyr1171 || yy2arr1171 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1171 int = 0
				for _, b := range yyq1171 {
					if b {
						yynn1171++
					}
				}
				r.EncodeMapStart(yynn1171)
			}
			if yyr1171 || yy2arr1171 {
				if yyq1171[0] {
					yy1173 := &x.StartedAt
					yym1174 := z.EncBinary()
					_ = yym1174
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1173) {
					} else if yym1174 {
						z.EncBinaryMarshal(yy1173)
					} else if !yym1174 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1173)
					} else {
						z.EncFallback(yy1173)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1171[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1175 := &x.StartedAt
					yym1176 := z.EncBinary()
					_ = yym1176
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1175) {
					} else if yym1176 {
						z.EncBinaryMarshal(yy1175)
					} else if !yym1176 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1175)
					} else {
						z.EncFallback(yy1175)
					}
				}
			}
			if yysep1171 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1177 := z.DecBinary()
	_ = yym1177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1178 := r.ReadMapStart()
			if yyl1178 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1178, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1178 := r.ReadArrayStart()
			if yyl1178 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1178, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1179Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1179Slc
	var yyhl1179 bool = l >= 0
	for yyj1179 := 0; ; yyj1179++ {
		if yyhl1179 {
			if yyj1179 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1179Slc = r.DecodeBytes(yys1179Slc, true, true)
		yys1179 := string(yys1179Slc)
		switch yys1179 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1180 := &x.StartedAt
				yym1181 := z.DecBinary()
				_ = yym1181
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1180) {
				} else if yym1181 {
					z.DecBinaryUnmarshal(yyv1180)
				} else if !yym1181 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1180)
				} else {
					z.DecFallback(yyv1180, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1179)
		} // end switch yys1179
	} // end for yyj1179
	if !yyhl1179 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1182 int
	var yyb1182 bool
	var yyhl1182 bool = l >= 0
	yyj1182++
	if yyhl1182 {
		yyb1182 = yyj1182 > l
	} else {
		yyb1182 = r.CheckBreak()
	}
	if yyb1182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1183 := &x.StartedAt
		yym1184 := z.DecBinary()
		_ = yym1184
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1183) {
		} else if yym1184 {
			z.DecBinaryUnmarshal(yyv1183)
		} else if !yym1184 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1183)
		} else {
			z.DecFallback(yyv1183, false)
		}
	}
	for {
		yyj1182++
		if yyhl1182 {
			yyb1182 = yyj1182 > l
		} else {
			yyb1182 = r.CheckBreak()
		}
		if yyb1182 {
			break
		}
		z.DecStructFieldNotFound(yyj1182-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1185 := z.EncBinary()
		_ = yym1185
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1186 := !z.EncBinary()
			yy2arr1186 := z.EncBasicHandle().StructToArray
			var yyq1186 [7]bool
			_, _, _ = yysep1186, yyq1186, yy2arr1186
			const yyr1186 bool = false
			yyq1186[1] = x.Signal != 0
			yyq1186[2] = x.Reason != ""
			yyq1186[3] = x.Message != ""
			yyq1186[4] = true
			yyq1186[5] = true
			yyq1186[6] = x.ContainerID != ""
			if yyr1186 || yy2arr1186 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1186 int = 1
				for _, b := range yyq1186 {
					if b {
						yynn1186++
					}
				}
				r.EncodeMapStart(yynn1186)
			}
			if yyr1186 || yy2arr1186 {
				yym1188 := z.EncBinary()
				_ = yym1188
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1189 := z.EncBinary()
				_ = yym1189
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[1] {
					yym1191 := z.EncBinary()
					_ = yym1191
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1186[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[2] {
					yym1194 := z.EncBinary()
					_ = yym1194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1195 := z.EncBinary()
					_ = yym1195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[3] {
					yym1197 := z.EncBinary()
					_ = yym1197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1198 := z.EncBinary()
					_ = yym1198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[4] {
					yy1200 := &x.StartedAt
					yym1201 := z.EncBinary()
					_ = yym1201
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1200) {
					} else if yym1201 {
						z.EncBinaryMarshal(yy1200)
					} else if !yym1201 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1200)
					} else {
						z.EncFallback(yy1200)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1186[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1202 := &x.StartedAt
					yym1203 := z.EncBinary()
					_ = yym1203
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1202) {
					} else if yym1203 {
						z.EncBinaryMarshal(yy1202)
					} else if !yym1203 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1202)
					} else {
						z.EncFallback(yy1202)
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[5] {
					yy1205 := &x.FinishedAt
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1205) {
					} else if yym1206 {
						z.EncBinaryMarshal(yy1205)
					} else if !yym1206 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1205)
					} else {
						z.EncFallback(yy1205)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1186[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1207 := &x.FinishedAt
					yym1208 := z.EncBinary()
					_ = yym1208
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1207) {
					} else if yym1208 {
						z.EncBinaryMarshal(yy1207)
					} else if !yym1208 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1207)
					} else {
						z.EncFallback(yy1207)
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[6] {
					yym1210 := z.EncBinary()
					_ = yym1210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1186 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1212 := z.DecBinary()
	_ = yym1212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1213 := r.ReadMapStart()
			if yyl1213 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1213, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1213 := r.ReadArrayStart()
			if yyl1213 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1214Slc
	var yyhl1214 bool = l >= 0
	for yyj1214 := 0; ; yyj1214++ {
		if yyhl1214 {
			if yyj1214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1214Slc = r.DecodeBytes(yys1214Slc, true, true)
		yys1214 := string(yys1214Slc)
		switch yys1214 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1219 := &x.StartedAt
				yym1220 := z.DecBinary()
				_ = yym1220
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1219) {
				} else if yym1220 {
					z.DecBinaryUnmarshal(yyv1219)
				} else if !yym1220 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1219)
				} else {
					z.DecFallback(yyv1219, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1221 := &x.FinishedAt
				yym1222 := z.DecBinary()
				_ = yym1222
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1221) {
				} else if yym1222 {
					z.DecBinaryUnmarshal(yyv1221)
				} else if !yym1222 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1221)
				} else {
					z.DecFallback(yyv1221, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1214)
		} // end switch yys1214
	} // end for yyj1214
	if !yyhl1214 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1224 int
	var yyb1224 bool
	var yyhl1224 bool = l >= 0
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1229 := &x.StartedAt
		yym1230 := z.DecBinary()
		_ = yym1230
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1229) {
		} else if yym1230 {
			z.DecBinaryUnmarshal(yyv1229)
		} else if !yym1230 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1229)
		} else {
			z.DecFallback(yyv1229, false)
		}
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1231 := &x.FinishedAt
		yym1232 := z.DecBinary()
		_ = yym1232
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1231) {
		} else if yym1232 {
			z.DecBinaryUnmarshal(yyv1231)
		} else if !yym1232 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1231)
		} else {
			z.DecFallback(yyv1231, false)
		}
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1224++
		if yyhl1224 {
			yyb1224 = yyj1224 > l
		} else {
			yyb1224 = r.CheckBreak()
		}
		if yyb1224 {
			break
		}
		z.DecStructFieldNotFound(yyj1224-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1234 := z.EncBinary()
		_ = yym1234
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1235 := !z.EncBinary()
			yy2arr1235 := z.EncBasicHandle().StructToArray
			var yyq1235 [3]bool
			_, _, _ = yysep1235, yyq1235, yy2arr1235
			const yyr1235 bool = false
			yyq1235[0] = x.Waiting != nil
			yyq1235[1] = x.Running != nil
			yyq1235[2] = x.Terminated != nil
			if yyr1235 || yy2arr1235 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1235 int = 0
				for _, b := range yyq1235 {
					if b {
						yynn1235++
					}
				}
				r.EncodeMapStart(yynn1235)
			}
			if yyr1235 || yy2arr1235 {
				if yyq1235[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				if yyq1235[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				if yyq1235[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1235 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1239 := z.DecBinary()
	_ = yym1239
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1240 := r.ReadMapStart()
			if yyl1240 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1240, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1240 := r.ReadArrayStart()
			if yyl1240 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1240, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1241Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1241Slc
	var yyhl1241 bool = l >= 0
	for yyj1241 := 0; ; yyj1241++ {
		if yyhl1241 {
			if yyj1241 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1241Slc = r.DecodeBytes(yys1241Slc, true, true)
		yys1241 := string(yys1241Slc)
		switch yys1241 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1241)
		} // end switch yys1241
	} // end for yyj1241
	if !yyhl1241 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1245 int
	var yyb1245 bool
	var yyhl1245 bool = l >= 0
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1245++
		if yyhl1245 {
			yyb1245 = yyj1245 > l
		} else {
			yyb1245 = r.CheckBreak()
		}
		if yyb1245 {
			break
		}
		z.DecStructFieldNotFound(yyj1245-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1249 := z.EncBinary()
		_ = yym1249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1250 := !z.EncBinary()
			yy2arr1250 := z.EncBasicHandle().StructToArray
			var yyq1250 [8]bool
			_, _, _ = yysep1250, yyq1250, yy2arr1250
			const yyr1250 bool = false
			yyq1250[1] = true
			yyq1250[2] = true
			yyq1250[7] = x.ContainerID != ""
			if yyr1250 || yy2arr1250 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1250 int = 5
				for _, b := range yyq1250 {
					if b {
						yynn1250++
					}
				}
				r.EncodeMapStart(yynn1250)
			}
			if yyr1250 || yy2arr1250 {
				yym1252 := z.EncBinary()
				_ = yym1252
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1253 := z.EncBinary()
				_ = yym1253
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1250 || yy2arr1250 {
				if yyq1250[1] {
					yy1255 := &x.State
					yy1255.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1256 := &x.State
					yy1256.CodecEncodeSelf(e)
				}
			}
			if yyr1250 || yy2arr1250 {
				if yyq1250[2] {
					yy1258 := &x.LastTerminationState
					yy1258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1259 := &x.LastTerminationState
					yy1259.CodecEncodeSelf(e)
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1261 := z.EncBinary()
				_ = yym1261
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1262 := z.EncBinary()
				_ = yym1262
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1264 := z.EncBinary()
				_ = yym1264
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1265 := z.EncBinary()
				_ = yym1265
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1267 := z.EncBinary()
				_ = yym1267
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1268 := z.EncBinary()
				_ = yym1268
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1270 := z.EncBinary()
				_ = yym1270
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1271 := z.EncBinary()
				_ = yym1271
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1250 || yy2arr1250 {
				if yyq1250[7] {
					yym1273 := z.EncBinary()
					_ = yym1273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1250[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1274 := z.EncBinary()
					_ = yym1274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1275 := z.DecBinary()
	_ = yym1275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1276 := r.ReadMapStart()
			if yyl1276 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1276, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1276 := r.ReadArrayStart()
			if yyl1276 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1277Slc
	var yyhl1277 bool = l >= 0
	for yyj1277 := 0; ; yyj1277++ {
		if yyhl1277 {
			if yyj1277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1277Slc = r.DecodeBytes(yys1277Slc, true, true)
		yys1277 := string(yys1277Slc)
		switch yys1277 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1279 := &x.State
				yyv1279.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1280 := &x.LastTerminationState
				yyv1280.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1277)
		} // end switch yys1277
	} // end for yyj1277
	if !yyhl1277 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1286 int
	var yyb1286 bool
	var yyhl1286 bool = l >= 0
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1288 := &x.State
		yyv1288.CodecDecodeSelf(d)
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1289 := &x.LastTerminationState
		yyv1289.CodecDecodeSelf(d)
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1286++
		if yyhl1286 {
			yyb1286 = yyj1286 > l
		} else {
			yyb1286 = r.CheckBreak()
		}
		if yyb1286 {
			break
		}
		z.DecStructFieldNotFound(yyj1286-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1295 := z.EncBinary()
	_ = yym1295
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1296 := z.DecBinary()
	_ = yym1296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1297 := z.EncBinary()
	_ = yym1297
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1298 := z.DecBinary()
	_ = yym1298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1299 := z.EncBinary()
		_ = yym1299
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1300 := !z.EncBinary()
			yy2arr1300 := z.EncBasicHandle().StructToArray
			var yyq1300 [6]bool
			_, _, _ = yysep1300, yyq1300, yy2arr1300
			const yyr1300 bool = false
			yyq1300[2] = true
			yyq1300[3] = true
			yyq1300[4] = x.Reason != ""
			yyq1300[5] = x.Message != ""
			if yyr1300 || yy2arr1300 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1300 int = 2
				for _, b := range yyq1300 {
					if b {
						yynn1300++
					}
				}
				r.EncodeMapStart(yynn1300)
			}
			if yyr1300 || yy2arr1300 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1300 || yy2arr1300 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[2] {
					yy1304 := &x.LastProbeTime
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1304) {
					} else if yym1305 {
						z.EncBinaryMarshal(yy1304)
					} else if !yym1305 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1304)
					} else {
						z.EncFallback(yy1304)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1300[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1306 := &x.LastProbeTime
					yym1307 := z.EncBinary()
					_ = yym1307
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1306) {
					} else if yym1307 {
						z.EncBinaryMarshal(yy1306)
					} else if !yym1307 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1306)
					} else {
						z.EncFallback(yy1306)
					}
				}
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[3] {
					yy1309 := &x.LastTransitionTime
					yym1310 := z.EncBinary()
					_ = yym1310
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1309) {
					} else if yym1310 {
						z.EncBinaryMarshal(yy1309)
					} else if !yym1310 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1309)
					} else {
						z.EncFallback(yy1309)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1300[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1311 := &x.LastTransitionTime
					yym1312 := z.EncBinary()
					_ = yym1312
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1311) {
					} else if yym1312 {
						z.EncBinaryMarshal(yy1311)
					} else if !yym1312 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1311)
					} else {
						z.EncFallback(yy1311)
					}
				}
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[4] {
					yym1314 := z.EncBinary()
					_ = yym1314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1300[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1315 := z.EncBinary()
					_ = yym1315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[5] {
					yym1317 := z.EncBinary()
					_ = yym1317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1300[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1300 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1319 := z.DecBinary()
	_ = yym1319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1320 := r.ReadMapStart()
			if yyl1320 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1320, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1320 := r.ReadArrayStart()
			if yyl1320 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1321Slc
	var yyhl1321 bool = l >= 0
	for yyj1321 := 0; ; yyj1321++ {
		if yyhl1321 {
			if yyj1321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1321Slc = r.DecodeBytes(yys1321Slc, true, true)
		yys1321 := string(yys1321Slc)
		switch yys1321 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1324 := &x.LastProbeTime
				yym1325 := z.DecBinary()
				_ = yym1325
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1324) {
				} else if yym1325 {
					z.DecBinaryUnmarshal(yyv1324)
				} else if !yym1325 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1324)
				} else {
					z.DecFallback(yyv1324, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1326 := &x.LastTransitionTime
				yym1327 := z.DecBinary()
				_ = yym1327
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1326) {
				} else if yym1327 {
					z.DecBinaryUnmarshal(yyv1326)
				} else if !yym1327 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1326)
				} else {
					z.DecFallback(yyv1326, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1321)
		} // end switch yys1321
	} // end for yyj1321
	if !yyhl1321 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1330 int
	var yyb1330 bool
	var yyhl1330 bool = l >= 0
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1333 := &x.LastProbeTime
		yym1334 := z.DecBinary()
		_ = yym1334
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1333) {
		} else if yym1334 {
			z.DecBinaryUnmarshal(yyv1333)
		} else if !yym1334 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1333)
		} else {
			z.DecFallback(yyv1333, false)
		}
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1335 := &x.LastTransitionTime
		yym1336 := z.DecBinary()
		_ = yym1336
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1335) {
		} else if yym1336 {
			z.DecBinaryUnmarshal(yyv1335)
		} else if !yym1336 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1335)
		} else {
			z.DecFallback(yyv1335, false)
		}
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1330++
		if yyhl1330 {
			yyb1330 = yyj1330 > l
		} else {
			yyb1330 = r.CheckBreak()
		}
		if yyb1330 {
			break
		}
		z.DecStructFieldNotFound(yyj1330-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1339 := z.EncBinary()
	_ = yym1339
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1340 := z.DecBinary()
	_ = yym1340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1341 := z.EncBinary()
	_ = yym1341
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1342 := z.DecBinary()
	_ = yym1342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1343 := z.EncBinary()
		_ = yym1343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1344 := !z.EncBinary()
			yy2arr1344 := z.EncBasicHandle().StructToArray
			var yyq1344 [15]bool
			_, _, _ = yysep1344, yyq1344, yy2arr1344
			const yyr1344 bool = false
			yyq1344[0] = len(x.Volumes) != 0
			yyq1344[2] = x.RestartPolicy != ""
			yyq1344[3] = x.TerminationGracePeriodSeconds != nil
			yyq1344[4] = x.ActiveDeadlineSeconds != nil
			yyq1344[5] = x.DNSPolicy != ""
			yyq1344[6] = len(x.NodeSelector) != 0
			yyq1344[7] = x.ServiceAccountName != ""
			yyq1344[8] = x.DeprecatedServiceAccount != ""
			yyq1344[9] = x.NodeName != ""
			yyq1344[10] = x.HostNetwork != false
			yyq1344[11] = x.HostPID != false
			yyq1344[12] = x.HostIPC != false
			yyq1344[13] = x.SecurityContext != nil
			yyq1344[14] = len(x.ImagePullSecrets) != 0
			if yyr1344 || yy2arr1344 {
				r.EncodeArrayStart(15)
			} else {
				var yynn1344 int = 1
				for _, b := range yyq1344 {
					if b {
						yynn1344++
					}
				}
				r.EncodeMapStart(yynn1344)
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1346 := z.EncBinary()
						_ = yym1346
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[0] {
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1347 := z.EncBinary()
						_ = yym1347
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1349 := z.EncBinary()
					_ = yym1349
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1350 := z.EncBinary()
					_ = yym1350
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1353 := *x.TerminationGracePeriodSeconds
						yym1354 := z.EncBinary()
						_ = yym1354
						if false {
						} else {
							r.EncodeInt(int64(yy1353))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1355 := *x.TerminationGracePeriodSeconds
						yym1356 := z.EncBinary()
						_ = yym1356
						if false {
						} else {
							r.EncodeInt(int64(yy1355))
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1358 := *x.ActiveDeadlineSeconds
						yym1359 := z.EncBinary()
						_ = yym1359
						if false {
						} else {
							r.EncodeInt(int64(yy1358))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1360 := *x.ActiveDeadlineSeconds
						yym1361 := z.EncBinary()
						_ = yym1361
						if false {
						} else {
							r.EncodeInt(int64(yy1360))
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1364 := z.EncBinary()
						_ = yym1364
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1365 := z.EncBinary()
						_ = yym1365
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[7] {
					yym1367 := z.EncBinary()
					_ = yym1367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[7] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					yym1368 := z.EncBinary()
					_ = yym1368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[8] {
					yym1370 := z.EncBinary()
					_ = yym1370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[8] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					yym1371 := z.EncBinary()
					_ = yym1371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[9] {
					yym1373 := z.EncBinary()
					_ = yym1373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[9] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[10] {
					yym1376 := z.EncBinary()
					_ = yym1376
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1344[10] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[11] {
					yym1379 := z.EncBinary()
					_ = yym1379
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1344[11] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[12] {
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1344[12] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1383 := z.EncBinary()
					_ = yym1383
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[13] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1386 := z.EncBinary()
						_ = yym1386
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[14] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1387 := z.EncBinary()
						_ = yym1387
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1344 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1388 := z.DecBinary()
	_ = yym1388
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1389 := r.ReadMapStart()
			if yyl1389 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1389, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1389 := r.ReadArrayStart()
			if yyl1389 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1389, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1390Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1390Slc
	var yyhl1390 bool = l >= 0
	for yyj1390 := 0; ; yyj1390++ {
		if yyhl1390 {
			if yyj1390 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1390Slc = r.DecodeBytes(yys1390Slc, true, true)
		yys1390 := string(yys1390Slc)
		switch yys1390 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1391 := &x.Volumes
				yym1392 := z.DecBinary()
				_ = yym1392
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1391), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1393 := &x.Containers
				yym1394 := z.DecBinary()
				_ = yym1394
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1393), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1397 := z.DecBinary()
				_ = yym1397
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1399 := z.DecBinary()
				_ = yym1399
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1401 := &x.NodeSelector
				yym1402 := z.DecBinary()
				_ = yym1402
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1401, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1410 := &x.ImagePullSecrets
				yym1411 := z.DecBinary()
				_ = yym1411
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1410), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1390)
		} // end switch yys1390
	} // end for yyj1390
	if !yyhl1390 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1412 int
	var yyb1412 bool
	var yyhl1412 bool = l >= 0
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1413 := &x.Volumes
		yym1414 := z.DecBinary()
		_ = yym1414
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1413), d)
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1415 := &x.Containers
		yym1416 := z.DecBinary()
		_ = yym1416
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1415), d)
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1419 := z.DecBinary()
		_ = yym1419
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1421 := z.DecBinary()
		_ = yym1421
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1423 := &x.NodeSelector
		yym1424 := z.DecBinary()
		_ = yym1424
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1423, false, d)
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1432 := &x.ImagePullSecrets
		yym1433 := z.DecBinary()
		_ = yym1433
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1432), d)
		}
	}
	for {
		yyj1412++
		if yyhl1412 {
			yyb1412 = yyj1412 > l
		} else {
			yyb1412 = r.CheckBreak()
		}
		if yyb1412 {
			break
		}
		z.DecStructFieldNotFound(yyj1412-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1434 := z.EncBinary()
		_ = yym1434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1435 := !z.EncBinary()
			yy2arr1435 := z.EncBasicHandle().StructToArray
			var yyq1435 [0]bool
			_, _, _ = yysep1435, yyq1435, yy2arr1435
			const yyr1435 bool = false
			if yyr1435 || yy2arr1435 {
				r.EncodeArrayStart(0)
			} else {
				var yynn1435 int = 0
				for _, b := range yyq1435 {
					if b {
						yynn1435++
					}
				}
				r.EncodeMapStart(yynn1435)
			}
			if yysep1435 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1436 := z.DecBinary()
	_ = yym1436
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1437 := r.ReadMapStart()
			if yyl1437 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1437, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1437 := r.ReadArrayStart()
			if yyl1437 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1437, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1438Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1438Slc
	var yyhl1438 bool = l >= 0
	for yyj1438 := 0; ; yyj1438++ {
		if yyhl1438 {
			if yyj1438 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1438Slc = r.DecodeBytes(yys1438Slc, true, true)
		yys1438 := string(yys1438Slc)
		switch yys1438 {
		default:
			z.DecStructFieldNotFound(-1, yys1438)
		} // end switch yys1438
	} // end for yyj1438
	if !yyhl1438 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1439 int
	var yyb1439 bool
	var yyhl1439 bool = l >= 0
	for {
		yyj1439++
		if yyhl1439 {
			yyb1439 = yyj1439 > l
		} else {
			yyb1439 = r.CheckBreak()
		}
		if yyb1439 {
			break
		}
		z.DecStructFieldNotFound(yyj1439-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1440 := z.EncBinary()
		_ = yym1440
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1441 := !z.EncBinary()
			yy2arr1441 := z.EncBasicHandle().StructToArray
			var yyq1441 [8]bool
			_, _, _ = yysep1441, yyq1441, yy2arr1441
			const yyr1441 bool = false
			yyq1441[0] = x.Phase != ""
			yyq1441[1] = len(x.Conditions) != 0
			yyq1441[2] = x.Message != ""
			yyq1441[3] = x.Reason != ""
			yyq1441[4] = x.HostIP != ""
			yyq1441[5] = x.PodIP != ""
			yyq1441[6] = x.StartTime != nil
			yyq1441[7] = len(x.ContainerStatuses) != 0
			if yyr1441 || yy2arr1441 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1441 int = 0
				for _, b := range yyq1441 {
					if b {
						yynn1441++
					}
				}
				r.EncodeMapStart(yynn1441)
			}
			if yyr1441 || yy2arr1441 {
				if yyq1441[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1441[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1441 || yy2arr1441 {
				if yyq1441[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1444 := z.EncBinary()
						_ = yym1444
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1441[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1445 := z.EncBinary()
						_ = yym1445
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1441 || yy2arr1441 {
				if yyq1441[2] {
					yym1447 := z.EncBinary()
					_ = yym1447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1441[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1448 := z.EncBinary()
					_ = yym1448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1441 || yy2arr1441 {
				if yyq1441[3] {
					yym1450 := z.EncBinary()
					_ = yym1450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1441[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1451 := z.EncBinary()
					_ = yym1451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1441 || yy2arr1441 {
				if yyq1441[4] {
					yym1453 := z.EncBinary()
					_ = yym1453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1441[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1454 := z.EncBinary()
					_ = yym1454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1441 || yy2arr1441 {
				if yyq1441[5] {
					yym1456 := z.EncBinary()
					_ = yym1456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1441[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1457 := z.EncBinary()
					_ = yym1457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1441 || yy2arr1441 {
				if yyq1441[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1459 := z.EncBinary()
						_ = yym1459
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1459 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1459 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1441[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1460 := z.EncBinary()
						_ = yym1460
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1460 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1460 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1441 || yy2arr1441 {
				if yyq1441[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1462 := z.EncBinary()
						_ = yym1462
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1441[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1463 := z.EncBinary()
						_ = yym1463
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1441 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1464 := z.DecBinary()
	_ = yym1464
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1465 := r.ReadMapStart()
			if yyl1465 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1465, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1465 := r.ReadArrayStart()
			if yyl1465 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1465, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1466Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1466Slc
	var yyhl1466 bool = l >= 0
	for yyj1466 := 0; ; yyj1466++ {
		if yyhl1466 {
			if yyj1466 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1466Slc = r.DecodeBytes(yys1466Slc, true, true)
		yys1466 := string(yys1466Slc)
		switch yys1466 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1468 := &x.Conditions
				yym1469 := z.DecBinary()
				_ = yym1469
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1468), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1475 := z.DecBinary()
				_ = yym1475
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1475 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1475 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1476 := &x.ContainerStatuses
				yym1477 := z.DecBinary()
				_ = yym1477
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1476), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1466)
		} // end switch yys1466
	} // end for yyj1466
	if !yyhl1466 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1478 int
	var yyb1478 bool
	var yyhl1478 bool = l >= 0
	yyj1478++
	if yyhl1478 {
		yyb1478 = yyj1478 > l
	} else {
		yyb1478 = r.CheckBreak()
	}
	if yyb1478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1478++
	if yyhl1478 {
		yyb1478 = yyj1478 > l
	} else {
		yyb1478 = r.CheckBreak()
	}
	if yyb1478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1480 := &x.Conditions
		yym1481 := z.DecBinary()
		_ = yym1481
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1480), d)
		}
	}
	yyj1478++
	if yyhl1478 {
		yyb1478 = yyj1478 > l
	} else {
		yyb1478 = r.CheckBreak()
	}
	if yyb1478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1478++
	if yyhl1478 {
		yyb1478 = yyj1478 > l
	} else {
		yyb1478 = r.CheckBreak()
	}
	if yyb1478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1478++
	if yyhl1478 {
		yyb1478 = yyj1478 > l
	} else {
		yyb1478 = r.CheckBreak()
	}
	if yyb1478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1478++
	if yyhl1478 {
		yyb1478 = yyj1478 > l
	} else {
		yyb1478 = r.CheckBreak()
	}
	if yyb1478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1478++
	if yyhl1478 {
		yyb1478 = yyj1478 > l
	} else {
		yyb1478 = r.CheckBreak()
	}
	if yyb1478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1487 := z.DecBinary()
		_ = yym1487
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1487 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1487 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1478++
	if yyhl1478 {
		yyb1478 = yyj1478 > l
	} else {
		yyb1478 = r.CheckBreak()
	}
	if yyb1478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1488 := &x.ContainerStatuses
		yym1489 := z.DecBinary()
		_ = yym1489
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1488), d)
		}
	}
	for {
		yyj1478++
		if yyhl1478 {
			yyb1478 = yyj1478 > l
		} else {
			yyb1478 = r.CheckBreak()
		}
		if yyb1478 {
			break
		}
		z.DecStructFieldNotFound(yyj1478-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1490 := z.EncBinary()
		_ = yym1490
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1491 := !z.EncBinary()
			yy2arr1491 := z.EncBasicHandle().StructToArray
			var yyq1491 [4]bool
			_, _, _ = yysep1491, yyq1491, yy2arr1491
			const yyr1491 bool = false
			yyq1491[0] = x.Kind != ""
			yyq1491[1] = x.APIVersion != ""
			yyq1491[2] = true
			yyq1491[3] = true
			if yyr1491 || yy2arr1491 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1491 int = 0
				for _, b := range yyq1491 {
					if b {
						yynn1491++
					}
				}
				r.EncodeMapStart(yynn1491)
			}
			if yyr1491 || yy2arr1491 {
				if yyq1491[0] {
					yym1493 := z.EncBinary()
					_ = yym1493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1491[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1494 := z.EncBinary()
					_ = yym1494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1491 || yy2arr1491 {
				if yyq1491[1] {
					yym1496 := z.EncBinary()
					_ = yym1496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1491[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1497 := z.EncBinary()
					_ = yym1497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1491 || yy2arr1491 {
				if yyq1491[2] {
					yy1499 := &x.ObjectMeta
					yy1499.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1491[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1500 := &x.ObjectMeta
					yy1500.CodecEncodeSelf(e)
				}
			}
			if yyr1491 || yy2arr1491 {
				if yyq1491[3] {
					yy1502 := &x.Status
					yy1502.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1491[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1503 := &x.Status
					yy1503.CodecEncodeSelf(e)
				}
			}
			if yysep1491 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1504 := z.DecBinary()
	_ = yym1504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1505 := r.ReadMapStart()
			if yyl1505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1505, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1505 := r.ReadArrayStart()
			if yyl1505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1506Slc
	var yyhl1506 bool = l >= 0
	for yyj1506 := 0; ; yyj1506++ {
		if yyhl1506 {
			if yyj1506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1506Slc = r.DecodeBytes(yys1506Slc, true, true)
		yys1506 := string(yys1506Slc)
		switch yys1506 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1509 := &x.ObjectMeta
				yyv1509.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1510 := &x.Status
				yyv1510.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1506)
		} // end switch yys1506
	} // end for yyj1506
	if !yyhl1506 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1511 int
	var yyb1511 bool
	var yyhl1511 bool = l >= 0
	yyj1511++
	if yyhl1511 {
		yyb1511 = yyj1511 > l
	} else {
		yyb1511 = r.CheckBreak()
	}
	if yyb1511 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1511++
	if yyhl1511 {
		yyb1511 = yyj1511 > l
	} else {
		yyb1511 = r.CheckBreak()
	}
	if yyb1511 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1511++
	if yyhl1511 {
		yyb1511 = yyj1511 > l
	} else {
		yyb1511 = r.CheckBreak()
	}
	if yyb1511 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1514 := &x.ObjectMeta
		yyv1514.CodecDecodeSelf(d)
	}
	yyj1511++
	if yyhl1511 {
		yyb1511 = yyj1511 > l
	} else {
		yyb1511 = r.CheckBreak()
	}
	if yyb1511 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1515 := &x.Status
		yyv1515.CodecDecodeSelf(d)
	}
	for {
		yyj1511++
		if yyhl1511 {
			yyb1511 = yyj1511 > l
		} else {
			yyb1511 = r.CheckBreak()
		}
		if yyb1511 {
			break
		}
		z.DecStructFieldNotFound(yyj1511-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1516 := z.EncBinary()
		_ = yym1516
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1517 := !z.EncBinary()
			yy2arr1517 := z.EncBasicHandle().StructToArray
			var yyq1517 [5]bool
			_, _, _ = yysep1517, yyq1517, yy2arr1517
			const yyr1517 bool = false
			yyq1517[0] = x.Kind != ""
			yyq1517[1] = x.APIVersion != ""
			yyq1517[2] = true
			yyq1517[3] = true
			yyq1517[4] = true
			if yyr1517 || yy2arr1517 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1517 int = 0
				for _, b := range yyq1517 {
					if b {
						yynn1517++
					}
				}
				r.EncodeMapStart(yynn1517)
			}
			if yyr1517 || yy2arr1517 {
				if yyq1517[0] {
					yym1519 := z.EncBinary()
					_ = yym1519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1517[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1520 := z.EncBinary()
					_ = yym1520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1517 || yy2arr1517 {
				if yyq1517[1] {
					yym1522 := z.EncBinary()
					_ = yym1522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1517[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1523 := z.EncBinary()
					_ = yym1523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1517 || yy2arr1517 {
				if yyq1517[2] {
					yy1525 := &x.ObjectMeta
					yy1525.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1517[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1526 := &x.ObjectMeta
					yy1526.CodecEncodeSelf(e)
				}
			}
			if yyr1517 || yy2arr1517 {
				if yyq1517[3] {
					yy1528 := &x.Spec
					yy1528.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1517[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1529 := &x.Spec
					yy1529.CodecEncodeSelf(e)
				}
			}
			if yyr1517 || yy2arr1517 {
				if yyq1517[4] {
					yy1531 := &x.Status
					yy1531.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1517[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1532 := &x.Status
					yy1532.CodecEncodeSelf(e)
				}
			}
			if yysep1517 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1533 := z.DecBinary()
	_ = yym1533
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1534 := r.ReadMapStart()
			if yyl1534 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1534, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1534 := r.ReadArrayStart()
			if yyl1534 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1534, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1535Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1535Slc
	var yyhl1535 bool = l >= 0
	for yyj1535 := 0; ; yyj1535++ {
		if yyhl1535 {
			if yyj1535 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1535Slc = r.DecodeBytes(yys1535Slc, true, true)
		yys1535 := string(yys1535Slc)
		switch yys1535 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1538 := &x.ObjectMeta
				yyv1538.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1539 := &x.Spec
				yyv1539.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1540 := &x.Status
				yyv1540.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1535)
		} // end switch yys1535
	} // end for yyj1535
	if !yyhl1535 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1541 int
	var yyb1541 bool
	var yyhl1541 bool = l >= 0
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1544 := &x.ObjectMeta
		yyv1544.CodecDecodeSelf(d)
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1545 := &x.Spec
		yyv1545.CodecDecodeSelf(d)
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1546 := &x.Status
		yyv1546.CodecDecodeSelf(d)
	}
	for {
		yyj1541++
		if yyhl1541 {
			yyb1541 = yyj1541 > l
		} else {
			yyb1541 = r.CheckBreak()
		}
		if yyb1541 {
			break
		}
		z.DecStructFieldNotFound(yyj1541-1, "")
	}
	r.ReadEnd()
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1547 := z.EncBinary()
		_ = yym1547
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1548 := !z.EncBinary()
			yy2arr1548 := z.EncBasicHandle().StructToArray
			var yyq1548 [4]bool
			_, _, _ = yysep1548, yyq1548, yy2arr1548
			const yyr1548 bool = false
			yyq1548[0] = x.Kind != ""
			yyq1548[1] = x.APIVersion != ""
			yyq1548[2] = true
			if yyr1548 || yy2arr1548 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1548 int = 1
				for _, b := range yyq1548 {
					if b {
						yynn1548++
					}
				}
				r.EncodeMapStart(yynn1548)
			}
			if yyr1548 || yy2arr1548 {
				if yyq1548[0] {
					yym1550 := z.EncBinary()
					_ = yym1550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1548[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1551 := z.EncBinary()
					_ = yym1551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1548 || yy2arr1548 {
				if yyq1548[1] {
					yym1553 := z.EncBinary()
					_ = yym1553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1548[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1554 := z.EncBinary()
					_ = yym1554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1548 || yy2arr1548 {
				if yyq1548[2] {
					yy1556 := &x.ListMeta
					yym1557 := z.EncBinary()
					_ = yym1557
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1556) {
					} else {
						z.EncFallback(yy1556)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1548[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1558 := &x.ListMeta
					yym1559 := z.EncBinary()
					_ = yym1559
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1558) {
					} else {
						z.EncFallback(yy1558)
					}
				}
			}
			if yyr1548 || yy2arr1548 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1561 := z.EncBinary()
					_ = yym1561
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1562 := z.EncBinary()
					_ = yym1562
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1548 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1563 := z.DecBinary()
	_ = yym1563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1564 := r.ReadMapStart()
			if yyl1564 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1564, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1564 := r.ReadArrayStart()
			if yyl1564 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1564, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1565Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1565Slc
	var yyhl1565 bool = l >= 0
	for yyj1565 := 0; ; yyj1565++ {
		if yyhl1565 {
			if yyj1565 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1565Slc = r.DecodeBytes(yys1565Slc, true, true)
		yys1565 := string(yys1565Slc)
		switch yys1565 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1568 := &x.ListMeta
				yym1569 := z.DecBinary()
				_ = yym1569
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1568) {
				} else {
					z.DecFallback(yyv1568, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1570 := &x.Items
				yym1571 := z.DecBinary()
				_ = yym1571
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1570), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1565)
		} // end switch yys1565
	} // end for yyj1565
	if !yyhl1565 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1572 int
	var yyb1572 bool
	var yyhl1572 bool = l >= 0
	yyj1572++
	if yyhl1572 {
		yyb1572 = yyj1572 > l
	} else {
		yyb1572 = r.CheckBreak()
	}
	if yyb1572 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1572++
	if yyhl1572 {
		yyb1572 = yyj1572 > l
	} else {
		yyb1572 = r.CheckBreak()
	}
	if yyb1572 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1572++
	if yyhl1572 {
		yyb1572 = yyj1572 > l
	} else {
		yyb1572 = r.CheckBreak()
	}
	if yyb1572 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1575 := &x.ListMeta
		yym1576 := z.DecBinary()
		_ = yym1576
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1575) {
		} else {
			z.DecFallback(yyv1575, false)
		}
	}
	yyj1572++
	if yyhl1572 {
		yyb1572 = yyj1572 > l
	} else {
		yyb1572 = r.CheckBreak()
	}
	if yyb1572 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1577 := &x.Items
		yym1578 := z.DecBinary()
		_ = yym1578
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1577), d)
		}
	}
	for {
		yyj1572++
		if yyhl1572 {
			yyb1572 = yyj1572 > l
		} else {
			yyb1572 = r.CheckBreak()
		}
		if yyb1572 {
			break
		}
		z.DecStructFieldNotFound(yyj1572-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1579 := z.EncBinary()
		_ = yym1579
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1580 := !z.EncBinary()
			yy2arr1580 := z.EncBasicHandle().StructToArray
			var yyq1580 [2]bool
			_, _, _ = yysep1580, yyq1580, yy2arr1580
			const yyr1580 bool = false
			yyq1580[0] = true
			yyq1580[1] = true
			if yyr1580 || yy2arr1580 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1580 int = 0
				for _, b := range yyq1580 {
					if b {
						yynn1580++
					}
				}
				r.EncodeMapStart(yynn1580)
			}
			if yyr1580 || yy2arr1580 {
				if yyq1580[0] {
					yy1582 := &x.ObjectMeta
					yy1582.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1580[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1583 := &x.ObjectMeta
					yy1583.CodecEncodeSelf(e)
				}
			}
			if yyr1580 || yy2arr1580 {
				if yyq1580[1] {
					yy1585 := &x.Spec
					yy1585.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1580[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1586 := &x.Spec
					yy1586.CodecEncodeSelf(e)
				}
			}
			if yysep1580 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1587 := z.DecBinary()
	_ = yym1587
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1588 := r.ReadMapStart()
			if yyl1588 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1588, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1588 := r.ReadArrayStart()
			if yyl1588 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1588, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1589Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1589Slc
	var yyhl1589 bool = l >= 0
	for yyj1589 := 0; ; yyj1589++ {
		if yyhl1589 {
			if yyj1589 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1589Slc = r.DecodeBytes(yys1589Slc, true, true)
		yys1589 := string(yys1589Slc)
		switch yys1589 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1590 := &x.ObjectMeta
				yyv1590.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1591 := &x.Spec
				yyv1591.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1589)
		} // end switch yys1589
	} // end for yyj1589
	if !yyhl1589 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1592 int
	var yyb1592 bool
	var yyhl1592 bool = l >= 0
	yyj1592++
	if yyhl1592 {
		yyb1592 = yyj1592 > l
	} else {
		yyb1592 = r.CheckBreak()
	}
	if yyb1592 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1593 := &x.ObjectMeta
		yyv1593.CodecDecodeSelf(d)
	}
	yyj1592++
	if yyhl1592 {
		yyb1592 = yyj1592 > l
	} else {
		yyb1592 = r.CheckBreak()
	}
	if yyb1592 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1594 := &x.Spec
		yyv1594.CodecDecodeSelf(d)
	}
	for {
		yyj1592++
		if yyhl1592 {
			yyb1592 = yyj1592 > l
		} else {
			yyb1592 = r.CheckBreak()
		}
		if yyb1592 {
			break
		}
		z.DecStructFieldNotFound(yyj1592-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1595 := z.EncBinary()
		_ = yym1595
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1596 := !z.EncBinary()
			yy2arr1596 := z.EncBasicHandle().StructToArray
			var yyq1596 [4]bool
			_, _, _ = yysep1596, yyq1596, yy2arr1596
			const yyr1596 bool = false
			yyq1596[0] = x.Kind != ""
			yyq1596[1] = x.APIVersion != ""
			yyq1596[2] = true
			yyq1596[3] = true
			if yyr1596 || yy2arr1596 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1596 int = 0
				for _, b := range yyq1596 {
					if b {
						yynn1596++
					}
				}
				r.EncodeMapStart(yynn1596)
			}
			if yyr1596 || yy2arr1596 {
				if yyq1596[0] {
					yym1598 := z.EncBinary()
					_ = yym1598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1596[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1599 := z.EncBinary()
					_ = yym1599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1596 || yy2arr1596 {
				if yyq1596[1] {
					yym1601 := z.EncBinary()
					_ = yym1601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1596[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1602 := z.EncBinary()
					_ = yym1602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1596 || yy2arr1596 {
				if yyq1596[2] {
					yy1604 := &x.ObjectMeta
					yy1604.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1596[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1605 := &x.ObjectMeta
					yy1605.CodecEncodeSelf(e)
				}
			}
			if yyr1596 || yy2arr1596 {
				if yyq1596[3] {
					yy1607 := &x.Template
					yy1607.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1596[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1608 := &x.Template
					yy1608.CodecEncodeSelf(e)
				}
			}
			if yysep1596 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1609 := z.DecBinary()
	_ = yym1609
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1610 := r.ReadMapStart()
			if yyl1610 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1610, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1610 := r.ReadArrayStart()
			if yyl1610 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1610, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1611Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1611Slc
	var yyhl1611 bool = l >= 0
	for yyj1611 := 0; ; yyj1611++ {
		if yyhl1611 {
			if yyj1611 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1611Slc = r.DecodeBytes(yys1611Slc, true, true)
		yys1611 := string(yys1611Slc)
		switch yys1611 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1614 := &x.ObjectMeta
				yyv1614.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1615 := &x.Template
				yyv1615.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1611)
		} // end switch yys1611
	} // end for yyj1611
	if !yyhl1611 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1616 int
	var yyb1616 bool
	var yyhl1616 bool = l >= 0
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1619 := &x.ObjectMeta
		yyv1619.CodecDecodeSelf(d)
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1620 := &x.Template
		yyv1620.CodecDecodeSelf(d)
	}
	for {
		yyj1616++
		if yyhl1616 {
			yyb1616 = yyj1616 > l
		} else {
			yyb1616 = r.CheckBreak()
		}
		if yyb1616 {
			break
		}
		z.DecStructFieldNotFound(yyj1616-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1621 := z.EncBinary()
		_ = yym1621
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1622 := !z.EncBinary()
			yy2arr1622 := z.EncBasicHandle().StructToArray
			var yyq1622 [4]bool
			_, _, _ = yysep1622, yyq1622, yy2arr1622
			const yyr1622 bool = false
			yyq1622[0] = x.Kind != ""
			yyq1622[1] = x.APIVersion != ""
			yyq1622[2] = true
			if yyr1622 || yy2arr1622 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1622 int = 1
				for _, b := range yyq1622 {
					if b {
						yynn1622++
					}
				}
				r.EncodeMapStart(yynn1622)
			}
			if yyr1622 || yy2arr1622 {
				if yyq1622[0] {
					yym1624 := z.EncBinary()
					_ = yym1624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1622[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1625 := z.EncBinary()
					_ = yym1625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1622 || yy2arr1622 {
				if yyq1622[1] {
					yym1627 := z.EncBinary()
					_ = yym1627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1622[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1628 := z.EncBinary()
					_ = yym1628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1622 || yy2arr1622 {
				if yyq1622[2] {
					yy1630 := &x.ListMeta
					yym1631 := z.EncBinary()
					_ = yym1631
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1630) {
					} else {
						z.EncFallback(yy1630)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1622[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1632 := &x.ListMeta
					yym1633 := z.EncBinary()
					_ = yym1633
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1632) {
					} else {
						z.EncFallback(yy1632)
					}
				}
			}
			if yyr1622 || yy2arr1622 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1635 := z.EncBinary()
					_ = yym1635
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1636 := z.EncBinary()
					_ = yym1636
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1622 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1637 := z.DecBinary()
	_ = yym1637
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1638 := r.ReadMapStart()
			if yyl1638 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1638, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1638 := r.ReadArrayStart()
			if yyl1638 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1638, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1639Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1639Slc
	var yyhl1639 bool = l >= 0
	for yyj1639 := 0; ; yyj1639++ {
		if yyhl1639 {
			if yyj1639 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1639Slc = r.DecodeBytes(yys1639Slc, true, true)
		yys1639 := string(yys1639Slc)
		switch yys1639 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1642 := &x.ListMeta
				yym1643 := z.DecBinary()
				_ = yym1643
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1642) {
				} else {
					z.DecFallback(yyv1642, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1644 := &x.Items
				yym1645 := z.DecBinary()
				_ = yym1645
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1644), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1639)
		} // end switch yys1639
	} // end for yyj1639
	if !yyhl1639 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1646 int
	var yyb1646 bool
	var yyhl1646 bool = l >= 0
	yyj1646++
	if yyhl1646 {
		yyb1646 = yyj1646 > l
	} else {
		yyb1646 = r.CheckBreak()
	}
	if yyb1646 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1646++
	if yyhl1646 {
		yyb1646 = yyj1646 > l
	} else {
		yyb1646 = r.CheckBreak()
	}
	if yyb1646 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1646++
	if yyhl1646 {
		yyb1646 = yyj1646 > l
	} else {
		yyb1646 = r.CheckBreak()
	}
	if yyb1646 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1649 := &x.ListMeta
		yym1650 := z.DecBinary()
		_ = yym1650
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1649) {
		} else {
			z.DecFallback(yyv1649, false)
		}
	}
	yyj1646++
	if yyhl1646 {
		yyb1646 = yyj1646 > l
	} else {
		yyb1646 = r.CheckBreak()
	}
	if yyb1646 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1651 := &x.Items
		yym1652 := z.DecBinary()
		_ = yym1652
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1651), d)
		}
	}
	for {
		yyj1646++
		if yyhl1646 {
			yyb1646 = yyj1646 > l
		} else {
			yyb1646 = r.CheckBreak()
		}
		if yyb1646 {
			break
		}
		z.DecStructFieldNotFound(yyj1646-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1653 := z.EncBinary()
		_ = yym1653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1654 := !z.EncBinary()
			yy2arr1654 := z.EncBasicHandle().StructToArray
			var yyq1654 [3]bool
			_, _, _ = yysep1654, yyq1654, yy2arr1654
			const yyr1654 bool = false
			yyq1654[0] = x.Replicas != nil
			yyq1654[1] = len(x.Selector) != 0
			yyq1654[2] = x.Template != nil
			if yyr1654 || yy2arr1654 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1654 int = 0
				for _, b := range yyq1654 {
					if b {
						yynn1654++
					}
				}
				r.EncodeMapStart(yynn1654)
			}
			if yyr1654 || yy2arr1654 {
				if yyq1654[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1656 := *x.Replicas
						yym1657 := z.EncBinary()
						_ = yym1657
						if false {
						} else {
							r.EncodeInt(int64(yy1656))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1654[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1658 := *x.Replicas
						yym1659 := z.EncBinary()
						_ = yym1659
						if false {
						} else {
							r.EncodeInt(int64(yy1658))
						}
					}
				}
			}
			if yyr1654 || yy2arr1654 {
				if yyq1654[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1661 := z.EncBinary()
						_ = yym1661
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1654[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1662 := z.EncBinary()
						_ = yym1662
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1654 || yy2arr1654 {
				if yyq1654[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1654[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1654 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1664 := z.DecBinary()
	_ = yym1664
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1665 := r.ReadMapStart()
			if yyl1665 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1665, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1665 := r.ReadArrayStart()
			if yyl1665 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1665, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1666Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1666Slc
	var yyhl1666 bool = l >= 0
	for yyj1666 := 0; ; yyj1666++ {
		if yyhl1666 {
			if yyj1666 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1666Slc = r.DecodeBytes(yys1666Slc, true, true)
		yys1666 := string(yys1666Slc)
		switch yys1666 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int)
				}
				yym1668 := z.DecBinary()
				_ = yym1668
				if false {
				} else {
					*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1669 := &x.Selector
				yym1670 := z.DecBinary()
				_ = yym1670
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1669, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1666)
		} // end switch yys1666
	} // end for yyj1666
	if !yyhl1666 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1672 int
	var yyb1672 bool
	var yyhl1672 bool = l >= 0
	yyj1672++
	if yyhl1672 {
		yyb1672 = yyj1672 > l
	} else {
		yyb1672 = r.CheckBreak()
	}
	if yyb1672 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int)
		}
		yym1674 := z.DecBinary()
		_ = yym1674
		if false {
		} else {
			*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj1672++
	if yyhl1672 {
		yyb1672 = yyj1672 > l
	} else {
		yyb1672 = r.CheckBreak()
	}
	if yyb1672 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1675 := &x.Selector
		yym1676 := z.DecBinary()
		_ = yym1676
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1675, false, d)
		}
	}
	yyj1672++
	if yyhl1672 {
		yyb1672 = yyj1672 > l
	} else {
		yyb1672 = r.CheckBreak()
	}
	if yyb1672 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1672++
		if yyhl1672 {
			yyb1672 = yyj1672 > l
		} else {
			yyb1672 = r.CheckBreak()
		}
		if yyb1672 {
			break
		}
		z.DecStructFieldNotFound(yyj1672-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1678 := z.EncBinary()
		_ = yym1678
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1679 := !z.EncBinary()
			yy2arr1679 := z.EncBasicHandle().StructToArray
			var yyq1679 [2]bool
			_, _, _ = yysep1679, yyq1679, yy2arr1679
			const yyr1679 bool = false
			yyq1679[1] = x.ObservedGeneration != 0
			if yyr1679 || yy2arr1679 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1679 int = 1
				for _, b := range yyq1679 {
					if b {
						yynn1679++
					}
				}
				r.EncodeMapStart(yynn1679)
			}
			if yyr1679 || yy2arr1679 {
				yym1681 := z.EncBinary()
				_ = yym1681
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1682 := z.EncBinary()
				_ = yym1682
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1679 || yy2arr1679 {
				if yyq1679[1] {
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1679[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1685 := z.EncBinary()
					_ = yym1685
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1679 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1686 := z.DecBinary()
	_ = yym1686
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1687 := r.ReadMapStart()
			if yyl1687 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1687, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1687 := r.ReadArrayStart()
			if yyl1687 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1687, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1688Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1688Slc
	var yyhl1688 bool = l >= 0
	for yyj1688 := 0; ; yyj1688++ {
		if yyhl1688 {
			if yyj1688 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1688Slc = r.DecodeBytes(yys1688Slc, true, true)
		yys1688 := string(yys1688Slc)
		switch yys1688 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1688)
		} // end switch yys1688
	} // end for yyj1688
	if !yyhl1688 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1691 int
	var yyb1691 bool
	var yyhl1691 bool = l >= 0
	yyj1691++
	if yyhl1691 {
		yyb1691 = yyj1691 > l
	} else {
		yyb1691 = r.CheckBreak()
	}
	if yyb1691 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1691++
	if yyhl1691 {
		yyb1691 = yyj1691 > l
	} else {
		yyb1691 = r.CheckBreak()
	}
	if yyb1691 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1691++
		if yyhl1691 {
			yyb1691 = yyj1691 > l
		} else {
			yyb1691 = r.CheckBreak()
		}
		if yyb1691 {
			break
		}
		z.DecStructFieldNotFound(yyj1691-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1694 := z.EncBinary()
		_ = yym1694
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1695 := !z.EncBinary()
			yy2arr1695 := z.EncBasicHandle().StructToArray
			var yyq1695 [5]bool
			_, _, _ = yysep1695, yyq1695, yy2arr1695
			const yyr1695 bool = false
			yyq1695[0] = x.Kind != ""
			yyq1695[1] = x.APIVersion != ""
			yyq1695[2] = true
			yyq1695[3] = true
			yyq1695[4] = true
			if yyr1695 || yy2arr1695 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1695 int = 0
				for _, b := range yyq1695 {
					if b {
						yynn1695++
					}
				}
				r.EncodeMapStart(yynn1695)
			}
			if yyr1695 || yy2arr1695 {
				if yyq1695[0] {
					yym1697 := z.EncBinary()
					_ = yym1697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1695[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1698 := z.EncBinary()
					_ = yym1698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1695 || yy2arr1695 {
				if yyq1695[1] {
					yym1700 := z.EncBinary()
					_ = yym1700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1695[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1701 := z.EncBinary()
					_ = yym1701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1695 || yy2arr1695 {
				if yyq1695[2] {
					yy1703 := &x.ObjectMeta
					yy1703.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1695[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1704 := &x.ObjectMeta
					yy1704.CodecEncodeSelf(e)
				}
			}
			if yyr1695 || yy2arr1695 {
				if yyq1695[3] {
					yy1706 := &x.Spec
					yy1706.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1695[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1707 := &x.Spec
					yy1707.CodecEncodeSelf(e)
				}
			}
			if yyr1695 || yy2arr1695 {
				if yyq1695[4] {
					yy1709 := &x.Status
					yy1709.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1695[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1710 := &x.Status
					yy1710.CodecEncodeSelf(e)
				}
			}
			if yysep1695 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1711 := z.DecBinary()
	_ = yym1711
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1712 := r.ReadMapStart()
			if yyl1712 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1712, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1712 := r.ReadArrayStart()
			if yyl1712 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1712, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1713Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1713Slc
	var yyhl1713 bool = l >= 0
	for yyj1713 := 0; ; yyj1713++ {
		if yyhl1713 {
			if yyj1713 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1713Slc = r.DecodeBytes(yys1713Slc, true, true)
		yys1713 := string(yys1713Slc)
		switch yys1713 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1716 := &x.ObjectMeta
				yyv1716.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1717 := &x.Spec
				yyv1717.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1718 := &x.Status
				yyv1718.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1713)
		} // end switch yys1713
	} // end for yyj1713
	if !yyhl1713 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1719 int
	var yyb1719 bool
	var yyhl1719 bool = l >= 0
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1722 := &x.ObjectMeta
		yyv1722.CodecDecodeSelf(d)
	}
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1723 := &x.Spec
		yyv1723.CodecDecodeSelf(d)
	}
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1724 := &x.Status
		yyv1724.CodecDecodeSelf(d)
	}
	for {
		yyj1719++
		if yyhl1719 {
			yyb1719 = yyj1719 > l
		} else {
			yyb1719 = r.CheckBreak()
		}
		if yyb1719 {
			break
		}
		z.DecStructFieldNotFound(yyj1719-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1725 := z.EncBinary()
		_ = yym1725
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1726 := !z.EncBinary()
			yy2arr1726 := z.EncBasicHandle().StructToArray
			var yyq1726 [4]bool
			_, _, _ = yysep1726, yyq1726, yy2arr1726
			const yyr1726 bool = false
			yyq1726[0] = x.Kind != ""
			yyq1726[1] = x.APIVersion != ""
			yyq1726[2] = true
			if yyr1726 || yy2arr1726 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1726 int = 1
				for _, b := range yyq1726 {
					if b {
						yynn1726++
					}
				}
				r.EncodeMapStart(yynn1726)
			}
			if yyr1726 || yy2arr1726 {
				if yyq1726[0] {
					yym1728 := z.EncBinary()
					_ = yym1728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1726[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1726 || yy2arr1726 {
				if yyq1726[1] {
					yym1731 := z.EncBinary()
					_ = yym1731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1726[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1732 := z.EncBinary()
					_ = yym1732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1726 || yy2arr1726 {
				if yyq1726[2] {
					yy1734 := &x.ListMeta
					yym1735 := z.EncBinary()
					_ = yym1735
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1734) {
					} else {
						z.EncFallback(yy1734)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1726[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1736 := &x.ListMeta
					yym1737 := z.EncBinary()
					_ = yym1737
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1736) {
					} else {
						z.EncFallback(yy1736)
					}
				}
			}
			if yyr1726 || yy2arr1726 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1739 := z.EncBinary()
					_ = yym1739
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1740 := z.EncBinary()
					_ = yym1740
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1726 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1741 := z.DecBinary()
	_ = yym1741
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1742 := r.ReadMapStart()
			if yyl1742 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1742, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1742 := r.ReadArrayStart()
			if yyl1742 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1742, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1743Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1743Slc
	var yyhl1743 bool = l >= 0
	for yyj1743 := 0; ; yyj1743++ {
		if yyhl1743 {
			if yyj1743 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1743Slc = r.DecodeBytes(yys1743Slc, true, true)
		yys1743 := string(yys1743Slc)
		switch yys1743 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1746 := &x.ListMeta
				yym1747 := z.DecBinary()
				_ = yym1747
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1746) {
				} else {
					z.DecFallback(yyv1746, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1748 := &x.Items
				yym1749 := z.DecBinary()
				_ = yym1749
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1748), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1743)
		} // end switch yys1743
	} // end for yyj1743
	if !yyhl1743 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1750 int
	var yyb1750 bool
	var yyhl1750 bool = l >= 0
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1753 := &x.ListMeta
		yym1754 := z.DecBinary()
		_ = yym1754
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1753) {
		} else {
			z.DecFallback(yyv1753, false)
		}
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1755 := &x.Items
		yym1756 := z.DecBinary()
		_ = yym1756
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1755), d)
		}
	}
	for {
		yyj1750++
		if yyhl1750 {
			yyb1750 = yyj1750 > l
		} else {
			yyb1750 = r.CheckBreak()
		}
		if yyb1750 {
			break
		}
		z.DecStructFieldNotFound(yyj1750-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1757 := z.EncBinary()
	_ = yym1757
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1758 := z.DecBinary()
	_ = yym1758
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1759 := z.EncBinary()
	_ = yym1759
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1760 := z.DecBinary()
	_ = yym1760
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1761 := z.EncBinary()
		_ = yym1761
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1762 := !z.EncBinary()
			yy2arr1762 := z.EncBasicHandle().StructToArray
			var yyq1762 [1]bool
			_, _, _ = yysep1762, yyq1762, yy2arr1762
			const yyr1762 bool = false
			yyq1762[0] = true
			if yyr1762 || yy2arr1762 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1762 int = 0
				for _, b := range yyq1762 {
					if b {
						yynn1762++
					}
				}
				r.EncodeMapStart(yynn1762)
			}
			if yyr1762 || yy2arr1762 {
				if yyq1762[0] {
					yy1764 := &x.LoadBalancer
					yy1764.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1762[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1765 := &x.LoadBalancer
					yy1765.CodecEncodeSelf(e)
				}
			}
			if yysep1762 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1766 := z.DecBinary()
	_ = yym1766
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1767 := r.ReadMapStart()
			if yyl1767 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1767, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1767 := r.ReadArrayStart()
			if yyl1767 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1767, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1768Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1768Slc
	var yyhl1768 bool = l >= 0
	for yyj1768 := 0; ; yyj1768++ {
		if yyhl1768 {
			if yyj1768 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1768Slc = r.DecodeBytes(yys1768Slc, true, true)
		yys1768 := string(yys1768Slc)
		switch yys1768 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1769 := &x.LoadBalancer
				yyv1769.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1768)
		} // end switch yys1768
	} // end for yyj1768
	if !yyhl1768 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1770 int
	var yyb1770 bool
	var yyhl1770 bool = l >= 0
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1771 := &x.LoadBalancer
		yyv1771.CodecDecodeSelf(d)
	}
	for {
		yyj1770++
		if yyhl1770 {
			yyb1770 = yyj1770 > l
		} else {
			yyb1770 = r.CheckBreak()
		}
		if yyb1770 {
			break
		}
		z.DecStructFieldNotFound(yyj1770-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1772 := z.EncBinary()
		_ = yym1772
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1773 := !z.EncBinary()
			yy2arr1773 := z.EncBasicHandle().StructToArray
			var yyq1773 [1]bool
			_, _, _ = yysep1773, yyq1773, yy2arr1773
			const yyr1773 bool = false
			yyq1773[0] = len(x.Ingress) != 0
			if yyr1773 || yy2arr1773 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1773 int = 0
				for _, b := range yyq1773 {
					if b {
						yynn1773++
					}
				}
				r.EncodeMapStart(yynn1773)
			}
			if yyr1773 || yy2arr1773 {
				if yyq1773[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1775 := z.EncBinary()
						_ = yym1775
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1773[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1776 := z.EncBinary()
						_ = yym1776
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1773 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1777 := z.DecBinary()
	_ = yym1777
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1778 := r.ReadMapStart()
			if yyl1778 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1778, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1778 := r.ReadArrayStart()
			if yyl1778 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1778, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1779Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1779Slc
	var yyhl1779 bool = l >= 0
	for yyj1779 := 0; ; yyj1779++ {
		if yyhl1779 {
			if yyj1779 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1779Slc = r.DecodeBytes(yys1779Slc, true, true)
		yys1779 := string(yys1779Slc)
		switch yys1779 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1780 := &x.Ingress
				yym1781 := z.DecBinary()
				_ = yym1781
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1780), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1779)
		} // end switch yys1779
	} // end for yyj1779
	if !yyhl1779 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1782 int
	var yyb1782 bool
	var yyhl1782 bool = l >= 0
	yyj1782++
	if yyhl1782 {
		yyb1782 = yyj1782 > l
	} else {
		yyb1782 = r.CheckBreak()
	}
	if yyb1782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1783 := &x.Ingress
		yym1784 := z.DecBinary()
		_ = yym1784
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1783), d)
		}
	}
	for {
		yyj1782++
		if yyhl1782 {
			yyb1782 = yyj1782 > l
		} else {
			yyb1782 = r.CheckBreak()
		}
		if yyb1782 {
			break
		}
		z.DecStructFieldNotFound(yyj1782-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1785 := z.EncBinary()
		_ = yym1785
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1786 := !z.EncBinary()
			yy2arr1786 := z.EncBasicHandle().StructToArray
			var yyq1786 [2]bool
			_, _, _ = yysep1786, yyq1786, yy2arr1786
			const yyr1786 bool = false
			yyq1786[0] = x.IP != ""
			yyq1786[1] = x.Hostname != ""
			if yyr1786 || yy2arr1786 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1786 int = 0
				for _, b := range yyq1786 {
					if b {
						yynn1786++
					}
				}
				r.EncodeMapStart(yynn1786)
			}
			if yyr1786 || yy2arr1786 {
				if yyq1786[0] {
					yym1788 := z.EncBinary()
					_ = yym1788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1786[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1789 := z.EncBinary()
					_ = yym1789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1786 || yy2arr1786 {
				if yyq1786[1] {
					yym1791 := z.EncBinary()
					_ = yym1791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1786[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1792 := z.EncBinary()
					_ = yym1792
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1786 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1793 := z.DecBinary()
	_ = yym1793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1794 := r.ReadMapStart()
			if yyl1794 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1794, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1794 := r.ReadArrayStart()
			if yyl1794 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1794, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1795Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1795Slc
	var yyhl1795 bool = l >= 0
	for yyj1795 := 0; ; yyj1795++ {
		if yyhl1795 {
			if yyj1795 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1795Slc = r.DecodeBytes(yys1795Slc, true, true)
		yys1795 := string(yys1795Slc)
		switch yys1795 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1795)
		} // end switch yys1795
	} // end for yyj1795
	if !yyhl1795 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1798 int
	var yyb1798 bool
	var yyhl1798 bool = l >= 0
	yyj1798++
	if yyhl1798 {
		yyb1798 = yyj1798 > l
	} else {
		yyb1798 = r.CheckBreak()
	}
	if yyb1798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1798++
	if yyhl1798 {
		yyb1798 = yyj1798 > l
	} else {
		yyb1798 = r.CheckBreak()
	}
	if yyb1798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1798++
		if yyhl1798 {
			yyb1798 = yyj1798 > l
		} else {
			yyb1798 = r.CheckBreak()
		}
		if yyb1798 {
			break
		}
		z.DecStructFieldNotFound(yyj1798-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1801 := z.EncBinary()
		_ = yym1801
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1802 := !z.EncBinary()
			yy2arr1802 := z.EncBasicHandle().StructToArray
			var yyq1802 [8]bool
			_, _, _ = yysep1802, yyq1802, yy2arr1802
			const yyr1802 bool = false
			yyq1802[1] = len(x.Selector) != 0
			yyq1802[2] = x.ClusterIP != ""
			yyq1802[3] = x.Type != ""
			yyq1802[4] = len(x.ExternalIPs) != 0
			yyq1802[5] = len(x.DeprecatedPublicIPs) != 0
			yyq1802[6] = x.SessionAffinity != ""
			yyq1802[7] = x.LoadBalancerIP != ""
			if yyr1802 || yy2arr1802 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1802 int = 1
				for _, b := range yyq1802 {
					if b {
						yynn1802++
					}
				}
				r.EncodeMapStart(yynn1802)
			}
			if yyr1802 || yy2arr1802 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1804 := z.EncBinary()
					_ = yym1804
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1805 := z.EncBinary()
					_ = yym1805
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1802 || yy2arr1802 {
				if yyq1802[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1807 := z.EncBinary()
						_ = yym1807
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1802[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1808 := z.EncBinary()
						_ = yym1808
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1802 || yy2arr1802 {
				if yyq1802[2] {
					yym1810 := z.EncBinary()
					_ = yym1810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1802[2] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1811 := z.EncBinary()
					_ = yym1811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1802 || yy2arr1802 {
				if yyq1802[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1802[3] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1802 || yy2arr1802 {
				if yyq1802[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1814 := z.EncBinary()
						_ = yym1814
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1802[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1815 := z.EncBinary()
						_ = yym1815
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1802 || yy2arr1802 {
				if yyq1802[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1817 := z.EncBinary()
						_ = yym1817
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1802[5] {
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1818 := z.EncBinary()
						_ = yym1818
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr1802 || yy2arr1802 {
				if yyq1802[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1802[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1802 || yy2arr1802 {
				if yyq1802[7] {
					yym1821 := z.EncBinary()
					_ = yym1821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1802[7] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1822 := z.EncBinary()
					_ = yym1822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yysep1802 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1823 := z.DecBinary()
	_ = yym1823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1824 := r.ReadMapStart()
			if yyl1824 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1824, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1824 := r.ReadArrayStart()
			if yyl1824 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1825Slc
	var yyhl1825 bool = l >= 0
	for yyj1825 := 0; ; yyj1825++ {
		if yyhl1825 {
			if yyj1825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1825Slc = r.DecodeBytes(yys1825Slc, true, true)
		yys1825 := string(yys1825Slc)
		switch yys1825 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1826 := &x.Ports
				yym1827 := z.DecBinary()
				_ = yym1827
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1826), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1828 := &x.Selector
				yym1829 := z.DecBinary()
				_ = yym1829
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1828, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1832 := &x.ExternalIPs
				yym1833 := z.DecBinary()
				_ = yym1833
				if false {
				} else {
					z.F.DecSliceStringX(yyv1832, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv1834 := &x.DeprecatedPublicIPs
				yym1835 := z.DecBinary()
				_ = yym1835
				if false {
				} else {
					z.F.DecSliceStringX(yyv1834, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1825)
		} // end switch yys1825
	} // end for yyj1825
	if !yyhl1825 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1838 int
	var yyb1838 bool
	var yyhl1838 bool = l >= 0
	yyj1838++
	if yyhl1838 {
		yyb1838 = yyj1838 > l
	} else {
		yyb1838 = r.CheckBreak()
	}
	if yyb1838 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1839 := &x.Ports
		yym1840 := z.DecBinary()
		_ = yym1840
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1839), d)
		}
	}
	yyj1838++
	if yyhl1838 {
		yyb1838 = yyj1838 > l
	} else {
		yyb1838 = r.CheckBreak()
	}
	if yyb1838 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1841 := &x.Selector
		yym1842 := z.DecBinary()
		_ = yym1842
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1841, false, d)
		}
	}
	yyj1838++
	if yyhl1838 {
		yyb1838 = yyj1838 > l
	} else {
		yyb1838 = r.CheckBreak()
	}
	if yyb1838 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1838++
	if yyhl1838 {
		yyb1838 = yyj1838 > l
	} else {
		yyb1838 = r.CheckBreak()
	}
	if yyb1838 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1838++
	if yyhl1838 {
		yyb1838 = yyj1838 > l
	} else {
		yyb1838 = r.CheckBreak()
	}
	if yyb1838 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1845 := &x.ExternalIPs
		yym1846 := z.DecBinary()
		_ = yym1846
		if false {
		} else {
			z.F.DecSliceStringX(yyv1845, false, d)
		}
	}
	yyj1838++
	if yyhl1838 {
		yyb1838 = yyj1838 > l
	} else {
		yyb1838 = r.CheckBreak()
	}
	if yyb1838 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv1847 := &x.DeprecatedPublicIPs
		yym1848 := z.DecBinary()
		_ = yym1848
		if false {
		} else {
			z.F.DecSliceStringX(yyv1847, false, d)
		}
	}
	yyj1838++
	if yyhl1838 {
		yyb1838 = yyj1838 > l
	} else {
		yyb1838 = r.CheckBreak()
	}
	if yyb1838 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj1838++
	if yyhl1838 {
		yyb1838 = yyj1838 > l
	} else {
		yyb1838 = r.CheckBreak()
	}
	if yyb1838 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj1838++
		if yyhl1838 {
			yyb1838 = yyj1838 > l
		} else {
			yyb1838 = r.CheckBreak()
		}
		if yyb1838 {
			break
		}
		z.DecStructFieldNotFound(yyj1838-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1851 := z.EncBinary()
		_ = yym1851
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1852 := !z.EncBinary()
			yy2arr1852 := z.EncBasicHandle().StructToArray
			var yyq1852 [5]bool
			_, _, _ = yysep1852, yyq1852, yy2arr1852
			const yyr1852 bool = false
			yyq1852[0] = x.Name != ""
			yyq1852[1] = x.Protocol != ""
			yyq1852[3] = true
			yyq1852[4] = x.NodePort != 0
			if yyr1852 || yy2arr1852 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1852 int = 1
				for _, b := range yyq1852 {
					if b {
						yynn1852++
					}
				}
				r.EncodeMapStart(yynn1852)
			}
			if yyr1852 || yy2arr1852 {
				if yyq1852[0] {
					yym1854 := z.EncBinary()
					_ = yym1854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1852[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym1855 := z.EncBinary()
					_ = yym1855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1852 || yy2arr1852 {
				if yyq1852[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1852[1] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1852 || yy2arr1852 {
				yym1858 := z.EncBinary()
				_ = yym1858
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym1859 := z.EncBinary()
				_ = yym1859
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1852 || yy2arr1852 {
				if yyq1852[3] {
					yy1861 := &x.TargetPort
					yym1862 := z.EncBinary()
					_ = yym1862
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1861) {
					} else if !yym1862 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1861)
					} else {
						z.EncFallback(yy1861)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1852[3] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					yy1863 := &x.TargetPort
					yym1864 := z.EncBinary()
					_ = yym1864
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1863) {
					} else if !yym1864 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1863)
					} else {
						z.EncFallback(yy1863)
					}
				}
			}
			if yyr1852 || yy2arr1852 {
				if yyq1852[4] {
					yym1866 := z.EncBinary()
					_ = yym1866
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1852[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					yym1867 := z.EncBinary()
					_ = yym1867
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yysep1852 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1868 := z.DecBinary()
	_ = yym1868
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1869 := r.ReadMapStart()
			if yyl1869 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1869, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1869 := r.ReadArrayStart()
			if yyl1869 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1869, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1870Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1870Slc
	var yyhl1870 bool = l >= 0
	for yyj1870 := 0; ; yyj1870++ {
		if yyhl1870 {
			if yyj1870 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1870Slc = r.DecodeBytes(yys1870Slc, true, true)
		yys1870 := string(yys1870Slc)
		switch yys1870 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_util.IntOrString{}
			} else {
				yyv1874 := &x.TargetPort
				yym1875 := z.DecBinary()
				_ = yym1875
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1874) {
				} else if !yym1875 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1874)
				} else {
					z.DecFallback(yyv1874, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1870)
		} // end switch yys1870
	} // end for yyj1870
	if !yyhl1870 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1877 int
	var yyb1877 bool
	var yyhl1877 bool = l >= 0
	yyj1877++
	if yyhl1877 {
		yyb1877 = yyj1877 > l
	} else {
		yyb1877 = r.CheckBreak()
	}
	if yyb1877 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1877++
	if yyhl1877 {
		yyb1877 = yyj1877 > l
	} else {
		yyb1877 = r.CheckBreak()
	}
	if yyb1877 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1877++
	if yyhl1877 {
		yyb1877 = yyj1877 > l
	} else {
		yyb1877 = r.CheckBreak()
	}
	if yyb1877 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1877++
	if yyhl1877 {
		yyb1877 = yyj1877 > l
	} else {
		yyb1877 = r.CheckBreak()
	}
	if yyb1877 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_util.IntOrString{}
	} else {
		yyv1881 := &x.TargetPort
		yym1882 := z.DecBinary()
		_ = yym1882
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1881) {
		} else if !yym1882 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1881)
		} else {
			z.DecFallback(yyv1881, false)
		}
	}
	yyj1877++
	if yyhl1877 {
		yyb1877 = yyj1877 > l
	} else {
		yyb1877 = r.CheckBreak()
	}
	if yyb1877 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1877++
		if yyhl1877 {
			yyb1877 = yyj1877 > l
		} else {
			yyb1877 = r.CheckBreak()
		}
		if yyb1877 {
			break
		}
		z.DecStructFieldNotFound(yyj1877-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1884 := z.EncBinary()
		_ = yym1884
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1885 := !z.EncBinary()
			yy2arr1885 := z.EncBasicHandle().StructToArray
			var yyq1885 [5]bool
			_, _, _ = yysep1885, yyq1885, yy2arr1885
			const yyr1885 bool = false
			yyq1885[0] = x.Kind != ""
			yyq1885[1] = x.APIVersion != ""
			yyq1885[2] = true
			yyq1885[3] = true
			yyq1885[4] = true
			if yyr1885 || yy2arr1885 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1885 int = 0
				for _, b := range yyq1885 {
					if b {
						yynn1885++
					}
				}
				r.EncodeMapStart(yynn1885)
			}
			if yyr1885 || yy2arr1885 {
				if yyq1885[0] {
					yym1887 := z.EncBinary()
					_ = yym1887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1885[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1888 := z.EncBinary()
					_ = yym1888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1885 || yy2arr1885 {
				if yyq1885[1] {
					yym1890 := z.EncBinary()
					_ = yym1890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1885[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1891 := z.EncBinary()
					_ = yym1891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1885 || yy2arr1885 {
				if yyq1885[2] {
					yy1893 := &x.ObjectMeta
					yy1893.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1885[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1894 := &x.ObjectMeta
					yy1894.CodecEncodeSelf(e)
				}
			}
			if yyr1885 || yy2arr1885 {
				if yyq1885[3] {
					yy1896 := &x.Spec
					yy1896.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1885[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1897 := &x.Spec
					yy1897.CodecEncodeSelf(e)
				}
			}
			if yyr1885 || yy2arr1885 {
				if yyq1885[4] {
					yy1899 := &x.Status
					yy1899.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1885[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1900 := &x.Status
					yy1900.CodecEncodeSelf(e)
				}
			}
			if yysep1885 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1901 := z.DecBinary()
	_ = yym1901
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1902 := r.ReadMapStart()
			if yyl1902 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1902, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1902 := r.ReadArrayStart()
			if yyl1902 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1902, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1903Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1903Slc
	var yyhl1903 bool = l >= 0
	for yyj1903 := 0; ; yyj1903++ {
		if yyhl1903 {
			if yyj1903 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1903Slc = r.DecodeBytes(yys1903Slc, true, true)
		yys1903 := string(yys1903Slc)
		switch yys1903 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1906 := &x.ObjectMeta
				yyv1906.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv1907 := &x.Spec
				yyv1907.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv1908 := &x.Status
				yyv1908.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1903)
		} // end switch yys1903
	} // end for yyj1903
	if !yyhl1903 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1909 int
	var yyb1909 bool
	var yyhl1909 bool = l >= 0
	yyj1909++
	if yyhl1909 {
		yyb1909 = yyj1909 > l
	} else {
		yyb1909 = r.CheckBreak()
	}
	if yyb1909 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1909++
	if yyhl1909 {
		yyb1909 = yyj1909 > l
	} else {
		yyb1909 = r.CheckBreak()
	}
	if yyb1909 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1909++
	if yyhl1909 {
		yyb1909 = yyj1909 > l
	} else {
		yyb1909 = r.CheckBreak()
	}
	if yyb1909 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1912 := &x.ObjectMeta
		yyv1912.CodecDecodeSelf(d)
	}
	yyj1909++
	if yyhl1909 {
		yyb1909 = yyj1909 > l
	} else {
		yyb1909 = r.CheckBreak()
	}
	if yyb1909 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv1913 := &x.Spec
		yyv1913.CodecDecodeSelf(d)
	}
	yyj1909++
	if yyhl1909 {
		yyb1909 = yyj1909 > l
	} else {
		yyb1909 = r.CheckBreak()
	}
	if yyb1909 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv1914 := &x.Status
		yyv1914.CodecDecodeSelf(d)
	}
	for {
		yyj1909++
		if yyhl1909 {
			yyb1909 = yyj1909 > l
		} else {
			yyb1909 = r.CheckBreak()
		}
		if yyb1909 {
			break
		}
		z.DecStructFieldNotFound(yyj1909-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1915 := z.EncBinary()
		_ = yym1915
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1916 := !z.EncBinary()
			yy2arr1916 := z.EncBasicHandle().StructToArray
			var yyq1916 [4]bool
			_, _, _ = yysep1916, yyq1916, yy2arr1916
			const yyr1916 bool = false
			yyq1916[0] = x.Kind != ""
			yyq1916[1] = x.APIVersion != ""
			yyq1916[2] = true
			if yyr1916 || yy2arr1916 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1916 int = 1
				for _, b := range yyq1916 {
					if b {
						yynn1916++
					}
				}
				r.EncodeMapStart(yynn1916)
			}
			if yyr1916 || yy2arr1916 {
				if yyq1916[0] {
					yym1918 := z.EncBinary()
					_ = yym1918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1916[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1919 := z.EncBinary()
					_ = yym1919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				if yyq1916[1] {
					yym1921 := z.EncBinary()
					_ = yym1921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1916[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1922 := z.EncBinary()
					_ = yym1922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				if yyq1916[2] {
					yy1924 := &x.ListMeta
					yym1925 := z.EncBinary()
					_ = yym1925
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1924) {
					} else {
						z.EncFallback(yy1924)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1916[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1926 := &x.ListMeta
					yym1927 := z.EncBinary()
					_ = yym1927
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1926) {
					} else {
						z.EncFallback(yy1926)
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1929 := z.EncBinary()
					_ = yym1929
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1930 := z.EncBinary()
					_ = yym1930
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1916 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1931 := z.DecBinary()
	_ = yym1931
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1932 := r.ReadMapStart()
			if yyl1932 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1932, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1932 := r.ReadArrayStart()
			if yyl1932 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1932, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1933Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1933Slc
	var yyhl1933 bool = l >= 0
	for yyj1933 := 0; ; yyj1933++ {
		if yyhl1933 {
			if yyj1933 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1933Slc = r.DecodeBytes(yys1933Slc, true, true)
		yys1933 := string(yys1933Slc)
		switch yys1933 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1936 := &x.ListMeta
				yym1937 := z.DecBinary()
				_ = yym1937
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1936) {
				} else {
					z.DecFallback(yyv1936, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1938 := &x.Items
				yym1939 := z.DecBinary()
				_ = yym1939
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1938), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1933)
		} // end switch yys1933
	} // end for yyj1933
	if !yyhl1933 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1940 int
	var yyb1940 bool
	var yyhl1940 bool = l >= 0
	yyj1940++
	if yyhl1940 {
		yyb1940 = yyj1940 > l
	} else {
		yyb1940 = r.CheckBreak()
	}
	if yyb1940 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1940++
	if yyhl1940 {
		yyb1940 = yyj1940 > l
	} else {
		yyb1940 = r.CheckBreak()
	}
	if yyb1940 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1940++
	if yyhl1940 {
		yyb1940 = yyj1940 > l
	} else {
		yyb1940 = r.CheckBreak()
	}
	if yyb1940 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1943 := &x.ListMeta
		yym1944 := z.DecBinary()
		_ = yym1944
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1943) {
		} else {
			z.DecFallback(yyv1943, false)
		}
	}
	yyj1940++
	if yyhl1940 {
		yyb1940 = yyj1940 > l
	} else {
		yyb1940 = r.CheckBreak()
	}
	if yyb1940 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1945 := &x.Items
		yym1946 := z.DecBinary()
		_ = yym1946
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1945), d)
		}
	}
	for {
		yyj1940++
		if yyhl1940 {
			yyb1940 = yyj1940 > l
		} else {
			yyb1940 = r.CheckBreak()
		}
		if yyb1940 {
			break
		}
		z.DecStructFieldNotFound(yyj1940-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1947 := z.EncBinary()
		_ = yym1947
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1948 := !z.EncBinary()
			yy2arr1948 := z.EncBasicHandle().StructToArray
			var yyq1948 [5]bool
			_, _, _ = yysep1948, yyq1948, yy2arr1948
			const yyr1948 bool = false
			yyq1948[0] = x.Kind != ""
			yyq1948[1] = x.APIVersion != ""
			yyq1948[2] = true
			yyq1948[3] = len(x.Secrets) != 0
			yyq1948[4] = len(x.ImagePullSecrets) != 0
			if yyr1948 || yy2arr1948 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1948 int = 0
				for _, b := range yyq1948 {
					if b {
						yynn1948++
					}
				}
				r.EncodeMapStart(yynn1948)
			}
			if yyr1948 || yy2arr1948 {
				if yyq1948[0] {
					yym1950 := z.EncBinary()
					_ = yym1950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1948[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1951 := z.EncBinary()
					_ = yym1951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				if yyq1948[1] {
					yym1953 := z.EncBinary()
					_ = yym1953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1948[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1954 := z.EncBinary()
					_ = yym1954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				if yyq1948[2] {
					yy1956 := &x.ObjectMeta
					yy1956.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1948[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1957 := &x.ObjectMeta
					yy1957.CodecEncodeSelf(e)
				}
			}
			if yyr1948 || yy2arr1948 {
				if yyq1948[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym1959 := z.EncBinary()
						_ = yym1959
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1948[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym1960 := z.EncBinary()
						_ = yym1960
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				if yyq1948[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1962 := z.EncBinary()
						_ = yym1962
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1948[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1963 := z.EncBinary()
						_ = yym1963
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1948 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1964 := z.DecBinary()
	_ = yym1964
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1965 := r.ReadMapStart()
			if yyl1965 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1965, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1965 := r.ReadArrayStart()
			if yyl1965 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1965, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1966Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1966Slc
	var yyhl1966 bool = l >= 0
	for yyj1966 := 0; ; yyj1966++ {
		if yyhl1966 {
			if yyj1966 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1966Slc = r.DecodeBytes(yys1966Slc, true, true)
		yys1966 := string(yys1966Slc)
		switch yys1966 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1969 := &x.ObjectMeta
				yyv1969.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv1970 := &x.Secrets
				yym1971 := z.DecBinary()
				_ = yym1971
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv1970), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1972 := &x.ImagePullSecrets
				yym1973 := z.DecBinary()
				_ = yym1973
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1972), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1966)
		} // end switch yys1966
	} // end for yyj1966
	if !yyhl1966 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1974 int
	var yyb1974 bool
	var yyhl1974 bool = l >= 0
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1977 := &x.ObjectMeta
		yyv1977.CodecDecodeSelf(d)
	}
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv1978 := &x.Secrets
		yym1979 := z.DecBinary()
		_ = yym1979
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv1978), d)
		}
	}
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1980 := &x.ImagePullSecrets
		yym1981 := z.DecBinary()
		_ = yym1981
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1980), d)
		}
	}
	for {
		yyj1974++
		if yyhl1974 {
			yyb1974 = yyj1974 > l
		} else {
			yyb1974 = r.CheckBreak()
		}
		if yyb1974 {
			break
		}
		z.DecStructFieldNotFound(yyj1974-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1982 := z.EncBinary()
		_ = yym1982
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1983 := !z.EncBinary()
			yy2arr1983 := z.EncBasicHandle().StructToArray
			var yyq1983 [4]bool
			_, _, _ = yysep1983, yyq1983, yy2arr1983
			const yyr1983 bool = false
			yyq1983[0] = x.Kind != ""
			yyq1983[1] = x.APIVersion != ""
			yyq1983[2] = true
			if yyr1983 || yy2arr1983 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1983 int = 1
				for _, b := range yyq1983 {
					if b {
						yynn1983++
					}
				}
				r.EncodeMapStart(yynn1983)
			}
			if yyr1983 || yy2arr1983 {
				if yyq1983[0] {
					yym1985 := z.EncBinary()
					_ = yym1985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1983[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1986 := z.EncBinary()
					_ = yym1986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1983 || yy2arr1983 {
				if yyq1983[1] {
					yym1988 := z.EncBinary()
					_ = yym1988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1983[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1989 := z.EncBinary()
					_ = yym1989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1983 || yy2arr1983 {
				if yyq1983[2] {
					yy1991 := &x.ListMeta
					yym1992 := z.EncBinary()
					_ = yym1992
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1991) {
					} else {
						z.EncFallback(yy1991)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1983[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1993 := &x.ListMeta
					yym1994 := z.EncBinary()
					_ = yym1994
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1993) {
					} else {
						z.EncFallback(yy1993)
					}
				}
			}
			if yyr1983 || yy2arr1983 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1996 := z.EncBinary()
					_ = yym1996
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1997 := z.EncBinary()
					_ = yym1997
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep1983 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1998 := z.DecBinary()
	_ = yym1998
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1999 := r.ReadMapStart()
			if yyl1999 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1999, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1999 := r.ReadArrayStart()
			if yyl1999 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1999, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2000Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2000Slc
	var yyhl2000 bool = l >= 0
	for yyj2000 := 0; ; yyj2000++ {
		if yyhl2000 {
			if yyj2000 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2000Slc = r.DecodeBytes(yys2000Slc, true, true)
		yys2000 := string(yys2000Slc)
		switch yys2000 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2003 := &x.ListMeta
				yym2004 := z.DecBinary()
				_ = yym2004
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2003) {
				} else {
					z.DecFallback(yyv2003, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2005 := &x.Items
				yym2006 := z.DecBinary()
				_ = yym2006
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2005), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2000)
		} // end switch yys2000
	} // end for yyj2000
	if !yyhl2000 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2007 int
	var yyb2007 bool
	var yyhl2007 bool = l >= 0
	yyj2007++
	if yyhl2007 {
		yyb2007 = yyj2007 > l
	} else {
		yyb2007 = r.CheckBreak()
	}
	if yyb2007 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2007++
	if yyhl2007 {
		yyb2007 = yyj2007 > l
	} else {
		yyb2007 = r.CheckBreak()
	}
	if yyb2007 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2007++
	if yyhl2007 {
		yyb2007 = yyj2007 > l
	} else {
		yyb2007 = r.CheckBreak()
	}
	if yyb2007 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2010 := &x.ListMeta
		yym2011 := z.DecBinary()
		_ = yym2011
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2010) {
		} else {
			z.DecFallback(yyv2010, false)
		}
	}
	yyj2007++
	if yyhl2007 {
		yyb2007 = yyj2007 > l
	} else {
		yyb2007 = r.CheckBreak()
	}
	if yyb2007 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2012 := &x.Items
		yym2013 := z.DecBinary()
		_ = yym2013
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2012), d)
		}
	}
	for {
		yyj2007++
		if yyhl2007 {
			yyb2007 = yyj2007 > l
		} else {
			yyb2007 = r.CheckBreak()
		}
		if yyb2007 {
			break
		}
		z.DecStructFieldNotFound(yyj2007-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2014 := z.EncBinary()
		_ = yym2014
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2015 := !z.EncBinary()
			yy2arr2015 := z.EncBasicHandle().StructToArray
			var yyq2015 [4]bool
			_, _, _ = yysep2015, yyq2015, yy2arr2015
			const yyr2015 bool = false
			yyq2015[0] = x.Kind != ""
			yyq2015[1] = x.APIVersion != ""
			yyq2015[2] = true
			if yyr2015 || yy2arr2015 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2015 int = 1
				for _, b := range yyq2015 {
					if b {
						yynn2015++
					}
				}
				r.EncodeMapStart(yynn2015)
			}
			if yyr2015 || yy2arr2015 {
				if yyq2015[0] {
					yym2017 := z.EncBinary()
					_ = yym2017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2015[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2018 := z.EncBinary()
					_ = yym2018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2015 || yy2arr2015 {
				if yyq2015[1] {
					yym2020 := z.EncBinary()
					_ = yym2020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2015[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2021 := z.EncBinary()
					_ = yym2021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2015 || yy2arr2015 {
				if yyq2015[2] {
					yy2023 := &x.ObjectMeta
					yy2023.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2015[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2024 := &x.ObjectMeta
					yy2024.CodecEncodeSelf(e)
				}
			}
			if yyr2015 || yy2arr2015 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2026 := z.EncBinary()
					_ = yym2026
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2027 := z.EncBinary()
					_ = yym2027
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2015 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2028 := z.DecBinary()
	_ = yym2028
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2029 := r.ReadMapStart()
			if yyl2029 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2029, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2029 := r.ReadArrayStart()
			if yyl2029 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2029, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2030Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2030Slc
	var yyhl2030 bool = l >= 0
	for yyj2030 := 0; ; yyj2030++ {
		if yyhl2030 {
			if yyj2030 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2030Slc = r.DecodeBytes(yys2030Slc, true, true)
		yys2030 := string(yys2030Slc)
		switch yys2030 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2033 := &x.ObjectMeta
				yyv2033.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2034 := &x.Subsets
				yym2035 := z.DecBinary()
				_ = yym2035
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2034), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2030)
		} // end switch yys2030
	} // end for yyj2030
	if !yyhl2030 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2036 int
	var yyb2036 bool
	var yyhl2036 bool = l >= 0
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2039 := &x.ObjectMeta
		yyv2039.CodecDecodeSelf(d)
	}
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2040 := &x.Subsets
		yym2041 := z.DecBinary()
		_ = yym2041
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2040), d)
		}
	}
	for {
		yyj2036++
		if yyhl2036 {
			yyb2036 = yyj2036 > l
		} else {
			yyb2036 = r.CheckBreak()
		}
		if yyb2036 {
			break
		}
		z.DecStructFieldNotFound(yyj2036-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2042 := z.EncBinary()
		_ = yym2042
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2043 := !z.EncBinary()
			yy2arr2043 := z.EncBasicHandle().StructToArray
			var yyq2043 [3]bool
			_, _, _ = yysep2043, yyq2043, yy2arr2043
			const yyr2043 bool = false
			yyq2043[0] = len(x.Addresses) != 0
			yyq2043[1] = len(x.NotReadyAddresses) != 0
			yyq2043[2] = len(x.Ports) != 0
			if yyr2043 || yy2arr2043 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2043 int = 0
				for _, b := range yyq2043 {
					if b {
						yynn2043++
					}
				}
				r.EncodeMapStart(yynn2043)
			}
			if yyr2043 || yy2arr2043 {
				if yyq2043[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2045 := z.EncBinary()
						_ = yym2045
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2043[0] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2046 := z.EncBinary()
						_ = yym2046
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2043 || yy2arr2043 {
				if yyq2043[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2048 := z.EncBinary()
						_ = yym2048
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2043[1] {
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2049 := z.EncBinary()
						_ = yym2049
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2043 || yy2arr2043 {
				if yyq2043[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2051 := z.EncBinary()
						_ = yym2051
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2043[2] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2052 := z.EncBinary()
						_ = yym2052
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yysep2043 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2053 := z.DecBinary()
	_ = yym2053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2054 := r.ReadMapStart()
			if yyl2054 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2054, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2054 := r.ReadArrayStart()
			if yyl2054 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2054, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2055Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2055Slc
	var yyhl2055 bool = l >= 0
	for yyj2055 := 0; ; yyj2055++ {
		if yyhl2055 {
			if yyj2055 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2055Slc = r.DecodeBytes(yys2055Slc, true, true)
		yys2055 := string(yys2055Slc)
		switch yys2055 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2056 := &x.Addresses
				yym2057 := z.DecBinary()
				_ = yym2057
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2056), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2058 := &x.NotReadyAddresses
				yym2059 := z.DecBinary()
				_ = yym2059
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2058), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2060 := &x.Ports
				yym2061 := z.DecBinary()
				_ = yym2061
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2060), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2055)
		} // end switch yys2055
	} // end for yyj2055
	if !yyhl2055 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2062 int
	var yyb2062 bool
	var yyhl2062 bool = l >= 0
	yyj2062++
	if yyhl2062 {
		yyb2062 = yyj2062 > l
	} else {
		yyb2062 = r.CheckBreak()
	}
	if yyb2062 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2063 := &x.Addresses
		yym2064 := z.DecBinary()
		_ = yym2064
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2063), d)
		}
	}
	yyj2062++
	if yyhl2062 {
		yyb2062 = yyj2062 > l
	} else {
		yyb2062 = r.CheckBreak()
	}
	if yyb2062 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2065 := &x.NotReadyAddresses
		yym2066 := z.DecBinary()
		_ = yym2066
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2065), d)
		}
	}
	yyj2062++
	if yyhl2062 {
		yyb2062 = yyj2062 > l
	} else {
		yyb2062 = r.CheckBreak()
	}
	if yyb2062 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2067 := &x.Ports
		yym2068 := z.DecBinary()
		_ = yym2068
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2067), d)
		}
	}
	for {
		yyj2062++
		if yyhl2062 {
			yyb2062 = yyj2062 > l
		} else {
			yyb2062 = r.CheckBreak()
		}
		if yyb2062 {
			break
		}
		z.DecStructFieldNotFound(yyj2062-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2069 := z.EncBinary()
		_ = yym2069
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2070 := !z.EncBinary()
			yy2arr2070 := z.EncBasicHandle().StructToArray
			var yyq2070 [2]bool
			_, _, _ = yysep2070, yyq2070, yy2arr2070
			const yyr2070 bool = false
			yyq2070[1] = x.TargetRef != nil
			if yyr2070 || yy2arr2070 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2070 int = 1
				for _, b := range yyq2070 {
					if b {
						yynn2070++
					}
				}
				r.EncodeMapStart(yynn2070)
			}
			if yyr2070 || yy2arr2070 {
				yym2072 := z.EncBinary()
				_ = yym2072
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				yym2073 := z.EncBinary()
				_ = yym2073
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2070 || yy2arr2070 {
				if yyq2070[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2070[1] {
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2070 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2075 := z.DecBinary()
	_ = yym2075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2076 := r.ReadMapStart()
			if yyl2076 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2076, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2076 := r.ReadArrayStart()
			if yyl2076 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2077Slc
	var yyhl2077 bool = l >= 0
	for yyj2077 := 0; ; yyj2077++ {
		if yyhl2077 {
			if yyj2077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2077Slc = r.DecodeBytes(yys2077Slc, true, true)
		yys2077 := string(yys2077Slc)
		switch yys2077 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2077)
		} // end switch yys2077
	} // end for yyj2077
	if !yyhl2077 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2080 int
	var yyb2080 bool
	var yyhl2080 bool = l >= 0
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2080++
		if yyhl2080 {
			yyb2080 = yyj2080 > l
		} else {
			yyb2080 = r.CheckBreak()
		}
		if yyb2080 {
			break
		}
		z.DecStructFieldNotFound(yyj2080-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2083 := z.EncBinary()
		_ = yym2083
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2084 := !z.EncBinary()
			yy2arr2084 := z.EncBasicHandle().StructToArray
			var yyq2084 [3]bool
			_, _, _ = yysep2084, yyq2084, yy2arr2084
			const yyr2084 bool = false
			yyq2084[0] = x.Name != ""
			yyq2084[2] = x.Protocol != ""
			if yyr2084 || yy2arr2084 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2084 int = 1
				for _, b := range yyq2084 {
					if b {
						yynn2084++
					}
				}
				r.EncodeMapStart(yynn2084)
			}
			if yyr2084 || yy2arr2084 {
				if yyq2084[0] {
					yym2086 := z.EncBinary()
					_ = yym2086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2084[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2087 := z.EncBinary()
					_ = yym2087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2084 || yy2arr2084 {
				yym2089 := z.EncBinary()
				_ = yym2089
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym2090 := z.EncBinary()
				_ = yym2090
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2084 || yy2arr2084 {
				if yyq2084[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2084[2] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yysep2084 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2092 := z.DecBinary()
	_ = yym2092
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2093 := r.ReadMapStart()
			if yyl2093 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2093, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2093 := r.ReadArrayStart()
			if yyl2093 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2093, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2094Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2094Slc
	var yyhl2094 bool = l >= 0
	for yyj2094 := 0; ; yyj2094++ {
		if yyhl2094 {
			if yyj2094 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2094Slc = r.DecodeBytes(yys2094Slc, true, true)
		yys2094 := string(yys2094Slc)
		switch yys2094 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2094)
		} // end switch yys2094
	} // end for yyj2094
	if !yyhl2094 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2098 int
	var yyb2098 bool
	var yyhl2098 bool = l >= 0
	yyj2098++
	if yyhl2098 {
		yyb2098 = yyj2098 > l
	} else {
		yyb2098 = r.CheckBreak()
	}
	if yyb2098 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2098++
	if yyhl2098 {
		yyb2098 = yyj2098 > l
	} else {
		yyb2098 = r.CheckBreak()
	}
	if yyb2098 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2098++
	if yyhl2098 {
		yyb2098 = yyj2098 > l
	} else {
		yyb2098 = r.CheckBreak()
	}
	if yyb2098 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2098++
		if yyhl2098 {
			yyb2098 = yyj2098 > l
		} else {
			yyb2098 = r.CheckBreak()
		}
		if yyb2098 {
			break
		}
		z.DecStructFieldNotFound(yyj2098-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2102 := z.EncBinary()
		_ = yym2102
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2103 := !z.EncBinary()
			yy2arr2103 := z.EncBasicHandle().StructToArray
			var yyq2103 [4]bool
			_, _, _ = yysep2103, yyq2103, yy2arr2103
			const yyr2103 bool = false
			yyq2103[0] = x.Kind != ""
			yyq2103[1] = x.APIVersion != ""
			yyq2103[2] = true
			if yyr2103 || yy2arr2103 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2103 int = 1
				for _, b := range yyq2103 {
					if b {
						yynn2103++
					}
				}
				r.EncodeMapStart(yynn2103)
			}
			if yyr2103 || yy2arr2103 {
				if yyq2103[0] {
					yym2105 := z.EncBinary()
					_ = yym2105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2103[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2106 := z.EncBinary()
					_ = yym2106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2103 || yy2arr2103 {
				if yyq2103[1] {
					yym2108 := z.EncBinary()
					_ = yym2108
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2103[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2109 := z.EncBinary()
					_ = yym2109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2103 || yy2arr2103 {
				if yyq2103[2] {
					yy2111 := &x.ListMeta
					yym2112 := z.EncBinary()
					_ = yym2112
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2111) {
					} else {
						z.EncFallback(yy2111)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2103[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2113 := &x.ListMeta
					yym2114 := z.EncBinary()
					_ = yym2114
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2113) {
					} else {
						z.EncFallback(yy2113)
					}
				}
			}
			if yyr2103 || yy2arr2103 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2116 := z.EncBinary()
					_ = yym2116
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2117 := z.EncBinary()
					_ = yym2117
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2103 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2118 := z.DecBinary()
	_ = yym2118
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2119 := r.ReadMapStart()
			if yyl2119 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2119, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2119 := r.ReadArrayStart()
			if yyl2119 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2119, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2120Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2120Slc
	var yyhl2120 bool = l >= 0
	for yyj2120 := 0; ; yyj2120++ {
		if yyhl2120 {
			if yyj2120 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2120Slc = r.DecodeBytes(yys2120Slc, true, true)
		yys2120 := string(yys2120Slc)
		switch yys2120 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2123 := &x.ListMeta
				yym2124 := z.DecBinary()
				_ = yym2124
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2123) {
				} else {
					z.DecFallback(yyv2123, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2125 := &x.Items
				yym2126 := z.DecBinary()
				_ = yym2126
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2125), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2120)
		} // end switch yys2120
	} // end for yyj2120
	if !yyhl2120 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2127 int
	var yyb2127 bool
	var yyhl2127 bool = l >= 0
	yyj2127++
	if yyhl2127 {
		yyb2127 = yyj2127 > l
	} else {
		yyb2127 = r.CheckBreak()
	}
	if yyb2127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2127++
	if yyhl2127 {
		yyb2127 = yyj2127 > l
	} else {
		yyb2127 = r.CheckBreak()
	}
	if yyb2127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2127++
	if yyhl2127 {
		yyb2127 = yyj2127 > l
	} else {
		yyb2127 = r.CheckBreak()
	}
	if yyb2127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2130 := &x.ListMeta
		yym2131 := z.DecBinary()
		_ = yym2131
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2130) {
		} else {
			z.DecFallback(yyv2130, false)
		}
	}
	yyj2127++
	if yyhl2127 {
		yyb2127 = yyj2127 > l
	} else {
		yyb2127 = r.CheckBreak()
	}
	if yyb2127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2132 := &x.Items
		yym2133 := z.DecBinary()
		_ = yym2133
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2132), d)
		}
	}
	for {
		yyj2127++
		if yyhl2127 {
			yyb2127 = yyj2127 > l
		} else {
			yyb2127 = r.CheckBreak()
		}
		if yyb2127 {
			break
		}
		z.DecStructFieldNotFound(yyj2127-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2134 := z.EncBinary()
		_ = yym2134
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2135 := !z.EncBinary()
			yy2arr2135 := z.EncBasicHandle().StructToArray
			var yyq2135 [4]bool
			_, _, _ = yysep2135, yyq2135, yy2arr2135
			const yyr2135 bool = false
			yyq2135[0] = x.PodCIDR != ""
			yyq2135[1] = x.ExternalID != ""
			yyq2135[2] = x.ProviderID != ""
			yyq2135[3] = x.Unschedulable != false
			if yyr2135 || yy2arr2135 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2135 int = 0
				for _, b := range yyq2135 {
					if b {
						yynn2135++
					}
				}
				r.EncodeMapStart(yynn2135)
			}
			if yyr2135 || yy2arr2135 {
				if yyq2135[0] {
					yym2137 := z.EncBinary()
					_ = yym2137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2135[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2138 := z.EncBinary()
					_ = yym2138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2135 || yy2arr2135 {
				if yyq2135[1] {
					yym2140 := z.EncBinary()
					_ = yym2140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2135[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2141 := z.EncBinary()
					_ = yym2141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2135 || yy2arr2135 {
				if yyq2135[2] {
					yym2143 := z.EncBinary()
					_ = yym2143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2135[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2144 := z.EncBinary()
					_ = yym2144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2135 || yy2arr2135 {
				if yyq2135[3] {
					yym2146 := z.EncBinary()
					_ = yym2146
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2135[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2147 := z.EncBinary()
					_ = yym2147
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2135 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2148 := z.DecBinary()
	_ = yym2148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2149 := r.ReadMapStart()
			if yyl2149 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2149, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2149 := r.ReadArrayStart()
			if yyl2149 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2150Slc
	var yyhl2150 bool = l >= 0
	for yyj2150 := 0; ; yyj2150++ {
		if yyhl2150 {
			if yyj2150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2150Slc = r.DecodeBytes(yys2150Slc, true, true)
		yys2150 := string(yys2150Slc)
		switch yys2150 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2150)
		} // end switch yys2150
	} // end for yyj2150
	if !yyhl2150 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2155 int
	var yyb2155 bool
	var yyhl2155 bool = l >= 0
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2155++
		if yyhl2155 {
			yyb2155 = yyj2155 > l
		} else {
			yyb2155 = r.CheckBreak()
		}
		if yyb2155 {
			break
		}
		z.DecStructFieldNotFound(yyj2155-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2160 := z.EncBinary()
		_ = yym2160
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2161 := !z.EncBinary()
			yy2arr2161 := z.EncBasicHandle().StructToArray
			var yyq2161 [1]bool
			_, _, _ = yysep2161, yyq2161, yy2arr2161
			const yyr2161 bool = false
			if yyr2161 || yy2arr2161 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2161 int = 1
				for _, b := range yyq2161 {
					if b {
						yynn2161++
					}
				}
				r.EncodeMapStart(yynn2161)
			}
			if yyr2161 || yy2arr2161 {
				yym2163 := z.EncBinary()
				_ = yym2163
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2164 := z.EncBinary()
				_ = yym2164
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2161 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2165 := z.DecBinary()
	_ = yym2165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2166 := r.ReadMapStart()
			if yyl2166 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2166, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2166 := r.ReadArrayStart()
			if yyl2166 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2166, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2167Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2167Slc
	var yyhl2167 bool = l >= 0
	for yyj2167 := 0; ; yyj2167++ {
		if yyhl2167 {
			if yyj2167 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2167Slc = r.DecodeBytes(yys2167Slc, true, true)
		yys2167 := string(yys2167Slc)
		switch yys2167 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2167)
		} // end switch yys2167
	} // end for yyj2167
	if !yyhl2167 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2169 int
	var yyb2169 bool
	var yyhl2169 bool = l >= 0
	yyj2169++
	if yyhl2169 {
		yyb2169 = yyj2169 > l
	} else {
		yyb2169 = r.CheckBreak()
	}
	if yyb2169 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2169++
		if yyhl2169 {
			yyb2169 = yyj2169 > l
		} else {
			yyb2169 = r.CheckBreak()
		}
		if yyb2169 {
			break
		}
		z.DecStructFieldNotFound(yyj2169-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2171 := z.EncBinary()
		_ = yym2171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2172 := !z.EncBinary()
			yy2arr2172 := z.EncBasicHandle().StructToArray
			var yyq2172 [1]bool
			_, _, _ = yysep2172, yyq2172, yy2arr2172
			const yyr2172 bool = false
			yyq2172[0] = true
			if yyr2172 || yy2arr2172 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2172 int = 0
				for _, b := range yyq2172 {
					if b {
						yynn2172++
					}
				}
				r.EncodeMapStart(yynn2172)
			}
			if yyr2172 || yy2arr2172 {
				if yyq2172[0] {
					yy2174 := &x.KubeletEndpoint
					yy2174.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2172[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2175 := &x.KubeletEndpoint
					yy2175.CodecEncodeSelf(e)
				}
			}
			if yysep2172 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2176 := z.DecBinary()
	_ = yym2176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2177 := r.ReadMapStart()
			if yyl2177 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2177, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2177 := r.ReadArrayStart()
			if yyl2177 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2178Slc
	var yyhl2178 bool = l >= 0
	for yyj2178 := 0; ; yyj2178++ {
		if yyhl2178 {
			if yyj2178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2178Slc = r.DecodeBytes(yys2178Slc, true, true)
		yys2178 := string(yys2178Slc)
		switch yys2178 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2179 := &x.KubeletEndpoint
				yyv2179.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2178)
		} // end switch yys2178
	} // end for yyj2178
	if !yyhl2178 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2180 int
	var yyb2180 bool
	var yyhl2180 bool = l >= 0
	yyj2180++
	if yyhl2180 {
		yyb2180 = yyj2180 > l
	} else {
		yyb2180 = r.CheckBreak()
	}
	if yyb2180 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2181 := &x.KubeletEndpoint
		yyv2181.CodecDecodeSelf(d)
	}
	for {
		yyj2180++
		if yyhl2180 {
			yyb2180 = yyj2180 > l
		} else {
			yyb2180 = r.CheckBreak()
		}
		if yyb2180 {
			break
		}
		z.DecStructFieldNotFound(yyj2180-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2182 := z.EncBinary()
		_ = yym2182
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2183 := !z.EncBinary()
			yy2arr2183 := z.EncBasicHandle().StructToArray
			var yyq2183 [8]bool
			_, _, _ = yysep2183, yyq2183, yy2arr2183
			const yyr2183 bool = false
			if yyr2183 || yy2arr2183 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2183 int = 8
				for _, b := range yyq2183 {
					if b {
						yynn2183++
					}
				}
				r.EncodeMapStart(yynn2183)
			}
			if yyr2183 || yy2arr2183 {
				yym2185 := z.EncBinary()
				_ = yym2185
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2186 := z.EncBinary()
				_ = yym2186
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2183 || yy2arr2183 {
				yym2188 := z.EncBinary()
				_ = yym2188
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2189 := z.EncBinary()
				_ = yym2189
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2183 || yy2arr2183 {
				yym2191 := z.EncBinary()
				_ = yym2191
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2192 := z.EncBinary()
				_ = yym2192
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2183 || yy2arr2183 {
				yym2194 := z.EncBinary()
				_ = yym2194
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2195 := z.EncBinary()
				_ = yym2195
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2183 || yy2arr2183 {
				yym2197 := z.EncBinary()
				_ = yym2197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2198 := z.EncBinary()
				_ = yym2198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2183 || yy2arr2183 {
				yym2200 := z.EncBinary()
				_ = yym2200
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2201 := z.EncBinary()
				_ = yym2201
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2183 || yy2arr2183 {
				yym2203 := z.EncBinary()
				_ = yym2203
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2204 := z.EncBinary()
				_ = yym2204
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2183 || yy2arr2183 {
				yym2206 := z.EncBinary()
				_ = yym2206
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2207 := z.EncBinary()
				_ = yym2207
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2183 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2208 := z.DecBinary()
	_ = yym2208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2209 := r.ReadMapStart()
			if yyl2209 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2209, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2209 := r.ReadArrayStart()
			if yyl2209 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2210Slc
	var yyhl2210 bool = l >= 0
	for yyj2210 := 0; ; yyj2210++ {
		if yyhl2210 {
			if yyj2210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2210Slc = r.DecodeBytes(yys2210Slc, true, true)
		yys2210 := string(yys2210Slc)
		switch yys2210 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2210)
		} // end switch yys2210
	} // end for yyj2210
	if !yyhl2210 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2219 int
	var yyb2219 bool
	var yyhl2219 bool = l >= 0
	yyj2219++
	if yyhl2219 {
		yyb2219 = yyj2219 > l
	} else {
		yyb2219 = r.CheckBreak()
	}
	if yyb2219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2219++
	if yyhl2219 {
		yyb2219 = yyj2219 > l
	} else {
		yyb2219 = r.CheckBreak()
	}
	if yyb2219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2219++
	if yyhl2219 {
		yyb2219 = yyj2219 > l
	} else {
		yyb2219 = r.CheckBreak()
	}
	if yyb2219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2219++
	if yyhl2219 {
		yyb2219 = yyj2219 > l
	} else {
		yyb2219 = r.CheckBreak()
	}
	if yyb2219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2219++
	if yyhl2219 {
		yyb2219 = yyj2219 > l
	} else {
		yyb2219 = r.CheckBreak()
	}
	if yyb2219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2219++
	if yyhl2219 {
		yyb2219 = yyj2219 > l
	} else {
		yyb2219 = r.CheckBreak()
	}
	if yyb2219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2219++
	if yyhl2219 {
		yyb2219 = yyj2219 > l
	} else {
		yyb2219 = r.CheckBreak()
	}
	if yyb2219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2219++
	if yyhl2219 {
		yyb2219 = yyj2219 > l
	} else {
		yyb2219 = r.CheckBreak()
	}
	if yyb2219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2219++
		if yyhl2219 {
			yyb2219 = yyj2219 > l
		} else {
			yyb2219 = r.CheckBreak()
		}
		if yyb2219 {
			break
		}
		z.DecStructFieldNotFound(yyj2219-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2228 := z.EncBinary()
		_ = yym2228
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2229 := !z.EncBinary()
			yy2arr2229 := z.EncBasicHandle().StructToArray
			var yyq2229 [6]bool
			_, _, _ = yysep2229, yyq2229, yy2arr2229
			const yyr2229 bool = false
			yyq2229[0] = len(x.Capacity) != 0
			yyq2229[1] = x.Phase != ""
			yyq2229[2] = len(x.Conditions) != 0
			yyq2229[3] = len(x.Addresses) != 0
			yyq2229[4] = true
			yyq2229[5] = true
			if yyr2229 || yy2arr2229 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2229 int = 0
				for _, b := range yyq2229 {
					if b {
						yynn2229++
					}
				}
				r.EncodeMapStart(yynn2229)
			}
			if yyr2229 || yy2arr2229 {
				if yyq2229[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2229[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2229 || yy2arr2229 {
				if yyq2229[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2229[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2229 || yy2arr2229 {
				if yyq2229[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2233 := z.EncBinary()
						_ = yym2233
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2229[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2234 := z.EncBinary()
						_ = yym2234
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2229 || yy2arr2229 {
				if yyq2229[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2236 := z.EncBinary()
						_ = yym2236
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2229[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2237 := z.EncBinary()
						_ = yym2237
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2229 || yy2arr2229 {
				if yyq2229[4] {
					yy2239 := &x.DaemonEndpoints
					yy2239.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2229[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2240 := &x.DaemonEndpoints
					yy2240.CodecEncodeSelf(e)
				}
			}
			if yyr2229 || yy2arr2229 {
				if yyq2229[5] {
					yy2242 := &x.NodeInfo
					yy2242.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2229[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2243 := &x.NodeInfo
					yy2243.CodecEncodeSelf(e)
				}
			}
			if yysep2229 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2244 := z.DecBinary()
	_ = yym2244
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2245 := r.ReadMapStart()
			if yyl2245 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2245, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2245 := r.ReadArrayStart()
			if yyl2245 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2245, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2246Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2246Slc
	var yyhl2246 bool = l >= 0
	for yyj2246 := 0; ; yyj2246++ {
		if yyhl2246 {
			if yyj2246 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2246Slc = r.DecodeBytes(yys2246Slc, true, true)
		yys2246 := string(yys2246Slc)
		switch yys2246 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2247 := &x.Capacity
				yyv2247.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2249 := &x.Conditions
				yym2250 := z.DecBinary()
				_ = yym2250
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2249), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2251 := &x.Addresses
				yym2252 := z.DecBinary()
				_ = yym2252
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2251), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2253 := &x.DaemonEndpoints
				yyv2253.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2254 := &x.NodeInfo
				yyv2254.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2246)
		} // end switch yys2246
	} // end for yyj2246
	if !yyhl2246 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2255 int
	var yyb2255 bool
	var yyhl2255 bool = l >= 0
	yyj2255++
	if yyhl2255 {
		yyb2255 = yyj2255 > l
	} else {
		yyb2255 = r.CheckBreak()
	}
	if yyb2255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2256 := &x.Capacity
		yyv2256.CodecDecodeSelf(d)
	}
	yyj2255++
	if yyhl2255 {
		yyb2255 = yyj2255 > l
	} else {
		yyb2255 = r.CheckBreak()
	}
	if yyb2255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2255++
	if yyhl2255 {
		yyb2255 = yyj2255 > l
	} else {
		yyb2255 = r.CheckBreak()
	}
	if yyb2255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2258 := &x.Conditions
		yym2259 := z.DecBinary()
		_ = yym2259
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2258), d)
		}
	}
	yyj2255++
	if yyhl2255 {
		yyb2255 = yyj2255 > l
	} else {
		yyb2255 = r.CheckBreak()
	}
	if yyb2255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2260 := &x.Addresses
		yym2261 := z.DecBinary()
		_ = yym2261
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2260), d)
		}
	}
	yyj2255++
	if yyhl2255 {
		yyb2255 = yyj2255 > l
	} else {
		yyb2255 = r.CheckBreak()
	}
	if yyb2255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2262 := &x.DaemonEndpoints
		yyv2262.CodecDecodeSelf(d)
	}
	yyj2255++
	if yyhl2255 {
		yyb2255 = yyj2255 > l
	} else {
		yyb2255 = r.CheckBreak()
	}
	if yyb2255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2263 := &x.NodeInfo
		yyv2263.CodecDecodeSelf(d)
	}
	for {
		yyj2255++
		if yyhl2255 {
			yyb2255 = yyj2255 > l
		} else {
			yyb2255 = r.CheckBreak()
		}
		if yyb2255 {
			break
		}
		z.DecStructFieldNotFound(yyj2255-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2264 := z.EncBinary()
	_ = yym2264
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2265 := z.DecBinary()
	_ = yym2265
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2266 := z.EncBinary()
	_ = yym2266
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2267 := z.DecBinary()
	_ = yym2267
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2268 := z.EncBinary()
		_ = yym2268
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2269 := !z.EncBinary()
			yy2arr2269 := z.EncBasicHandle().StructToArray
			var yyq2269 [6]bool
			_, _, _ = yysep2269, yyq2269, yy2arr2269
			const yyr2269 bool = false
			yyq2269[2] = true
			yyq2269[3] = true
			yyq2269[4] = x.Reason != ""
			yyq2269[5] = x.Message != ""
			if yyr2269 || yy2arr2269 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2269 int = 2
				for _, b := range yyq2269 {
					if b {
						yynn2269++
					}
				}
				r.EncodeMapStart(yynn2269)
			}
			if yyr2269 || yy2arr2269 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2269 || yy2arr2269 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2269 || yy2arr2269 {
				if yyq2269[2] {
					yy2273 := &x.LastHeartbeatTime
					yym2274 := z.EncBinary()
					_ = yym2274
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2273) {
					} else if yym2274 {
						z.EncBinaryMarshal(yy2273)
					} else if !yym2274 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2273)
					} else {
						z.EncFallback(yy2273)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2269[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2275 := &x.LastHeartbeatTime
					yym2276 := z.EncBinary()
					_ = yym2276
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2275) {
					} else if yym2276 {
						z.EncBinaryMarshal(yy2275)
					} else if !yym2276 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2275)
					} else {
						z.EncFallback(yy2275)
					}
				}
			}
			if yyr2269 || yy2arr2269 {
				if yyq2269[3] {
					yy2278 := &x.LastTransitionTime
					yym2279 := z.EncBinary()
					_ = yym2279
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2278) {
					} else if yym2279 {
						z.EncBinaryMarshal(yy2278)
					} else if !yym2279 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2278)
					} else {
						z.EncFallback(yy2278)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2269[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2280 := &x.LastTransitionTime
					yym2281 := z.EncBinary()
					_ = yym2281
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2280) {
					} else if yym2281 {
						z.EncBinaryMarshal(yy2280)
					} else if !yym2281 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2280)
					} else {
						z.EncFallback(yy2280)
					}
				}
			}
			if yyr2269 || yy2arr2269 {
				if yyq2269[4] {
					yym2283 := z.EncBinary()
					_ = yym2283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2269[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2284 := z.EncBinary()
					_ = yym2284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2269 || yy2arr2269 {
				if yyq2269[5] {
					yym2286 := z.EncBinary()
					_ = yym2286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2269[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2287 := z.EncBinary()
					_ = yym2287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2269 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2288 := z.DecBinary()
	_ = yym2288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2289 := r.ReadMapStart()
			if yyl2289 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2289, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2289 := r.ReadArrayStart()
			if yyl2289 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2289, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2290Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2290Slc
	var yyhl2290 bool = l >= 0
	for yyj2290 := 0; ; yyj2290++ {
		if yyhl2290 {
			if yyj2290 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2290Slc = r.DecodeBytes(yys2290Slc, true, true)
		yys2290 := string(yys2290Slc)
		switch yys2290 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2293 := &x.LastHeartbeatTime
				yym2294 := z.DecBinary()
				_ = yym2294
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2293) {
				} else if yym2294 {
					z.DecBinaryUnmarshal(yyv2293)
				} else if !yym2294 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2293)
				} else {
					z.DecFallback(yyv2293, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2295 := &x.LastTransitionTime
				yym2296 := z.DecBinary()
				_ = yym2296
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2295) {
				} else if yym2296 {
					z.DecBinaryUnmarshal(yyv2295)
				} else if !yym2296 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2295)
				} else {
					z.DecFallback(yyv2295, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2290)
		} // end switch yys2290
	} // end for yyj2290
	if !yyhl2290 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2299 int
	var yyb2299 bool
	var yyhl2299 bool = l >= 0
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2302 := &x.LastHeartbeatTime
		yym2303 := z.DecBinary()
		_ = yym2303
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2302) {
		} else if yym2303 {
			z.DecBinaryUnmarshal(yyv2302)
		} else if !yym2303 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2302)
		} else {
			z.DecFallback(yyv2302, false)
		}
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2304 := &x.LastTransitionTime
		yym2305 := z.DecBinary()
		_ = yym2305
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2304) {
		} else if yym2305 {
			z.DecBinaryUnmarshal(yyv2304)
		} else if !yym2305 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2304)
		} else {
			z.DecFallback(yyv2304, false)
		}
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2299++
		if yyhl2299 {
			yyb2299 = yyj2299 > l
		} else {
			yyb2299 = r.CheckBreak()
		}
		if yyb2299 {
			break
		}
		z.DecStructFieldNotFound(yyj2299-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2308 := z.EncBinary()
	_ = yym2308
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2309 := z.DecBinary()
	_ = yym2309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2310 := z.EncBinary()
		_ = yym2310
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2311 := !z.EncBinary()
			yy2arr2311 := z.EncBasicHandle().StructToArray
			var yyq2311 [2]bool
			_, _, _ = yysep2311, yyq2311, yy2arr2311
			const yyr2311 bool = false
			if yyr2311 || yy2arr2311 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2311 int = 2
				for _, b := range yyq2311 {
					if b {
						yynn2311++
					}
				}
				r.EncodeMapStart(yynn2311)
			}
			if yyr2311 || yy2arr2311 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2311 || yy2arr2311 {
				yym2314 := z.EncBinary()
				_ = yym2314
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2315 := z.EncBinary()
				_ = yym2315
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2311 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2316 := z.DecBinary()
	_ = yym2316
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2317 := r.ReadMapStart()
			if yyl2317 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2317, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2317 := r.ReadArrayStart()
			if yyl2317 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2317, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2318Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2318Slc
	var yyhl2318 bool = l >= 0
	for yyj2318 := 0; ; yyj2318++ {
		if yyhl2318 {
			if yyj2318 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2318Slc = r.DecodeBytes(yys2318Slc, true, true)
		yys2318 := string(yys2318Slc)
		switch yys2318 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2318)
		} // end switch yys2318
	} // end for yyj2318
	if !yyhl2318 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2321 int
	var yyb2321 bool
	var yyhl2321 bool = l >= 0
	yyj2321++
	if yyhl2321 {
		yyb2321 = yyj2321 > l
	} else {
		yyb2321 = r.CheckBreak()
	}
	if yyb2321 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2321++
	if yyhl2321 {
		yyb2321 = yyj2321 > l
	} else {
		yyb2321 = r.CheckBreak()
	}
	if yyb2321 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2321++
		if yyhl2321 {
			yyb2321 = yyj2321 > l
		} else {
			yyb2321 = r.CheckBreak()
		}
		if yyb2321 {
			break
		}
		z.DecStructFieldNotFound(yyj2321-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2324 := z.EncBinary()
	_ = yym2324
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2325 := z.DecBinary()
	_ = yym2325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2326 := z.EncBinary()
		_ = yym2326
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2327 := z.DecBinary()
	_ = yym2327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2328 := z.EncBinary()
		_ = yym2328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2329 := !z.EncBinary()
			yy2arr2329 := z.EncBasicHandle().StructToArray
			var yyq2329 [5]bool
			_, _, _ = yysep2329, yyq2329, yy2arr2329
			const yyr2329 bool = false
			yyq2329[0] = x.Kind != ""
			yyq2329[1] = x.APIVersion != ""
			yyq2329[2] = true
			yyq2329[3] = true
			yyq2329[4] = true
			if yyr2329 || yy2arr2329 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2329 int = 0
				for _, b := range yyq2329 {
					if b {
						yynn2329++
					}
				}
				r.EncodeMapStart(yynn2329)
			}
			if yyr2329 || yy2arr2329 {
				if yyq2329[0] {
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2329[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2332 := z.EncBinary()
					_ = yym2332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2329 || yy2arr2329 {
				if yyq2329[1] {
					yym2334 := z.EncBinary()
					_ = yym2334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2329[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2335 := z.EncBinary()
					_ = yym2335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2329 || yy2arr2329 {
				if yyq2329[2] {
					yy2337 := &x.ObjectMeta
					yy2337.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2329[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2338 := &x.ObjectMeta
					yy2338.CodecEncodeSelf(e)
				}
			}
			if yyr2329 || yy2arr2329 {
				if yyq2329[3] {
					yy2340 := &x.Spec
					yy2340.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2329[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2341 := &x.Spec
					yy2341.CodecEncodeSelf(e)
				}
			}
			if yyr2329 || yy2arr2329 {
				if yyq2329[4] {
					yy2343 := &x.Status
					yy2343.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2329[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2344 := &x.Status
					yy2344.CodecEncodeSelf(e)
				}
			}
			if yysep2329 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2345 := z.DecBinary()
	_ = yym2345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2346 := r.ReadMapStart()
			if yyl2346 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2346, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2346 := r.ReadArrayStart()
			if yyl2346 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2346, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2347Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2347Slc
	var yyhl2347 bool = l >= 0
	for yyj2347 := 0; ; yyj2347++ {
		if yyhl2347 {
			if yyj2347 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2347Slc = r.DecodeBytes(yys2347Slc, true, true)
		yys2347 := string(yys2347Slc)
		switch yys2347 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2350 := &x.ObjectMeta
				yyv2350.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2351 := &x.Spec
				yyv2351.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2352 := &x.Status
				yyv2352.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2347)
		} // end switch yys2347
	} // end for yyj2347
	if !yyhl2347 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2353 int
	var yyb2353 bool
	var yyhl2353 bool = l >= 0
	yyj2353++
	if yyhl2353 {
		yyb2353 = yyj2353 > l
	} else {
		yyb2353 = r.CheckBreak()
	}
	if yyb2353 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2353++
	if yyhl2353 {
		yyb2353 = yyj2353 > l
	} else {
		yyb2353 = r.CheckBreak()
	}
	if yyb2353 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2353++
	if yyhl2353 {
		yyb2353 = yyj2353 > l
	} else {
		yyb2353 = r.CheckBreak()
	}
	if yyb2353 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2356 := &x.ObjectMeta
		yyv2356.CodecDecodeSelf(d)
	}
	yyj2353++
	if yyhl2353 {
		yyb2353 = yyj2353 > l
	} else {
		yyb2353 = r.CheckBreak()
	}
	if yyb2353 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2357 := &x.Spec
		yyv2357.CodecDecodeSelf(d)
	}
	yyj2353++
	if yyhl2353 {
		yyb2353 = yyj2353 > l
	} else {
		yyb2353 = r.CheckBreak()
	}
	if yyb2353 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2358 := &x.Status
		yyv2358.CodecDecodeSelf(d)
	}
	for {
		yyj2353++
		if yyhl2353 {
			yyb2353 = yyj2353 > l
		} else {
			yyb2353 = r.CheckBreak()
		}
		if yyb2353 {
			break
		}
		z.DecStructFieldNotFound(yyj2353-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2359 := z.EncBinary()
		_ = yym2359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2360 := !z.EncBinary()
			yy2arr2360 := z.EncBasicHandle().StructToArray
			var yyq2360 [4]bool
			_, _, _ = yysep2360, yyq2360, yy2arr2360
			const yyr2360 bool = false
			yyq2360[0] = x.Kind != ""
			yyq2360[1] = x.APIVersion != ""
			yyq2360[2] = true
			if yyr2360 || yy2arr2360 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2360 int = 1
				for _, b := range yyq2360 {
					if b {
						yynn2360++
					}
				}
				r.EncodeMapStart(yynn2360)
			}
			if yyr2360 || yy2arr2360 {
				if yyq2360[0] {
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2360[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2363 := z.EncBinary()
					_ = yym2363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2360 || yy2arr2360 {
				if yyq2360[1] {
					yym2365 := z.EncBinary()
					_ = yym2365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2360[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2366 := z.EncBinary()
					_ = yym2366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2360 || yy2arr2360 {
				if yyq2360[2] {
					yy2368 := &x.ListMeta
					yym2369 := z.EncBinary()
					_ = yym2369
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2368) {
					} else {
						z.EncFallback(yy2368)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2360[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2370 := &x.ListMeta
					yym2371 := z.EncBinary()
					_ = yym2371
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2370) {
					} else {
						z.EncFallback(yy2370)
					}
				}
			}
			if yyr2360 || yy2arr2360 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2373 := z.EncBinary()
					_ = yym2373
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2374 := z.EncBinary()
					_ = yym2374
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2360 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2375 := z.DecBinary()
	_ = yym2375
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2376 := r.ReadMapStart()
			if yyl2376 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2376, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2376 := r.ReadArrayStart()
			if yyl2376 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2376, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2377Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2377Slc
	var yyhl2377 bool = l >= 0
	for yyj2377 := 0; ; yyj2377++ {
		if yyhl2377 {
			if yyj2377 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2377Slc = r.DecodeBytes(yys2377Slc, true, true)
		yys2377 := string(yys2377Slc)
		switch yys2377 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2380 := &x.ListMeta
				yym2381 := z.DecBinary()
				_ = yym2381
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2380) {
				} else {
					z.DecFallback(yyv2380, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2382 := &x.Items
				yym2383 := z.DecBinary()
				_ = yym2383
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2382), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2377)
		} // end switch yys2377
	} // end for yyj2377
	if !yyhl2377 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2384 int
	var yyb2384 bool
	var yyhl2384 bool = l >= 0
	yyj2384++
	if yyhl2384 {
		yyb2384 = yyj2384 > l
	} else {
		yyb2384 = r.CheckBreak()
	}
	if yyb2384 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2384++
	if yyhl2384 {
		yyb2384 = yyj2384 > l
	} else {
		yyb2384 = r.CheckBreak()
	}
	if yyb2384 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2384++
	if yyhl2384 {
		yyb2384 = yyj2384 > l
	} else {
		yyb2384 = r.CheckBreak()
	}
	if yyb2384 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2387 := &x.ListMeta
		yym2388 := z.DecBinary()
		_ = yym2388
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2387) {
		} else {
			z.DecFallback(yyv2387, false)
		}
	}
	yyj2384++
	if yyhl2384 {
		yyb2384 = yyj2384 > l
	} else {
		yyb2384 = r.CheckBreak()
	}
	if yyb2384 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2389 := &x.Items
		yym2390 := z.DecBinary()
		_ = yym2390
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2389), d)
		}
	}
	for {
		yyj2384++
		if yyhl2384 {
			yyb2384 = yyj2384 > l
		} else {
			yyb2384 = r.CheckBreak()
		}
		if yyb2384 {
			break
		}
		z.DecStructFieldNotFound(yyj2384-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2391 := z.EncBinary()
	_ = yym2391
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2392 := z.DecBinary()
	_ = yym2392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2393 := z.EncBinary()
		_ = yym2393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2394 := !z.EncBinary()
			yy2arr2394 := z.EncBasicHandle().StructToArray
			var yyq2394 [1]bool
			_, _, _ = yysep2394, yyq2394, yy2arr2394
			const yyr2394 bool = false
			yyq2394[0] = len(x.Finalizers) != 0
			if yyr2394 || yy2arr2394 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2394 int = 0
				for _, b := range yyq2394 {
					if b {
						yynn2394++
					}
				}
				r.EncodeMapStart(yynn2394)
			}
			if yyr2394 || yy2arr2394 {
				if yyq2394[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2396 := z.EncBinary()
						_ = yym2396
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2394[0] {
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2397 := z.EncBinary()
						_ = yym2397
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yysep2394 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2398 := z.DecBinary()
	_ = yym2398
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2399 := r.ReadMapStart()
			if yyl2399 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2399, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2399 := r.ReadArrayStart()
			if yyl2399 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2399, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2400Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2400Slc
	var yyhl2400 bool = l >= 0
	for yyj2400 := 0; ; yyj2400++ {
		if yyhl2400 {
			if yyj2400 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2400Slc = r.DecodeBytes(yys2400Slc, true, true)
		yys2400 := string(yys2400Slc)
		switch yys2400 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2401 := &x.Finalizers
				yym2402 := z.DecBinary()
				_ = yym2402
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2401), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2400)
		} // end switch yys2400
	} // end for yyj2400
	if !yyhl2400 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2403 int
	var yyb2403 bool
	var yyhl2403 bool = l >= 0
	yyj2403++
	if yyhl2403 {
		yyb2403 = yyj2403 > l
	} else {
		yyb2403 = r.CheckBreak()
	}
	if yyb2403 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2404 := &x.Finalizers
		yym2405 := z.DecBinary()
		_ = yym2405
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2404), d)
		}
	}
	for {
		yyj2403++
		if yyhl2403 {
			yyb2403 = yyj2403 > l
		} else {
			yyb2403 = r.CheckBreak()
		}
		if yyb2403 {
			break
		}
		z.DecStructFieldNotFound(yyj2403-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2406 := z.EncBinary()
		_ = yym2406
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2407 := !z.EncBinary()
			yy2arr2407 := z.EncBasicHandle().StructToArray
			var yyq2407 [1]bool
			_, _, _ = yysep2407, yyq2407, yy2arr2407
			const yyr2407 bool = false
			yyq2407[0] = x.Phase != ""
			if yyr2407 || yy2arr2407 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2407 int = 0
				for _, b := range yyq2407 {
					if b {
						yynn2407++
					}
				}
				r.EncodeMapStart(yynn2407)
			}
			if yyr2407 || yy2arr2407 {
				if yyq2407[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2407[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2407 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2409 := z.DecBinary()
	_ = yym2409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2410 := r.ReadMapStart()
			if yyl2410 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2410, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2410 := r.ReadArrayStart()
			if yyl2410 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2410, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2411Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2411Slc
	var yyhl2411 bool = l >= 0
	for yyj2411 := 0; ; yyj2411++ {
		if yyhl2411 {
			if yyj2411 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2411Slc = r.DecodeBytes(yys2411Slc, true, true)
		yys2411 := string(yys2411Slc)
		switch yys2411 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2411)
		} // end switch yys2411
	} // end for yyj2411
	if !yyhl2411 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2413 int
	var yyb2413 bool
	var yyhl2413 bool = l >= 0
	yyj2413++
	if yyhl2413 {
		yyb2413 = yyj2413 > l
	} else {
		yyb2413 = r.CheckBreak()
	}
	if yyb2413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2413++
		if yyhl2413 {
			yyb2413 = yyj2413 > l
		} else {
			yyb2413 = r.CheckBreak()
		}
		if yyb2413 {
			break
		}
		z.DecStructFieldNotFound(yyj2413-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2415 := z.EncBinary()
	_ = yym2415
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2416 := z.DecBinary()
	_ = yym2416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2417 := z.EncBinary()
		_ = yym2417
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2418 := !z.EncBinary()
			yy2arr2418 := z.EncBasicHandle().StructToArray
			var yyq2418 [5]bool
			_, _, _ = yysep2418, yyq2418, yy2arr2418
			const yyr2418 bool = false
			yyq2418[0] = x.Kind != ""
			yyq2418[1] = x.APIVersion != ""
			yyq2418[2] = true
			yyq2418[3] = true
			yyq2418[4] = true
			if yyr2418 || yy2arr2418 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2418 int = 0
				for _, b := range yyq2418 {
					if b {
						yynn2418++
					}
				}
				r.EncodeMapStart(yynn2418)
			}
			if yyr2418 || yy2arr2418 {
				if yyq2418[0] {
					yym2420 := z.EncBinary()
					_ = yym2420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2418[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2421 := z.EncBinary()
					_ = yym2421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2418 || yy2arr2418 {
				if yyq2418[1] {
					yym2423 := z.EncBinary()
					_ = yym2423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2418[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2424 := z.EncBinary()
					_ = yym2424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2418 || yy2arr2418 {
				if yyq2418[2] {
					yy2426 := &x.ObjectMeta
					yy2426.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2418[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2427 := &x.ObjectMeta
					yy2427.CodecEncodeSelf(e)
				}
			}
			if yyr2418 || yy2arr2418 {
				if yyq2418[3] {
					yy2429 := &x.Spec
					yy2429.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2418[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2430 := &x.Spec
					yy2430.CodecEncodeSelf(e)
				}
			}
			if yyr2418 || yy2arr2418 {
				if yyq2418[4] {
					yy2432 := &x.Status
					yy2432.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2418[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2433 := &x.Status
					yy2433.CodecEncodeSelf(e)
				}
			}
			if yysep2418 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2434 := z.DecBinary()
	_ = yym2434
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2435 := r.ReadMapStart()
			if yyl2435 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2435, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2435 := r.ReadArrayStart()
			if yyl2435 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2435, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2436Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2436Slc
	var yyhl2436 bool = l >= 0
	for yyj2436 := 0; ; yyj2436++ {
		if yyhl2436 {
			if yyj2436 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2436Slc = r.DecodeBytes(yys2436Slc, true, true)
		yys2436 := string(yys2436Slc)
		switch yys2436 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2439 := &x.ObjectMeta
				yyv2439.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2440 := &x.Spec
				yyv2440.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2441 := &x.Status
				yyv2441.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2436)
		} // end switch yys2436
	} // end for yyj2436
	if !yyhl2436 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2442 int
	var yyb2442 bool
	var yyhl2442 bool = l >= 0
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2445 := &x.ObjectMeta
		yyv2445.CodecDecodeSelf(d)
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2446 := &x.Spec
		yyv2446.CodecDecodeSelf(d)
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2447 := &x.Status
		yyv2447.CodecDecodeSelf(d)
	}
	for {
		yyj2442++
		if yyhl2442 {
			yyb2442 = yyj2442 > l
		} else {
			yyb2442 = r.CheckBreak()
		}
		if yyb2442 {
			break
		}
		z.DecStructFieldNotFound(yyj2442-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2448 := z.EncBinary()
		_ = yym2448
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2449 := !z.EncBinary()
			yy2arr2449 := z.EncBasicHandle().StructToArray
			var yyq2449 [4]bool
			_, _, _ = yysep2449, yyq2449, yy2arr2449
			const yyr2449 bool = false
			yyq2449[0] = x.Kind != ""
			yyq2449[1] = x.APIVersion != ""
			yyq2449[2] = true
			if yyr2449 || yy2arr2449 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2449 int = 1
				for _, b := range yyq2449 {
					if b {
						yynn2449++
					}
				}
				r.EncodeMapStart(yynn2449)
			}
			if yyr2449 || yy2arr2449 {
				if yyq2449[0] {
					yym2451 := z.EncBinary()
					_ = yym2451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2449[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2452 := z.EncBinary()
					_ = yym2452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				if yyq2449[1] {
					yym2454 := z.EncBinary()
					_ = yym2454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2449[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2455 := z.EncBinary()
					_ = yym2455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				if yyq2449[2] {
					yy2457 := &x.ListMeta
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2457) {
					} else {
						z.EncFallback(yy2457)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2449[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2459 := &x.ListMeta
					yym2460 := z.EncBinary()
					_ = yym2460
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2459) {
					} else {
						z.EncFallback(yy2459)
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2462 := z.EncBinary()
					_ = yym2462
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2463 := z.EncBinary()
					_ = yym2463
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2449 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2464 := z.DecBinary()
	_ = yym2464
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2465 := r.ReadMapStart()
			if yyl2465 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2465, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2465 := r.ReadArrayStart()
			if yyl2465 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2465, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2466Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2466Slc
	var yyhl2466 bool = l >= 0
	for yyj2466 := 0; ; yyj2466++ {
		if yyhl2466 {
			if yyj2466 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2466Slc = r.DecodeBytes(yys2466Slc, true, true)
		yys2466 := string(yys2466Slc)
		switch yys2466 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2469 := &x.ListMeta
				yym2470 := z.DecBinary()
				_ = yym2470
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2469) {
				} else {
					z.DecFallback(yyv2469, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2471 := &x.Items
				yym2472 := z.DecBinary()
				_ = yym2472
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2471), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2466)
		} // end switch yys2466
	} // end for yyj2466
	if !yyhl2466 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2473 int
	var yyb2473 bool
	var yyhl2473 bool = l >= 0
	yyj2473++
	if yyhl2473 {
		yyb2473 = yyj2473 > l
	} else {
		yyb2473 = r.CheckBreak()
	}
	if yyb2473 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2473++
	if yyhl2473 {
		yyb2473 = yyj2473 > l
	} else {
		yyb2473 = r.CheckBreak()
	}
	if yyb2473 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2473++
	if yyhl2473 {
		yyb2473 = yyj2473 > l
	} else {
		yyb2473 = r.CheckBreak()
	}
	if yyb2473 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2476 := &x.ListMeta
		yym2477 := z.DecBinary()
		_ = yym2477
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2476) {
		} else {
			z.DecFallback(yyv2476, false)
		}
	}
	yyj2473++
	if yyhl2473 {
		yyb2473 = yyj2473 > l
	} else {
		yyb2473 = r.CheckBreak()
	}
	if yyb2473 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2478 := &x.Items
		yym2479 := z.DecBinary()
		_ = yym2479
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2478), d)
		}
	}
	for {
		yyj2473++
		if yyhl2473 {
			yyb2473 = yyj2473 > l
		} else {
			yyb2473 = r.CheckBreak()
		}
		if yyb2473 {
			break
		}
		z.DecStructFieldNotFound(yyj2473-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2480 := z.EncBinary()
		_ = yym2480
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2481 := !z.EncBinary()
			yy2arr2481 := z.EncBasicHandle().StructToArray
			var yyq2481 [4]bool
			_, _, _ = yysep2481, yyq2481, yy2arr2481
			const yyr2481 bool = false
			yyq2481[0] = x.Kind != ""
			yyq2481[1] = x.APIVersion != ""
			yyq2481[2] = true
			if yyr2481 || yy2arr2481 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2481 int = 1
				for _, b := range yyq2481 {
					if b {
						yynn2481++
					}
				}
				r.EncodeMapStart(yynn2481)
			}
			if yyr2481 || yy2arr2481 {
				if yyq2481[0] {
					yym2483 := z.EncBinary()
					_ = yym2483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2481[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2484 := z.EncBinary()
					_ = yym2484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2481 || yy2arr2481 {
				if yyq2481[1] {
					yym2486 := z.EncBinary()
					_ = yym2486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2481[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2487 := z.EncBinary()
					_ = yym2487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2481 || yy2arr2481 {
				if yyq2481[2] {
					yy2489 := &x.ObjectMeta
					yy2489.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2481[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2490 := &x.ObjectMeta
					yy2490.CodecEncodeSelf(e)
				}
			}
			if yyr2481 || yy2arr2481 {
				yy2492 := &x.Target
				yy2492.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2493 := &x.Target
				yy2493.CodecEncodeSelf(e)
			}
			if yysep2481 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2494 := z.DecBinary()
	_ = yym2494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2495 := r.ReadMapStart()
			if yyl2495 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2495, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2495 := r.ReadArrayStart()
			if yyl2495 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2495, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2496Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2496Slc
	var yyhl2496 bool = l >= 0
	for yyj2496 := 0; ; yyj2496++ {
		if yyhl2496 {
			if yyj2496 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2496Slc = r.DecodeBytes(yys2496Slc, true, true)
		yys2496 := string(yys2496Slc)
		switch yys2496 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2499 := &x.ObjectMeta
				yyv2499.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2500 := &x.Target
				yyv2500.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2496)
		} // end switch yys2496
	} // end for yyj2496
	if !yyhl2496 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2501 int
	var yyb2501 bool
	var yyhl2501 bool = l >= 0
	yyj2501++
	if yyhl2501 {
		yyb2501 = yyj2501 > l
	} else {
		yyb2501 = r.CheckBreak()
	}
	if yyb2501 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2501++
	if yyhl2501 {
		yyb2501 = yyj2501 > l
	} else {
		yyb2501 = r.CheckBreak()
	}
	if yyb2501 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2501++
	if yyhl2501 {
		yyb2501 = yyj2501 > l
	} else {
		yyb2501 = r.CheckBreak()
	}
	if yyb2501 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2504 := &x.ObjectMeta
		yyv2504.CodecDecodeSelf(d)
	}
	yyj2501++
	if yyhl2501 {
		yyb2501 = yyj2501 > l
	} else {
		yyb2501 = r.CheckBreak()
	}
	if yyb2501 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2505 := &x.Target
		yyv2505.CodecDecodeSelf(d)
	}
	for {
		yyj2501++
		if yyhl2501 {
			yyb2501 = yyj2501 > l
		} else {
			yyb2501 = r.CheckBreak()
		}
		if yyb2501 {
			break
		}
		z.DecStructFieldNotFound(yyj2501-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2506 := z.EncBinary()
		_ = yym2506
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2507 := !z.EncBinary()
			yy2arr2507 := z.EncBasicHandle().StructToArray
			var yyq2507 [3]bool
			_, _, _ = yysep2507, yyq2507, yy2arr2507
			const yyr2507 bool = false
			yyq2507[0] = x.Kind != ""
			yyq2507[1] = x.APIVersion != ""
			if yyr2507 || yy2arr2507 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2507 int = 1
				for _, b := range yyq2507 {
					if b {
						yynn2507++
					}
				}
				r.EncodeMapStart(yynn2507)
			}
			if yyr2507 || yy2arr2507 {
				if yyq2507[0] {
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2507[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2510 := z.EncBinary()
					_ = yym2510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2507 || yy2arr2507 {
				if yyq2507[1] {
					yym2512 := z.EncBinary()
					_ = yym2512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2507[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2513 := z.EncBinary()
					_ = yym2513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2507 || yy2arr2507 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2515 := *x.GracePeriodSeconds
					yym2516 := z.EncBinary()
					_ = yym2516
					if false {
					} else {
						r.EncodeInt(int64(yy2515))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2517 := *x.GracePeriodSeconds
					yym2518 := z.EncBinary()
					_ = yym2518
					if false {
					} else {
						r.EncodeInt(int64(yy2517))
					}
				}
			}
			if yysep2507 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2519 := z.DecBinary()
	_ = yym2519
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2520 := r.ReadMapStart()
			if yyl2520 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2520, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2520 := r.ReadArrayStart()
			if yyl2520 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2520, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2521Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2521Slc
	var yyhl2521 bool = l >= 0
	for yyj2521 := 0; ; yyj2521++ {
		if yyhl2521 {
			if yyj2521 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2521Slc = r.DecodeBytes(yys2521Slc, true, true)
		yys2521 := string(yys2521Slc)
		switch yys2521 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2525 := z.DecBinary()
				_ = yym2525
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2521)
		} // end switch yys2521
	} // end for yyj2521
	if !yyhl2521 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2526 int
	var yyb2526 bool
	var yyhl2526 bool = l >= 0
	yyj2526++
	if yyhl2526 {
		yyb2526 = yyj2526 > l
	} else {
		yyb2526 = r.CheckBreak()
	}
	if yyb2526 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2526++
	if yyhl2526 {
		yyb2526 = yyj2526 > l
	} else {
		yyb2526 = r.CheckBreak()
	}
	if yyb2526 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2526++
	if yyhl2526 {
		yyb2526 = yyj2526 > l
	} else {
		yyb2526 = r.CheckBreak()
	}
	if yyb2526 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2530 := z.DecBinary()
		_ = yym2530
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2526++
		if yyhl2526 {
			yyb2526 = yyj2526 > l
		} else {
			yyb2526 = r.CheckBreak()
		}
		if yyb2526 {
			break
		}
		z.DecStructFieldNotFound(yyj2526-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2531 := z.EncBinary()
		_ = yym2531
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2532 := !z.EncBinary()
			yy2arr2532 := z.EncBasicHandle().StructToArray
			var yyq2532 [6]bool
			_, _, _ = yysep2532, yyq2532, yy2arr2532
			const yyr2532 bool = false
			yyq2532[0] = x.Kind != ""
			yyq2532[1] = x.APIVersion != ""
			yyq2532[2] = x.LabelSelector != ""
			yyq2532[3] = x.FieldSelector != ""
			yyq2532[4] = x.Watch != false
			yyq2532[5] = x.ResourceVersion != ""
			if yyr2532 || yy2arr2532 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2532 int = 0
				for _, b := range yyq2532 {
					if b {
						yynn2532++
					}
				}
				r.EncodeMapStart(yynn2532)
			}
			if yyr2532 || yy2arr2532 {
				if yyq2532[0] {
					yym2534 := z.EncBinary()
					_ = yym2534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2532[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2535 := z.EncBinary()
					_ = yym2535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2532 || yy2arr2532 {
				if yyq2532[1] {
					yym2537 := z.EncBinary()
					_ = yym2537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2532[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2532 || yy2arr2532 {
				if yyq2532[2] {
					yym2540 := z.EncBinary()
					_ = yym2540
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2532[2] {
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr2532 || yy2arr2532 {
				if yyq2532[3] {
					yym2543 := z.EncBinary()
					_ = yym2543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2532[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					yym2544 := z.EncBinary()
					_ = yym2544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr2532 || yy2arr2532 {
				if yyq2532[4] {
					yym2546 := z.EncBinary()
					_ = yym2546
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2532[4] {
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					yym2547 := z.EncBinary()
					_ = yym2547
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr2532 || yy2arr2532 {
				if yyq2532[5] {
					yym2549 := z.EncBinary()
					_ = yym2549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2532[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2550 := z.EncBinary()
					_ = yym2550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yysep2532 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2551 := z.DecBinary()
	_ = yym2551
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2552 := r.ReadMapStart()
			if yyl2552 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2552, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2552 := r.ReadArrayStart()
			if yyl2552 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2552, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2553Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2553Slc
	var yyhl2553 bool = l >= 0
	for yyj2553 := 0; ; yyj2553++ {
		if yyhl2553 {
			if yyj2553 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2553Slc = r.DecodeBytes(yys2553Slc, true, true)
		yys2553 := string(yys2553Slc)
		switch yys2553 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2553)
		} // end switch yys2553
	} // end for yyj2553
	if !yyhl2553 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2560 int
	var yyb2560 bool
	var yyhl2560 bool = l >= 0
	yyj2560++
	if yyhl2560 {
		yyb2560 = yyj2560 > l
	} else {
		yyb2560 = r.CheckBreak()
	}
	if yyb2560 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2560++
	if yyhl2560 {
		yyb2560 = yyj2560 > l
	} else {
		yyb2560 = r.CheckBreak()
	}
	if yyb2560 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2560++
	if yyhl2560 {
		yyb2560 = yyj2560 > l
	} else {
		yyb2560 = r.CheckBreak()
	}
	if yyb2560 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj2560++
	if yyhl2560 {
		yyb2560 = yyj2560 > l
	} else {
		yyb2560 = r.CheckBreak()
	}
	if yyb2560 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj2560++
	if yyhl2560 {
		yyb2560 = yyj2560 > l
	} else {
		yyb2560 = r.CheckBreak()
	}
	if yyb2560 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2560++
	if yyhl2560 {
		yyb2560 = yyj2560 > l
	} else {
		yyb2560 = r.CheckBreak()
	}
	if yyb2560 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	for {
		yyj2560++
		if yyhl2560 {
			yyb2560 = yyj2560 > l
		} else {
			yyb2560 = r.CheckBreak()
		}
		if yyb2560 {
			break
		}
		z.DecStructFieldNotFound(yyj2560-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2567 := z.EncBinary()
		_ = yym2567
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2568 := !z.EncBinary()
			yy2arr2568 := z.EncBasicHandle().StructToArray
			var yyq2568 [10]bool
			_, _, _ = yysep2568, yyq2568, yy2arr2568
			const yyr2568 bool = false
			yyq2568[0] = x.Kind != ""
			yyq2568[1] = x.APIVersion != ""
			yyq2568[2] = x.Container != ""
			yyq2568[3] = x.Follow != false
			yyq2568[4] = x.Previous != false
			yyq2568[5] = x.SinceSeconds != nil
			yyq2568[6] = x.SinceTime != nil
			yyq2568[7] = x.Timestamps != false
			yyq2568[8] = x.TailLines != nil
			yyq2568[9] = x.LimitBytes != nil
			if yyr2568 || yy2arr2568 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2568 int = 0
				for _, b := range yyq2568 {
					if b {
						yynn2568++
					}
				}
				r.EncodeMapStart(yynn2568)
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[0] {
					yym2570 := z.EncBinary()
					_ = yym2570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2568[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[1] {
					yym2573 := z.EncBinary()
					_ = yym2573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2568[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[2] {
					yym2576 := z.EncBinary()
					_ = yym2576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2568[2] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2577 := z.EncBinary()
					_ = yym2577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[3] {
					yym2579 := z.EncBinary()
					_ = yym2579
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2568[3] {
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					yym2580 := z.EncBinary()
					_ = yym2580
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[4] {
					yym2582 := z.EncBinary()
					_ = yym2582
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2568[4] {
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					yym2583 := z.EncBinary()
					_ = yym2583
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2585 := *x.SinceSeconds
						yym2586 := z.EncBinary()
						_ = yym2586
						if false {
						} else {
							r.EncodeInt(int64(yy2585))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2568[5] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2587 := *x.SinceSeconds
						yym2588 := z.EncBinary()
						_ = yym2588
						if false {
						} else {
							r.EncodeInt(int64(yy2587))
						}
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2590 := z.EncBinary()
						_ = yym2590
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2590 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2590 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2568[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2591 := z.EncBinary()
						_ = yym2591
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2591 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2591 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[7] {
					yym2593 := z.EncBinary()
					_ = yym2593
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2568[7] {
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					yym2594 := z.EncBinary()
					_ = yym2594
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2596 := *x.TailLines
						yym2597 := z.EncBinary()
						_ = yym2597
						if false {
						} else {
							r.EncodeInt(int64(yy2596))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2568[8] {
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2598 := *x.TailLines
						yym2599 := z.EncBinary()
						_ = yym2599
						if false {
						} else {
							r.EncodeInt(int64(yy2598))
						}
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2601 := *x.LimitBytes
						yym2602 := z.EncBinary()
						_ = yym2602
						if false {
						} else {
							r.EncodeInt(int64(yy2601))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2568[9] {
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2603 := *x.LimitBytes
						yym2604 := z.EncBinary()
						_ = yym2604
						if false {
						} else {
							r.EncodeInt(int64(yy2603))
						}
					}
				}
			}
			if yysep2568 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2605 := z.DecBinary()
	_ = yym2605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2606 := r.ReadMapStart()
			if yyl2606 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2606, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2606 := r.ReadArrayStart()
			if yyl2606 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2606, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2607Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2607Slc
	var yyhl2607 bool = l >= 0
	for yyj2607 := 0; ; yyj2607++ {
		if yyhl2607 {
			if yyj2607 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2607Slc = r.DecodeBytes(yys2607Slc, true, true)
		yys2607 := string(yys2607Slc)
		switch yys2607 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2614 := z.DecBinary()
				_ = yym2614
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2616 := z.DecBinary()
				_ = yym2616
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2616 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2616 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2619 := z.DecBinary()
				_ = yym2619
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2621 := z.DecBinary()
				_ = yym2621
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2607)
		} // end switch yys2607
	} // end for yyj2607
	if !yyhl2607 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2622 int
	var yyb2622 bool
	var yyhl2622 bool = l >= 0
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2629 := z.DecBinary()
		_ = yym2629
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2631 := z.DecBinary()
		_ = yym2631
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2631 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2631 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2634 := z.DecBinary()
		_ = yym2634
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2636 := z.DecBinary()
		_ = yym2636
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2622++
		if yyhl2622 {
			yyb2622 = yyj2622 > l
		} else {
			yyb2622 = r.CheckBreak()
		}
		if yyb2622 {
			break
		}
		z.DecStructFieldNotFound(yyj2622-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2637 := z.EncBinary()
		_ = yym2637
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2638 := !z.EncBinary()
			yy2arr2638 := z.EncBasicHandle().StructToArray
			var yyq2638 [7]bool
			_, _, _ = yysep2638, yyq2638, yy2arr2638
			const yyr2638 bool = false
			yyq2638[0] = x.Kind != ""
			yyq2638[1] = x.APIVersion != ""
			yyq2638[2] = x.Stdin != false
			yyq2638[3] = x.Stdout != false
			yyq2638[4] = x.Stderr != false
			yyq2638[5] = x.TTY != false
			yyq2638[6] = x.Container != ""
			if yyr2638 || yy2arr2638 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2638 int = 0
				for _, b := range yyq2638 {
					if b {
						yynn2638++
					}
				}
				r.EncodeMapStart(yynn2638)
			}
			if yyr2638 || yy2arr2638 {
				if yyq2638[0] {
					yym2640 := z.EncBinary()
					_ = yym2640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2638[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2641 := z.EncBinary()
					_ = yym2641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2638 || yy2arr2638 {
				if yyq2638[1] {
					yym2643 := z.EncBinary()
					_ = yym2643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2638[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2644 := z.EncBinary()
					_ = yym2644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2638 || yy2arr2638 {
				if yyq2638[2] {
					yym2646 := z.EncBinary()
					_ = yym2646
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2638[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2647 := z.EncBinary()
					_ = yym2647
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2638 || yy2arr2638 {
				if yyq2638[3] {
					yym2649 := z.EncBinary()
					_ = yym2649
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2638[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2650 := z.EncBinary()
					_ = yym2650
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2638 || yy2arr2638 {
				if yyq2638[4] {
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2638[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2653 := z.EncBinary()
					_ = yym2653
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2638 || yy2arr2638 {
				if yyq2638[5] {
					yym2655 := z.EncBinary()
					_ = yym2655
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2638[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2656 := z.EncBinary()
					_ = yym2656
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2638 || yy2arr2638 {
				if yyq2638[6] {
					yym2658 := z.EncBinary()
					_ = yym2658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2638[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2659 := z.EncBinary()
					_ = yym2659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2638 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2660 := z.DecBinary()
	_ = yym2660
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2661 := r.ReadMapStart()
			if yyl2661 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2661, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2661 := r.ReadArrayStart()
			if yyl2661 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2661, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2662Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2662Slc
	var yyhl2662 bool = l >= 0
	for yyj2662 := 0; ; yyj2662++ {
		if yyhl2662 {
			if yyj2662 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2662Slc = r.DecodeBytes(yys2662Slc, true, true)
		yys2662 := string(yys2662Slc)
		switch yys2662 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2662)
		} // end switch yys2662
	} // end for yyj2662
	if !yyhl2662 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2670 int
	var yyb2670 bool
	var yyhl2670 bool = l >= 0
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2670++
		if yyhl2670 {
			yyb2670 = yyj2670 > l
		} else {
			yyb2670 = r.CheckBreak()
		}
		if yyb2670 {
			break
		}
		z.DecStructFieldNotFound(yyj2670-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2678 := z.EncBinary()
		_ = yym2678
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2679 := !z.EncBinary()
			yy2arr2679 := z.EncBasicHandle().StructToArray
			var yyq2679 [8]bool
			_, _, _ = yysep2679, yyq2679, yy2arr2679
			const yyr2679 bool = false
			yyq2679[0] = x.Kind != ""
			yyq2679[1] = x.APIVersion != ""
			yyq2679[2] = x.Stdin != false
			yyq2679[3] = x.Stdout != false
			yyq2679[4] = x.Stderr != false
			yyq2679[5] = x.TTY != false
			yyq2679[6] = x.Container != ""
			if yyr2679 || yy2arr2679 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2679 int = 1
				for _, b := range yyq2679 {
					if b {
						yynn2679++
					}
				}
				r.EncodeMapStart(yynn2679)
			}
			if yyr2679 || yy2arr2679 {
				if yyq2679[0] {
					yym2681 := z.EncBinary()
					_ = yym2681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2679[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2682 := z.EncBinary()
					_ = yym2682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2679 || yy2arr2679 {
				if yyq2679[1] {
					yym2684 := z.EncBinary()
					_ = yym2684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2679[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2685 := z.EncBinary()
					_ = yym2685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2679 || yy2arr2679 {
				if yyq2679[2] {
					yym2687 := z.EncBinary()
					_ = yym2687
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2679[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2688 := z.EncBinary()
					_ = yym2688
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2679 || yy2arr2679 {
				if yyq2679[3] {
					yym2690 := z.EncBinary()
					_ = yym2690
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2679[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2691 := z.EncBinary()
					_ = yym2691
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2679 || yy2arr2679 {
				if yyq2679[4] {
					yym2693 := z.EncBinary()
					_ = yym2693
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2679[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2694 := z.EncBinary()
					_ = yym2694
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2679 || yy2arr2679 {
				if yyq2679[5] {
					yym2696 := z.EncBinary()
					_ = yym2696
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2679[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2697 := z.EncBinary()
					_ = yym2697
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2679 || yy2arr2679 {
				if yyq2679[6] {
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2679[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2700 := z.EncBinary()
					_ = yym2700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2679 || yy2arr2679 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2703 := z.EncBinary()
					_ = yym2703
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2679 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2704 := z.DecBinary()
	_ = yym2704
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2705 := r.ReadMapStart()
			if yyl2705 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2705, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2705 := r.ReadArrayStart()
			if yyl2705 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2705, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2706Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2706Slc
	var yyhl2706 bool = l >= 0
	for yyj2706 := 0; ; yyj2706++ {
		if yyhl2706 {
			if yyj2706 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2706Slc = r.DecodeBytes(yys2706Slc, true, true)
		yys2706 := string(yys2706Slc)
		switch yys2706 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2714 := &x.Command
				yym2715 := z.DecBinary()
				_ = yym2715
				if false {
				} else {
					z.F.DecSliceStringX(yyv2714, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2706)
		} // end switch yys2706
	} // end for yyj2706
	if !yyhl2706 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2716 int
	var yyb2716 bool
	var yyhl2716 bool = l >= 0
	yyj2716++
	if yyhl2716 {
		yyb2716 = yyj2716 > l
	} else {
		yyb2716 = r.CheckBreak()
	}
	if yyb2716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2716++
	if yyhl2716 {
		yyb2716 = yyj2716 > l
	} else {
		yyb2716 = r.CheckBreak()
	}
	if yyb2716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2716++
	if yyhl2716 {
		yyb2716 = yyj2716 > l
	} else {
		yyb2716 = r.CheckBreak()
	}
	if yyb2716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2716++
	if yyhl2716 {
		yyb2716 = yyj2716 > l
	} else {
		yyb2716 = r.CheckBreak()
	}
	if yyb2716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2716++
	if yyhl2716 {
		yyb2716 = yyj2716 > l
	} else {
		yyb2716 = r.CheckBreak()
	}
	if yyb2716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2716++
	if yyhl2716 {
		yyb2716 = yyj2716 > l
	} else {
		yyb2716 = r.CheckBreak()
	}
	if yyb2716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2716++
	if yyhl2716 {
		yyb2716 = yyj2716 > l
	} else {
		yyb2716 = r.CheckBreak()
	}
	if yyb2716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2716++
	if yyhl2716 {
		yyb2716 = yyj2716 > l
	} else {
		yyb2716 = r.CheckBreak()
	}
	if yyb2716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2724 := &x.Command
		yym2725 := z.DecBinary()
		_ = yym2725
		if false {
		} else {
			z.F.DecSliceStringX(yyv2724, false, d)
		}
	}
	for {
		yyj2716++
		if yyhl2716 {
			yyb2716 = yyj2716 > l
		} else {
			yyb2716 = r.CheckBreak()
		}
		if yyb2716 {
			break
		}
		z.DecStructFieldNotFound(yyj2716-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2726 := z.EncBinary()
		_ = yym2726
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2727 := !z.EncBinary()
			yy2arr2727 := z.EncBasicHandle().StructToArray
			var yyq2727 [3]bool
			_, _, _ = yysep2727, yyq2727, yy2arr2727
			const yyr2727 bool = false
			yyq2727[0] = x.Kind != ""
			yyq2727[1] = x.APIVersion != ""
			yyq2727[2] = x.Path != ""
			if yyr2727 || yy2arr2727 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2727 int = 0
				for _, b := range yyq2727 {
					if b {
						yynn2727++
					}
				}
				r.EncodeMapStart(yynn2727)
			}
			if yyr2727 || yy2arr2727 {
				if yyq2727[0] {
					yym2729 := z.EncBinary()
					_ = yym2729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2727[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2727 || yy2arr2727 {
				if yyq2727[1] {
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2727[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2733 := z.EncBinary()
					_ = yym2733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2727 || yy2arr2727 {
				if yyq2727[2] {
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2727[2] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yysep2727 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2737 := z.DecBinary()
	_ = yym2737
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2738 := r.ReadMapStart()
			if yyl2738 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2738, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2738 := r.ReadArrayStart()
			if yyl2738 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2738, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2739Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2739Slc
	var yyhl2739 bool = l >= 0
	for yyj2739 := 0; ; yyj2739++ {
		if yyhl2739 {
			if yyj2739 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2739Slc = r.DecodeBytes(yys2739Slc, true, true)
		yys2739 := string(yys2739Slc)
		switch yys2739 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2739)
		} // end switch yys2739
	} // end for yyj2739
	if !yyhl2739 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2743 int
	var yyb2743 bool
	var yyhl2743 bool = l >= 0
	yyj2743++
	if yyhl2743 {
		yyb2743 = yyj2743 > l
	} else {
		yyb2743 = r.CheckBreak()
	}
	if yyb2743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2743++
	if yyhl2743 {
		yyb2743 = yyj2743 > l
	} else {
		yyb2743 = r.CheckBreak()
	}
	if yyb2743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2743++
	if yyhl2743 {
		yyb2743 = yyj2743 > l
	} else {
		yyb2743 = r.CheckBreak()
	}
	if yyb2743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2743++
		if yyhl2743 {
			yyb2743 = yyj2743 > l
		} else {
			yyb2743 = r.CheckBreak()
		}
		if yyb2743 {
			break
		}
		z.DecStructFieldNotFound(yyj2743-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2747 := z.EncBinary()
		_ = yym2747
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2748 := !z.EncBinary()
			yy2arr2748 := z.EncBasicHandle().StructToArray
			var yyq2748 [7]bool
			_, _, _ = yysep2748, yyq2748, yy2arr2748
			const yyr2748 bool = false
			yyq2748[0] = x.Kind != ""
			yyq2748[1] = x.Namespace != ""
			yyq2748[2] = x.Name != ""
			yyq2748[3] = x.UID != ""
			yyq2748[4] = x.APIVersion != ""
			yyq2748[5] = x.ResourceVersion != ""
			yyq2748[6] = x.FieldPath != ""
			if yyr2748 || yy2arr2748 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2748 int = 0
				for _, b := range yyq2748 {
					if b {
						yynn2748++
					}
				}
				r.EncodeMapStart(yynn2748)
			}
			if yyr2748 || yy2arr2748 {
				if yyq2748[0] {
					yym2750 := z.EncBinary()
					_ = yym2750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2748[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2751 := z.EncBinary()
					_ = yym2751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2748 || yy2arr2748 {
				if yyq2748[1] {
					yym2753 := z.EncBinary()
					_ = yym2753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2748[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym2754 := z.EncBinary()
					_ = yym2754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2748 || yy2arr2748 {
				if yyq2748[2] {
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2748[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2757 := z.EncBinary()
					_ = yym2757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2748 || yy2arr2748 {
				if yyq2748[3] {
					yym2759 := z.EncBinary()
					_ = yym2759
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2748[3] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym2760 := z.EncBinary()
					_ = yym2760
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2748 || yy2arr2748 {
				if yyq2748[4] {
					yym2762 := z.EncBinary()
					_ = yym2762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2748[4] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2763 := z.EncBinary()
					_ = yym2763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2748 || yy2arr2748 {
				if yyq2748[5] {
					yym2765 := z.EncBinary()
					_ = yym2765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2748[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2766 := z.EncBinary()
					_ = yym2766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2748 || yy2arr2748 {
				if yyq2748[6] {
					yym2768 := z.EncBinary()
					_ = yym2768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2748[6] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym2769 := z.EncBinary()
					_ = yym2769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2748 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2770 := z.DecBinary()
	_ = yym2770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2771 := r.ReadMapStart()
			if yyl2771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2771, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2771 := r.ReadArrayStart()
			if yyl2771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2772Slc
	var yyhl2772 bool = l >= 0
	for yyj2772 := 0; ; yyj2772++ {
		if yyhl2772 {
			if yyj2772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2772Slc = r.DecodeBytes(yys2772Slc, true, true)
		yys2772 := string(yys2772Slc)
		switch yys2772 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2772)
		} // end switch yys2772
	} // end for yyj2772
	if !yyhl2772 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2780 int
	var yyb2780 bool
	var yyhl2780 bool = l >= 0
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2780++
		if yyhl2780 {
			yyb2780 = yyj2780 > l
		} else {
			yyb2780 = r.CheckBreak()
		}
		if yyb2780 {
			break
		}
		z.DecStructFieldNotFound(yyj2780-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2788 := z.EncBinary()
		_ = yym2788
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2789 := !z.EncBinary()
			yy2arr2789 := z.EncBasicHandle().StructToArray
			var yyq2789 [1]bool
			_, _, _ = yysep2789, yyq2789, yy2arr2789
			const yyr2789 bool = false
			yyq2789[0] = x.Name != ""
			if yyr2789 || yy2arr2789 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2789 int = 0
				for _, b := range yyq2789 {
					if b {
						yynn2789++
					}
				}
				r.EncodeMapStart(yynn2789)
			}
			if yyr2789 || yy2arr2789 {
				if yyq2789[0] {
					yym2791 := z.EncBinary()
					_ = yym2791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2789[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2792 := z.EncBinary()
					_ = yym2792
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yysep2789 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2793 := z.DecBinary()
	_ = yym2793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2794 := r.ReadMapStart()
			if yyl2794 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2794, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2794 := r.ReadArrayStart()
			if yyl2794 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2794, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2795Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2795Slc
	var yyhl2795 bool = l >= 0
	for yyj2795 := 0; ; yyj2795++ {
		if yyhl2795 {
			if yyj2795 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2795Slc = r.DecodeBytes(yys2795Slc, true, true)
		yys2795 := string(yys2795Slc)
		switch yys2795 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2795)
		} // end switch yys2795
	} // end for yyj2795
	if !yyhl2795 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2797 int
	var yyb2797 bool
	var yyhl2797 bool = l >= 0
	yyj2797++
	if yyhl2797 {
		yyb2797 = yyj2797 > l
	} else {
		yyb2797 = r.CheckBreak()
	}
	if yyb2797 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2797++
		if yyhl2797 {
			yyb2797 = yyj2797 > l
		} else {
			yyb2797 = r.CheckBreak()
		}
		if yyb2797 {
			break
		}
		z.DecStructFieldNotFound(yyj2797-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2799 := z.EncBinary()
		_ = yym2799
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2800 := !z.EncBinary()
			yy2arr2800 := z.EncBasicHandle().StructToArray
			var yyq2800 [3]bool
			_, _, _ = yysep2800, yyq2800, yy2arr2800
			const yyr2800 bool = false
			yyq2800[0] = x.Kind != ""
			yyq2800[1] = x.APIVersion != ""
			yyq2800[2] = true
			if yyr2800 || yy2arr2800 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2800 int = 0
				for _, b := range yyq2800 {
					if b {
						yynn2800++
					}
				}
				r.EncodeMapStart(yynn2800)
			}
			if yyr2800 || yy2arr2800 {
				if yyq2800[0] {
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2800[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2803 := z.EncBinary()
					_ = yym2803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2800 || yy2arr2800 {
				if yyq2800[1] {
					yym2805 := z.EncBinary()
					_ = yym2805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2800[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2806 := z.EncBinary()
					_ = yym2806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2800 || yy2arr2800 {
				if yyq2800[2] {
					yy2808 := &x.Reference
					yy2808.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2800[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy2809 := &x.Reference
					yy2809.CodecEncodeSelf(e)
				}
			}
			if yysep2800 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2810 := z.DecBinary()
	_ = yym2810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2811 := r.ReadMapStart()
			if yyl2811 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2811, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2811 := r.ReadArrayStart()
			if yyl2811 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2812Slc
	var yyhl2812 bool = l >= 0
	for yyj2812 := 0; ; yyj2812++ {
		if yyhl2812 {
			if yyj2812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2812Slc = r.DecodeBytes(yys2812Slc, true, true)
		yys2812 := string(yys2812Slc)
		switch yys2812 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2815 := &x.Reference
				yyv2815.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2812)
		} // end switch yys2812
	} // end for yyj2812
	if !yyhl2812 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2816 int
	var yyb2816 bool
	var yyhl2816 bool = l >= 0
	yyj2816++
	if yyhl2816 {
		yyb2816 = yyj2816 > l
	} else {
		yyb2816 = r.CheckBreak()
	}
	if yyb2816 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2816++
	if yyhl2816 {
		yyb2816 = yyj2816 > l
	} else {
		yyb2816 = r.CheckBreak()
	}
	if yyb2816 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2816++
	if yyhl2816 {
		yyb2816 = yyj2816 > l
	} else {
		yyb2816 = r.CheckBreak()
	}
	if yyb2816 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2819 := &x.Reference
		yyv2819.CodecDecodeSelf(d)
	}
	for {
		yyj2816++
		if yyhl2816 {
			yyb2816 = yyj2816 > l
		} else {
			yyb2816 = r.CheckBreak()
		}
		if yyb2816 {
			break
		}
		z.DecStructFieldNotFound(yyj2816-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2820 := z.EncBinary()
		_ = yym2820
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2821 := !z.EncBinary()
			yy2arr2821 := z.EncBasicHandle().StructToArray
			var yyq2821 [2]bool
			_, _, _ = yysep2821, yyq2821, yy2arr2821
			const yyr2821 bool = false
			yyq2821[0] = x.Component != ""
			yyq2821[1] = x.Host != ""
			if yyr2821 || yy2arr2821 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2821 int = 0
				for _, b := range yyq2821 {
					if b {
						yynn2821++
					}
				}
				r.EncodeMapStart(yynn2821)
			}
			if yyr2821 || yy2arr2821 {
				if yyq2821[0] {
					yym2823 := z.EncBinary()
					_ = yym2823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2821[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym2824 := z.EncBinary()
					_ = yym2824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2821 || yy2arr2821 {
				if yyq2821[1] {
					yym2826 := z.EncBinary()
					_ = yym2826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2821[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym2827 := z.EncBinary()
					_ = yym2827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep2821 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2828 := z.DecBinary()
	_ = yym2828
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2829 := r.ReadMapStart()
			if yyl2829 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2829, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2829 := r.ReadArrayStart()
			if yyl2829 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2829, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2830Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2830Slc
	var yyhl2830 bool = l >= 0
	for yyj2830 := 0; ; yyj2830++ {
		if yyhl2830 {
			if yyj2830 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2830Slc = r.DecodeBytes(yys2830Slc, true, true)
		yys2830 := string(yys2830Slc)
		switch yys2830 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2830)
		} // end switch yys2830
	} // end for yyj2830
	if !yyhl2830 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2833 int
	var yyb2833 bool
	var yyhl2833 bool = l >= 0
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2833++
		if yyhl2833 {
			yyb2833 = yyj2833 > l
		} else {
			yyb2833 = r.CheckBreak()
		}
		if yyb2833 {
			break
		}
		z.DecStructFieldNotFound(yyj2833-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2836 := z.EncBinary()
		_ = yym2836
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2837 := !z.EncBinary()
			yy2arr2837 := z.EncBasicHandle().StructToArray
			var yyq2837 [10]bool
			_, _, _ = yysep2837, yyq2837, yy2arr2837
			const yyr2837 bool = false
			yyq2837[0] = x.Kind != ""
			yyq2837[1] = x.APIVersion != ""
			yyq2837[4] = x.Reason != ""
			yyq2837[5] = x.Message != ""
			yyq2837[6] = true
			yyq2837[7] = true
			yyq2837[8] = true
			yyq2837[9] = x.Count != 0
			if yyr2837 || yy2arr2837 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2837 int = 2
				for _, b := range yyq2837 {
					if b {
						yynn2837++
					}
				}
				r.EncodeMapStart(yynn2837)
			}
			if yyr2837 || yy2arr2837 {
				if yyq2837[0] {
					yym2839 := z.EncBinary()
					_ = yym2839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2837[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2840 := z.EncBinary()
					_ = yym2840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2837 || yy2arr2837 {
				if yyq2837[1] {
					yym2842 := z.EncBinary()
					_ = yym2842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2837[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2843 := z.EncBinary()
					_ = yym2843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2837 || yy2arr2837 {
				yy2845 := &x.ObjectMeta
				yy2845.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				yy2846 := &x.ObjectMeta
				yy2846.CodecEncodeSelf(e)
			}
			if yyr2837 || yy2arr2837 {
				yy2848 := &x.InvolvedObject
				yy2848.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				yy2849 := &x.InvolvedObject
				yy2849.CodecEncodeSelf(e)
			}
			if yyr2837 || yy2arr2837 {
				if yyq2837[4] {
					yym2851 := z.EncBinary()
					_ = yym2851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2837[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2852 := z.EncBinary()
					_ = yym2852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2837 || yy2arr2837 {
				if yyq2837[5] {
					yym2854 := z.EncBinary()
					_ = yym2854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2837[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2855 := z.EncBinary()
					_ = yym2855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2837 || yy2arr2837 {
				if yyq2837[6] {
					yy2857 := &x.Source
					yy2857.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2837[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy2858 := &x.Source
					yy2858.CodecEncodeSelf(e)
				}
			}
			if yyr2837 || yy2arr2837 {
				if yyq2837[7] {
					yy2860 := &x.FirstTimestamp
					yym2861 := z.EncBinary()
					_ = yym2861
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2860) {
					} else if yym2861 {
						z.EncBinaryMarshal(yy2860)
					} else if !yym2861 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2860)
					} else {
						z.EncFallback(yy2860)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2837[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy2862 := &x.FirstTimestamp
					yym2863 := z.EncBinary()
					_ = yym2863
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2862) {
					} else if yym2863 {
						z.EncBinaryMarshal(yy2862)
					} else if !yym2863 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2862)
					} else {
						z.EncFallback(yy2862)
					}
				}
			}
			if yyr2837 || yy2arr2837 {
				if yyq2837[8] {
					yy2865 := &x.LastTimestamp
					yym2866 := z.EncBinary()
					_ = yym2866
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2865) {
					} else if yym2866 {
						z.EncBinaryMarshal(yy2865)
					} else if !yym2866 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2865)
					} else {
						z.EncFallback(yy2865)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2837[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy2867 := &x.LastTimestamp
					yym2868 := z.EncBinary()
					_ = yym2868
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2867) {
					} else if yym2868 {
						z.EncBinaryMarshal(yy2867)
					} else if !yym2868 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2867)
					} else {
						z.EncFallback(yy2867)
					}
				}
			}
			if yyr2837 || yy2arr2837 {
				if yyq2837[9] {
					yym2870 := z.EncBinary()
					_ = yym2870
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2837[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym2871 := z.EncBinary()
					_ = yym2871
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep2837 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2872 := z.DecBinary()
	_ = yym2872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2873 := r.ReadMapStart()
			if yyl2873 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2873, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2873 := r.ReadArrayStart()
			if yyl2873 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2873, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2874Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2874Slc
	var yyhl2874 bool = l >= 0
	for yyj2874 := 0; ; yyj2874++ {
		if yyhl2874 {
			if yyj2874 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2874Slc = r.DecodeBytes(yys2874Slc, true, true)
		yys2874 := string(yys2874Slc)
		switch yys2874 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2877 := &x.ObjectMeta
				yyv2877.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2878 := &x.InvolvedObject
				yyv2878.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2881 := &x.Source
				yyv2881.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2882 := &x.FirstTimestamp
				yym2883 := z.DecBinary()
				_ = yym2883
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2882) {
				} else if yym2883 {
					z.DecBinaryUnmarshal(yyv2882)
				} else if !yym2883 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2882)
				} else {
					z.DecFallback(yyv2882, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2884 := &x.LastTimestamp
				yym2885 := z.DecBinary()
				_ = yym2885
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2884) {
				} else if yym2885 {
					z.DecBinaryUnmarshal(yyv2884)
				} else if !yym2885 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2884)
				} else {
					z.DecFallback(yyv2884, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2874)
		} // end switch yys2874
	} // end for yyj2874
	if !yyhl2874 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2887 int
	var yyb2887 bool
	var yyhl2887 bool = l >= 0
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2890 := &x.ObjectMeta
		yyv2890.CodecDecodeSelf(d)
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2891 := &x.InvolvedObject
		yyv2891.CodecDecodeSelf(d)
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2894 := &x.Source
		yyv2894.CodecDecodeSelf(d)
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2895 := &x.FirstTimestamp
		yym2896 := z.DecBinary()
		_ = yym2896
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2895) {
		} else if yym2896 {
			z.DecBinaryUnmarshal(yyv2895)
		} else if !yym2896 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2895)
		} else {
			z.DecFallback(yyv2895, false)
		}
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2897 := &x.LastTimestamp
		yym2898 := z.DecBinary()
		_ = yym2898
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2897) {
		} else if yym2898 {
			z.DecBinaryUnmarshal(yyv2897)
		} else if !yym2898 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2897)
		} else {
			z.DecFallback(yyv2897, false)
		}
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2887++
		if yyhl2887 {
			yyb2887 = yyj2887 > l
		} else {
			yyb2887 = r.CheckBreak()
		}
		if yyb2887 {
			break
		}
		z.DecStructFieldNotFound(yyj2887-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2900 := z.EncBinary()
		_ = yym2900
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2901 := !z.EncBinary()
			yy2arr2901 := z.EncBasicHandle().StructToArray
			var yyq2901 [4]bool
			_, _, _ = yysep2901, yyq2901, yy2arr2901
			const yyr2901 bool = false
			yyq2901[0] = x.Kind != ""
			yyq2901[1] = x.APIVersion != ""
			yyq2901[2] = true
			if yyr2901 || yy2arr2901 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2901 int = 1
				for _, b := range yyq2901 {
					if b {
						yynn2901++
					}
				}
				r.EncodeMapStart(yynn2901)
			}
			if yyr2901 || yy2arr2901 {
				if yyq2901[0] {
					yym2903 := z.EncBinary()
					_ = yym2903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2901[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2904 := z.EncBinary()
					_ = yym2904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2901 || yy2arr2901 {
				if yyq2901[1] {
					yym2906 := z.EncBinary()
					_ = yym2906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2901[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2907 := z.EncBinary()
					_ = yym2907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2901 || yy2arr2901 {
				if yyq2901[2] {
					yy2909 := &x.ListMeta
					yym2910 := z.EncBinary()
					_ = yym2910
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2909) {
					} else {
						z.EncFallback(yy2909)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2901[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2911 := &x.ListMeta
					yym2912 := z.EncBinary()
					_ = yym2912
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2911) {
					} else {
						z.EncFallback(yy2911)
					}
				}
			}
			if yyr2901 || yy2arr2901 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2915 := z.EncBinary()
					_ = yym2915
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep2901 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2916 := z.DecBinary()
	_ = yym2916
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2917 := r.ReadMapStart()
			if yyl2917 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2917, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2917 := r.ReadArrayStart()
			if yyl2917 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2917, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2918Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2918Slc
	var yyhl2918 bool = l >= 0
	for yyj2918 := 0; ; yyj2918++ {
		if yyhl2918 {
			if yyj2918 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2918Slc = r.DecodeBytes(yys2918Slc, true, true)
		yys2918 := string(yys2918Slc)
		switch yys2918 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2921 := &x.ListMeta
				yym2922 := z.DecBinary()
				_ = yym2922
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2921) {
				} else {
					z.DecFallback(yyv2921, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2923 := &x.Items
				yym2924 := z.DecBinary()
				_ = yym2924
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv2923), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2918)
		} // end switch yys2918
	} // end for yyj2918
	if !yyhl2918 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2925 int
	var yyb2925 bool
	var yyhl2925 bool = l >= 0
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2928 := &x.ListMeta
		yym2929 := z.DecBinary()
		_ = yym2929
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2928) {
		} else {
			z.DecFallback(yyv2928, false)
		}
	}
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2930 := &x.Items
		yym2931 := z.DecBinary()
		_ = yym2931
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv2930), d)
		}
	}
	for {
		yyj2925++
		if yyhl2925 {
			yyb2925 = yyj2925 > l
		} else {
			yyb2925 = r.CheckBreak()
		}
		if yyb2925 {
			break
		}
		z.DecStructFieldNotFound(yyj2925-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2932 := z.EncBinary()
		_ = yym2932
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2933 := !z.EncBinary()
			yy2arr2933 := z.EncBasicHandle().StructToArray
			var yyq2933 [4]bool
			_, _, _ = yysep2933, yyq2933, yy2arr2933
			const yyr2933 bool = false
			yyq2933[0] = x.Kind != ""
			yyq2933[1] = x.APIVersion != ""
			yyq2933[2] = true
			if yyr2933 || yy2arr2933 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2933 int = 1
				for _, b := range yyq2933 {
					if b {
						yynn2933++
					}
				}
				r.EncodeMapStart(yynn2933)
			}
			if yyr2933 || yy2arr2933 {
				if yyq2933[0] {
					yym2935 := z.EncBinary()
					_ = yym2935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2933[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2936 := z.EncBinary()
					_ = yym2936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2933 || yy2arr2933 {
				if yyq2933[1] {
					yym2938 := z.EncBinary()
					_ = yym2938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2933[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2939 := z.EncBinary()
					_ = yym2939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2933 || yy2arr2933 {
				if yyq2933[2] {
					yy2941 := &x.ListMeta
					yym2942 := z.EncBinary()
					_ = yym2942
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2941) {
					} else {
						z.EncFallback(yy2941)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2933[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2943 := &x.ListMeta
					yym2944 := z.EncBinary()
					_ = yym2944
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2943) {
					} else {
						z.EncFallback(yy2943)
					}
				}
			}
			if yyr2933 || yy2arr2933 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2946 := z.EncBinary()
					_ = yym2946
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2947 := z.EncBinary()
					_ = yym2947
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yysep2933 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2948 := z.DecBinary()
	_ = yym2948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2949 := r.ReadMapStart()
			if yyl2949 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2949, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2949 := r.ReadArrayStart()
			if yyl2949 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2950Slc
	var yyhl2950 bool = l >= 0
	for yyj2950 := 0; ; yyj2950++ {
		if yyhl2950 {
			if yyj2950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2950Slc = r.DecodeBytes(yys2950Slc, true, true)
		yys2950 := string(yys2950Slc)
		switch yys2950 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2953 := &x.ListMeta
				yym2954 := z.DecBinary()
				_ = yym2954
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2953) {
				} else {
					z.DecFallback(yyv2953, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2955 := &x.Items
				yym2956 := z.DecBinary()
				_ = yym2956
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv2955), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2950)
		} // end switch yys2950
	} // end for yyj2950
	if !yyhl2950 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2957 int
	var yyb2957 bool
	var yyhl2957 bool = l >= 0
	yyj2957++
	if yyhl2957 {
		yyb2957 = yyj2957 > l
	} else {
		yyb2957 = r.CheckBreak()
	}
	if yyb2957 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2957++
	if yyhl2957 {
		yyb2957 = yyj2957 > l
	} else {
		yyb2957 = r.CheckBreak()
	}
	if yyb2957 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2957++
	if yyhl2957 {
		yyb2957 = yyj2957 > l
	} else {
		yyb2957 = r.CheckBreak()
	}
	if yyb2957 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2960 := &x.ListMeta
		yym2961 := z.DecBinary()
		_ = yym2961
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2960) {
		} else {
			z.DecFallback(yyv2960, false)
		}
	}
	yyj2957++
	if yyhl2957 {
		yyb2957 = yyj2957 > l
	} else {
		yyb2957 = r.CheckBreak()
	}
	if yyb2957 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2962 := &x.Items
		yym2963 := z.DecBinary()
		_ = yym2963
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv2962), d)
		}
	}
	for {
		yyj2957++
		if yyhl2957 {
			yyb2957 = yyj2957 > l
		} else {
			yyb2957 = r.CheckBreak()
		}
		if yyb2957 {
			break
		}
		z.DecStructFieldNotFound(yyj2957-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2964 := z.EncBinary()
	_ = yym2964
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2965 := z.DecBinary()
	_ = yym2965
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2966 := z.EncBinary()
		_ = yym2966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2967 := !z.EncBinary()
			yy2arr2967 := z.EncBasicHandle().StructToArray
			var yyq2967 [6]bool
			_, _, _ = yysep2967, yyq2967, yy2arr2967
			const yyr2967 bool = false
			yyq2967[0] = x.Type != ""
			yyq2967[1] = len(x.Max) != 0
			yyq2967[2] = len(x.Min) != 0
			yyq2967[3] = len(x.Default) != 0
			yyq2967[4] = len(x.DefaultRequest) != 0
			yyq2967[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr2967 || yy2arr2967 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2967 int = 0
				for _, b := range yyq2967 {
					if b {
						yynn2967++
					}
				}
				r.EncodeMapStart(yynn2967)
			}
			if yyr2967 || yy2arr2967 {
				if yyq2967[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2967[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2967 || yy2arr2967 {
				if yyq2967[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2967[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2967 || yy2arr2967 {
				if yyq2967[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2967[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2967 || yy2arr2967 {
				if yyq2967[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2967[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2967 || yy2arr2967 {
				if yyq2967[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2967[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2967 || yy2arr2967 {
				if yyq2967[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2967[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2967 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2974 := z.DecBinary()
	_ = yym2974
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2975 := r.ReadMapStart()
			if yyl2975 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2975, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2975 := r.ReadArrayStart()
			if yyl2975 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2975, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2976Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2976Slc
	var yyhl2976 bool = l >= 0
	for yyj2976 := 0; ; yyj2976++ {
		if yyhl2976 {
			if yyj2976 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2976Slc = r.DecodeBytes(yys2976Slc, true, true)
		yys2976 := string(yys2976Slc)
		switch yys2976 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv2978 := &x.Max
				yyv2978.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv2979 := &x.Min
				yyv2979.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv2980 := &x.Default
				yyv2980.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv2981 := &x.DefaultRequest
				yyv2981.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv2982 := &x.MaxLimitRequestRatio
				yyv2982.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2976)
		} // end switch yys2976
	} // end for yyj2976
	if !yyhl2976 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2983 int
	var yyb2983 bool
	var yyhl2983 bool = l >= 0
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv2985 := &x.Max
		yyv2985.CodecDecodeSelf(d)
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv2986 := &x.Min
		yyv2986.CodecDecodeSelf(d)
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv2987 := &x.Default
		yyv2987.CodecDecodeSelf(d)
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv2988 := &x.DefaultRequest
		yyv2988.CodecDecodeSelf(d)
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv2989 := &x.MaxLimitRequestRatio
		yyv2989.CodecDecodeSelf(d)
	}
	for {
		yyj2983++
		if yyhl2983 {
			yyb2983 = yyj2983 > l
		} else {
			yyb2983 = r.CheckBreak()
		}
		if yyb2983 {
			break
		}
		z.DecStructFieldNotFound(yyj2983-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2990 := z.EncBinary()
		_ = yym2990
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2991 := !z.EncBinary()
			yy2arr2991 := z.EncBasicHandle().StructToArray
			var yyq2991 [1]bool
			_, _, _ = yysep2991, yyq2991, yy2arr2991
			const yyr2991 bool = false
			if yyr2991 || yy2arr2991 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2991 int = 1
				for _, b := range yyq2991 {
					if b {
						yynn2991++
					}
				}
				r.EncodeMapStart(yynn2991)
			}
			if yyr2991 || yy2arr2991 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym2993 := z.EncBinary()
					_ = yym2993
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym2994 := z.EncBinary()
					_ = yym2994
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep2991 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2995 := z.DecBinary()
	_ = yym2995
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2996 := r.ReadMapStart()
			if yyl2996 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2996, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2996 := r.ReadArrayStart()
			if yyl2996 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2996, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2997Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2997Slc
	var yyhl2997 bool = l >= 0
	for yyj2997 := 0; ; yyj2997++ {
		if yyhl2997 {
			if yyj2997 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2997Slc = r.DecodeBytes(yys2997Slc, true, true)
		yys2997 := string(yys2997Slc)
		switch yys2997 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv2998 := &x.Limits
				yym2999 := z.DecBinary()
				_ = yym2999
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv2998), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2997)
		} // end switch yys2997
	} // end for yyj2997
	if !yyhl2997 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3000 int
	var yyb3000 bool
	var yyhl3000 bool = l >= 0
	yyj3000++
	if yyhl3000 {
		yyb3000 = yyj3000 > l
	} else {
		yyb3000 = r.CheckBreak()
	}
	if yyb3000 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3001 := &x.Limits
		yym3002 := z.DecBinary()
		_ = yym3002
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3001), d)
		}
	}
	for {
		yyj3000++
		if yyhl3000 {
			yyb3000 = yyj3000 > l
		} else {
			yyb3000 = r.CheckBreak()
		}
		if yyb3000 {
			break
		}
		z.DecStructFieldNotFound(yyj3000-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3003 := z.EncBinary()
		_ = yym3003
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3004 := !z.EncBinary()
			yy2arr3004 := z.EncBasicHandle().StructToArray
			var yyq3004 [4]bool
			_, _, _ = yysep3004, yyq3004, yy2arr3004
			const yyr3004 bool = false
			yyq3004[0] = x.Kind != ""
			yyq3004[1] = x.APIVersion != ""
			yyq3004[2] = true
			yyq3004[3] = true
			if yyr3004 || yy2arr3004 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3004 int = 0
				for _, b := range yyq3004 {
					if b {
						yynn3004++
					}
				}
				r.EncodeMapStart(yynn3004)
			}
			if yyr3004 || yy2arr3004 {
				if yyq3004[0] {
					yym3006 := z.EncBinary()
					_ = yym3006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3004[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3007 := z.EncBinary()
					_ = yym3007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3004 || yy2arr3004 {
				if yyq3004[1] {
					yym3009 := z.EncBinary()
					_ = yym3009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3004[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3010 := z.EncBinary()
					_ = yym3010
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3004 || yy2arr3004 {
				if yyq3004[2] {
					yy3012 := &x.ObjectMeta
					yy3012.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3004[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3013 := &x.ObjectMeta
					yy3013.CodecEncodeSelf(e)
				}
			}
			if yyr3004 || yy2arr3004 {
				if yyq3004[3] {
					yy3015 := &x.Spec
					yy3015.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3004[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3016 := &x.Spec
					yy3016.CodecEncodeSelf(e)
				}
			}
			if yysep3004 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3017 := z.DecBinary()
	_ = yym3017
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3018 := r.ReadMapStart()
			if yyl3018 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3018, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3018 := r.ReadArrayStart()
			if yyl3018 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3018, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3019Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3019Slc
	var yyhl3019 bool = l >= 0
	for yyj3019 := 0; ; yyj3019++ {
		if yyhl3019 {
			if yyj3019 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3019Slc = r.DecodeBytes(yys3019Slc, true, true)
		yys3019 := string(yys3019Slc)
		switch yys3019 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3022 := &x.ObjectMeta
				yyv3022.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3023 := &x.Spec
				yyv3023.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3019)
		} // end switch yys3019
	} // end for yyj3019
	if !yyhl3019 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3024 int
	var yyb3024 bool
	var yyhl3024 bool = l >= 0
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3027 := &x.ObjectMeta
		yyv3027.CodecDecodeSelf(d)
	}
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3028 := &x.Spec
		yyv3028.CodecDecodeSelf(d)
	}
	for {
		yyj3024++
		if yyhl3024 {
			yyb3024 = yyj3024 > l
		} else {
			yyb3024 = r.CheckBreak()
		}
		if yyb3024 {
			break
		}
		z.DecStructFieldNotFound(yyj3024-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3029 := z.EncBinary()
		_ = yym3029
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3030 := !z.EncBinary()
			yy2arr3030 := z.EncBasicHandle().StructToArray
			var yyq3030 [4]bool
			_, _, _ = yysep3030, yyq3030, yy2arr3030
			const yyr3030 bool = false
			yyq3030[0] = x.Kind != ""
			yyq3030[1] = x.APIVersion != ""
			yyq3030[2] = true
			if yyr3030 || yy2arr3030 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3030 int = 1
				for _, b := range yyq3030 {
					if b {
						yynn3030++
					}
				}
				r.EncodeMapStart(yynn3030)
			}
			if yyr3030 || yy2arr3030 {
				if yyq3030[0] {
					yym3032 := z.EncBinary()
					_ = yym3032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3030[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3033 := z.EncBinary()
					_ = yym3033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3030 || yy2arr3030 {
				if yyq3030[1] {
					yym3035 := z.EncBinary()
					_ = yym3035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3030[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3036 := z.EncBinary()
					_ = yym3036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3030 || yy2arr3030 {
				if yyq3030[2] {
					yy3038 := &x.ListMeta
					yym3039 := z.EncBinary()
					_ = yym3039
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3038) {
					} else {
						z.EncFallback(yy3038)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3030[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3040 := &x.ListMeta
					yym3041 := z.EncBinary()
					_ = yym3041
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3040) {
					} else {
						z.EncFallback(yy3040)
					}
				}
			}
			if yyr3030 || yy2arr3030 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3043 := z.EncBinary()
					_ = yym3043
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3044 := z.EncBinary()
					_ = yym3044
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3030 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3045 := z.DecBinary()
	_ = yym3045
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3046 := r.ReadMapStart()
			if yyl3046 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3046, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3046 := r.ReadArrayStart()
			if yyl3046 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3046, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3047Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3047Slc
	var yyhl3047 bool = l >= 0
	for yyj3047 := 0; ; yyj3047++ {
		if yyhl3047 {
			if yyj3047 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3047Slc = r.DecodeBytes(yys3047Slc, true, true)
		yys3047 := string(yys3047Slc)
		switch yys3047 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3050 := &x.ListMeta
				yym3051 := z.DecBinary()
				_ = yym3051
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3050) {
				} else {
					z.DecFallback(yyv3050, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3052 := &x.Items
				yym3053 := z.DecBinary()
				_ = yym3053
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3052), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3047)
		} // end switch yys3047
	} // end for yyj3047
	if !yyhl3047 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3054 int
	var yyb3054 bool
	var yyhl3054 bool = l >= 0
	yyj3054++
	if yyhl3054 {
		yyb3054 = yyj3054 > l
	} else {
		yyb3054 = r.CheckBreak()
	}
	if yyb3054 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3054++
	if yyhl3054 {
		yyb3054 = yyj3054 > l
	} else {
		yyb3054 = r.CheckBreak()
	}
	if yyb3054 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3054++
	if yyhl3054 {
		yyb3054 = yyj3054 > l
	} else {
		yyb3054 = r.CheckBreak()
	}
	if yyb3054 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3057 := &x.ListMeta
		yym3058 := z.DecBinary()
		_ = yym3058
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3057) {
		} else {
			z.DecFallback(yyv3057, false)
		}
	}
	yyj3054++
	if yyhl3054 {
		yyb3054 = yyj3054 > l
	} else {
		yyb3054 = r.CheckBreak()
	}
	if yyb3054 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3059 := &x.Items
		yym3060 := z.DecBinary()
		_ = yym3060
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3059), d)
		}
	}
	for {
		yyj3054++
		if yyhl3054 {
			yyb3054 = yyj3054 > l
		} else {
			yyb3054 = r.CheckBreak()
		}
		if yyb3054 {
			break
		}
		z.DecStructFieldNotFound(yyj3054-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3061 := z.EncBinary()
		_ = yym3061
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3062 := !z.EncBinary()
			yy2arr3062 := z.EncBasicHandle().StructToArray
			var yyq3062 [1]bool
			_, _, _ = yysep3062, yyq3062, yy2arr3062
			const yyr3062 bool = false
			yyq3062[0] = len(x.Hard) != 0
			if yyr3062 || yy2arr3062 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3062 int = 0
				for _, b := range yyq3062 {
					if b {
						yynn3062++
					}
				}
				r.EncodeMapStart(yynn3062)
			}
			if yyr3062 || yy2arr3062 {
				if yyq3062[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3062[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3062 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3064 := z.DecBinary()
	_ = yym3064
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3065 := r.ReadMapStart()
			if yyl3065 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3065, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3065 := r.ReadArrayStart()
			if yyl3065 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3065, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3066Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3066Slc
	var yyhl3066 bool = l >= 0
	for yyj3066 := 0; ; yyj3066++ {
		if yyhl3066 {
			if yyj3066 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3066Slc = r.DecodeBytes(yys3066Slc, true, true)
		yys3066 := string(yys3066Slc)
		switch yys3066 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3067 := &x.Hard
				yyv3067.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3066)
		} // end switch yys3066
	} // end for yyj3066
	if !yyhl3066 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3068 int
	var yyb3068 bool
	var yyhl3068 bool = l >= 0
	yyj3068++
	if yyhl3068 {
		yyb3068 = yyj3068 > l
	} else {
		yyb3068 = r.CheckBreak()
	}
	if yyb3068 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3069 := &x.Hard
		yyv3069.CodecDecodeSelf(d)
	}
	for {
		yyj3068++
		if yyhl3068 {
			yyb3068 = yyj3068 > l
		} else {
			yyb3068 = r.CheckBreak()
		}
		if yyb3068 {
			break
		}
		z.DecStructFieldNotFound(yyj3068-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3070 := z.EncBinary()
		_ = yym3070
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3071 := !z.EncBinary()
			yy2arr3071 := z.EncBasicHandle().StructToArray
			var yyq3071 [2]bool
			_, _, _ = yysep3071, yyq3071, yy2arr3071
			const yyr3071 bool = false
			yyq3071[0] = len(x.Hard) != 0
			yyq3071[1] = len(x.Used) != 0
			if yyr3071 || yy2arr3071 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3071 int = 0
				for _, b := range yyq3071 {
					if b {
						yynn3071++
					}
				}
				r.EncodeMapStart(yynn3071)
			}
			if yyr3071 || yy2arr3071 {
				if yyq3071[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3071[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				if yyq3071[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3071[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3071 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3074 := z.DecBinary()
	_ = yym3074
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3075 := r.ReadMapStart()
			if yyl3075 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3075, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3075 := r.ReadArrayStart()
			if yyl3075 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3075, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3076Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3076Slc
	var yyhl3076 bool = l >= 0
	for yyj3076 := 0; ; yyj3076++ {
		if yyhl3076 {
			if yyj3076 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3076Slc = r.DecodeBytes(yys3076Slc, true, true)
		yys3076 := string(yys3076Slc)
		switch yys3076 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3077 := &x.Hard
				yyv3077.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3078 := &x.Used
				yyv3078.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3076)
		} // end switch yys3076
	} // end for yyj3076
	if !yyhl3076 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3079 int
	var yyb3079 bool
	var yyhl3079 bool = l >= 0
	yyj3079++
	if yyhl3079 {
		yyb3079 = yyj3079 > l
	} else {
		yyb3079 = r.CheckBreak()
	}
	if yyb3079 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3080 := &x.Hard
		yyv3080.CodecDecodeSelf(d)
	}
	yyj3079++
	if yyhl3079 {
		yyb3079 = yyj3079 > l
	} else {
		yyb3079 = r.CheckBreak()
	}
	if yyb3079 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3081 := &x.Used
		yyv3081.CodecDecodeSelf(d)
	}
	for {
		yyj3079++
		if yyhl3079 {
			yyb3079 = yyj3079 > l
		} else {
			yyb3079 = r.CheckBreak()
		}
		if yyb3079 {
			break
		}
		z.DecStructFieldNotFound(yyj3079-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3082 := z.EncBinary()
		_ = yym3082
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3083 := !z.EncBinary()
			yy2arr3083 := z.EncBasicHandle().StructToArray
			var yyq3083 [5]bool
			_, _, _ = yysep3083, yyq3083, yy2arr3083
			const yyr3083 bool = false
			yyq3083[0] = x.Kind != ""
			yyq3083[1] = x.APIVersion != ""
			yyq3083[2] = true
			yyq3083[3] = true
			yyq3083[4] = true
			if yyr3083 || yy2arr3083 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3083 int = 0
				for _, b := range yyq3083 {
					if b {
						yynn3083++
					}
				}
				r.EncodeMapStart(yynn3083)
			}
			if yyr3083 || yy2arr3083 {
				if yyq3083[0] {
					yym3085 := z.EncBinary()
					_ = yym3085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3083[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3086 := z.EncBinary()
					_ = yym3086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3083 || yy2arr3083 {
				if yyq3083[1] {
					yym3088 := z.EncBinary()
					_ = yym3088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3083[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3089 := z.EncBinary()
					_ = yym3089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3083 || yy2arr3083 {
				if yyq3083[2] {
					yy3091 := &x.ObjectMeta
					yy3091.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3083[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3092 := &x.ObjectMeta
					yy3092.CodecEncodeSelf(e)
				}
			}
			if yyr3083 || yy2arr3083 {
				if yyq3083[3] {
					yy3094 := &x.Spec
					yy3094.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3083[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3095 := &x.Spec
					yy3095.CodecEncodeSelf(e)
				}
			}
			if yyr3083 || yy2arr3083 {
				if yyq3083[4] {
					yy3097 := &x.Status
					yy3097.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3083[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3098 := &x.Status
					yy3098.CodecEncodeSelf(e)
				}
			}
			if yysep3083 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3099 := z.DecBinary()
	_ = yym3099
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3100 := r.ReadMapStart()
			if yyl3100 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3100, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3100 := r.ReadArrayStart()
			if yyl3100 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3100, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3101Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3101Slc
	var yyhl3101 bool = l >= 0
	for yyj3101 := 0; ; yyj3101++ {
		if yyhl3101 {
			if yyj3101 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3101Slc = r.DecodeBytes(yys3101Slc, true, true)
		yys3101 := string(yys3101Slc)
		switch yys3101 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3104 := &x.ObjectMeta
				yyv3104.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3105 := &x.Spec
				yyv3105.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3106 := &x.Status
				yyv3106.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3101)
		} // end switch yys3101
	} // end for yyj3101
	if !yyhl3101 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3107 int
	var yyb3107 bool
	var yyhl3107 bool = l >= 0
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3110 := &x.ObjectMeta
		yyv3110.CodecDecodeSelf(d)
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3111 := &x.Spec
		yyv3111.CodecDecodeSelf(d)
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3112 := &x.Status
		yyv3112.CodecDecodeSelf(d)
	}
	for {
		yyj3107++
		if yyhl3107 {
			yyb3107 = yyj3107 > l
		} else {
			yyb3107 = r.CheckBreak()
		}
		if yyb3107 {
			break
		}
		z.DecStructFieldNotFound(yyj3107-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3113 := z.EncBinary()
		_ = yym3113
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3114 := !z.EncBinary()
			yy2arr3114 := z.EncBasicHandle().StructToArray
			var yyq3114 [4]bool
			_, _, _ = yysep3114, yyq3114, yy2arr3114
			const yyr3114 bool = false
			yyq3114[0] = x.Kind != ""
			yyq3114[1] = x.APIVersion != ""
			yyq3114[2] = true
			if yyr3114 || yy2arr3114 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3114 int = 1
				for _, b := range yyq3114 {
					if b {
						yynn3114++
					}
				}
				r.EncodeMapStart(yynn3114)
			}
			if yyr3114 || yy2arr3114 {
				if yyq3114[0] {
					yym3116 := z.EncBinary()
					_ = yym3116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3114[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3117 := z.EncBinary()
					_ = yym3117
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3114 || yy2arr3114 {
				if yyq3114[1] {
					yym3119 := z.EncBinary()
					_ = yym3119
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3114[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3120 := z.EncBinary()
					_ = yym3120
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3114 || yy2arr3114 {
				if yyq3114[2] {
					yy3122 := &x.ListMeta
					yym3123 := z.EncBinary()
					_ = yym3123
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3122) {
					} else {
						z.EncFallback(yy3122)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3114[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3124 := &x.ListMeta
					yym3125 := z.EncBinary()
					_ = yym3125
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3124) {
					} else {
						z.EncFallback(yy3124)
					}
				}
			}
			if yyr3114 || yy2arr3114 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3127 := z.EncBinary()
					_ = yym3127
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3128 := z.EncBinary()
					_ = yym3128
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3114 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3129 := z.DecBinary()
	_ = yym3129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3130 := r.ReadMapStart()
			if yyl3130 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3130, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3130 := r.ReadArrayStart()
			if yyl3130 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3131Slc
	var yyhl3131 bool = l >= 0
	for yyj3131 := 0; ; yyj3131++ {
		if yyhl3131 {
			if yyj3131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3131Slc = r.DecodeBytes(yys3131Slc, true, true)
		yys3131 := string(yys3131Slc)
		switch yys3131 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3134 := &x.ListMeta
				yym3135 := z.DecBinary()
				_ = yym3135
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3134) {
				} else {
					z.DecFallback(yyv3134, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3136 := &x.Items
				yym3137 := z.DecBinary()
				_ = yym3137
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3136), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3131)
		} // end switch yys3131
	} // end for yyj3131
	if !yyhl3131 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3138 int
	var yyb3138 bool
	var yyhl3138 bool = l >= 0
	yyj3138++
	if yyhl3138 {
		yyb3138 = yyj3138 > l
	} else {
		yyb3138 = r.CheckBreak()
	}
	if yyb3138 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3138++
	if yyhl3138 {
		yyb3138 = yyj3138 > l
	} else {
		yyb3138 = r.CheckBreak()
	}
	if yyb3138 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3138++
	if yyhl3138 {
		yyb3138 = yyj3138 > l
	} else {
		yyb3138 = r.CheckBreak()
	}
	if yyb3138 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3141 := &x.ListMeta
		yym3142 := z.DecBinary()
		_ = yym3142
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3141) {
		} else {
			z.DecFallback(yyv3141, false)
		}
	}
	yyj3138++
	if yyhl3138 {
		yyb3138 = yyj3138 > l
	} else {
		yyb3138 = r.CheckBreak()
	}
	if yyb3138 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3143 := &x.Items
		yym3144 := z.DecBinary()
		_ = yym3144
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3143), d)
		}
	}
	for {
		yyj3138++
		if yyhl3138 {
			yyb3138 = yyj3138 > l
		} else {
			yyb3138 = r.CheckBreak()
		}
		if yyb3138 {
			break
		}
		z.DecStructFieldNotFound(yyj3138-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3145 := z.EncBinary()
		_ = yym3145
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3146 := !z.EncBinary()
			yy2arr3146 := z.EncBasicHandle().StructToArray
			var yyq3146 [5]bool
			_, _, _ = yysep3146, yyq3146, yy2arr3146
			const yyr3146 bool = false
			yyq3146[0] = x.Kind != ""
			yyq3146[1] = x.APIVersion != ""
			yyq3146[2] = true
			yyq3146[3] = len(x.Data) != 0
			yyq3146[4] = x.Type != ""
			if yyr3146 || yy2arr3146 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3146 int = 0
				for _, b := range yyq3146 {
					if b {
						yynn3146++
					}
				}
				r.EncodeMapStart(yynn3146)
			}
			if yyr3146 || yy2arr3146 {
				if yyq3146[0] {
					yym3148 := z.EncBinary()
					_ = yym3148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3146[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3149 := z.EncBinary()
					_ = yym3149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3146 || yy2arr3146 {
				if yyq3146[1] {
					yym3151 := z.EncBinary()
					_ = yym3151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3146[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3152 := z.EncBinary()
					_ = yym3152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3146 || yy2arr3146 {
				if yyq3146[2] {
					yy3154 := &x.ObjectMeta
					yy3154.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3146[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3155 := &x.ObjectMeta
					yy3155.CodecEncodeSelf(e)
				}
			}
			if yyr3146 || yy2arr3146 {
				if yyq3146[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3157 := z.EncBinary()
						_ = yym3157
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3146[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3158 := z.EncBinary()
						_ = yym3158
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3146 || yy2arr3146 {
				if yyq3146[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3146[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3146 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3160 := z.DecBinary()
	_ = yym3160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3161 := r.ReadMapStart()
			if yyl3161 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3161, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3161 := r.ReadArrayStart()
			if yyl3161 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3162Slc
	var yyhl3162 bool = l >= 0
	for yyj3162 := 0; ; yyj3162++ {
		if yyhl3162 {
			if yyj3162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3162Slc = r.DecodeBytes(yys3162Slc, true, true)
		yys3162 := string(yys3162Slc)
		switch yys3162 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3165 := &x.ObjectMeta
				yyv3165.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3166 := &x.Data
				yym3167 := z.DecBinary()
				_ = yym3167
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3166), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3162)
		} // end switch yys3162
	} // end for yyj3162
	if !yyhl3162 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3169 int
	var yyb3169 bool
	var yyhl3169 bool = l >= 0
	yyj3169++
	if yyhl3169 {
		yyb3169 = yyj3169 > l
	} else {
		yyb3169 = r.CheckBreak()
	}
	if yyb3169 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3169++
	if yyhl3169 {
		yyb3169 = yyj3169 > l
	} else {
		yyb3169 = r.CheckBreak()
	}
	if yyb3169 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3169++
	if yyhl3169 {
		yyb3169 = yyj3169 > l
	} else {
		yyb3169 = r.CheckBreak()
	}
	if yyb3169 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3172 := &x.ObjectMeta
		yyv3172.CodecDecodeSelf(d)
	}
	yyj3169++
	if yyhl3169 {
		yyb3169 = yyj3169 > l
	} else {
		yyb3169 = r.CheckBreak()
	}
	if yyb3169 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3173 := &x.Data
		yym3174 := z.DecBinary()
		_ = yym3174
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3173), d)
		}
	}
	yyj3169++
	if yyhl3169 {
		yyb3169 = yyj3169 > l
	} else {
		yyb3169 = r.CheckBreak()
	}
	if yyb3169 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3169++
		if yyhl3169 {
			yyb3169 = yyj3169 > l
		} else {
			yyb3169 = r.CheckBreak()
		}
		if yyb3169 {
			break
		}
		z.DecStructFieldNotFound(yyj3169-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3176 := z.EncBinary()
	_ = yym3176
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3177 := z.DecBinary()
	_ = yym3177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3178 := z.EncBinary()
		_ = yym3178
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3179 := !z.EncBinary()
			yy2arr3179 := z.EncBasicHandle().StructToArray
			var yyq3179 [4]bool
			_, _, _ = yysep3179, yyq3179, yy2arr3179
			const yyr3179 bool = false
			yyq3179[0] = x.Kind != ""
			yyq3179[1] = x.APIVersion != ""
			yyq3179[2] = true
			if yyr3179 || yy2arr3179 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3179 int = 1
				for _, b := range yyq3179 {
					if b {
						yynn3179++
					}
				}
				r.EncodeMapStart(yynn3179)
			}
			if yyr3179 || yy2arr3179 {
				if yyq3179[0] {
					yym3181 := z.EncBinary()
					_ = yym3181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3179[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3182 := z.EncBinary()
					_ = yym3182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3179 || yy2arr3179 {
				if yyq3179[1] {
					yym3184 := z.EncBinary()
					_ = yym3184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3179[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3179 || yy2arr3179 {
				if yyq3179[2] {
					yy3187 := &x.ListMeta
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3187) {
					} else {
						z.EncFallback(yy3187)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3179[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3189 := &x.ListMeta
					yym3190 := z.EncBinary()
					_ = yym3190
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3189) {
					} else {
						z.EncFallback(yy3189)
					}
				}
			}
			if yyr3179 || yy2arr3179 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3192 := z.EncBinary()
					_ = yym3192
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3193 := z.EncBinary()
					_ = yym3193
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3179 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3194 := z.DecBinary()
	_ = yym3194
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3195 := r.ReadMapStart()
			if yyl3195 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3195, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3195 := r.ReadArrayStart()
			if yyl3195 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3195, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3196Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3196Slc
	var yyhl3196 bool = l >= 0
	for yyj3196 := 0; ; yyj3196++ {
		if yyhl3196 {
			if yyj3196 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3196Slc = r.DecodeBytes(yys3196Slc, true, true)
		yys3196 := string(yys3196Slc)
		switch yys3196 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3199 := &x.ListMeta
				yym3200 := z.DecBinary()
				_ = yym3200
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3199) {
				} else {
					z.DecFallback(yyv3199, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3201 := &x.Items
				yym3202 := z.DecBinary()
				_ = yym3202
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3201), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3196)
		} // end switch yys3196
	} // end for yyj3196
	if !yyhl3196 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3203 int
	var yyb3203 bool
	var yyhl3203 bool = l >= 0
	yyj3203++
	if yyhl3203 {
		yyb3203 = yyj3203 > l
	} else {
		yyb3203 = r.CheckBreak()
	}
	if yyb3203 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3203++
	if yyhl3203 {
		yyb3203 = yyj3203 > l
	} else {
		yyb3203 = r.CheckBreak()
	}
	if yyb3203 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3203++
	if yyhl3203 {
		yyb3203 = yyj3203 > l
	} else {
		yyb3203 = r.CheckBreak()
	}
	if yyb3203 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3206 := &x.ListMeta
		yym3207 := z.DecBinary()
		_ = yym3207
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3206) {
		} else {
			z.DecFallback(yyv3206, false)
		}
	}
	yyj3203++
	if yyhl3203 {
		yyb3203 = yyj3203 > l
	} else {
		yyb3203 = r.CheckBreak()
	}
	if yyb3203 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3208 := &x.Items
		yym3209 := z.DecBinary()
		_ = yym3209
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3208), d)
		}
	}
	for {
		yyj3203++
		if yyhl3203 {
			yyb3203 = yyj3203 > l
		} else {
			yyb3203 = r.CheckBreak()
		}
		if yyb3203 {
			break
		}
		z.DecStructFieldNotFound(yyj3203-1, "")
	}
	r.ReadEnd()
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3210 := z.EncBinary()
	_ = yym3210
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3211 := z.DecBinary()
	_ = yym3211
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3212 := z.EncBinary()
		_ = yym3212
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3213 := !z.EncBinary()
			yy2arr3213 := z.EncBasicHandle().StructToArray
			var yyq3213 [4]bool
			_, _, _ = yysep3213, yyq3213, yy2arr3213
			const yyr3213 bool = false
			yyq3213[2] = x.Message != ""
			yyq3213[3] = x.Error != ""
			if yyr3213 || yy2arr3213 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3213 int = 2
				for _, b := range yyq3213 {
					if b {
						yynn3213++
					}
				}
				r.EncodeMapStart(yynn3213)
			}
			if yyr3213 || yy2arr3213 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3213 || yy2arr3213 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3213 || yy2arr3213 {
				if yyq3213[2] {
					yym3217 := z.EncBinary()
					_ = yym3217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3213[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3213 || yy2arr3213 {
				if yyq3213[3] {
					yym3220 := z.EncBinary()
					_ = yym3220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3213[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3213 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3222 := z.DecBinary()
	_ = yym3222
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3223 := r.ReadMapStart()
			if yyl3223 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3223, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3223 := r.ReadArrayStart()
			if yyl3223 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3223, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3224Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3224Slc
	var yyhl3224 bool = l >= 0
	for yyj3224 := 0; ; yyj3224++ {
		if yyhl3224 {
			if yyj3224 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3224Slc = r.DecodeBytes(yys3224Slc, true, true)
		yys3224 := string(yys3224Slc)
		switch yys3224 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3224)
		} // end switch yys3224
	} // end for yyj3224
	if !yyhl3224 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3229 int
	var yyb3229 bool
	var yyhl3229 bool = l >= 0
	yyj3229++
	if yyhl3229 {
		yyb3229 = yyj3229 > l
	} else {
		yyb3229 = r.CheckBreak()
	}
	if yyb3229 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3229++
	if yyhl3229 {
		yyb3229 = yyj3229 > l
	} else {
		yyb3229 = r.CheckBreak()
	}
	if yyb3229 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3229++
	if yyhl3229 {
		yyb3229 = yyj3229 > l
	} else {
		yyb3229 = r.CheckBreak()
	}
	if yyb3229 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3229++
	if yyhl3229 {
		yyb3229 = yyj3229 > l
	} else {
		yyb3229 = r.CheckBreak()
	}
	if yyb3229 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3229++
		if yyhl3229 {
			yyb3229 = yyj3229 > l
		} else {
			yyb3229 = r.CheckBreak()
		}
		if yyb3229 {
			break
		}
		z.DecStructFieldNotFound(yyj3229-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3234 := z.EncBinary()
		_ = yym3234
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3235 := !z.EncBinary()
			yy2arr3235 := z.EncBasicHandle().StructToArray
			var yyq3235 [4]bool
			_, _, _ = yysep3235, yyq3235, yy2arr3235
			const yyr3235 bool = false
			yyq3235[0] = x.Kind != ""
			yyq3235[1] = x.APIVersion != ""
			yyq3235[2] = true
			yyq3235[3] = len(x.Conditions) != 0
			if yyr3235 || yy2arr3235 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3235 int = 0
				for _, b := range yyq3235 {
					if b {
						yynn3235++
					}
				}
				r.EncodeMapStart(yynn3235)
			}
			if yyr3235 || yy2arr3235 {
				if yyq3235[0] {
					yym3237 := z.EncBinary()
					_ = yym3237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3235[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3238 := z.EncBinary()
					_ = yym3238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3235 || yy2arr3235 {
				if yyq3235[1] {
					yym3240 := z.EncBinary()
					_ = yym3240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3235[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3241 := z.EncBinary()
					_ = yym3241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3235 || yy2arr3235 {
				if yyq3235[2] {
					yy3243 := &x.ObjectMeta
					yy3243.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3235[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3244 := &x.ObjectMeta
					yy3244.CodecEncodeSelf(e)
				}
			}
			if yyr3235 || yy2arr3235 {
				if yyq3235[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3246 := z.EncBinary()
						_ = yym3246
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3235[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3247 := z.EncBinary()
						_ = yym3247
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3235 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3248 := z.DecBinary()
	_ = yym3248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3249 := r.ReadMapStart()
			if yyl3249 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3249, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3249 := r.ReadArrayStart()
			if yyl3249 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3250Slc
	var yyhl3250 bool = l >= 0
	for yyj3250 := 0; ; yyj3250++ {
		if yyhl3250 {
			if yyj3250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3250Slc = r.DecodeBytes(yys3250Slc, true, true)
		yys3250 := string(yys3250Slc)
		switch yys3250 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3253 := &x.ObjectMeta
				yyv3253.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3254 := &x.Conditions
				yym3255 := z.DecBinary()
				_ = yym3255
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3254), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3250)
		} // end switch yys3250
	} // end for yyj3250
	if !yyhl3250 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3256 int
	var yyb3256 bool
	var yyhl3256 bool = l >= 0
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3259 := &x.ObjectMeta
		yyv3259.CodecDecodeSelf(d)
	}
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3260 := &x.Conditions
		yym3261 := z.DecBinary()
		_ = yym3261
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3260), d)
		}
	}
	for {
		yyj3256++
		if yyhl3256 {
			yyb3256 = yyj3256 > l
		} else {
			yyb3256 = r.CheckBreak()
		}
		if yyb3256 {
			break
		}
		z.DecStructFieldNotFound(yyj3256-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3262 := z.EncBinary()
		_ = yym3262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3263 := !z.EncBinary()
			yy2arr3263 := z.EncBasicHandle().StructToArray
			var yyq3263 [4]bool
			_, _, _ = yysep3263, yyq3263, yy2arr3263
			const yyr3263 bool = false
			yyq3263[0] = x.Kind != ""
			yyq3263[1] = x.APIVersion != ""
			yyq3263[2] = true
			if yyr3263 || yy2arr3263 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3263 int = 1
				for _, b := range yyq3263 {
					if b {
						yynn3263++
					}
				}
				r.EncodeMapStart(yynn3263)
			}
			if yyr3263 || yy2arr3263 {
				if yyq3263[0] {
					yym3265 := z.EncBinary()
					_ = yym3265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3263[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3266 := z.EncBinary()
					_ = yym3266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				if yyq3263[1] {
					yym3268 := z.EncBinary()
					_ = yym3268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3263[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3269 := z.EncBinary()
					_ = yym3269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				if yyq3263[2] {
					yy3271 := &x.ListMeta
					yym3272 := z.EncBinary()
					_ = yym3272
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3271) {
					} else {
						z.EncFallback(yy3271)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3263[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3273 := &x.ListMeta
					yym3274 := z.EncBinary()
					_ = yym3274
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3273) {
					} else {
						z.EncFallback(yy3273)
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3276 := z.EncBinary()
					_ = yym3276
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3277 := z.EncBinary()
					_ = yym3277
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3263 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3278 := z.DecBinary()
	_ = yym3278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3279 := r.ReadMapStart()
			if yyl3279 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3279, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3279 := r.ReadArrayStart()
			if yyl3279 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3279, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3280Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3280Slc
	var yyhl3280 bool = l >= 0
	for yyj3280 := 0; ; yyj3280++ {
		if yyhl3280 {
			if yyj3280 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3280Slc = r.DecodeBytes(yys3280Slc, true, true)
		yys3280 := string(yys3280Slc)
		switch yys3280 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3283 := &x.ListMeta
				yym3284 := z.DecBinary()
				_ = yym3284
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3283) {
				} else {
					z.DecFallback(yyv3283, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3285 := &x.Items
				yym3286 := z.DecBinary()
				_ = yym3286
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3285), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3280)
		} // end switch yys3280
	} // end for yyj3280
	if !yyhl3280 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3287 int
	var yyb3287 bool
	var yyhl3287 bool = l >= 0
	yyj3287++
	if yyhl3287 {
		yyb3287 = yyj3287 > l
	} else {
		yyb3287 = r.CheckBreak()
	}
	if yyb3287 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3287++
	if yyhl3287 {
		yyb3287 = yyj3287 > l
	} else {
		yyb3287 = r.CheckBreak()
	}
	if yyb3287 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3287++
	if yyhl3287 {
		yyb3287 = yyj3287 > l
	} else {
		yyb3287 = r.CheckBreak()
	}
	if yyb3287 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3290 := &x.ListMeta
		yym3291 := z.DecBinary()
		_ = yym3291
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3290) {
		} else {
			z.DecFallback(yyv3290, false)
		}
	}
	yyj3287++
	if yyhl3287 {
		yyb3287 = yyj3287 > l
	} else {
		yyb3287 = r.CheckBreak()
	}
	if yyb3287 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3292 := &x.Items
		yym3293 := z.DecBinary()
		_ = yym3293
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3292), d)
		}
	}
	for {
		yyj3287++
		if yyhl3287 {
			yyb3287 = yyj3287 > l
		} else {
			yyb3287 = r.CheckBreak()
		}
		if yyb3287 {
			break
		}
		z.DecStructFieldNotFound(yyj3287-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3294 := z.EncBinary()
		_ = yym3294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3295 := !z.EncBinary()
			yy2arr3295 := z.EncBasicHandle().StructToArray
			var yyq3295 [1]bool
			_, _, _ = yysep3295, yyq3295, yy2arr3295
			const yyr3295 bool = false
			yyq3295[0] = len(x.Items) != 0
			if yyr3295 || yy2arr3295 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3295 int = 0
				for _, b := range yyq3295 {
					if b {
						yynn3295++
					}
				}
				r.EncodeMapStart(yynn3295)
			}
			if yyr3295 || yy2arr3295 {
				if yyq3295[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3297 := z.EncBinary()
						_ = yym3297
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3295[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3298 := z.EncBinary()
						_ = yym3298
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep3295 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3299 := z.DecBinary()
	_ = yym3299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3300 := r.ReadMapStart()
			if yyl3300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3300, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3300 := r.ReadArrayStart()
			if yyl3300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3301Slc
	var yyhl3301 bool = l >= 0
	for yyj3301 := 0; ; yyj3301++ {
		if yyhl3301 {
			if yyj3301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3301Slc = r.DecodeBytes(yys3301Slc, true, true)
		yys3301 := string(yys3301Slc)
		switch yys3301 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3302 := &x.Items
				yym3303 := z.DecBinary()
				_ = yym3303
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3302), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3301)
		} // end switch yys3301
	} // end for yyj3301
	if !yyhl3301 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3304 int
	var yyb3304 bool
	var yyhl3304 bool = l >= 0
	yyj3304++
	if yyhl3304 {
		yyb3304 = yyj3304 > l
	} else {
		yyb3304 = r.CheckBreak()
	}
	if yyb3304 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3305 := &x.Items
		yym3306 := z.DecBinary()
		_ = yym3306
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3305), d)
		}
	}
	for {
		yyj3304++
		if yyhl3304 {
			yyb3304 = yyj3304 > l
		} else {
			yyb3304 = r.CheckBreak()
		}
		if yyb3304 {
			break
		}
		z.DecStructFieldNotFound(yyj3304-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3307 := z.EncBinary()
		_ = yym3307
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3308 := !z.EncBinary()
			yy2arr3308 := z.EncBasicHandle().StructToArray
			var yyq3308 [2]bool
			_, _, _ = yysep3308, yyq3308, yy2arr3308
			const yyr3308 bool = false
			if yyr3308 || yy2arr3308 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3308 int = 2
				for _, b := range yyq3308 {
					if b {
						yynn3308++
					}
				}
				r.EncodeMapStart(yynn3308)
			}
			if yyr3308 || yy2arr3308 {
				yym3310 := z.EncBinary()
				_ = yym3310
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym3311 := z.EncBinary()
				_ = yym3311
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3308 || yy2arr3308 {
				yy3313 := &x.FieldRef
				yy3313.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy3314 := &x.FieldRef
				yy3314.CodecEncodeSelf(e)
			}
			if yysep3308 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3315 := z.DecBinary()
	_ = yym3315
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3316 := r.ReadMapStart()
			if yyl3316 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3316, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3316 := r.ReadArrayStart()
			if yyl3316 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3316, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3317Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3317Slc
	var yyhl3317 bool = l >= 0
	for yyj3317 := 0; ; yyj3317++ {
		if yyhl3317 {
			if yyj3317 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3317Slc = r.DecodeBytes(yys3317Slc, true, true)
		yys3317 := string(yys3317Slc)
		switch yys3317 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3319 := &x.FieldRef
				yyv3319.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3317)
		} // end switch yys3317
	} // end for yyj3317
	if !yyhl3317 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3320 int
	var yyb3320 bool
	var yyhl3320 bool = l >= 0
	yyj3320++
	if yyhl3320 {
		yyb3320 = yyj3320 > l
	} else {
		yyb3320 = r.CheckBreak()
	}
	if yyb3320 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3320++
	if yyhl3320 {
		yyb3320 = yyj3320 > l
	} else {
		yyb3320 = r.CheckBreak()
	}
	if yyb3320 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3322 := &x.FieldRef
		yyv3322.CodecDecodeSelf(d)
	}
	for {
		yyj3320++
		if yyhl3320 {
			yyb3320 = yyj3320 > l
		} else {
			yyb3320 = r.CheckBreak()
		}
		if yyb3320 {
			break
		}
		z.DecStructFieldNotFound(yyj3320-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3323 := z.EncBinary()
		_ = yym3323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3324 := !z.EncBinary()
			yy2arr3324 := z.EncBasicHandle().StructToArray
			var yyq3324 [5]bool
			_, _, _ = yysep3324, yyq3324, yy2arr3324
			const yyr3324 bool = false
			yyq3324[0] = x.Capabilities != nil
			yyq3324[1] = x.Privileged != nil
			yyq3324[2] = x.SELinuxOptions != nil
			yyq3324[3] = x.RunAsUser != nil
			yyq3324[4] = x.RunAsNonRoot != false
			if yyr3324 || yy2arr3324 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3324 int = 0
				for _, b := range yyq3324 {
					if b {
						yynn3324++
					}
				}
				r.EncodeMapStart(yynn3324)
			}
			if yyr3324 || yy2arr3324 {
				if yyq3324[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3324[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3324 || yy2arr3324 {
				if yyq3324[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3327 := *x.Privileged
						yym3328 := z.EncBinary()
						_ = yym3328
						if false {
						} else {
							r.EncodeBool(bool(yy3327))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3324[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3329 := *x.Privileged
						yym3330 := z.EncBinary()
						_ = yym3330
						if false {
						} else {
							r.EncodeBool(bool(yy3329))
						}
					}
				}
			}
			if yyr3324 || yy2arr3324 {
				if yyq3324[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3324[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3324 || yy2arr3324 {
				if yyq3324[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3333 := *x.RunAsUser
						yym3334 := z.EncBinary()
						_ = yym3334
						if false {
						} else {
							r.EncodeInt(int64(yy3333))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3324[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3335 := *x.RunAsUser
						yym3336 := z.EncBinary()
						_ = yym3336
						if false {
						} else {
							r.EncodeInt(int64(yy3335))
						}
					}
				}
			}
			if yyr3324 || yy2arr3324 {
				if yyq3324[4] {
					yym3338 := z.EncBinary()
					_ = yym3338
					if false {
					} else {
						r.EncodeBool(bool(x.RunAsNonRoot))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3324[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					yym3339 := z.EncBinary()
					_ = yym3339
					if false {
					} else {
						r.EncodeBool(bool(x.RunAsNonRoot))
					}
				}
			}
			if yysep3324 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3340 := z.DecBinary()
	_ = yym3340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3341 := r.ReadMapStart()
			if yyl3341 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3341, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3341 := r.ReadArrayStart()
			if yyl3341 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3341, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3342Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3342Slc
	var yyhl3342 bool = l >= 0
	for yyj3342 := 0; ; yyj3342++ {
		if yyhl3342 {
			if yyj3342 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3342Slc = r.DecodeBytes(yys3342Slc, true, true)
		yys3342 := string(yys3342Slc)
		switch yys3342 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3345 := z.DecBinary()
				_ = yym3345
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3348 := z.DecBinary()
				_ = yym3348
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				x.RunAsNonRoot = false
			} else {
				x.RunAsNonRoot = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3342)
		} // end switch yys3342
	} // end for yyj3342
	if !yyhl3342 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3350 int
	var yyb3350 bool
	var yyhl3350 bool = l >= 0
	yyj3350++
	if yyhl3350 {
		yyb3350 = yyj3350 > l
	} else {
		yyb3350 = r.CheckBreak()
	}
	if yyb3350 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3350++
	if yyhl3350 {
		yyb3350 = yyj3350 > l
	} else {
		yyb3350 = r.CheckBreak()
	}
	if yyb3350 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3353 := z.DecBinary()
		_ = yym3353
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3350++
	if yyhl3350 {
		yyb3350 = yyj3350 > l
	} else {
		yyb3350 = r.CheckBreak()
	}
	if yyb3350 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3350++
	if yyhl3350 {
		yyb3350 = yyj3350 > l
	} else {
		yyb3350 = r.CheckBreak()
	}
	if yyb3350 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3356 := z.DecBinary()
		_ = yym3356
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3350++
	if yyhl3350 {
		yyb3350 = yyj3350 > l
	} else {
		yyb3350 = r.CheckBreak()
	}
	if yyb3350 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RunAsNonRoot = false
	} else {
		x.RunAsNonRoot = bool(r.DecodeBool())
	}
	for {
		yyj3350++
		if yyhl3350 {
			yyb3350 = yyj3350 > l
		} else {
			yyb3350 = r.CheckBreak()
		}
		if yyb3350 {
			break
		}
		z.DecStructFieldNotFound(yyj3350-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3358 := z.EncBinary()
		_ = yym3358
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3359 := !z.EncBinary()
			yy2arr3359 := z.EncBasicHandle().StructToArray
			var yyq3359 [4]bool
			_, _, _ = yysep3359, yyq3359, yy2arr3359
			const yyr3359 bool = false
			yyq3359[0] = x.User != ""
			yyq3359[1] = x.Role != ""
			yyq3359[2] = x.Type != ""
			yyq3359[3] = x.Level != ""
			if yyr3359 || yy2arr3359 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3359 int = 0
				for _, b := range yyq3359 {
					if b {
						yynn3359++
					}
				}
				r.EncodeMapStart(yynn3359)
			}
			if yyr3359 || yy2arr3359 {
				if yyq3359[0] {
					yym3361 := z.EncBinary()
					_ = yym3361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3359[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3362 := z.EncBinary()
					_ = yym3362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3359 || yy2arr3359 {
				if yyq3359[1] {
					yym3364 := z.EncBinary()
					_ = yym3364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3359[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3365 := z.EncBinary()
					_ = yym3365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3359 || yy2arr3359 {
				if yyq3359[2] {
					yym3367 := z.EncBinary()
					_ = yym3367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3359[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3368 := z.EncBinary()
					_ = yym3368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3359 || yy2arr3359 {
				if yyq3359[3] {
					yym3370 := z.EncBinary()
					_ = yym3370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3359[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3359 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3372 := z.DecBinary()
	_ = yym3372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3373 := r.ReadMapStart()
			if yyl3373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3373, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3373 := r.ReadArrayStart()
			if yyl3373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3374Slc
	var yyhl3374 bool = l >= 0
	for yyj3374 := 0; ; yyj3374++ {
		if yyhl3374 {
			if yyj3374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3374Slc = r.DecodeBytes(yys3374Slc, true, true)
		yys3374 := string(yys3374Slc)
		switch yys3374 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3374)
		} // end switch yys3374
	} // end for yyj3374
	if !yyhl3374 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3379 int
	var yyb3379 bool
	var yyhl3379 bool = l >= 0
	yyj3379++
	if yyhl3379 {
		yyb3379 = yyj3379 > l
	} else {
		yyb3379 = r.CheckBreak()
	}
	if yyb3379 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3379++
	if yyhl3379 {
		yyb3379 = yyj3379 > l
	} else {
		yyb3379 = r.CheckBreak()
	}
	if yyb3379 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3379++
	if yyhl3379 {
		yyb3379 = yyj3379 > l
	} else {
		yyb3379 = r.CheckBreak()
	}
	if yyb3379 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3379++
	if yyhl3379 {
		yyb3379 = yyj3379 > l
	} else {
		yyb3379 = r.CheckBreak()
	}
	if yyb3379 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3379++
		if yyhl3379 {
			yyb3379 = yyj3379 > l
		} else {
			yyb3379 = r.CheckBreak()
		}
		if yyb3379 {
			break
		}
		z.DecStructFieldNotFound(yyj3379-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3384 := z.EncBinary()
		_ = yym3384
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3385 := !z.EncBinary()
			yy2arr3385 := z.EncBasicHandle().StructToArray
			var yyq3385 [5]bool
			_, _, _ = yysep3385, yyq3385, yy2arr3385
			const yyr3385 bool = false
			yyq3385[0] = x.Kind != ""
			yyq3385[1] = x.APIVersion != ""
			yyq3385[2] = true
			if yyr3385 || yy2arr3385 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3385 int = 2
				for _, b := range yyq3385 {
					if b {
						yynn3385++
					}
				}
				r.EncodeMapStart(yynn3385)
			}
			if yyr3385 || yy2arr3385 {
				if yyq3385[0] {
					yym3387 := z.EncBinary()
					_ = yym3387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3385[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3388 := z.EncBinary()
					_ = yym3388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3385 || yy2arr3385 {
				if yyq3385[1] {
					yym3390 := z.EncBinary()
					_ = yym3390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3385[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3391 := z.EncBinary()
					_ = yym3391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3385 || yy2arr3385 {
				if yyq3385[2] {
					yy3393 := &x.ObjectMeta
					yy3393.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3385[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3394 := &x.ObjectMeta
					yy3394.CodecEncodeSelf(e)
				}
			}
			if yyr3385 || yy2arr3385 {
				yym3396 := z.EncBinary()
				_ = yym3396
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3397 := z.EncBinary()
				_ = yym3397
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3385 || yy2arr3385 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3399 := z.EncBinary()
					_ = yym3399
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3400 := z.EncBinary()
					_ = yym3400
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3385 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3401 := z.DecBinary()
	_ = yym3401
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3402 := r.ReadMapStart()
			if yyl3402 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3402, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3402 := r.ReadArrayStart()
			if yyl3402 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3402, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3403Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3403Slc
	var yyhl3403 bool = l >= 0
	for yyj3403 := 0; ; yyj3403++ {
		if yyhl3403 {
			if yyj3403 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3403Slc = r.DecodeBytes(yys3403Slc, true, true)
		yys3403 := string(yys3403Slc)
		switch yys3403 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3406 := &x.ObjectMeta
				yyv3406.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3408 := &x.Data
				yym3409 := z.DecBinary()
				_ = yym3409
				if false {
				} else {
					*yyv3408 = r.DecodeBytes(*(*[]byte)(yyv3408), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3403)
		} // end switch yys3403
	} // end for yyj3403
	if !yyhl3403 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3410 int
	var yyb3410 bool
	var yyhl3410 bool = l >= 0
	yyj3410++
	if yyhl3410 {
		yyb3410 = yyj3410 > l
	} else {
		yyb3410 = r.CheckBreak()
	}
	if yyb3410 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3410++
	if yyhl3410 {
		yyb3410 = yyj3410 > l
	} else {
		yyb3410 = r.CheckBreak()
	}
	if yyb3410 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3410++
	if yyhl3410 {
		yyb3410 = yyj3410 > l
	} else {
		yyb3410 = r.CheckBreak()
	}
	if yyb3410 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3413 := &x.ObjectMeta
		yyv3413.CodecDecodeSelf(d)
	}
	yyj3410++
	if yyhl3410 {
		yyb3410 = yyj3410 > l
	} else {
		yyb3410 = r.CheckBreak()
	}
	if yyb3410 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3410++
	if yyhl3410 {
		yyb3410 = yyj3410 > l
	} else {
		yyb3410 = r.CheckBreak()
	}
	if yyb3410 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3415 := &x.Data
		yym3416 := z.DecBinary()
		_ = yym3416
		if false {
		} else {
			*yyv3415 = r.DecodeBytes(*(*[]byte)(yyv3415), false, false)
		}
	}
	for {
		yyj3410++
		if yyhl3410 {
			yyb3410 = yyj3410 > l
		} else {
			yyb3410 = r.CheckBreak()
		}
		if yyb3410 {
			break
		}
		z.DecStructFieldNotFound(yyj3410-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3417 := range v {
		yyv3417.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3418 := *v
	yyh3418, yyl3418 := z.DecSliceHelperStart()

	var yyrr3418, yyrl3418 int
	var yyc3418, yyrt3418 bool
	_, _, _ = yyc3418, yyrt3418, yyrl3418
	yyrr3418 = yyl3418

	if yyv3418 == nil {
		if yyrl3418, yyrt3418 = z.DecInferLen(yyl3418, z.DecBasicHandle().MaxInitLen, 16); yyrt3418 {
			yyrr3418 = yyrl3418
		}
		yyv3418 = make([]PersistentVolumeAccessMode, yyrl3418)
		yyc3418 = true
	}

	if yyl3418 == 0 {
		if len(yyv3418) != 0 {
			yyv3418 = yyv3418[:0]
			yyc3418 = true
		}
	} else if yyl3418 > 0 {

		if yyl3418 > cap(yyv3418) {
			yyrl3418, yyrt3418 = z.DecInferLen(yyl3418, z.DecBasicHandle().MaxInitLen, 16)

			yyv23418 := yyv3418
			yyv3418 = make([]PersistentVolumeAccessMode, yyrl3418)
			if len(yyv3418) > 0 {
				copy(yyv3418, yyv23418[:cap(yyv23418)])
			}
			yyc3418 = true

			yyrr3418 = len(yyv3418)
		} else if yyl3418 != len(yyv3418) {
			yyv3418 = yyv3418[:yyl3418]
			yyc3418 = true
		}
		yyj3418 := 0
		for ; yyj3418 < yyrr3418; yyj3418++ {
			if r.TryDecodeAsNil() {
				yyv3418[yyj3418] = ""
			} else {
				yyv3418[yyj3418] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3418 {
			for ; yyj3418 < yyl3418; yyj3418++ {
				yyv3418 = append(yyv3418, "")
				if r.TryDecodeAsNil() {
					yyv3418[yyj3418] = ""
				} else {
					yyv3418[yyj3418] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3418 := 0; !r.CheckBreak(); yyj3418++ {
			if yyj3418 >= len(yyv3418) {
				yyv3418 = append(yyv3418, "") // var yyz3418 PersistentVolumeAccessMode
				yyc3418 = true
			}

			if yyj3418 < len(yyv3418) {
				if r.TryDecodeAsNil() {
					yyv3418[yyj3418] = ""
				} else {
					yyv3418[yyj3418] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3418.End()
	}
	if yyc3418 {
		*v = yyv3418
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3422 := range v {
		yy3423 := &yyv3422
		yy3423.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3424 := *v
	yyh3424, yyl3424 := z.DecSliceHelperStart()

	var yyrr3424, yyrl3424 int
	var yyc3424, yyrt3424 bool
	_, _, _ = yyc3424, yyrt3424, yyrl3424
	yyrr3424 = yyl3424

	if yyv3424 == nil {
		if yyrl3424, yyrt3424 = z.DecInferLen(yyl3424, z.DecBasicHandle().MaxInitLen, 384); yyrt3424 {
			yyrr3424 = yyrl3424
		}
		yyv3424 = make([]PersistentVolume, yyrl3424)
		yyc3424 = true
	}

	if yyl3424 == 0 {
		if len(yyv3424) != 0 {
			yyv3424 = yyv3424[:0]
			yyc3424 = true
		}
	} else if yyl3424 > 0 {

		if yyl3424 > cap(yyv3424) {
			yyrl3424, yyrt3424 = z.DecInferLen(yyl3424, z.DecBasicHandle().MaxInitLen, 384)
			yyv3424 = make([]PersistentVolume, yyrl3424)
			yyc3424 = true

			yyrr3424 = len(yyv3424)
		} else if yyl3424 != len(yyv3424) {
			yyv3424 = yyv3424[:yyl3424]
			yyc3424 = true
		}
		yyj3424 := 0
		for ; yyj3424 < yyrr3424; yyj3424++ {
			if r.TryDecodeAsNil() {
				yyv3424[yyj3424] = PersistentVolume{}
			} else {
				yyv3425 := &yyv3424[yyj3424]
				yyv3425.CodecDecodeSelf(d)
			}

		}
		if yyrt3424 {
			for ; yyj3424 < yyl3424; yyj3424++ {
				yyv3424 = append(yyv3424, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3424[yyj3424] = PersistentVolume{}
				} else {
					yyv3426 := &yyv3424[yyj3424]
					yyv3426.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3424 := 0; !r.CheckBreak(); yyj3424++ {
			if yyj3424 >= len(yyv3424) {
				yyv3424 = append(yyv3424, PersistentVolume{}) // var yyz3424 PersistentVolume
				yyc3424 = true
			}

			if yyj3424 < len(yyv3424) {
				if r.TryDecodeAsNil() {
					yyv3424[yyj3424] = PersistentVolume{}
				} else {
					yyv3427 := &yyv3424[yyj3424]
					yyv3427.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3424.End()
	}
	if yyc3424 {
		*v = yyv3424
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3428 := range v {
		yy3429 := &yyv3428
		yy3429.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3430 := *v
	yyh3430, yyl3430 := z.DecSliceHelperStart()

	var yyrr3430, yyrl3430 int
	var yyc3430, yyrt3430 bool
	_, _, _ = yyc3430, yyrt3430, yyrl3430
	yyrr3430 = yyl3430

	if yyv3430 == nil {
		if yyrl3430, yyrt3430 = z.DecInferLen(yyl3430, z.DecBasicHandle().MaxInitLen, 296); yyrt3430 {
			yyrr3430 = yyrl3430
		}
		yyv3430 = make([]PersistentVolumeClaim, yyrl3430)
		yyc3430 = true
	}

	if yyl3430 == 0 {
		if len(yyv3430) != 0 {
			yyv3430 = yyv3430[:0]
			yyc3430 = true
		}
	} else if yyl3430 > 0 {

		if yyl3430 > cap(yyv3430) {
			yyrl3430, yyrt3430 = z.DecInferLen(yyl3430, z.DecBasicHandle().MaxInitLen, 296)
			yyv3430 = make([]PersistentVolumeClaim, yyrl3430)
			yyc3430 = true

			yyrr3430 = len(yyv3430)
		} else if yyl3430 != len(yyv3430) {
			yyv3430 = yyv3430[:yyl3430]
			yyc3430 = true
		}
		yyj3430 := 0
		for ; yyj3430 < yyrr3430; yyj3430++ {
			if r.TryDecodeAsNil() {
				yyv3430[yyj3430] = PersistentVolumeClaim{}
			} else {
				yyv3431 := &yyv3430[yyj3430]
				yyv3431.CodecDecodeSelf(d)
			}

		}
		if yyrt3430 {
			for ; yyj3430 < yyl3430; yyj3430++ {
				yyv3430 = append(yyv3430, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3430[yyj3430] = PersistentVolumeClaim{}
				} else {
					yyv3432 := &yyv3430[yyj3430]
					yyv3432.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3430 := 0; !r.CheckBreak(); yyj3430++ {
			if yyj3430 >= len(yyv3430) {
				yyv3430 = append(yyv3430, PersistentVolumeClaim{}) // var yyz3430 PersistentVolumeClaim
				yyc3430 = true
			}

			if yyj3430 < len(yyv3430) {
				if r.TryDecodeAsNil() {
					yyv3430[yyj3430] = PersistentVolumeClaim{}
				} else {
					yyv3433 := &yyv3430[yyj3430]
					yyv3433.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3430.End()
	}
	if yyc3430 {
		*v = yyv3430
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3434 := range v {
		yyv3434.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3435 := *v
	yyh3435, yyl3435 := z.DecSliceHelperStart()

	var yyrr3435, yyrl3435 int
	var yyc3435, yyrt3435 bool
	_, _, _ = yyc3435, yyrt3435, yyrl3435
	yyrr3435 = yyl3435

	if yyv3435 == nil {
		if yyrl3435, yyrt3435 = z.DecInferLen(yyl3435, z.DecBasicHandle().MaxInitLen, 16); yyrt3435 {
			yyrr3435 = yyrl3435
		}
		yyv3435 = make([]Capability, yyrl3435)
		yyc3435 = true
	}

	if yyl3435 == 0 {
		if len(yyv3435) != 0 {
			yyv3435 = yyv3435[:0]
			yyc3435 = true
		}
	} else if yyl3435 > 0 {

		if yyl3435 > cap(yyv3435) {
			yyrl3435, yyrt3435 = z.DecInferLen(yyl3435, z.DecBasicHandle().MaxInitLen, 16)

			yyv23435 := yyv3435
			yyv3435 = make([]Capability, yyrl3435)
			if len(yyv3435) > 0 {
				copy(yyv3435, yyv23435[:cap(yyv23435)])
			}
			yyc3435 = true

			yyrr3435 = len(yyv3435)
		} else if yyl3435 != len(yyv3435) {
			yyv3435 = yyv3435[:yyl3435]
			yyc3435 = true
		}
		yyj3435 := 0
		for ; yyj3435 < yyrr3435; yyj3435++ {
			if r.TryDecodeAsNil() {
				yyv3435[yyj3435] = ""
			} else {
				yyv3435[yyj3435] = Capability(r.DecodeString())
			}

		}
		if yyrt3435 {
			for ; yyj3435 < yyl3435; yyj3435++ {
				yyv3435 = append(yyv3435, "")
				if r.TryDecodeAsNil() {
					yyv3435[yyj3435] = ""
				} else {
					yyv3435[yyj3435] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3435 := 0; !r.CheckBreak(); yyj3435++ {
			if yyj3435 >= len(yyv3435) {
				yyv3435 = append(yyv3435, "") // var yyz3435 Capability
				yyc3435 = true
			}

			if yyj3435 < len(yyv3435) {
				if r.TryDecodeAsNil() {
					yyv3435[yyj3435] = ""
				} else {
					yyv3435[yyj3435] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3435.End()
	}
	if yyc3435 {
		*v = yyv3435
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3439 := range v {
		yy3440 := &yyv3439
		yy3440.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3441 := *v
	yyh3441, yyl3441 := z.DecSliceHelperStart()

	var yyrr3441, yyrl3441 int
	var yyc3441, yyrt3441 bool
	_, _, _ = yyc3441, yyrt3441, yyrl3441
	yyrr3441 = yyl3441

	if yyv3441 == nil {
		if yyrl3441, yyrt3441 = z.DecInferLen(yyl3441, z.DecBasicHandle().MaxInitLen, 64); yyrt3441 {
			yyrr3441 = yyrl3441
		}
		yyv3441 = make([]ContainerPort, yyrl3441)
		yyc3441 = true
	}

	if yyl3441 == 0 {
		if len(yyv3441) != 0 {
			yyv3441 = yyv3441[:0]
			yyc3441 = true
		}
	} else if yyl3441 > 0 {

		if yyl3441 > cap(yyv3441) {
			yyrl3441, yyrt3441 = z.DecInferLen(yyl3441, z.DecBasicHandle().MaxInitLen, 64)
			yyv3441 = make([]ContainerPort, yyrl3441)
			yyc3441 = true

			yyrr3441 = len(yyv3441)
		} else if yyl3441 != len(yyv3441) {
			yyv3441 = yyv3441[:yyl3441]
			yyc3441 = true
		}
		yyj3441 := 0
		for ; yyj3441 < yyrr3441; yyj3441++ {
			if r.TryDecodeAsNil() {
				yyv3441[yyj3441] = ContainerPort{}
			} else {
				yyv3442 := &yyv3441[yyj3441]
				yyv3442.CodecDecodeSelf(d)
			}

		}
		if yyrt3441 {
			for ; yyj3441 < yyl3441; yyj3441++ {
				yyv3441 = append(yyv3441, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3441[yyj3441] = ContainerPort{}
				} else {
					yyv3443 := &yyv3441[yyj3441]
					yyv3443.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3441 := 0; !r.CheckBreak(); yyj3441++ {
			if yyj3441 >= len(yyv3441) {
				yyv3441 = append(yyv3441, ContainerPort{}) // var yyz3441 ContainerPort
				yyc3441 = true
			}

			if yyj3441 < len(yyv3441) {
				if r.TryDecodeAsNil() {
					yyv3441[yyj3441] = ContainerPort{}
				} else {
					yyv3444 := &yyv3441[yyj3441]
					yyv3444.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3441.End()
	}
	if yyc3441 {
		*v = yyv3441
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3445 := range v {
		yy3446 := &yyv3445
		yy3446.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3447 := *v
	yyh3447, yyl3447 := z.DecSliceHelperStart()

	var yyrr3447, yyrl3447 int
	var yyc3447, yyrt3447 bool
	_, _, _ = yyc3447, yyrt3447, yyrl3447
	yyrr3447 = yyl3447

	if yyv3447 == nil {
		if yyrl3447, yyrt3447 = z.DecInferLen(yyl3447, z.DecBasicHandle().MaxInitLen, 40); yyrt3447 {
			yyrr3447 = yyrl3447
		}
		yyv3447 = make([]EnvVar, yyrl3447)
		yyc3447 = true
	}

	if yyl3447 == 0 {
		if len(yyv3447) != 0 {
			yyv3447 = yyv3447[:0]
			yyc3447 = true
		}
	} else if yyl3447 > 0 {

		if yyl3447 > cap(yyv3447) {
			yyrl3447, yyrt3447 = z.DecInferLen(yyl3447, z.DecBasicHandle().MaxInitLen, 40)
			yyv3447 = make([]EnvVar, yyrl3447)
			yyc3447 = true

			yyrr3447 = len(yyv3447)
		} else if yyl3447 != len(yyv3447) {
			yyv3447 = yyv3447[:yyl3447]
			yyc3447 = true
		}
		yyj3447 := 0
		for ; yyj3447 < yyrr3447; yyj3447++ {
			if r.TryDecodeAsNil() {
				yyv3447[yyj3447] = EnvVar{}
			} else {
				yyv3448 := &yyv3447[yyj3447]
				yyv3448.CodecDecodeSelf(d)
			}

		}
		if yyrt3447 {
			for ; yyj3447 < yyl3447; yyj3447++ {
				yyv3447 = append(yyv3447, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3447[yyj3447] = EnvVar{}
				} else {
					yyv3449 := &yyv3447[yyj3447]
					yyv3449.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3447 := 0; !r.CheckBreak(); yyj3447++ {
			if yyj3447 >= len(yyv3447) {
				yyv3447 = append(yyv3447, EnvVar{}) // var yyz3447 EnvVar
				yyc3447 = true
			}

			if yyj3447 < len(yyv3447) {
				if r.TryDecodeAsNil() {
					yyv3447[yyj3447] = EnvVar{}
				} else {
					yyv3450 := &yyv3447[yyj3447]
					yyv3450.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3447.End()
	}
	if yyc3447 {
		*v = yyv3447
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3451 := range v {
		yy3452 := &yyv3451
		yy3452.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3453 := *v
	yyh3453, yyl3453 := z.DecSliceHelperStart()

	var yyrr3453, yyrl3453 int
	var yyc3453, yyrt3453 bool
	_, _, _ = yyc3453, yyrt3453, yyrl3453
	yyrr3453 = yyl3453

	if yyv3453 == nil {
		if yyrl3453, yyrt3453 = z.DecInferLen(yyl3453, z.DecBasicHandle().MaxInitLen, 40); yyrt3453 {
			yyrr3453 = yyrl3453
		}
		yyv3453 = make([]VolumeMount, yyrl3453)
		yyc3453 = true
	}

	if yyl3453 == 0 {
		if len(yyv3453) != 0 {
			yyv3453 = yyv3453[:0]
			yyc3453 = true
		}
	} else if yyl3453 > 0 {

		if yyl3453 > cap(yyv3453) {
			yyrl3453, yyrt3453 = z.DecInferLen(yyl3453, z.DecBasicHandle().MaxInitLen, 40)
			yyv3453 = make([]VolumeMount, yyrl3453)
			yyc3453 = true

			yyrr3453 = len(yyv3453)
		} else if yyl3453 != len(yyv3453) {
			yyv3453 = yyv3453[:yyl3453]
			yyc3453 = true
		}
		yyj3453 := 0
		for ; yyj3453 < yyrr3453; yyj3453++ {
			if r.TryDecodeAsNil() {
				yyv3453[yyj3453] = VolumeMount{}
			} else {
				yyv3454 := &yyv3453[yyj3453]
				yyv3454.CodecDecodeSelf(d)
			}

		}
		if yyrt3453 {
			for ; yyj3453 < yyl3453; yyj3453++ {
				yyv3453 = append(yyv3453, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3453[yyj3453] = VolumeMount{}
				} else {
					yyv3455 := &yyv3453[yyj3453]
					yyv3455.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3453 := 0; !r.CheckBreak(); yyj3453++ {
			if yyj3453 >= len(yyv3453) {
				yyv3453 = append(yyv3453, VolumeMount{}) // var yyz3453 VolumeMount
				yyc3453 = true
			}

			if yyj3453 < len(yyv3453) {
				if r.TryDecodeAsNil() {
					yyv3453[yyj3453] = VolumeMount{}
				} else {
					yyv3456 := &yyv3453[yyj3453]
					yyv3456.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3453.End()
	}
	if yyc3453 {
		*v = yyv3453
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3457 := range v {
		yy3458 := &yyv3457
		yy3458.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3459 := *v
	yyh3459, yyl3459 := z.DecSliceHelperStart()

	var yyrr3459, yyrl3459 int
	var yyc3459, yyrt3459 bool
	_, _, _ = yyc3459, yyrt3459, yyrl3459
	yyrr3459 = yyl3459

	if yyv3459 == nil {
		if yyrl3459, yyrt3459 = z.DecInferLen(yyl3459, z.DecBasicHandle().MaxInitLen, 144); yyrt3459 {
			yyrr3459 = yyrl3459
		}
		yyv3459 = make([]Volume, yyrl3459)
		yyc3459 = true
	}

	if yyl3459 == 0 {
		if len(yyv3459) != 0 {
			yyv3459 = yyv3459[:0]
			yyc3459 = true
		}
	} else if yyl3459 > 0 {

		if yyl3459 > cap(yyv3459) {
			yyrl3459, yyrt3459 = z.DecInferLen(yyl3459, z.DecBasicHandle().MaxInitLen, 144)
			yyv3459 = make([]Volume, yyrl3459)
			yyc3459 = true

			yyrr3459 = len(yyv3459)
		} else if yyl3459 != len(yyv3459) {
			yyv3459 = yyv3459[:yyl3459]
			yyc3459 = true
		}
		yyj3459 := 0
		for ; yyj3459 < yyrr3459; yyj3459++ {
			if r.TryDecodeAsNil() {
				yyv3459[yyj3459] = Volume{}
			} else {
				yyv3460 := &yyv3459[yyj3459]
				yyv3460.CodecDecodeSelf(d)
			}

		}
		if yyrt3459 {
			for ; yyj3459 < yyl3459; yyj3459++ {
				yyv3459 = append(yyv3459, Volume{})
				if r.TryDecodeAsNil() {
					yyv3459[yyj3459] = Volume{}
				} else {
					yyv3461 := &yyv3459[yyj3459]
					yyv3461.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3459 := 0; !r.CheckBreak(); yyj3459++ {
			if yyj3459 >= len(yyv3459) {
				yyv3459 = append(yyv3459, Volume{}) // var yyz3459 Volume
				yyc3459 = true
			}

			if yyj3459 < len(yyv3459) {
				if r.TryDecodeAsNil() {
					yyv3459[yyj3459] = Volume{}
				} else {
					yyv3462 := &yyv3459[yyj3459]
					yyv3462.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3459.End()
	}
	if yyc3459 {
		*v = yyv3459
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3463 := range v {
		yy3464 := &yyv3463
		yy3464.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3465 := *v
	yyh3465, yyl3465 := z.DecSliceHelperStart()

	var yyrr3465, yyrl3465 int
	var yyc3465, yyrt3465 bool
	_, _, _ = yyc3465, yyrt3465, yyrl3465
	yyrr3465 = yyl3465

	if yyv3465 == nil {
		if yyrl3465, yyrt3465 = z.DecInferLen(yyl3465, z.DecBasicHandle().MaxInitLen, 256); yyrt3465 {
			yyrr3465 = yyrl3465
		}
		yyv3465 = make([]Container, yyrl3465)
		yyc3465 = true
	}

	if yyl3465 == 0 {
		if len(yyv3465) != 0 {
			yyv3465 = yyv3465[:0]
			yyc3465 = true
		}
	} else if yyl3465 > 0 {

		if yyl3465 > cap(yyv3465) {
			yyrl3465, yyrt3465 = z.DecInferLen(yyl3465, z.DecBasicHandle().MaxInitLen, 256)
			yyv3465 = make([]Container, yyrl3465)
			yyc3465 = true

			yyrr3465 = len(yyv3465)
		} else if yyl3465 != len(yyv3465) {
			yyv3465 = yyv3465[:yyl3465]
			yyc3465 = true
		}
		yyj3465 := 0
		for ; yyj3465 < yyrr3465; yyj3465++ {
			if r.TryDecodeAsNil() {
				yyv3465[yyj3465] = Container{}
			} else {
				yyv3466 := &yyv3465[yyj3465]
				yyv3466.CodecDecodeSelf(d)
			}

		}
		if yyrt3465 {
			for ; yyj3465 < yyl3465; yyj3465++ {
				yyv3465 = append(yyv3465, Container{})
				if r.TryDecodeAsNil() {
					yyv3465[yyj3465] = Container{}
				} else {
					yyv3467 := &yyv3465[yyj3465]
					yyv3467.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3465 := 0; !r.CheckBreak(); yyj3465++ {
			if yyj3465 >= len(yyv3465) {
				yyv3465 = append(yyv3465, Container{}) // var yyz3465 Container
				yyc3465 = true
			}

			if yyj3465 < len(yyv3465) {
				if r.TryDecodeAsNil() {
					yyv3465[yyj3465] = Container{}
				} else {
					yyv3468 := &yyv3465[yyj3465]
					yyv3468.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3465.End()
	}
	if yyc3465 {
		*v = yyv3465
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3469 := range v {
		yy3470 := &yyv3469
		yy3470.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3471 := *v
	yyh3471, yyl3471 := z.DecSliceHelperStart()

	var yyrr3471, yyrl3471 int
	var yyc3471, yyrt3471 bool
	_, _, _ = yyc3471, yyrt3471, yyrl3471
	yyrr3471 = yyl3471

	if yyv3471 == nil {
		if yyrl3471, yyrt3471 = z.DecInferLen(yyl3471, z.DecBasicHandle().MaxInitLen, 16); yyrt3471 {
			yyrr3471 = yyrl3471
		}
		yyv3471 = make([]LocalObjectReference, yyrl3471)
		yyc3471 = true
	}

	if yyl3471 == 0 {
		if len(yyv3471) != 0 {
			yyv3471 = yyv3471[:0]
			yyc3471 = true
		}
	} else if yyl3471 > 0 {

		if yyl3471 > cap(yyv3471) {
			yyrl3471, yyrt3471 = z.DecInferLen(yyl3471, z.DecBasicHandle().MaxInitLen, 16)
			yyv3471 = make([]LocalObjectReference, yyrl3471)
			yyc3471 = true

			yyrr3471 = len(yyv3471)
		} else if yyl3471 != len(yyv3471) {
			yyv3471 = yyv3471[:yyl3471]
			yyc3471 = true
		}
		yyj3471 := 0
		for ; yyj3471 < yyrr3471; yyj3471++ {
			if r.TryDecodeAsNil() {
				yyv3471[yyj3471] = LocalObjectReference{}
			} else {
				yyv3472 := &yyv3471[yyj3471]
				yyv3472.CodecDecodeSelf(d)
			}

		}
		if yyrt3471 {
			for ; yyj3471 < yyl3471; yyj3471++ {
				yyv3471 = append(yyv3471, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3471[yyj3471] = LocalObjectReference{}
				} else {
					yyv3473 := &yyv3471[yyj3471]
					yyv3473.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3471 := 0; !r.CheckBreak(); yyj3471++ {
			if yyj3471 >= len(yyv3471) {
				yyv3471 = append(yyv3471, LocalObjectReference{}) // var yyz3471 LocalObjectReference
				yyc3471 = true
			}

			if yyj3471 < len(yyv3471) {
				if r.TryDecodeAsNil() {
					yyv3471[yyj3471] = LocalObjectReference{}
				} else {
					yyv3474 := &yyv3471[yyj3471]
					yyv3474.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3471.End()
	}
	if yyc3471 {
		*v = yyv3471
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3475 := range v {
		yy3476 := &yyv3475
		yy3476.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3477 := *v
	yyh3477, yyl3477 := z.DecSliceHelperStart()

	var yyrr3477, yyrl3477 int
	var yyc3477, yyrt3477 bool
	_, _, _ = yyc3477, yyrt3477, yyrl3477
	yyrr3477 = yyl3477

	if yyv3477 == nil {
		if yyrl3477, yyrt3477 = z.DecInferLen(yyl3477, z.DecBasicHandle().MaxInitLen, 112); yyrt3477 {
			yyrr3477 = yyrl3477
		}
		yyv3477 = make([]PodCondition, yyrl3477)
		yyc3477 = true
	}

	if yyl3477 == 0 {
		if len(yyv3477) != 0 {
			yyv3477 = yyv3477[:0]
			yyc3477 = true
		}
	} else if yyl3477 > 0 {

		if yyl3477 > cap(yyv3477) {
			yyrl3477, yyrt3477 = z.DecInferLen(yyl3477, z.DecBasicHandle().MaxInitLen, 112)
			yyv3477 = make([]PodCondition, yyrl3477)
			yyc3477 = true

			yyrr3477 = len(yyv3477)
		} else if yyl3477 != len(yyv3477) {
			yyv3477 = yyv3477[:yyl3477]
			yyc3477 = true
		}
		yyj3477 := 0
		for ; yyj3477 < yyrr3477; yyj3477++ {
			if r.TryDecodeAsNil() {
				yyv3477[yyj3477] = PodCondition{}
			} else {
				yyv3478 := &yyv3477[yyj3477]
				yyv3478.CodecDecodeSelf(d)
			}

		}
		if yyrt3477 {
			for ; yyj3477 < yyl3477; yyj3477++ {
				yyv3477 = append(yyv3477, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3477[yyj3477] = PodCondition{}
				} else {
					yyv3479 := &yyv3477[yyj3477]
					yyv3479.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3477 := 0; !r.CheckBreak(); yyj3477++ {
			if yyj3477 >= len(yyv3477) {
				yyv3477 = append(yyv3477, PodCondition{}) // var yyz3477 PodCondition
				yyc3477 = true
			}

			if yyj3477 < len(yyv3477) {
				if r.TryDecodeAsNil() {
					yyv3477[yyj3477] = PodCondition{}
				} else {
					yyv3480 := &yyv3477[yyj3477]
					yyv3480.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3477.End()
	}
	if yyc3477 {
		*v = yyv3477
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3481 := range v {
		yy3482 := &yyv3481
		yy3482.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3483 := *v
	yyh3483, yyl3483 := z.DecSliceHelperStart()

	var yyrr3483, yyrl3483 int
	var yyc3483, yyrt3483 bool
	_, _, _ = yyc3483, yyrt3483, yyrl3483
	yyrr3483 = yyl3483

	if yyv3483 == nil {
		if yyrl3483, yyrt3483 = z.DecInferLen(yyl3483, z.DecBasicHandle().MaxInitLen, 128); yyrt3483 {
			yyrr3483 = yyrl3483
		}
		yyv3483 = make([]ContainerStatus, yyrl3483)
		yyc3483 = true
	}

	if yyl3483 == 0 {
		if len(yyv3483) != 0 {
			yyv3483 = yyv3483[:0]
			yyc3483 = true
		}
	} else if yyl3483 > 0 {

		if yyl3483 > cap(yyv3483) {
			yyrl3483, yyrt3483 = z.DecInferLen(yyl3483, z.DecBasicHandle().MaxInitLen, 128)
			yyv3483 = make([]ContainerStatus, yyrl3483)
			yyc3483 = true

			yyrr3483 = len(yyv3483)
		} else if yyl3483 != len(yyv3483) {
			yyv3483 = yyv3483[:yyl3483]
			yyc3483 = true
		}
		yyj3483 := 0
		for ; yyj3483 < yyrr3483; yyj3483++ {
			if r.TryDecodeAsNil() {
				yyv3483[yyj3483] = ContainerStatus{}
			} else {
				yyv3484 := &yyv3483[yyj3483]
				yyv3484.CodecDecodeSelf(d)
			}

		}
		if yyrt3483 {
			for ; yyj3483 < yyl3483; yyj3483++ {
				yyv3483 = append(yyv3483, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3483[yyj3483] = ContainerStatus{}
				} else {
					yyv3485 := &yyv3483[yyj3483]
					yyv3485.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3483 := 0; !r.CheckBreak(); yyj3483++ {
			if yyj3483 >= len(yyv3483) {
				yyv3483 = append(yyv3483, ContainerStatus{}) // var yyz3483 ContainerStatus
				yyc3483 = true
			}

			if yyj3483 < len(yyv3483) {
				if r.TryDecodeAsNil() {
					yyv3483[yyj3483] = ContainerStatus{}
				} else {
					yyv3486 := &yyv3483[yyj3483]
					yyv3486.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3483.End()
	}
	if yyc3483 {
		*v = yyv3483
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3487 := range v {
		yy3488 := &yyv3487
		yy3488.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3489 := *v
	yyh3489, yyl3489 := z.DecSliceHelperStart()

	var yyrr3489, yyrl3489 int
	var yyc3489, yyrt3489 bool
	_, _, _ = yyc3489, yyrt3489, yyrl3489
	yyrr3489 = yyl3489

	if yyv3489 == nil {
		if yyrl3489, yyrt3489 = z.DecInferLen(yyl3489, z.DecBasicHandle().MaxInitLen, 520); yyrt3489 {
			yyrr3489 = yyrl3489
		}
		yyv3489 = make([]Pod, yyrl3489)
		yyc3489 = true
	}

	if yyl3489 == 0 {
		if len(yyv3489) != 0 {
			yyv3489 = yyv3489[:0]
			yyc3489 = true
		}
	} else if yyl3489 > 0 {

		if yyl3489 > cap(yyv3489) {
			yyrl3489, yyrt3489 = z.DecInferLen(yyl3489, z.DecBasicHandle().MaxInitLen, 520)
			yyv3489 = make([]Pod, yyrl3489)
			yyc3489 = true

			yyrr3489 = len(yyv3489)
		} else if yyl3489 != len(yyv3489) {
			yyv3489 = yyv3489[:yyl3489]
			yyc3489 = true
		}
		yyj3489 := 0
		for ; yyj3489 < yyrr3489; yyj3489++ {
			if r.TryDecodeAsNil() {
				yyv3489[yyj3489] = Pod{}
			} else {
				yyv3490 := &yyv3489[yyj3489]
				yyv3490.CodecDecodeSelf(d)
			}

		}
		if yyrt3489 {
			for ; yyj3489 < yyl3489; yyj3489++ {
				yyv3489 = append(yyv3489, Pod{})
				if r.TryDecodeAsNil() {
					yyv3489[yyj3489] = Pod{}
				} else {
					yyv3491 := &yyv3489[yyj3489]
					yyv3491.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3489 := 0; !r.CheckBreak(); yyj3489++ {
			if yyj3489 >= len(yyv3489) {
				yyv3489 = append(yyv3489, Pod{}) // var yyz3489 Pod
				yyc3489 = true
			}

			if yyj3489 < len(yyv3489) {
				if r.TryDecodeAsNil() {
					yyv3489[yyj3489] = Pod{}
				} else {
					yyv3492 := &yyv3489[yyj3489]
					yyv3492.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3489.End()
	}
	if yyc3489 {
		*v = yyv3489
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3493 := range v {
		yy3494 := &yyv3493
		yy3494.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3495 := *v
	yyh3495, yyl3495 := z.DecSliceHelperStart()

	var yyrr3495, yyrl3495 int
	var yyc3495, yyrt3495 bool
	_, _, _ = yyc3495, yyrt3495, yyrl3495
	yyrr3495 = yyl3495

	if yyv3495 == nil {
		if yyrl3495, yyrt3495 = z.DecInferLen(yyl3495, z.DecBasicHandle().MaxInitLen, 544); yyrt3495 {
			yyrr3495 = yyrl3495
		}
		yyv3495 = make([]PodTemplate, yyrl3495)
		yyc3495 = true
	}

	if yyl3495 == 0 {
		if len(yyv3495) != 0 {
			yyv3495 = yyv3495[:0]
			yyc3495 = true
		}
	} else if yyl3495 > 0 {

		if yyl3495 > cap(yyv3495) {
			yyrl3495, yyrt3495 = z.DecInferLen(yyl3495, z.DecBasicHandle().MaxInitLen, 544)
			yyv3495 = make([]PodTemplate, yyrl3495)
			yyc3495 = true

			yyrr3495 = len(yyv3495)
		} else if yyl3495 != len(yyv3495) {
			yyv3495 = yyv3495[:yyl3495]
			yyc3495 = true
		}
		yyj3495 := 0
		for ; yyj3495 < yyrr3495; yyj3495++ {
			if r.TryDecodeAsNil() {
				yyv3495[yyj3495] = PodTemplate{}
			} else {
				yyv3496 := &yyv3495[yyj3495]
				yyv3496.CodecDecodeSelf(d)
			}

		}
		if yyrt3495 {
			for ; yyj3495 < yyl3495; yyj3495++ {
				yyv3495 = append(yyv3495, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3495[yyj3495] = PodTemplate{}
				} else {
					yyv3497 := &yyv3495[yyj3495]
					yyv3497.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3495 := 0; !r.CheckBreak(); yyj3495++ {
			if yyj3495 >= len(yyv3495) {
				yyv3495 = append(yyv3495, PodTemplate{}) // var yyz3495 PodTemplate
				yyc3495 = true
			}

			if yyj3495 < len(yyv3495) {
				if r.TryDecodeAsNil() {
					yyv3495[yyj3495] = PodTemplate{}
				} else {
					yyv3498 := &yyv3495[yyj3495]
					yyv3498.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3495.End()
	}
	if yyc3495 {
		*v = yyv3495
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3499 := range v {
		yy3500 := &yyv3499
		yy3500.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3501 := *v
	yyh3501, yyl3501 := z.DecSliceHelperStart()

	var yyrr3501, yyrl3501 int
	var yyc3501, yyrt3501 bool
	_, _, _ = yyc3501, yyrt3501, yyrl3501
	yyrr3501 = yyl3501

	if yyv3501 == nil {
		if yyrl3501, yyrt3501 = z.DecInferLen(yyl3501, z.DecBasicHandle().MaxInitLen, 232); yyrt3501 {
			yyrr3501 = yyrl3501
		}
		yyv3501 = make([]ReplicationController, yyrl3501)
		yyc3501 = true
	}

	if yyl3501 == 0 {
		if len(yyv3501) != 0 {
			yyv3501 = yyv3501[:0]
			yyc3501 = true
		}
	} else if yyl3501 > 0 {

		if yyl3501 > cap(yyv3501) {
			yyrl3501, yyrt3501 = z.DecInferLen(yyl3501, z.DecBasicHandle().MaxInitLen, 232)
			yyv3501 = make([]ReplicationController, yyrl3501)
			yyc3501 = true

			yyrr3501 = len(yyv3501)
		} else if yyl3501 != len(yyv3501) {
			yyv3501 = yyv3501[:yyl3501]
			yyc3501 = true
		}
		yyj3501 := 0
		for ; yyj3501 < yyrr3501; yyj3501++ {
			if r.TryDecodeAsNil() {
				yyv3501[yyj3501] = ReplicationController{}
			} else {
				yyv3502 := &yyv3501[yyj3501]
				yyv3502.CodecDecodeSelf(d)
			}

		}
		if yyrt3501 {
			for ; yyj3501 < yyl3501; yyj3501++ {
				yyv3501 = append(yyv3501, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3501[yyj3501] = ReplicationController{}
				} else {
					yyv3503 := &yyv3501[yyj3501]
					yyv3503.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3501 := 0; !r.CheckBreak(); yyj3501++ {
			if yyj3501 >= len(yyv3501) {
				yyv3501 = append(yyv3501, ReplicationController{}) // var yyz3501 ReplicationController
				yyc3501 = true
			}

			if yyj3501 < len(yyv3501) {
				if r.TryDecodeAsNil() {
					yyv3501[yyj3501] = ReplicationController{}
				} else {
					yyv3504 := &yyv3501[yyj3501]
					yyv3504.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3501.End()
	}
	if yyc3501 {
		*v = yyv3501
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3505 := range v {
		yy3506 := &yyv3505
		yy3506.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3507 := *v
	yyh3507, yyl3507 := z.DecSliceHelperStart()

	var yyrr3507, yyrl3507 int
	var yyc3507, yyrt3507 bool
	_, _, _ = yyc3507, yyrt3507, yyrl3507
	yyrr3507 = yyl3507

	if yyv3507 == nil {
		if yyrl3507, yyrt3507 = z.DecInferLen(yyl3507, z.DecBasicHandle().MaxInitLen, 32); yyrt3507 {
			yyrr3507 = yyrl3507
		}
		yyv3507 = make([]LoadBalancerIngress, yyrl3507)
		yyc3507 = true
	}

	if yyl3507 == 0 {
		if len(yyv3507) != 0 {
			yyv3507 = yyv3507[:0]
			yyc3507 = true
		}
	} else if yyl3507 > 0 {

		if yyl3507 > cap(yyv3507) {
			yyrl3507, yyrt3507 = z.DecInferLen(yyl3507, z.DecBasicHandle().MaxInitLen, 32)
			yyv3507 = make([]LoadBalancerIngress, yyrl3507)
			yyc3507 = true

			yyrr3507 = len(yyv3507)
		} else if yyl3507 != len(yyv3507) {
			yyv3507 = yyv3507[:yyl3507]
			yyc3507 = true
		}
		yyj3507 := 0
		for ; yyj3507 < yyrr3507; yyj3507++ {
			if r.TryDecodeAsNil() {
				yyv3507[yyj3507] = LoadBalancerIngress{}
			} else {
				yyv3508 := &yyv3507[yyj3507]
				yyv3508.CodecDecodeSelf(d)
			}

		}
		if yyrt3507 {
			for ; yyj3507 < yyl3507; yyj3507++ {
				yyv3507 = append(yyv3507, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3507[yyj3507] = LoadBalancerIngress{}
				} else {
					yyv3509 := &yyv3507[yyj3507]
					yyv3509.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3507 := 0; !r.CheckBreak(); yyj3507++ {
			if yyj3507 >= len(yyv3507) {
				yyv3507 = append(yyv3507, LoadBalancerIngress{}) // var yyz3507 LoadBalancerIngress
				yyc3507 = true
			}

			if yyj3507 < len(yyv3507) {
				if r.TryDecodeAsNil() {
					yyv3507[yyj3507] = LoadBalancerIngress{}
				} else {
					yyv3510 := &yyv3507[yyj3507]
					yyv3510.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3507.End()
	}
	if yyc3507 {
		*v = yyv3507
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3511 := range v {
		yy3512 := &yyv3511
		yy3512.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3513 := *v
	yyh3513, yyl3513 := z.DecSliceHelperStart()

	var yyrr3513, yyrl3513 int
	var yyc3513, yyrt3513 bool
	_, _, _ = yyc3513, yyrt3513, yyrl3513
	yyrr3513 = yyl3513

	if yyv3513 == nil {
		if yyrl3513, yyrt3513 = z.DecInferLen(yyl3513, z.DecBasicHandle().MaxInitLen, 80); yyrt3513 {
			yyrr3513 = yyrl3513
		}
		yyv3513 = make([]ServicePort, yyrl3513)
		yyc3513 = true
	}

	if yyl3513 == 0 {
		if len(yyv3513) != 0 {
			yyv3513 = yyv3513[:0]
			yyc3513 = true
		}
	} else if yyl3513 > 0 {

		if yyl3513 > cap(yyv3513) {
			yyrl3513, yyrt3513 = z.DecInferLen(yyl3513, z.DecBasicHandle().MaxInitLen, 80)
			yyv3513 = make([]ServicePort, yyrl3513)
			yyc3513 = true

			yyrr3513 = len(yyv3513)
		} else if yyl3513 != len(yyv3513) {
			yyv3513 = yyv3513[:yyl3513]
			yyc3513 = true
		}
		yyj3513 := 0
		for ; yyj3513 < yyrr3513; yyj3513++ {
			if r.TryDecodeAsNil() {
				yyv3513[yyj3513] = ServicePort{}
			} else {
				yyv3514 := &yyv3513[yyj3513]
				yyv3514.CodecDecodeSelf(d)
			}

		}
		if yyrt3513 {
			for ; yyj3513 < yyl3513; yyj3513++ {
				yyv3513 = append(yyv3513, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3513[yyj3513] = ServicePort{}
				} else {
					yyv3515 := &yyv3513[yyj3513]
					yyv3515.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3513 := 0; !r.CheckBreak(); yyj3513++ {
			if yyj3513 >= len(yyv3513) {
				yyv3513 = append(yyv3513, ServicePort{}) // var yyz3513 ServicePort
				yyc3513 = true
			}

			if yyj3513 < len(yyv3513) {
				if r.TryDecodeAsNil() {
					yyv3513[yyj3513] = ServicePort{}
				} else {
					yyv3516 := &yyv3513[yyj3513]
					yyv3516.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3513.End()
	}
	if yyc3513 {
		*v = yyv3513
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3517 := range v {
		yy3518 := &yyv3517
		yy3518.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3519 := *v
	yyh3519, yyl3519 := z.DecSliceHelperStart()

	var yyrr3519, yyrl3519 int
	var yyc3519, yyrt3519 bool
	_, _, _ = yyc3519, yyrt3519, yyrl3519
	yyrr3519 = yyl3519

	if yyv3519 == nil {
		if yyrl3519, yyrt3519 = z.DecInferLen(yyl3519, z.DecBasicHandle().MaxInitLen, 360); yyrt3519 {
			yyrr3519 = yyrl3519
		}
		yyv3519 = make([]Service, yyrl3519)
		yyc3519 = true
	}

	if yyl3519 == 0 {
		if len(yyv3519) != 0 {
			yyv3519 = yyv3519[:0]
			yyc3519 = true
		}
	} else if yyl3519 > 0 {

		if yyl3519 > cap(yyv3519) {
			yyrl3519, yyrt3519 = z.DecInferLen(yyl3519, z.DecBasicHandle().MaxInitLen, 360)
			yyv3519 = make([]Service, yyrl3519)
			yyc3519 = true

			yyrr3519 = len(yyv3519)
		} else if yyl3519 != len(yyv3519) {
			yyv3519 = yyv3519[:yyl3519]
			yyc3519 = true
		}
		yyj3519 := 0
		for ; yyj3519 < yyrr3519; yyj3519++ {
			if r.TryDecodeAsNil() {
				yyv3519[yyj3519] = Service{}
			} else {
				yyv3520 := &yyv3519[yyj3519]
				yyv3520.CodecDecodeSelf(d)
			}

		}
		if yyrt3519 {
			for ; yyj3519 < yyl3519; yyj3519++ {
				yyv3519 = append(yyv3519, Service{})
				if r.TryDecodeAsNil() {
					yyv3519[yyj3519] = Service{}
				} else {
					yyv3521 := &yyv3519[yyj3519]
					yyv3521.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3519 := 0; !r.CheckBreak(); yyj3519++ {
			if yyj3519 >= len(yyv3519) {
				yyv3519 = append(yyv3519, Service{}) // var yyz3519 Service
				yyc3519 = true
			}

			if yyj3519 < len(yyv3519) {
				if r.TryDecodeAsNil() {
					yyv3519[yyj3519] = Service{}
				} else {
					yyv3522 := &yyv3519[yyj3519]
					yyv3522.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3519.End()
	}
	if yyc3519 {
		*v = yyv3519
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3523 := range v {
		yy3524 := &yyv3523
		yy3524.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3525 := *v
	yyh3525, yyl3525 := z.DecSliceHelperStart()

	var yyrr3525, yyrl3525 int
	var yyc3525, yyrt3525 bool
	_, _, _ = yyc3525, yyrt3525, yyrl3525
	yyrr3525 = yyl3525

	if yyv3525 == nil {
		if yyrl3525, yyrt3525 = z.DecInferLen(yyl3525, z.DecBasicHandle().MaxInitLen, 112); yyrt3525 {
			yyrr3525 = yyrl3525
		}
		yyv3525 = make([]ObjectReference, yyrl3525)
		yyc3525 = true
	}

	if yyl3525 == 0 {
		if len(yyv3525) != 0 {
			yyv3525 = yyv3525[:0]
			yyc3525 = true
		}
	} else if yyl3525 > 0 {

		if yyl3525 > cap(yyv3525) {
			yyrl3525, yyrt3525 = z.DecInferLen(yyl3525, z.DecBasicHandle().MaxInitLen, 112)
			yyv3525 = make([]ObjectReference, yyrl3525)
			yyc3525 = true

			yyrr3525 = len(yyv3525)
		} else if yyl3525 != len(yyv3525) {
			yyv3525 = yyv3525[:yyl3525]
			yyc3525 = true
		}
		yyj3525 := 0
		for ; yyj3525 < yyrr3525; yyj3525++ {
			if r.TryDecodeAsNil() {
				yyv3525[yyj3525] = ObjectReference{}
			} else {
				yyv3526 := &yyv3525[yyj3525]
				yyv3526.CodecDecodeSelf(d)
			}

		}
		if yyrt3525 {
			for ; yyj3525 < yyl3525; yyj3525++ {
				yyv3525 = append(yyv3525, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3525[yyj3525] = ObjectReference{}
				} else {
					yyv3527 := &yyv3525[yyj3525]
					yyv3527.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3525 := 0; !r.CheckBreak(); yyj3525++ {
			if yyj3525 >= len(yyv3525) {
				yyv3525 = append(yyv3525, ObjectReference{}) // var yyz3525 ObjectReference
				yyc3525 = true
			}

			if yyj3525 < len(yyv3525) {
				if r.TryDecodeAsNil() {
					yyv3525[yyj3525] = ObjectReference{}
				} else {
					yyv3528 := &yyv3525[yyj3525]
					yyv3528.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3525.End()
	}
	if yyc3525 {
		*v = yyv3525
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3529 := range v {
		yy3530 := &yyv3529
		yy3530.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3531 := *v
	yyh3531, yyl3531 := z.DecSliceHelperStart()

	var yyrr3531, yyrl3531 int
	var yyc3531, yyrt3531 bool
	_, _, _ = yyc3531, yyrt3531, yyrl3531
	yyrr3531 = yyl3531

	if yyv3531 == nil {
		if yyrl3531, yyrt3531 = z.DecInferLen(yyl3531, z.DecBasicHandle().MaxInitLen, 240); yyrt3531 {
			yyrr3531 = yyrl3531
		}
		yyv3531 = make([]ServiceAccount, yyrl3531)
		yyc3531 = true
	}

	if yyl3531 == 0 {
		if len(yyv3531) != 0 {
			yyv3531 = yyv3531[:0]
			yyc3531 = true
		}
	} else if yyl3531 > 0 {

		if yyl3531 > cap(yyv3531) {
			yyrl3531, yyrt3531 = z.DecInferLen(yyl3531, z.DecBasicHandle().MaxInitLen, 240)
			yyv3531 = make([]ServiceAccount, yyrl3531)
			yyc3531 = true

			yyrr3531 = len(yyv3531)
		} else if yyl3531 != len(yyv3531) {
			yyv3531 = yyv3531[:yyl3531]
			yyc3531 = true
		}
		yyj3531 := 0
		for ; yyj3531 < yyrr3531; yyj3531++ {
			if r.TryDecodeAsNil() {
				yyv3531[yyj3531] = ServiceAccount{}
			} else {
				yyv3532 := &yyv3531[yyj3531]
				yyv3532.CodecDecodeSelf(d)
			}

		}
		if yyrt3531 {
			for ; yyj3531 < yyl3531; yyj3531++ {
				yyv3531 = append(yyv3531, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3531[yyj3531] = ServiceAccount{}
				} else {
					yyv3533 := &yyv3531[yyj3531]
					yyv3533.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3531 := 0; !r.CheckBreak(); yyj3531++ {
			if yyj3531 >= len(yyv3531) {
				yyv3531 = append(yyv3531, ServiceAccount{}) // var yyz3531 ServiceAccount
				yyc3531 = true
			}

			if yyj3531 < len(yyv3531) {
				if r.TryDecodeAsNil() {
					yyv3531[yyj3531] = ServiceAccount{}
				} else {
					yyv3534 := &yyv3531[yyj3531]
					yyv3534.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3531.End()
	}
	if yyc3531 {
		*v = yyv3531
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3535 := range v {
		yy3536 := &yyv3535
		yy3536.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3537 := *v
	yyh3537, yyl3537 := z.DecSliceHelperStart()

	var yyrr3537, yyrl3537 int
	var yyc3537, yyrt3537 bool
	_, _, _ = yyc3537, yyrt3537, yyrl3537
	yyrr3537 = yyl3537

	if yyv3537 == nil {
		if yyrl3537, yyrt3537 = z.DecInferLen(yyl3537, z.DecBasicHandle().MaxInitLen, 72); yyrt3537 {
			yyrr3537 = yyrl3537
		}
		yyv3537 = make([]EndpointSubset, yyrl3537)
		yyc3537 = true
	}

	if yyl3537 == 0 {
		if len(yyv3537) != 0 {
			yyv3537 = yyv3537[:0]
			yyc3537 = true
		}
	} else if yyl3537 > 0 {

		if yyl3537 > cap(yyv3537) {
			yyrl3537, yyrt3537 = z.DecInferLen(yyl3537, z.DecBasicHandle().MaxInitLen, 72)
			yyv3537 = make([]EndpointSubset, yyrl3537)
			yyc3537 = true

			yyrr3537 = len(yyv3537)
		} else if yyl3537 != len(yyv3537) {
			yyv3537 = yyv3537[:yyl3537]
			yyc3537 = true
		}
		yyj3537 := 0
		for ; yyj3537 < yyrr3537; yyj3537++ {
			if r.TryDecodeAsNil() {
				yyv3537[yyj3537] = EndpointSubset{}
			} else {
				yyv3538 := &yyv3537[yyj3537]
				yyv3538.CodecDecodeSelf(d)
			}

		}
		if yyrt3537 {
			for ; yyj3537 < yyl3537; yyj3537++ {
				yyv3537 = append(yyv3537, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3537[yyj3537] = EndpointSubset{}
				} else {
					yyv3539 := &yyv3537[yyj3537]
					yyv3539.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3537 := 0; !r.CheckBreak(); yyj3537++ {
			if yyj3537 >= len(yyv3537) {
				yyv3537 = append(yyv3537, EndpointSubset{}) // var yyz3537 EndpointSubset
				yyc3537 = true
			}

			if yyj3537 < len(yyv3537) {
				if r.TryDecodeAsNil() {
					yyv3537[yyj3537] = EndpointSubset{}
				} else {
					yyv3540 := &yyv3537[yyj3537]
					yyv3540.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3537.End()
	}
	if yyc3537 {
		*v = yyv3537
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3541 := range v {
		yy3542 := &yyv3541
		yy3542.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3543 := *v
	yyh3543, yyl3543 := z.DecSliceHelperStart()

	var yyrr3543, yyrl3543 int
	var yyc3543, yyrt3543 bool
	_, _, _ = yyc3543, yyrt3543, yyrl3543
	yyrr3543 = yyl3543

	if yyv3543 == nil {
		if yyrl3543, yyrt3543 = z.DecInferLen(yyl3543, z.DecBasicHandle().MaxInitLen, 24); yyrt3543 {
			yyrr3543 = yyrl3543
		}
		yyv3543 = make([]EndpointAddress, yyrl3543)
		yyc3543 = true
	}

	if yyl3543 == 0 {
		if len(yyv3543) != 0 {
			yyv3543 = yyv3543[:0]
			yyc3543 = true
		}
	} else if yyl3543 > 0 {

		if yyl3543 > cap(yyv3543) {
			yyrl3543, yyrt3543 = z.DecInferLen(yyl3543, z.DecBasicHandle().MaxInitLen, 24)
			yyv3543 = make([]EndpointAddress, yyrl3543)
			yyc3543 = true

			yyrr3543 = len(yyv3543)
		} else if yyl3543 != len(yyv3543) {
			yyv3543 = yyv3543[:yyl3543]
			yyc3543 = true
		}
		yyj3543 := 0
		for ; yyj3543 < yyrr3543; yyj3543++ {
			if r.TryDecodeAsNil() {
				yyv3543[yyj3543] = EndpointAddress{}
			} else {
				yyv3544 := &yyv3543[yyj3543]
				yyv3544.CodecDecodeSelf(d)
			}

		}
		if yyrt3543 {
			for ; yyj3543 < yyl3543; yyj3543++ {
				yyv3543 = append(yyv3543, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3543[yyj3543] = EndpointAddress{}
				} else {
					yyv3545 := &yyv3543[yyj3543]
					yyv3545.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3543 := 0; !r.CheckBreak(); yyj3543++ {
			if yyj3543 >= len(yyv3543) {
				yyv3543 = append(yyv3543, EndpointAddress{}) // var yyz3543 EndpointAddress
				yyc3543 = true
			}

			if yyj3543 < len(yyv3543) {
				if r.TryDecodeAsNil() {
					yyv3543[yyj3543] = EndpointAddress{}
				} else {
					yyv3546 := &yyv3543[yyj3543]
					yyv3546.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3543.End()
	}
	if yyc3543 {
		*v = yyv3543
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3547 := range v {
		yy3548 := &yyv3547
		yy3548.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3549 := *v
	yyh3549, yyl3549 := z.DecSliceHelperStart()

	var yyrr3549, yyrl3549 int
	var yyc3549, yyrt3549 bool
	_, _, _ = yyc3549, yyrt3549, yyrl3549
	yyrr3549 = yyl3549

	if yyv3549 == nil {
		if yyrl3549, yyrt3549 = z.DecInferLen(yyl3549, z.DecBasicHandle().MaxInitLen, 40); yyrt3549 {
			yyrr3549 = yyrl3549
		}
		yyv3549 = make([]EndpointPort, yyrl3549)
		yyc3549 = true
	}

	if yyl3549 == 0 {
		if len(yyv3549) != 0 {
			yyv3549 = yyv3549[:0]
			yyc3549 = true
		}
	} else if yyl3549 > 0 {

		if yyl3549 > cap(yyv3549) {
			yyrl3549, yyrt3549 = z.DecInferLen(yyl3549, z.DecBasicHandle().MaxInitLen, 40)
			yyv3549 = make([]EndpointPort, yyrl3549)
			yyc3549 = true

			yyrr3549 = len(yyv3549)
		} else if yyl3549 != len(yyv3549) {
			yyv3549 = yyv3549[:yyl3549]
			yyc3549 = true
		}
		yyj3549 := 0
		for ; yyj3549 < yyrr3549; yyj3549++ {
			if r.TryDecodeAsNil() {
				yyv3549[yyj3549] = EndpointPort{}
			} else {
				yyv3550 := &yyv3549[yyj3549]
				yyv3550.CodecDecodeSelf(d)
			}

		}
		if yyrt3549 {
			for ; yyj3549 < yyl3549; yyj3549++ {
				yyv3549 = append(yyv3549, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3549[yyj3549] = EndpointPort{}
				} else {
					yyv3551 := &yyv3549[yyj3549]
					yyv3551.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3549 := 0; !r.CheckBreak(); yyj3549++ {
			if yyj3549 >= len(yyv3549) {
				yyv3549 = append(yyv3549, EndpointPort{}) // var yyz3549 EndpointPort
				yyc3549 = true
			}

			if yyj3549 < len(yyv3549) {
				if r.TryDecodeAsNil() {
					yyv3549[yyj3549] = EndpointPort{}
				} else {
					yyv3552 := &yyv3549[yyj3549]
					yyv3552.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3549.End()
	}
	if yyc3549 {
		*v = yyv3549
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3553 := range v {
		yy3554 := &yyv3553
		yy3554.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3555 := *v
	yyh3555, yyl3555 := z.DecSliceHelperStart()

	var yyrr3555, yyrl3555 int
	var yyc3555, yyrt3555 bool
	_, _, _ = yyc3555, yyrt3555, yyrl3555
	yyrr3555 = yyl3555

	if yyv3555 == nil {
		if yyrl3555, yyrt3555 = z.DecInferLen(yyl3555, z.DecBasicHandle().MaxInitLen, 216); yyrt3555 {
			yyrr3555 = yyrl3555
		}
		yyv3555 = make([]Endpoints, yyrl3555)
		yyc3555 = true
	}

	if yyl3555 == 0 {
		if len(yyv3555) != 0 {
			yyv3555 = yyv3555[:0]
			yyc3555 = true
		}
	} else if yyl3555 > 0 {

		if yyl3555 > cap(yyv3555) {
			yyrl3555, yyrt3555 = z.DecInferLen(yyl3555, z.DecBasicHandle().MaxInitLen, 216)
			yyv3555 = make([]Endpoints, yyrl3555)
			yyc3555 = true

			yyrr3555 = len(yyv3555)
		} else if yyl3555 != len(yyv3555) {
			yyv3555 = yyv3555[:yyl3555]
			yyc3555 = true
		}
		yyj3555 := 0
		for ; yyj3555 < yyrr3555; yyj3555++ {
			if r.TryDecodeAsNil() {
				yyv3555[yyj3555] = Endpoints{}
			} else {
				yyv3556 := &yyv3555[yyj3555]
				yyv3556.CodecDecodeSelf(d)
			}

		}
		if yyrt3555 {
			for ; yyj3555 < yyl3555; yyj3555++ {
				yyv3555 = append(yyv3555, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3555[yyj3555] = Endpoints{}
				} else {
					yyv3557 := &yyv3555[yyj3555]
					yyv3557.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3555 := 0; !r.CheckBreak(); yyj3555++ {
			if yyj3555 >= len(yyv3555) {
				yyv3555 = append(yyv3555, Endpoints{}) // var yyz3555 Endpoints
				yyc3555 = true
			}

			if yyj3555 < len(yyv3555) {
				if r.TryDecodeAsNil() {
					yyv3555[yyj3555] = Endpoints{}
				} else {
					yyv3558 := &yyv3555[yyj3555]
					yyv3558.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3555.End()
	}
	if yyc3555 {
		*v = yyv3555
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3559 := range v {
		yy3560 := &yyv3559
		yy3560.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3561 := *v
	yyh3561, yyl3561 := z.DecSliceHelperStart()

	var yyrr3561, yyrl3561 int
	var yyc3561, yyrt3561 bool
	_, _, _ = yyc3561, yyrt3561, yyrl3561
	yyrr3561 = yyl3561

	if yyv3561 == nil {
		if yyrl3561, yyrt3561 = z.DecInferLen(yyl3561, z.DecBasicHandle().MaxInitLen, 112); yyrt3561 {
			yyrr3561 = yyrl3561
		}
		yyv3561 = make([]NodeCondition, yyrl3561)
		yyc3561 = true
	}

	if yyl3561 == 0 {
		if len(yyv3561) != 0 {
			yyv3561 = yyv3561[:0]
			yyc3561 = true
		}
	} else if yyl3561 > 0 {

		if yyl3561 > cap(yyv3561) {
			yyrl3561, yyrt3561 = z.DecInferLen(yyl3561, z.DecBasicHandle().MaxInitLen, 112)
			yyv3561 = make([]NodeCondition, yyrl3561)
			yyc3561 = true

			yyrr3561 = len(yyv3561)
		} else if yyl3561 != len(yyv3561) {
			yyv3561 = yyv3561[:yyl3561]
			yyc3561 = true
		}
		yyj3561 := 0
		for ; yyj3561 < yyrr3561; yyj3561++ {
			if r.TryDecodeAsNil() {
				yyv3561[yyj3561] = NodeCondition{}
			} else {
				yyv3562 := &yyv3561[yyj3561]
				yyv3562.CodecDecodeSelf(d)
			}

		}
		if yyrt3561 {
			for ; yyj3561 < yyl3561; yyj3561++ {
				yyv3561 = append(yyv3561, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3561[yyj3561] = NodeCondition{}
				} else {
					yyv3563 := &yyv3561[yyj3561]
					yyv3563.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3561 := 0; !r.CheckBreak(); yyj3561++ {
			if yyj3561 >= len(yyv3561) {
				yyv3561 = append(yyv3561, NodeCondition{}) // var yyz3561 NodeCondition
				yyc3561 = true
			}

			if yyj3561 < len(yyv3561) {
				if r.TryDecodeAsNil() {
					yyv3561[yyj3561] = NodeCondition{}
				} else {
					yyv3564 := &yyv3561[yyj3561]
					yyv3564.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3561.End()
	}
	if yyc3561 {
		*v = yyv3561
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3565 := range v {
		yy3566 := &yyv3565
		yy3566.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3567 := *v
	yyh3567, yyl3567 := z.DecSliceHelperStart()

	var yyrr3567, yyrl3567 int
	var yyc3567, yyrt3567 bool
	_, _, _ = yyc3567, yyrt3567, yyrl3567
	yyrr3567 = yyl3567

	if yyv3567 == nil {
		if yyrl3567, yyrt3567 = z.DecInferLen(yyl3567, z.DecBasicHandle().MaxInitLen, 32); yyrt3567 {
			yyrr3567 = yyrl3567
		}
		yyv3567 = make([]NodeAddress, yyrl3567)
		yyc3567 = true
	}

	if yyl3567 == 0 {
		if len(yyv3567) != 0 {
			yyv3567 = yyv3567[:0]
			yyc3567 = true
		}
	} else if yyl3567 > 0 {

		if yyl3567 > cap(yyv3567) {
			yyrl3567, yyrt3567 = z.DecInferLen(yyl3567, z.DecBasicHandle().MaxInitLen, 32)
			yyv3567 = make([]NodeAddress, yyrl3567)
			yyc3567 = true

			yyrr3567 = len(yyv3567)
		} else if yyl3567 != len(yyv3567) {
			yyv3567 = yyv3567[:yyl3567]
			yyc3567 = true
		}
		yyj3567 := 0
		for ; yyj3567 < yyrr3567; yyj3567++ {
			if r.TryDecodeAsNil() {
				yyv3567[yyj3567] = NodeAddress{}
			} else {
				yyv3568 := &yyv3567[yyj3567]
				yyv3568.CodecDecodeSelf(d)
			}

		}
		if yyrt3567 {
			for ; yyj3567 < yyl3567; yyj3567++ {
				yyv3567 = append(yyv3567, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3567[yyj3567] = NodeAddress{}
				} else {
					yyv3569 := &yyv3567[yyj3567]
					yyv3569.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3567 := 0; !r.CheckBreak(); yyj3567++ {
			if yyj3567 >= len(yyv3567) {
				yyv3567 = append(yyv3567, NodeAddress{}) // var yyz3567 NodeAddress
				yyc3567 = true
			}

			if yyj3567 < len(yyv3567) {
				if r.TryDecodeAsNil() {
					yyv3567[yyj3567] = NodeAddress{}
				} else {
					yyv3570 := &yyv3567[yyj3567]
					yyv3570.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3567.End()
	}
	if yyc3567 {
		*v = yyv3567
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3571, yyv3571 := range v {
		yyk3571.CodecEncodeSelf(e)
		yy3572 := &yyv3571
		yym3573 := z.EncBinary()
		_ = yym3573
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3572) {
		} else if !yym3573 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3572)
		} else {
			z.EncFallback(yy3572)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3574 := *v
	yyl3574 := r.ReadMapStart()
	yybh3574 := z.DecBasicHandle()
	if yyv3574 == nil {
		yyrl3574, _ := z.DecInferLen(yyl3574, yybh3574.MaxInitLen, 40)
		yyv3574 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3574)
		*v = yyv3574
	}
	var yymk3574 ResourceName
	var yymv3574 pkg3_resource.Quantity
	var yymg3574 bool
	if yybh3574.MapValueReset {
		yymg3574 = true
	}
	if yyl3574 > 0 {
		for yyj3574 := 0; yyj3574 < yyl3574; yyj3574++ {
			if r.TryDecodeAsNil() {
				yymk3574 = ""
			} else {
				yymk3574 = ResourceName(r.DecodeString())
			}

			if yymg3574 {
				yymv3574 = yyv3574[yymk3574]
			} else {
				yymv3574 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3574 = pkg3_resource.Quantity{}
			} else {
				yyv3576 := &yymv3574
				yym3577 := z.DecBinary()
				_ = yym3577
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3576) {
				} else if !yym3577 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3576)
				} else {
					z.DecFallback(yyv3576, false)
				}
			}

			if yyv3574 != nil {
				yyv3574[yymk3574] = yymv3574
			}
		}
	} else if yyl3574 < 0 {
		for yyj3574 := 0; !r.CheckBreak(); yyj3574++ {
			if r.TryDecodeAsNil() {
				yymk3574 = ""
			} else {
				yymk3574 = ResourceName(r.DecodeString())
			}

			if yymg3574 {
				yymv3574 = yyv3574[yymk3574]
			} else {
				yymv3574 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3574 = pkg3_resource.Quantity{}
			} else {
				yyv3579 := &yymv3574
				yym3580 := z.DecBinary()
				_ = yym3580
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3579) {
				} else if !yym3580 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3579)
				} else {
					z.DecFallback(yyv3579, false)
				}
			}

			if yyv3574 != nil {
				yyv3574[yymk3574] = yymv3574
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3581 := range v {
		yy3582 := &yyv3581
		yy3582.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3583 := *v
	yyh3583, yyl3583 := z.DecSliceHelperStart()

	var yyrr3583, yyrl3583 int
	var yyc3583, yyrt3583 bool
	_, _, _ = yyc3583, yyrt3583, yyrl3583
	yyrr3583 = yyl3583

	if yyv3583 == nil {
		if yyrl3583, yyrt3583 = z.DecInferLen(yyl3583, z.DecBasicHandle().MaxInitLen, 456); yyrt3583 {
			yyrr3583 = yyrl3583
		}
		yyv3583 = make([]Node, yyrl3583)
		yyc3583 = true
	}

	if yyl3583 == 0 {
		if len(yyv3583) != 0 {
			yyv3583 = yyv3583[:0]
			yyc3583 = true
		}
	} else if yyl3583 > 0 {

		if yyl3583 > cap(yyv3583) {
			yyrl3583, yyrt3583 = z.DecInferLen(yyl3583, z.DecBasicHandle().MaxInitLen, 456)
			yyv3583 = make([]Node, yyrl3583)
			yyc3583 = true

			yyrr3583 = len(yyv3583)
		} else if yyl3583 != len(yyv3583) {
			yyv3583 = yyv3583[:yyl3583]
			yyc3583 = true
		}
		yyj3583 := 0
		for ; yyj3583 < yyrr3583; yyj3583++ {
			if r.TryDecodeAsNil() {
				yyv3583[yyj3583] = Node{}
			} else {
				yyv3584 := &yyv3583[yyj3583]
				yyv3584.CodecDecodeSelf(d)
			}

		}
		if yyrt3583 {
			for ; yyj3583 < yyl3583; yyj3583++ {
				yyv3583 = append(yyv3583, Node{})
				if r.TryDecodeAsNil() {
					yyv3583[yyj3583] = Node{}
				} else {
					yyv3585 := &yyv3583[yyj3583]
					yyv3585.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3583 := 0; !r.CheckBreak(); yyj3583++ {
			if yyj3583 >= len(yyv3583) {
				yyv3583 = append(yyv3583, Node{}) // var yyz3583 Node
				yyc3583 = true
			}

			if yyj3583 < len(yyv3583) {
				if r.TryDecodeAsNil() {
					yyv3583[yyj3583] = Node{}
				} else {
					yyv3586 := &yyv3583[yyj3583]
					yyv3586.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3583.End()
	}
	if yyc3583 {
		*v = yyv3583
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3587 := range v {
		yyv3587.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3588 := *v
	yyh3588, yyl3588 := z.DecSliceHelperStart()

	var yyrr3588, yyrl3588 int
	var yyc3588, yyrt3588 bool
	_, _, _ = yyc3588, yyrt3588, yyrl3588
	yyrr3588 = yyl3588

	if yyv3588 == nil {
		if yyrl3588, yyrt3588 = z.DecInferLen(yyl3588, z.DecBasicHandle().MaxInitLen, 16); yyrt3588 {
			yyrr3588 = yyrl3588
		}
		yyv3588 = make([]FinalizerName, yyrl3588)
		yyc3588 = true
	}

	if yyl3588 == 0 {
		if len(yyv3588) != 0 {
			yyv3588 = yyv3588[:0]
			yyc3588 = true
		}
	} else if yyl3588 > 0 {

		if yyl3588 > cap(yyv3588) {
			yyrl3588, yyrt3588 = z.DecInferLen(yyl3588, z.DecBasicHandle().MaxInitLen, 16)

			yyv23588 := yyv3588
			yyv3588 = make([]FinalizerName, yyrl3588)
			if len(yyv3588) > 0 {
				copy(yyv3588, yyv23588[:cap(yyv23588)])
			}
			yyc3588 = true

			yyrr3588 = len(yyv3588)
		} else if yyl3588 != len(yyv3588) {
			yyv3588 = yyv3588[:yyl3588]
			yyc3588 = true
		}
		yyj3588 := 0
		for ; yyj3588 < yyrr3588; yyj3588++ {
			if r.TryDecodeAsNil() {
				yyv3588[yyj3588] = ""
			} else {
				yyv3588[yyj3588] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3588 {
			for ; yyj3588 < yyl3588; yyj3588++ {
				yyv3588 = append(yyv3588, "")
				if r.TryDecodeAsNil() {
					yyv3588[yyj3588] = ""
				} else {
					yyv3588[yyj3588] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3588 := 0; !r.CheckBreak(); yyj3588++ {
			if yyj3588 >= len(yyv3588) {
				yyv3588 = append(yyv3588, "") // var yyz3588 FinalizerName
				yyc3588 = true
			}

			if yyj3588 < len(yyv3588) {
				if r.TryDecodeAsNil() {
					yyv3588[yyj3588] = ""
				} else {
					yyv3588[yyj3588] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3588.End()
	}
	if yyc3588 {
		*v = yyv3588
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3592 := range v {
		yy3593 := &yyv3592
		yy3593.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3594 := *v
	yyh3594, yyl3594 := z.DecSliceHelperStart()

	var yyrr3594, yyrl3594 int
	var yyc3594, yyrt3594 bool
	_, _, _ = yyc3594, yyrt3594, yyrl3594
	yyrr3594 = yyl3594

	if yyv3594 == nil {
		if yyrl3594, yyrt3594 = z.DecInferLen(yyl3594, z.DecBasicHandle().MaxInitLen, 232); yyrt3594 {
			yyrr3594 = yyrl3594
		}
		yyv3594 = make([]Namespace, yyrl3594)
		yyc3594 = true
	}

	if yyl3594 == 0 {
		if len(yyv3594) != 0 {
			yyv3594 = yyv3594[:0]
			yyc3594 = true
		}
	} else if yyl3594 > 0 {

		if yyl3594 > cap(yyv3594) {
			yyrl3594, yyrt3594 = z.DecInferLen(yyl3594, z.DecBasicHandle().MaxInitLen, 232)
			yyv3594 = make([]Namespace, yyrl3594)
			yyc3594 = true

			yyrr3594 = len(yyv3594)
		} else if yyl3594 != len(yyv3594) {
			yyv3594 = yyv3594[:yyl3594]
			yyc3594 = true
		}
		yyj3594 := 0
		for ; yyj3594 < yyrr3594; yyj3594++ {
			if r.TryDecodeAsNil() {
				yyv3594[yyj3594] = Namespace{}
			} else {
				yyv3595 := &yyv3594[yyj3594]
				yyv3595.CodecDecodeSelf(d)
			}

		}
		if yyrt3594 {
			for ; yyj3594 < yyl3594; yyj3594++ {
				yyv3594 = append(yyv3594, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3594[yyj3594] = Namespace{}
				} else {
					yyv3596 := &yyv3594[yyj3594]
					yyv3596.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3594 := 0; !r.CheckBreak(); yyj3594++ {
			if yyj3594 >= len(yyv3594) {
				yyv3594 = append(yyv3594, Namespace{}) // var yyz3594 Namespace
				yyc3594 = true
			}

			if yyj3594 < len(yyv3594) {
				if r.TryDecodeAsNil() {
					yyv3594[yyj3594] = Namespace{}
				} else {
					yyv3597 := &yyv3594[yyj3594]
					yyv3597.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3594.End()
	}
	if yyc3594 {
		*v = yyv3594
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3598 := range v {
		yy3599 := &yyv3598
		yy3599.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3600 := *v
	yyh3600, yyl3600 := z.DecSliceHelperStart()

	var yyrr3600, yyrl3600 int
	var yyc3600, yyrt3600 bool
	_, _, _ = yyc3600, yyrt3600, yyrl3600
	yyrr3600 = yyl3600

	if yyv3600 == nil {
		if yyrl3600, yyrt3600 = z.DecInferLen(yyl3600, z.DecBasicHandle().MaxInitLen, 424); yyrt3600 {
			yyrr3600 = yyrl3600
		}
		yyv3600 = make([]Event, yyrl3600)
		yyc3600 = true
	}

	if yyl3600 == 0 {
		if len(yyv3600) != 0 {
			yyv3600 = yyv3600[:0]
			yyc3600 = true
		}
	} else if yyl3600 > 0 {

		if yyl3600 > cap(yyv3600) {
			yyrl3600, yyrt3600 = z.DecInferLen(yyl3600, z.DecBasicHandle().MaxInitLen, 424)
			yyv3600 = make([]Event, yyrl3600)
			yyc3600 = true

			yyrr3600 = len(yyv3600)
		} else if yyl3600 != len(yyv3600) {
			yyv3600 = yyv3600[:yyl3600]
			yyc3600 = true
		}
		yyj3600 := 0
		for ; yyj3600 < yyrr3600; yyj3600++ {
			if r.TryDecodeAsNil() {
				yyv3600[yyj3600] = Event{}
			} else {
				yyv3601 := &yyv3600[yyj3600]
				yyv3601.CodecDecodeSelf(d)
			}

		}
		if yyrt3600 {
			for ; yyj3600 < yyl3600; yyj3600++ {
				yyv3600 = append(yyv3600, Event{})
				if r.TryDecodeAsNil() {
					yyv3600[yyj3600] = Event{}
				} else {
					yyv3602 := &yyv3600[yyj3600]
					yyv3602.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3600 := 0; !r.CheckBreak(); yyj3600++ {
			if yyj3600 >= len(yyv3600) {
				yyv3600 = append(yyv3600, Event{}) // var yyz3600 Event
				yyc3600 = true
			}

			if yyj3600 < len(yyv3600) {
				if r.TryDecodeAsNil() {
					yyv3600[yyj3600] = Event{}
				} else {
					yyv3603 := &yyv3600[yyj3600]
					yyv3603.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3600.End()
	}
	if yyc3600 {
		*v = yyv3600
	}

}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg6_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3604 := range v {
		yy3605 := &yyv3604
		yym3606 := z.EncBinary()
		_ = yym3606
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3605) {
		} else if !yym3606 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3605)
		} else {
			z.EncFallback(yy3605)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg6_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3607 := *v
	yyh3607, yyl3607 := z.DecSliceHelperStart()

	var yyrr3607, yyrl3607 int
	var yyc3607, yyrt3607 bool
	_, _, _ = yyc3607, yyrt3607, yyrl3607
	yyrr3607 = yyl3607

	if yyv3607 == nil {
		if yyrl3607, yyrt3607 = z.DecInferLen(yyl3607, z.DecBasicHandle().MaxInitLen, 24); yyrt3607 {
			yyrr3607 = yyrl3607
		}
		yyv3607 = make([]pkg6_runtime.RawExtension, yyrl3607)
		yyc3607 = true
	}

	if yyl3607 == 0 {
		if len(yyv3607) != 0 {
			yyv3607 = yyv3607[:0]
			yyc3607 = true
		}
	} else if yyl3607 > 0 {

		if yyl3607 > cap(yyv3607) {
			yyrl3607, yyrt3607 = z.DecInferLen(yyl3607, z.DecBasicHandle().MaxInitLen, 24)
			yyv3607 = make([]pkg6_runtime.RawExtension, yyrl3607)
			yyc3607 = true

			yyrr3607 = len(yyv3607)
		} else if yyl3607 != len(yyv3607) {
			yyv3607 = yyv3607[:yyl3607]
			yyc3607 = true
		}
		yyj3607 := 0
		for ; yyj3607 < yyrr3607; yyj3607++ {
			if r.TryDecodeAsNil() {
				yyv3607[yyj3607] = pkg6_runtime.RawExtension{}
			} else {
				yyv3608 := &yyv3607[yyj3607]
				yym3609 := z.DecBinary()
				_ = yym3609
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3608) {
				} else if !yym3609 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3608)
				} else {
					z.DecFallback(yyv3608, false)
				}
			}

		}
		if yyrt3607 {
			for ; yyj3607 < yyl3607; yyj3607++ {
				yyv3607 = append(yyv3607, pkg6_runtime.RawExtension{})
				if r.TryDecodeAsNil() {
					yyv3607[yyj3607] = pkg6_runtime.RawExtension{}
				} else {
					yyv3610 := &yyv3607[yyj3607]
					yym3611 := z.DecBinary()
					_ = yym3611
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3610) {
					} else if !yym3611 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3610)
					} else {
						z.DecFallback(yyv3610, false)
					}
				}

			}
		}

	} else {
		for yyj3607 := 0; !r.CheckBreak(); yyj3607++ {
			if yyj3607 >= len(yyv3607) {
				yyv3607 = append(yyv3607, pkg6_runtime.RawExtension{}) // var yyz3607 pkg6_runtime.RawExtension
				yyc3607 = true
			}

			if yyj3607 < len(yyv3607) {
				if r.TryDecodeAsNil() {
					yyv3607[yyj3607] = pkg6_runtime.RawExtension{}
				} else {
					yyv3612 := &yyv3607[yyj3607]
					yym3613 := z.DecBinary()
					_ = yym3613
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3612) {
					} else if !yym3613 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3612)
					} else {
						z.DecFallback(yyv3612, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3607.End()
	}
	if yyc3607 {
		*v = yyv3607
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3614 := range v {
		yy3615 := &yyv3614
		yy3615.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3616 := *v
	yyh3616, yyl3616 := z.DecSliceHelperStart()

	var yyrr3616, yyrl3616 int
	var yyc3616, yyrt3616 bool
	_, _, _ = yyc3616, yyrt3616, yyrl3616
	yyrr3616 = yyl3616

	if yyv3616 == nil {
		if yyrl3616, yyrt3616 = z.DecInferLen(yyl3616, z.DecBasicHandle().MaxInitLen, 56); yyrt3616 {
			yyrr3616 = yyrl3616
		}
		yyv3616 = make([]LimitRangeItem, yyrl3616)
		yyc3616 = true
	}

	if yyl3616 == 0 {
		if len(yyv3616) != 0 {
			yyv3616 = yyv3616[:0]
			yyc3616 = true
		}
	} else if yyl3616 > 0 {

		if yyl3616 > cap(yyv3616) {
			yyrl3616, yyrt3616 = z.DecInferLen(yyl3616, z.DecBasicHandle().MaxInitLen, 56)
			yyv3616 = make([]LimitRangeItem, yyrl3616)
			yyc3616 = true

			yyrr3616 = len(yyv3616)
		} else if yyl3616 != len(yyv3616) {
			yyv3616 = yyv3616[:yyl3616]
			yyc3616 = true
		}
		yyj3616 := 0
		for ; yyj3616 < yyrr3616; yyj3616++ {
			if r.TryDecodeAsNil() {
				yyv3616[yyj3616] = LimitRangeItem{}
			} else {
				yyv3617 := &yyv3616[yyj3616]
				yyv3617.CodecDecodeSelf(d)
			}

		}
		if yyrt3616 {
			for ; yyj3616 < yyl3616; yyj3616++ {
				yyv3616 = append(yyv3616, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3616[yyj3616] = LimitRangeItem{}
				} else {
					yyv3618 := &yyv3616[yyj3616]
					yyv3618.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3616 := 0; !r.CheckBreak(); yyj3616++ {
			if yyj3616 >= len(yyv3616) {
				yyv3616 = append(yyv3616, LimitRangeItem{}) // var yyz3616 LimitRangeItem
				yyc3616 = true
			}

			if yyj3616 < len(yyv3616) {
				if r.TryDecodeAsNil() {
					yyv3616[yyj3616] = LimitRangeItem{}
				} else {
					yyv3619 := &yyv3616[yyj3616]
					yyv3619.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3616.End()
	}
	if yyc3616 {
		*v = yyv3616
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3620 := range v {
		yy3621 := &yyv3620
		yy3621.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3622 := *v
	yyh3622, yyl3622 := z.DecSliceHelperStart()

	var yyrr3622, yyrl3622 int
	var yyc3622, yyrt3622 bool
	_, _, _ = yyc3622, yyrt3622, yyrl3622
	yyrr3622 = yyl3622

	if yyv3622 == nil {
		if yyrl3622, yyrt3622 = z.DecInferLen(yyl3622, z.DecBasicHandle().MaxInitLen, 216); yyrt3622 {
			yyrr3622 = yyrl3622
		}
		yyv3622 = make([]LimitRange, yyrl3622)
		yyc3622 = true
	}

	if yyl3622 == 0 {
		if len(yyv3622) != 0 {
			yyv3622 = yyv3622[:0]
			yyc3622 = true
		}
	} else if yyl3622 > 0 {

		if yyl3622 > cap(yyv3622) {
			yyrl3622, yyrt3622 = z.DecInferLen(yyl3622, z.DecBasicHandle().MaxInitLen, 216)
			yyv3622 = make([]LimitRange, yyrl3622)
			yyc3622 = true

			yyrr3622 = len(yyv3622)
		} else if yyl3622 != len(yyv3622) {
			yyv3622 = yyv3622[:yyl3622]
			yyc3622 = true
		}
		yyj3622 := 0
		for ; yyj3622 < yyrr3622; yyj3622++ {
			if r.TryDecodeAsNil() {
				yyv3622[yyj3622] = LimitRange{}
			} else {
				yyv3623 := &yyv3622[yyj3622]
				yyv3623.CodecDecodeSelf(d)
			}

		}
		if yyrt3622 {
			for ; yyj3622 < yyl3622; yyj3622++ {
				yyv3622 = append(yyv3622, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3622[yyj3622] = LimitRange{}
				} else {
					yyv3624 := &yyv3622[yyj3622]
					yyv3624.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3622 := 0; !r.CheckBreak(); yyj3622++ {
			if yyj3622 >= len(yyv3622) {
				yyv3622 = append(yyv3622, LimitRange{}) // var yyz3622 LimitRange
				yyc3622 = true
			}

			if yyj3622 < len(yyv3622) {
				if r.TryDecodeAsNil() {
					yyv3622[yyj3622] = LimitRange{}
				} else {
					yyv3625 := &yyv3622[yyj3622]
					yyv3625.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3622.End()
	}
	if yyc3622 {
		*v = yyv3622
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3626 := range v {
		yy3627 := &yyv3626
		yy3627.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3628 := *v
	yyh3628, yyl3628 := z.DecSliceHelperStart()

	var yyrr3628, yyrl3628 int
	var yyc3628, yyrt3628 bool
	_, _, _ = yyc3628, yyrt3628, yyrl3628
	yyrr3628 = yyl3628

	if yyv3628 == nil {
		if yyrl3628, yyrt3628 = z.DecInferLen(yyl3628, z.DecBasicHandle().MaxInitLen, 216); yyrt3628 {
			yyrr3628 = yyrl3628
		}
		yyv3628 = make([]ResourceQuota, yyrl3628)
		yyc3628 = true
	}

	if yyl3628 == 0 {
		if len(yyv3628) != 0 {
			yyv3628 = yyv3628[:0]
			yyc3628 = true
		}
	} else if yyl3628 > 0 {

		if yyl3628 > cap(yyv3628) {
			yyrl3628, yyrt3628 = z.DecInferLen(yyl3628, z.DecBasicHandle().MaxInitLen, 216)
			yyv3628 = make([]ResourceQuota, yyrl3628)
			yyc3628 = true

			yyrr3628 = len(yyv3628)
		} else if yyl3628 != len(yyv3628) {
			yyv3628 = yyv3628[:yyl3628]
			yyc3628 = true
		}
		yyj3628 := 0
		for ; yyj3628 < yyrr3628; yyj3628++ {
			if r.TryDecodeAsNil() {
				yyv3628[yyj3628] = ResourceQuota{}
			} else {
				yyv3629 := &yyv3628[yyj3628]
				yyv3629.CodecDecodeSelf(d)
			}

		}
		if yyrt3628 {
			for ; yyj3628 < yyl3628; yyj3628++ {
				yyv3628 = append(yyv3628, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3628[yyj3628] = ResourceQuota{}
				} else {
					yyv3630 := &yyv3628[yyj3628]
					yyv3630.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3628 := 0; !r.CheckBreak(); yyj3628++ {
			if yyj3628 >= len(yyv3628) {
				yyv3628 = append(yyv3628, ResourceQuota{}) // var yyz3628 ResourceQuota
				yyc3628 = true
			}

			if yyj3628 < len(yyv3628) {
				if r.TryDecodeAsNil() {
					yyv3628[yyj3628] = ResourceQuota{}
				} else {
					yyv3631 := &yyv3628[yyj3628]
					yyv3631.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3628.End()
	}
	if yyc3628 {
		*v = yyv3628
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3632, yyv3632 := range v {
		yym3633 := z.EncBinary()
		_ = yym3633
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3632))
		}
		if yyv3632 == nil {
			r.EncodeNil()
		} else {
			yym3634 := z.EncBinary()
			_ = yym3634
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3632))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3635 := *v
	yyl3635 := r.ReadMapStart()
	yybh3635 := z.DecBasicHandle()
	if yyv3635 == nil {
		yyrl3635, _ := z.DecInferLen(yyl3635, yybh3635.MaxInitLen, 40)
		yyv3635 = make(map[string][]uint8, yyrl3635)
		*v = yyv3635
	}
	var yymk3635 string
	var yymv3635 []uint8
	var yymg3635 bool
	if yybh3635.MapValueReset {
		yymg3635 = true
	}
	if yyl3635 > 0 {
		for yyj3635 := 0; yyj3635 < yyl3635; yyj3635++ {
			if r.TryDecodeAsNil() {
				yymk3635 = ""
			} else {
				yymk3635 = string(r.DecodeString())
			}

			if yymg3635 {
				yymv3635 = yyv3635[yymk3635]
			} else {
				yymv3635 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3635 = nil
			} else {
				yyv3637 := &yymv3635
				yym3638 := z.DecBinary()
				_ = yym3638
				if false {
				} else {
					*yyv3637 = r.DecodeBytes(*(*[]byte)(yyv3637), false, false)
				}
			}

			if yyv3635 != nil {
				yyv3635[yymk3635] = yymv3635
			}
		}
	} else if yyl3635 < 0 {
		for yyj3635 := 0; !r.CheckBreak(); yyj3635++ {
			if r.TryDecodeAsNil() {
				yymk3635 = ""
			} else {
				yymk3635 = string(r.DecodeString())
			}

			if yymg3635 {
				yymv3635 = yyv3635[yymk3635]
			} else {
				yymv3635 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3635 = nil
			} else {
				yyv3640 := &yymv3635
				yym3641 := z.DecBinary()
				_ = yym3641
				if false {
				} else {
					*yyv3640 = r.DecodeBytes(*(*[]byte)(yyv3640), false, false)
				}
			}

			if yyv3635 != nil {
				yyv3635[yymk3635] = yymv3635
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3642 := range v {
		yy3643 := &yyv3642
		yy3643.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3644 := *v
	yyh3644, yyl3644 := z.DecSliceHelperStart()

	var yyrr3644, yyrl3644 int
	var yyc3644, yyrt3644 bool
	_, _, _ = yyc3644, yyrt3644, yyrl3644
	yyrr3644 = yyl3644

	if yyv3644 == nil {
		if yyrl3644, yyrt3644 = z.DecInferLen(yyl3644, z.DecBasicHandle().MaxInitLen, 216); yyrt3644 {
			yyrr3644 = yyrl3644
		}
		yyv3644 = make([]Secret, yyrl3644)
		yyc3644 = true
	}

	if yyl3644 == 0 {
		if len(yyv3644) != 0 {
			yyv3644 = yyv3644[:0]
			yyc3644 = true
		}
	} else if yyl3644 > 0 {

		if yyl3644 > cap(yyv3644) {
			yyrl3644, yyrt3644 = z.DecInferLen(yyl3644, z.DecBasicHandle().MaxInitLen, 216)
			yyv3644 = make([]Secret, yyrl3644)
			yyc3644 = true

			yyrr3644 = len(yyv3644)
		} else if yyl3644 != len(yyv3644) {
			yyv3644 = yyv3644[:yyl3644]
			yyc3644 = true
		}
		yyj3644 := 0
		for ; yyj3644 < yyrr3644; yyj3644++ {
			if r.TryDecodeAsNil() {
				yyv3644[yyj3644] = Secret{}
			} else {
				yyv3645 := &yyv3644[yyj3644]
				yyv3645.CodecDecodeSelf(d)
			}

		}
		if yyrt3644 {
			for ; yyj3644 < yyl3644; yyj3644++ {
				yyv3644 = append(yyv3644, Secret{})
				if r.TryDecodeAsNil() {
					yyv3644[yyj3644] = Secret{}
				} else {
					yyv3646 := &yyv3644[yyj3644]
					yyv3646.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3644 := 0; !r.CheckBreak(); yyj3644++ {
			if yyj3644 >= len(yyv3644) {
				yyv3644 = append(yyv3644, Secret{}) // var yyz3644 Secret
				yyc3644 = true
			}

			if yyj3644 < len(yyv3644) {
				if r.TryDecodeAsNil() {
					yyv3644[yyj3644] = Secret{}
				} else {
					yyv3647 := &yyv3644[yyj3644]
					yyv3647.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3644.End()
	}
	if yyc3644 {
		*v = yyv3644
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3648 := range v {
		yy3649 := &yyv3648
		yy3649.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3650 := *v
	yyh3650, yyl3650 := z.DecSliceHelperStart()

	var yyrr3650, yyrl3650 int
	var yyc3650, yyrt3650 bool
	_, _, _ = yyc3650, yyrt3650, yyrl3650
	yyrr3650 = yyl3650

	if yyv3650 == nil {
		if yyrl3650, yyrt3650 = z.DecInferLen(yyl3650, z.DecBasicHandle().MaxInitLen, 64); yyrt3650 {
			yyrr3650 = yyrl3650
		}
		yyv3650 = make([]ComponentCondition, yyrl3650)
		yyc3650 = true
	}

	if yyl3650 == 0 {
		if len(yyv3650) != 0 {
			yyv3650 = yyv3650[:0]
			yyc3650 = true
		}
	} else if yyl3650 > 0 {

		if yyl3650 > cap(yyv3650) {
			yyrl3650, yyrt3650 = z.DecInferLen(yyl3650, z.DecBasicHandle().MaxInitLen, 64)
			yyv3650 = make([]ComponentCondition, yyrl3650)
			yyc3650 = true

			yyrr3650 = len(yyv3650)
		} else if yyl3650 != len(yyv3650) {
			yyv3650 = yyv3650[:yyl3650]
			yyc3650 = true
		}
		yyj3650 := 0
		for ; yyj3650 < yyrr3650; yyj3650++ {
			if r.TryDecodeAsNil() {
				yyv3650[yyj3650] = ComponentCondition{}
			} else {
				yyv3651 := &yyv3650[yyj3650]
				yyv3651.CodecDecodeSelf(d)
			}

		}
		if yyrt3650 {
			for ; yyj3650 < yyl3650; yyj3650++ {
				yyv3650 = append(yyv3650, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3650[yyj3650] = ComponentCondition{}
				} else {
					yyv3652 := &yyv3650[yyj3650]
					yyv3652.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3650 := 0; !r.CheckBreak(); yyj3650++ {
			if yyj3650 >= len(yyv3650) {
				yyv3650 = append(yyv3650, ComponentCondition{}) // var yyz3650 ComponentCondition
				yyc3650 = true
			}

			if yyj3650 < len(yyv3650) {
				if r.TryDecodeAsNil() {
					yyv3650[yyj3650] = ComponentCondition{}
				} else {
					yyv3653 := &yyv3650[yyj3650]
					yyv3653.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3650.End()
	}
	if yyc3650 {
		*v = yyv3650
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3654 := range v {
		yy3655 := &yyv3654
		yy3655.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3656 := *v
	yyh3656, yyl3656 := z.DecSliceHelperStart()

	var yyrr3656, yyrl3656 int
	var yyc3656, yyrt3656 bool
	_, _, _ = yyc3656, yyrt3656, yyrl3656
	yyrr3656 = yyl3656

	if yyv3656 == nil {
		if yyrl3656, yyrt3656 = z.DecInferLen(yyl3656, z.DecBasicHandle().MaxInitLen, 216); yyrt3656 {
			yyrr3656 = yyrl3656
		}
		yyv3656 = make([]ComponentStatus, yyrl3656)
		yyc3656 = true
	}

	if yyl3656 == 0 {
		if len(yyv3656) != 0 {
			yyv3656 = yyv3656[:0]
			yyc3656 = true
		}
	} else if yyl3656 > 0 {

		if yyl3656 > cap(yyv3656) {
			yyrl3656, yyrt3656 = z.DecInferLen(yyl3656, z.DecBasicHandle().MaxInitLen, 216)
			yyv3656 = make([]ComponentStatus, yyrl3656)
			yyc3656 = true

			yyrr3656 = len(yyv3656)
		} else if yyl3656 != len(yyv3656) {
			yyv3656 = yyv3656[:yyl3656]
			yyc3656 = true
		}
		yyj3656 := 0
		for ; yyj3656 < yyrr3656; yyj3656++ {
			if r.TryDecodeAsNil() {
				yyv3656[yyj3656] = ComponentStatus{}
			} else {
				yyv3657 := &yyv3656[yyj3656]
				yyv3657.CodecDecodeSelf(d)
			}

		}
		if yyrt3656 {
			for ; yyj3656 < yyl3656; yyj3656++ {
				yyv3656 = append(yyv3656, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3656[yyj3656] = ComponentStatus{}
				} else {
					yyv3658 := &yyv3656[yyj3656]
					yyv3658.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3656 := 0; !r.CheckBreak(); yyj3656++ {
			if yyj3656 >= len(yyv3656) {
				yyv3656 = append(yyv3656, ComponentStatus{}) // var yyz3656 ComponentStatus
				yyc3656 = true
			}

			if yyj3656 < len(yyv3656) {
				if r.TryDecodeAsNil() {
					yyv3656[yyj3656] = ComponentStatus{}
				} else {
					yyv3659 := &yyv3656[yyj3656]
					yyv3659.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3656.End()
	}
	if yyc3656 {
		*v = yyv3656
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3660 := range v {
		yy3661 := &yyv3660
		yy3661.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3662 := *v
	yyh3662, yyl3662 := z.DecSliceHelperStart()

	var yyrr3662, yyrl3662 int
	var yyc3662, yyrt3662 bool
	_, _, _ = yyc3662, yyrt3662, yyrl3662
	yyrr3662 = yyl3662

	if yyv3662 == nil {
		if yyrl3662, yyrt3662 = z.DecInferLen(yyl3662, z.DecBasicHandle().MaxInitLen, 48); yyrt3662 {
			yyrr3662 = yyrl3662
		}
		yyv3662 = make([]DownwardAPIVolumeFile, yyrl3662)
		yyc3662 = true
	}

	if yyl3662 == 0 {
		if len(yyv3662) != 0 {
			yyv3662 = yyv3662[:0]
			yyc3662 = true
		}
	} else if yyl3662 > 0 {

		if yyl3662 > cap(yyv3662) {
			yyrl3662, yyrt3662 = z.DecInferLen(yyl3662, z.DecBasicHandle().MaxInitLen, 48)
			yyv3662 = make([]DownwardAPIVolumeFile, yyrl3662)
			yyc3662 = true

			yyrr3662 = len(yyv3662)
		} else if yyl3662 != len(yyv3662) {
			yyv3662 = yyv3662[:yyl3662]
			yyc3662 = true
		}
		yyj3662 := 0
		for ; yyj3662 < yyrr3662; yyj3662++ {
			if r.TryDecodeAsNil() {
				yyv3662[yyj3662] = DownwardAPIVolumeFile{}
			} else {
				yyv3663 := &yyv3662[yyj3662]
				yyv3663.CodecDecodeSelf(d)
			}

		}
		if yyrt3662 {
			for ; yyj3662 < yyl3662; yyj3662++ {
				yyv3662 = append(yyv3662, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3662[yyj3662] = DownwardAPIVolumeFile{}
				} else {
					yyv3664 := &yyv3662[yyj3662]
					yyv3664.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3662 := 0; !r.CheckBreak(); yyj3662++ {
			if yyj3662 >= len(yyv3662) {
				yyv3662 = append(yyv3662, DownwardAPIVolumeFile{}) // var yyz3662 DownwardAPIVolumeFile
				yyc3662 = true
			}

			if yyj3662 < len(yyv3662) {
				if r.TryDecodeAsNil() {
					yyv3662[yyj3662] = DownwardAPIVolumeFile{}
				} else {
					yyv3665 := &yyv3662[yyj3662]
					yyv3665.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3662.End()
	}
	if yyc3662 {
		*v = yyv3662
	}

}
