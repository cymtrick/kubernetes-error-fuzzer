/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [22]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[13] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[14] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[15] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[16] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[17] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[18] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[19] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[20] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[21] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(22)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.Quobyte == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.Cinder == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.CephFS == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.Flocker == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.FC == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.AzureFile == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym126 := z.DecBinary()
	_ = yym126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct127 := r.ContainerType()
		if yyct127 == codecSelferValueTypeMap1234 {
			yyl127 := r.ReadMapStart()
			if yyl127 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl127, d)
			}
		} else if yyct127 == codecSelferValueTypeArray1234 {
			yyl127 := r.ReadArrayStart()
			if yyl127 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl127, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys128Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys128Slc
	var yyhl128 bool = l >= 0
	for yyj128 := 0; ; yyj128++ {
		if yyhl128 {
			if yyj128 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys128Slc = r.DecodeBytes(yys128Slc, true, true)
		yys128 := string(yys128Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys128 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys128)
		} // end switch yys128
	} // end for yyj128
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj151 int
	var yyb151 bool
	var yyhl151 bool = l >= 0
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj151++
		if yyhl151 {
			yyb151 = yyj151 > l
		} else {
			yyb151 = r.CheckBreak()
		}
		if yyb151 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj151-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym174 := z.EncBinary()
		_ = yym174
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep175 := !z.EncBinary()
			yy2arr175 := z.EncBasicHandle().StructToArray
			var yyq175 [21]bool
			_, _, _ = yysep175, yyq175, yy2arr175
			const yyr175 bool = false
			yyq175[0] = x.HostPath != nil
			yyq175[1] = x.EmptyDir != nil
			yyq175[2] = x.GCEPersistentDisk != nil
			yyq175[3] = x.AWSElasticBlockStore != nil
			yyq175[4] = x.GitRepo != nil
			yyq175[5] = x.Secret != nil
			yyq175[6] = x.NFS != nil
			yyq175[7] = x.ISCSI != nil
			yyq175[8] = x.Glusterfs != nil
			yyq175[9] = x.PersistentVolumeClaim != nil
			yyq175[10] = x.RBD != nil
			yyq175[11] = x.Quobyte != nil
			yyq175[12] = x.FlexVolume != nil
			yyq175[13] = x.Cinder != nil
			yyq175[14] = x.CephFS != nil
			yyq175[15] = x.Flocker != nil
			yyq175[16] = x.DownwardAPI != nil
			yyq175[17] = x.FC != nil
			yyq175[18] = x.AzureFile != nil
			yyq175[19] = x.ConfigMap != nil
			yyq175[20] = x.VsphereVolume != nil
			var yynn175 int
			if yyr175 || yy2arr175 {
				r.EncodeArrayStart(21)
			} else {
				yynn175 = 0
				for _, b := range yyq175 {
					if b {
						yynn175++
					}
				}
				r.EncodeMapStart(yynn175)
				yynn175 = 0
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[11] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[12] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[13] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[14] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[15] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[16] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[17] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[18] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[19] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[20] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym197 := z.DecBinary()
	_ = yym197
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct198 := r.ContainerType()
		if yyct198 == codecSelferValueTypeMap1234 {
			yyl198 := r.ReadMapStart()
			if yyl198 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl198, d)
			}
		} else if yyct198 == codecSelferValueTypeArray1234 {
			yyl198 := r.ReadArrayStart()
			if yyl198 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl198, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys199Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys199Slc
	var yyhl199 bool = l >= 0
	for yyj199 := 0; ; yyj199++ {
		if yyhl199 {
			if yyj199 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys199Slc = r.DecodeBytes(yys199Slc, true, true)
		yys199 := string(yys199Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys199 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys199)
		} // end switch yys199
	} // end for yyj199
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym243 := z.EncBinary()
		_ = yym243
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep244 := !z.EncBinary()
			yy2arr244 := z.EncBasicHandle().StructToArray
			var yyq244 [15]bool
			_, _, _ = yysep244, yyq244, yy2arr244
			const yyr244 bool = false
			yyq244[0] = x.GCEPersistentDisk != nil
			yyq244[1] = x.AWSElasticBlockStore != nil
			yyq244[2] = x.HostPath != nil
			yyq244[3] = x.Glusterfs != nil
			yyq244[4] = x.NFS != nil
			yyq244[5] = x.RBD != nil
			yyq244[6] = x.Quobyte != nil
			yyq244[7] = x.ISCSI != nil
			yyq244[8] = x.FlexVolume != nil
			yyq244[9] = x.Cinder != nil
			yyq244[10] = x.CephFS != nil
			yyq244[11] = x.FC != nil
			yyq244[12] = x.Flocker != nil
			yyq244[13] = x.AzureFile != nil
			yyq244[14] = x.VsphereVolume != nil
			var yynn244 int
			if yyr244 || yy2arr244 {
				r.EncodeArrayStart(15)
			} else {
				yynn244 = 0
				for _, b := range yyq244 {
					if b {
						yynn244++
					}
				}
				r.EncodeMapStart(yynn244)
				yynn244 = 0
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[6] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[8] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[9] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[10] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[11] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[12] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[13] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[14] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym260 := z.DecBinary()
	_ = yym260
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct261 := r.ContainerType()
		if yyct261 == codecSelferValueTypeMap1234 {
			yyl261 := r.ReadMapStart()
			if yyl261 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl261, d)
			}
		} else if yyct261 == codecSelferValueTypeArray1234 {
			yyl261 := r.ReadArrayStart()
			if yyl261 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl261, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys262Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys262Slc
	var yyhl262 bool = l >= 0
	for yyj262 := 0; ; yyj262++ {
		if yyhl262 {
			if yyj262 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys262Slc = r.DecodeBytes(yys262Slc, true, true)
		yys262 := string(yys262Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys262 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys262)
		} // end switch yys262
	} // end for yyj262
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj278 int
	var yyb278 bool
	var yyhl278 bool = l >= 0
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj278++
		if yyhl278 {
			yyb278 = yyj278 > l
		} else {
			yyb278 = r.CheckBreak()
		}
		if yyb278 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj278-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym294 := z.EncBinary()
		_ = yym294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep295 := !z.EncBinary()
			yy2arr295 := z.EncBasicHandle().StructToArray
			var yyq295 [2]bool
			_, _, _ = yysep295, yyq295, yy2arr295
			const yyr295 bool = false
			yyq295[1] = x.ReadOnly != false
			var yynn295 int
			if yyr295 || yy2arr295 {
				r.EncodeArrayStart(2)
			} else {
				yynn295 = 1
				for _, b := range yyq295 {
					if b {
						yynn295++
					}
				}
				r.EncodeMapStart(yynn295)
				yynn295 = 0
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym297 := z.EncBinary()
				_ = yym297
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym298 := z.EncBinary()
				_ = yym298
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq295[1] {
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq295[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym301 := z.EncBinary()
					_ = yym301
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym302 := z.DecBinary()
	_ = yym302
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct303 := r.ContainerType()
		if yyct303 == codecSelferValueTypeMap1234 {
			yyl303 := r.ReadMapStart()
			if yyl303 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl303, d)
			}
		} else if yyct303 == codecSelferValueTypeArray1234 {
			yyl303 := r.ReadArrayStart()
			if yyl303 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl303, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys304Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys304Slc
	var yyhl304 bool = l >= 0
	for yyj304 := 0; ; yyj304++ {
		if yyhl304 {
			if yyj304 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys304Slc = r.DecodeBytes(yys304Slc, true, true)
		yys304 := string(yys304Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys304 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys304)
		} // end switch yys304
	} // end for yyj304
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj307 int
	var yyb307 bool
	var yyhl307 bool = l >= 0
	yyj307++
	if yyhl307 {
		yyb307 = yyj307 > l
	} else {
		yyb307 = r.CheckBreak()
	}
	if yyb307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj307++
	if yyhl307 {
		yyb307 = yyj307 > l
	} else {
		yyb307 = r.CheckBreak()
	}
	if yyb307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj307++
		if yyhl307 {
			yyb307 = yyj307 > l
		} else {
			yyb307 = r.CheckBreak()
		}
		if yyb307 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj307-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym310 := z.EncBinary()
		_ = yym310
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep311 := !z.EncBinary()
			yy2arr311 := z.EncBasicHandle().StructToArray
			var yyq311 [5]bool
			_, _, _ = yysep311, yyq311, yy2arr311
			const yyr311 bool = false
			yyq311[0] = x.Kind != ""
			yyq311[1] = x.APIVersion != ""
			yyq311[2] = true
			yyq311[3] = true
			yyq311[4] = true
			var yynn311 int
			if yyr311 || yy2arr311 {
				r.EncodeArrayStart(5)
			} else {
				yynn311 = 0
				for _, b := range yyq311 {
					if b {
						yynn311++
					}
				}
				r.EncodeMapStart(yynn311)
				yynn311 = 0
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[0] {
					yym313 := z.EncBinary()
					_ = yym313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq311[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym314 := z.EncBinary()
					_ = yym314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[1] {
					yym316 := z.EncBinary()
					_ = yym316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq311[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym317 := z.EncBinary()
					_ = yym317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[2] {
					yy319 := &x.ObjectMeta
					yy319.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy320 := &x.ObjectMeta
					yy320.CodecEncodeSelf(e)
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[3] {
					yy322 := &x.Spec
					yy322.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy323 := &x.Spec
					yy323.CodecEncodeSelf(e)
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[4] {
					yy325 := &x.Status
					yy325.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy326 := &x.Status
					yy326.CodecEncodeSelf(e)
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym327 := z.DecBinary()
	_ = yym327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct328 := r.ContainerType()
		if yyct328 == codecSelferValueTypeMap1234 {
			yyl328 := r.ReadMapStart()
			if yyl328 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl328, d)
			}
		} else if yyct328 == codecSelferValueTypeArray1234 {
			yyl328 := r.ReadArrayStart()
			if yyl328 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys329Slc
	var yyhl329 bool = l >= 0
	for yyj329 := 0; ; yyj329++ {
		if yyhl329 {
			if yyj329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys329Slc = r.DecodeBytes(yys329Slc, true, true)
		yys329 := string(yys329Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys329 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv332 := &x.ObjectMeta
				yyv332.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv333 := &x.Spec
				yyv333.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv334 := &x.Status
				yyv334.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys329)
		} // end switch yys329
	} // end for yyj329
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj335 int
	var yyb335 bool
	var yyhl335 bool = l >= 0
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv338 := &x.ObjectMeta
		yyv338.CodecDecodeSelf(d)
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv339 := &x.Spec
		yyv339.CodecDecodeSelf(d)
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv340 := &x.Status
		yyv340.CodecDecodeSelf(d)
	}
	for {
		yyj335++
		if yyhl335 {
			yyb335 = yyj335 > l
		} else {
			yyb335 = r.CheckBreak()
		}
		if yyb335 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj335-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym341 := z.EncBinary()
		_ = yym341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep342 := !z.EncBinary()
			yy2arr342 := z.EncBasicHandle().StructToArray
			var yyq342 [19]bool
			_, _, _ = yysep342, yyq342, yy2arr342
			const yyr342 bool = false
			yyq342[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq342[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq342[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq342[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq342[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq342[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq342[7] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq342[8] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq342[9] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq342[10] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq342[11] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq342[12] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq342[13] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq342[14] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq342[15] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq342[16] = len(x.AccessModes) != 0
			yyq342[17] = x.ClaimRef != nil
			yyq342[18] = x.PersistentVolumeReclaimPolicy != ""
			var yynn342 int
			if yyr342 || yy2arr342 {
				r.EncodeArrayStart(19)
			} else {
				yynn342 = 1
				for _, b := range yyq342 {
					if b {
						yynn342++
					}
				}
				r.EncodeMapStart(yynn342)
				yynn342 = 0
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn344 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn344 = true
				goto LABEL344
			}
		LABEL344:
			if yyr342 || yy2arr342 {
				if yyn344 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn344 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn345 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn345 = true
				goto LABEL345
			}
		LABEL345:
			if yyr342 || yy2arr342 {
				if yyn345 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn345 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn346 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn346 = true
				goto LABEL346
			}
		LABEL346:
			if yyr342 || yy2arr342 {
				if yyn346 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn346 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn347 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn347 = true
				goto LABEL347
			}
		LABEL347:
			if yyr342 || yy2arr342 {
				if yyn347 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn347 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn348 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn348 = true
				goto LABEL348
			}
		LABEL348:
			if yyr342 || yy2arr342 {
				if yyn348 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn348 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn349 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn349 = true
				goto LABEL349
			}
		LABEL349:
			if yyr342 || yy2arr342 {
				if yyn349 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn349 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn350 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn350 = true
				goto LABEL350
			}
		LABEL350:
			if yyr342 || yy2arr342 {
				if yyn350 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[7] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn350 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn351 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn351 = true
				goto LABEL351
			}
		LABEL351:
			if yyr342 || yy2arr342 {
				if yyn351 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn351 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn352 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn352 = true
				goto LABEL352
			}
		LABEL352:
			if yyr342 || yy2arr342 {
				if yyn352 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[9] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn352 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn353 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn353 = true
				goto LABEL353
			}
		LABEL353:
			if yyr342 || yy2arr342 {
				if yyn353 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[10] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn353 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn354 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn354 = true
				goto LABEL354
			}
		LABEL354:
			if yyr342 || yy2arr342 {
				if yyn354 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[11] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn354 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn355 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn355 = true
				goto LABEL355
			}
		LABEL355:
			if yyr342 || yy2arr342 {
				if yyn355 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[12] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn355 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn356 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn356 = true
				goto LABEL356
			}
		LABEL356:
			if yyr342 || yy2arr342 {
				if yyn356 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[13] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn356 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn357 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn357 = true
				goto LABEL357
			}
		LABEL357:
			if yyr342 || yy2arr342 {
				if yyn357 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[14] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn357 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn358 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn358 = true
				goto LABEL358
			}
		LABEL358:
			if yyr342 || yy2arr342 {
				if yyn358 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[15] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn358 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[16] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym360 := z.EncBinary()
						_ = yym360
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq342[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym361 := z.EncBinary()
						_ = yym361
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[17] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq342[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[18] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq342[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym364 := z.DecBinary()
	_ = yym364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct365 := r.ContainerType()
		if yyct365 == codecSelferValueTypeMap1234 {
			yyl365 := r.ReadMapStart()
			if yyl365 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl365, d)
			}
		} else if yyct365 == codecSelferValueTypeArray1234 {
			yyl365 := r.ReadArrayStart()
			if yyl365 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl365, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys366Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys366Slc
	var yyhl366 bool = l >= 0
	for yyj366 := 0; ; yyj366++ {
		if yyhl366 {
			if yyj366 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys366Slc = r.DecodeBytes(yys366Slc, true, true)
		yys366 := string(yys366Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys366 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv367 := &x.Capacity
				yyv367.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv383 := &x.AccessModes
				yym384 := z.DecBinary()
				_ = yym384
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv383), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys366)
		} // end switch yys366
	} // end for yyj366
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj387 int
	var yyb387 bool
	var yyhl387 bool = l >= 0
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv388 := &x.Capacity
		yyv388.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv404 := &x.AccessModes
		yym405 := z.DecBinary()
		_ = yym405
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv404), d)
		}
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj387++
		if yyhl387 {
			yyb387 = yyj387 > l
		} else {
			yyb387 = r.CheckBreak()
		}
		if yyb387 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj387-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym408 := z.EncBinary()
	_ = yym408
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym409 := z.DecBinary()
	_ = yym409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym410 := z.EncBinary()
		_ = yym410
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep411 := !z.EncBinary()
			yy2arr411 := z.EncBasicHandle().StructToArray
			var yyq411 [3]bool
			_, _, _ = yysep411, yyq411, yy2arr411
			const yyr411 bool = false
			yyq411[0] = x.Phase != ""
			yyq411[1] = x.Message != ""
			yyq411[2] = x.Reason != ""
			var yynn411 int
			if yyr411 || yy2arr411 {
				r.EncodeArrayStart(3)
			} else {
				yynn411 = 0
				for _, b := range yyq411 {
					if b {
						yynn411++
					}
				}
				r.EncodeMapStart(yynn411)
				yynn411 = 0
			}
			if yyr411 || yy2arr411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq411[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq411[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr411 || yy2arr411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq411[1] {
					yym414 := z.EncBinary()
					_ = yym414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq411[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr411 || yy2arr411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq411[2] {
					yym417 := z.EncBinary()
					_ = yym417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq411[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym418 := z.EncBinary()
					_ = yym418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr411 || yy2arr411 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym419 := z.DecBinary()
	_ = yym419
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct420 := r.ContainerType()
		if yyct420 == codecSelferValueTypeMap1234 {
			yyl420 := r.ReadMapStart()
			if yyl420 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl420, d)
			}
		} else if yyct420 == codecSelferValueTypeArray1234 {
			yyl420 := r.ReadArrayStart()
			if yyl420 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl420, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys421Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys421Slc
	var yyhl421 bool = l >= 0
	for yyj421 := 0; ; yyj421++ {
		if yyhl421 {
			if yyj421 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys421Slc = r.DecodeBytes(yys421Slc, true, true)
		yys421 := string(yys421Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys421 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys421)
		} // end switch yys421
	} // end for yyj421
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj425 int
	var yyb425 bool
	var yyhl425 bool = l >= 0
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj425++
		if yyhl425 {
			yyb425 = yyj425 > l
		} else {
			yyb425 = r.CheckBreak()
		}
		if yyb425 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj425-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym429 := z.EncBinary()
		_ = yym429
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep430 := !z.EncBinary()
			yy2arr430 := z.EncBasicHandle().StructToArray
			var yyq430 [4]bool
			_, _, _ = yysep430, yyq430, yy2arr430
			const yyr430 bool = false
			yyq430[0] = x.Kind != ""
			yyq430[1] = x.APIVersion != ""
			yyq430[2] = true
			var yynn430 int
			if yyr430 || yy2arr430 {
				r.EncodeArrayStart(4)
			} else {
				yynn430 = 1
				for _, b := range yyq430 {
					if b {
						yynn430++
					}
				}
				r.EncodeMapStart(yynn430)
				yynn430 = 0
			}
			if yyr430 || yy2arr430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq430[0] {
					yym432 := z.EncBinary()
					_ = yym432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq430[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr430 || yy2arr430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq430[1] {
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq430[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym436 := z.EncBinary()
					_ = yym436
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr430 || yy2arr430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq430[2] {
					yy438 := &x.ListMeta
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else if z.HasExtensions() && z.EncExt(yy438) {
					} else {
						z.EncFallback(yy438)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq430[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy440 := &x.ListMeta
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else if z.HasExtensions() && z.EncExt(yy440) {
					} else {
						z.EncFallback(yy440)
					}
				}
			}
			if yyr430 || yy2arr430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr430 || yy2arr430 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym445 := z.DecBinary()
	_ = yym445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct446 := r.ContainerType()
		if yyct446 == codecSelferValueTypeMap1234 {
			yyl446 := r.ReadMapStart()
			if yyl446 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl446, d)
			}
		} else if yyct446 == codecSelferValueTypeArray1234 {
			yyl446 := r.ReadArrayStart()
			if yyl446 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl446, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys447Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys447Slc
	var yyhl447 bool = l >= 0
	for yyj447 := 0; ; yyj447++ {
		if yyhl447 {
			if yyj447 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys447Slc = r.DecodeBytes(yys447Slc, true, true)
		yys447 := string(yys447Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys447 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv450 := &x.ListMeta
				yym451 := z.DecBinary()
				_ = yym451
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv450) {
				} else {
					z.DecFallback(yyv450, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv452 := &x.Items
				yym453 := z.DecBinary()
				_ = yym453
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv452), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys447)
		} // end switch yys447
	} // end for yyj447
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj454 int
	var yyb454 bool
	var yyhl454 bool = l >= 0
	yyj454++
	if yyhl454 {
		yyb454 = yyj454 > l
	} else {
		yyb454 = r.CheckBreak()
	}
	if yyb454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj454++
	if yyhl454 {
		yyb454 = yyj454 > l
	} else {
		yyb454 = r.CheckBreak()
	}
	if yyb454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj454++
	if yyhl454 {
		yyb454 = yyj454 > l
	} else {
		yyb454 = r.CheckBreak()
	}
	if yyb454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv457 := &x.ListMeta
		yym458 := z.DecBinary()
		_ = yym458
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv457) {
		} else {
			z.DecFallback(yyv457, false)
		}
	}
	yyj454++
	if yyhl454 {
		yyb454 = yyj454 > l
	} else {
		yyb454 = r.CheckBreak()
	}
	if yyb454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv459 := &x.Items
		yym460 := z.DecBinary()
		_ = yym460
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv459), d)
		}
	}
	for {
		yyj454++
		if yyhl454 {
			yyb454 = yyj454 > l
		} else {
			yyb454 = r.CheckBreak()
		}
		if yyb454 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj454-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym461 := z.EncBinary()
		_ = yym461
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep462 := !z.EncBinary()
			yy2arr462 := z.EncBasicHandle().StructToArray
			var yyq462 [5]bool
			_, _, _ = yysep462, yyq462, yy2arr462
			const yyr462 bool = false
			yyq462[0] = x.Kind != ""
			yyq462[1] = x.APIVersion != ""
			yyq462[2] = true
			yyq462[3] = true
			yyq462[4] = true
			var yynn462 int
			if yyr462 || yy2arr462 {
				r.EncodeArrayStart(5)
			} else {
				yynn462 = 0
				for _, b := range yyq462 {
					if b {
						yynn462++
					}
				}
				r.EncodeMapStart(yynn462)
				yynn462 = 0
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq462[0] {
					yym464 := z.EncBinary()
					_ = yym464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq462[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq462[1] {
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq462[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq462[2] {
					yy470 := &x.ObjectMeta
					yy470.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq462[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy471 := &x.ObjectMeta
					yy471.CodecEncodeSelf(e)
				}
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq462[3] {
					yy473 := &x.Spec
					yy473.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq462[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy474 := &x.Spec
					yy474.CodecEncodeSelf(e)
				}
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq462[4] {
					yy476 := &x.Status
					yy476.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq462[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy477 := &x.Status
					yy477.CodecEncodeSelf(e)
				}
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym478 := z.DecBinary()
	_ = yym478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct479 := r.ContainerType()
		if yyct479 == codecSelferValueTypeMap1234 {
			yyl479 := r.ReadMapStart()
			if yyl479 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl479, d)
			}
		} else if yyct479 == codecSelferValueTypeArray1234 {
			yyl479 := r.ReadArrayStart()
			if yyl479 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl479, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys480Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys480Slc
	var yyhl480 bool = l >= 0
	for yyj480 := 0; ; yyj480++ {
		if yyhl480 {
			if yyj480 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys480Slc = r.DecodeBytes(yys480Slc, true, true)
		yys480 := string(yys480Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys480 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv483 := &x.ObjectMeta
				yyv483.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv484 := &x.Spec
				yyv484.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv485 := &x.Status
				yyv485.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys480)
		} // end switch yys480
	} // end for yyj480
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj486 int
	var yyb486 bool
	var yyhl486 bool = l >= 0
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv489 := &x.ObjectMeta
		yyv489.CodecDecodeSelf(d)
	}
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv490 := &x.Spec
		yyv490.CodecDecodeSelf(d)
	}
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv491 := &x.Status
		yyv491.CodecDecodeSelf(d)
	}
	for {
		yyj486++
		if yyhl486 {
			yyb486 = yyj486 > l
		} else {
			yyb486 = r.CheckBreak()
		}
		if yyb486 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj486-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym492 := z.EncBinary()
		_ = yym492
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep493 := !z.EncBinary()
			yy2arr493 := z.EncBasicHandle().StructToArray
			var yyq493 [4]bool
			_, _, _ = yysep493, yyq493, yy2arr493
			const yyr493 bool = false
			yyq493[0] = x.Kind != ""
			yyq493[1] = x.APIVersion != ""
			yyq493[2] = true
			var yynn493 int
			if yyr493 || yy2arr493 {
				r.EncodeArrayStart(4)
			} else {
				yynn493 = 1
				for _, b := range yyq493 {
					if b {
						yynn493++
					}
				}
				r.EncodeMapStart(yynn493)
				yynn493 = 0
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[0] {
					yym495 := z.EncBinary()
					_ = yym495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq493[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym496 := z.EncBinary()
					_ = yym496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[1] {
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq493[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[2] {
					yy501 := &x.ListMeta
					yym502 := z.EncBinary()
					_ = yym502
					if false {
					} else if z.HasExtensions() && z.EncExt(yy501) {
					} else {
						z.EncFallback(yy501)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq493[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy503 := &x.ListMeta
					yym504 := z.EncBinary()
					_ = yym504
					if false {
					} else if z.HasExtensions() && z.EncExt(yy503) {
					} else {
						z.EncFallback(yy503)
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym506 := z.EncBinary()
					_ = yym506
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym507 := z.EncBinary()
					_ = yym507
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym508 := z.DecBinary()
	_ = yym508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct509 := r.ContainerType()
		if yyct509 == codecSelferValueTypeMap1234 {
			yyl509 := r.ReadMapStart()
			if yyl509 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl509, d)
			}
		} else if yyct509 == codecSelferValueTypeArray1234 {
			yyl509 := r.ReadArrayStart()
			if yyl509 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl509, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys510Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys510Slc
	var yyhl510 bool = l >= 0
	for yyj510 := 0; ; yyj510++ {
		if yyhl510 {
			if yyj510 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys510Slc = r.DecodeBytes(yys510Slc, true, true)
		yys510 := string(yys510Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys510 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv513 := &x.ListMeta
				yym514 := z.DecBinary()
				_ = yym514
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv513) {
				} else {
					z.DecFallback(yyv513, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv515 := &x.Items
				yym516 := z.DecBinary()
				_ = yym516
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv515), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys510)
		} // end switch yys510
	} // end for yyj510
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv520 := &x.ListMeta
		yym521 := z.DecBinary()
		_ = yym521
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv520) {
		} else {
			z.DecFallback(yyv520, false)
		}
	}
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv522 := &x.Items
		yym523 := z.DecBinary()
		_ = yym523
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv522), d)
		}
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym524 := z.EncBinary()
		_ = yym524
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep525 := !z.EncBinary()
			yy2arr525 := z.EncBasicHandle().StructToArray
			var yyq525 [4]bool
			_, _, _ = yysep525, yyq525, yy2arr525
			const yyr525 bool = false
			yyq525[0] = len(x.AccessModes) != 0
			yyq525[1] = x.Selector != nil
			yyq525[2] = true
			yyq525[3] = x.VolumeName != ""
			var yynn525 int
			if yyr525 || yy2arr525 {
				r.EncodeArrayStart(4)
			} else {
				yynn525 = 0
				for _, b := range yyq525 {
					if b {
						yynn525++
					}
				}
				r.EncodeMapStart(yynn525)
				yynn525 = 0
			}
			if yyr525 || yy2arr525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq525[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym527 := z.EncBinary()
						_ = yym527
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq525[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym528 := z.EncBinary()
						_ = yym528
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr525 || yy2arr525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq525[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym530 := z.EncBinary()
						_ = yym530
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq525[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym531 := z.EncBinary()
						_ = yym531
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr525 || yy2arr525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq525[2] {
					yy533 := &x.Resources
					yy533.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq525[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy534 := &x.Resources
					yy534.CodecEncodeSelf(e)
				}
			}
			if yyr525 || yy2arr525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq525[3] {
					yym536 := z.EncBinary()
					_ = yym536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq525[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym537 := z.EncBinary()
					_ = yym537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr525 || yy2arr525 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym538 := z.DecBinary()
	_ = yym538
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct539 := r.ContainerType()
		if yyct539 == codecSelferValueTypeMap1234 {
			yyl539 := r.ReadMapStart()
			if yyl539 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl539, d)
			}
		} else if yyct539 == codecSelferValueTypeArray1234 {
			yyl539 := r.ReadArrayStart()
			if yyl539 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl539, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys540Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys540Slc
	var yyhl540 bool = l >= 0
	for yyj540 := 0; ; yyj540++ {
		if yyhl540 {
			if yyj540 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys540Slc = r.DecodeBytes(yys540Slc, true, true)
		yys540 := string(yys540Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys540 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv541 := &x.AccessModes
				yym542 := z.DecBinary()
				_ = yym542
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv541), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym544 := z.DecBinary()
				_ = yym544
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv545 := &x.Resources
				yyv545.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys540)
		} // end switch yys540
	} // end for yyj540
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj547 int
	var yyb547 bool
	var yyhl547 bool = l >= 0
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv548 := &x.AccessModes
		yym549 := z.DecBinary()
		_ = yym549
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv548), d)
		}
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym551 := z.DecBinary()
		_ = yym551
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv552 := &x.Resources
		yyv552.CodecDecodeSelf(d)
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj547++
		if yyhl547 {
			yyb547 = yyj547 > l
		} else {
			yyb547 = r.CheckBreak()
		}
		if yyb547 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj547-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym554 := z.EncBinary()
		_ = yym554
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep555 := !z.EncBinary()
			yy2arr555 := z.EncBasicHandle().StructToArray
			var yyq555 [3]bool
			_, _, _ = yysep555, yyq555, yy2arr555
			const yyr555 bool = false
			yyq555[0] = x.Phase != ""
			yyq555[1] = len(x.AccessModes) != 0
			yyq555[2] = len(x.Capacity) != 0
			var yynn555 int
			if yyr555 || yy2arr555 {
				r.EncodeArrayStart(3)
			} else {
				yynn555 = 0
				for _, b := range yyq555 {
					if b {
						yynn555++
					}
				}
				r.EncodeMapStart(yynn555)
				yynn555 = 0
			}
			if yyr555 || yy2arr555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq555[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq555[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr555 || yy2arr555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq555[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym558 := z.EncBinary()
						_ = yym558
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq555[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym559 := z.EncBinary()
						_ = yym559
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr555 || yy2arr555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq555[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq555[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr555 || yy2arr555 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym561 := z.DecBinary()
	_ = yym561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct562 := r.ContainerType()
		if yyct562 == codecSelferValueTypeMap1234 {
			yyl562 := r.ReadMapStart()
			if yyl562 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl562, d)
			}
		} else if yyct562 == codecSelferValueTypeArray1234 {
			yyl562 := r.ReadArrayStart()
			if yyl562 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl562, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys563Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys563Slc
	var yyhl563 bool = l >= 0
	for yyj563 := 0; ; yyj563++ {
		if yyhl563 {
			if yyj563 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys563Slc = r.DecodeBytes(yys563Slc, true, true)
		yys563 := string(yys563Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys563 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv565 := &x.AccessModes
				yym566 := z.DecBinary()
				_ = yym566
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv565), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv567 := &x.Capacity
				yyv567.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys563)
		} // end switch yys563
	} // end for yyj563
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj568 int
	var yyb568 bool
	var yyhl568 bool = l >= 0
	yyj568++
	if yyhl568 {
		yyb568 = yyj568 > l
	} else {
		yyb568 = r.CheckBreak()
	}
	if yyb568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj568++
	if yyhl568 {
		yyb568 = yyj568 > l
	} else {
		yyb568 = r.CheckBreak()
	}
	if yyb568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv570 := &x.AccessModes
		yym571 := z.DecBinary()
		_ = yym571
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv570), d)
		}
	}
	yyj568++
	if yyhl568 {
		yyb568 = yyj568 > l
	} else {
		yyb568 = r.CheckBreak()
	}
	if yyb568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv572 := &x.Capacity
		yyv572.CodecDecodeSelf(d)
	}
	for {
		yyj568++
		if yyhl568 {
			yyb568 = yyj568 > l
		} else {
			yyb568 = r.CheckBreak()
		}
		if yyb568 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj568-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym573 := z.EncBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym574 := z.DecBinary()
	_ = yym574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym575 := z.EncBinary()
	_ = yym575
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym576 := z.DecBinary()
	_ = yym576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym577 := z.EncBinary()
	_ = yym577
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym578 := z.DecBinary()
	_ = yym578
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym579 := z.EncBinary()
		_ = yym579
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep580 := !z.EncBinary()
			yy2arr580 := z.EncBasicHandle().StructToArray
			var yyq580 [1]bool
			_, _, _ = yysep580, yyq580, yy2arr580
			const yyr580 bool = false
			var yynn580 int
			if yyr580 || yy2arr580 {
				r.EncodeArrayStart(1)
			} else {
				yynn580 = 1
				for _, b := range yyq580 {
					if b {
						yynn580++
					}
				}
				r.EncodeMapStart(yynn580)
				yynn580 = 0
			}
			if yyr580 || yy2arr580 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym582 := z.EncBinary()
				_ = yym582
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym583 := z.EncBinary()
				_ = yym583
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr580 || yy2arr580 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym584 := z.DecBinary()
	_ = yym584
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct585 := r.ContainerType()
		if yyct585 == codecSelferValueTypeMap1234 {
			yyl585 := r.ReadMapStart()
			if yyl585 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl585, d)
			}
		} else if yyct585 == codecSelferValueTypeArray1234 {
			yyl585 := r.ReadArrayStart()
			if yyl585 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl585, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys586Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys586Slc
	var yyhl586 bool = l >= 0
	for yyj586 := 0; ; yyj586++ {
		if yyhl586 {
			if yyj586 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys586Slc = r.DecodeBytes(yys586Slc, true, true)
		yys586 := string(yys586Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys586 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys586)
		} // end switch yys586
	} // end for yyj586
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj588 int
	var yyb588 bool
	var yyhl588 bool = l >= 0
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj588++
		if yyhl588 {
			yyb588 = yyj588 > l
		} else {
			yyb588 = r.CheckBreak()
		}
		if yyb588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym590 := z.EncBinary()
		_ = yym590
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep591 := !z.EncBinary()
			yy2arr591 := z.EncBasicHandle().StructToArray
			var yyq591 [1]bool
			_, _, _ = yysep591, yyq591, yy2arr591
			const yyr591 bool = false
			yyq591[0] = x.Medium != ""
			var yynn591 int
			if yyr591 || yy2arr591 {
				r.EncodeArrayStart(1)
			} else {
				yynn591 = 0
				for _, b := range yyq591 {
					if b {
						yynn591++
					}
				}
				r.EncodeMapStart(yynn591)
				yynn591 = 0
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq591[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym593 := z.DecBinary()
	_ = yym593
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct594 := r.ContainerType()
		if yyct594 == codecSelferValueTypeMap1234 {
			yyl594 := r.ReadMapStart()
			if yyl594 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl594, d)
			}
		} else if yyct594 == codecSelferValueTypeArray1234 {
			yyl594 := r.ReadArrayStart()
			if yyl594 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl594, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys595Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys595Slc
	var yyhl595 bool = l >= 0
	for yyj595 := 0; ; yyj595++ {
		if yyhl595 {
			if yyj595 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys595Slc = r.DecodeBytes(yys595Slc, true, true)
		yys595 := string(yys595Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys595 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys595)
		} // end switch yys595
	} // end for yyj595
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj597 int
	var yyb597 bool
	var yyhl597 bool = l >= 0
	yyj597++
	if yyhl597 {
		yyb597 = yyj597 > l
	} else {
		yyb597 = r.CheckBreak()
	}
	if yyb597 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj597++
		if yyhl597 {
			yyb597 = yyj597 > l
		} else {
			yyb597 = r.CheckBreak()
		}
		if yyb597 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj597-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym599 := z.EncBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym600 := z.DecBinary()
	_ = yym600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym601 := z.EncBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym602 := z.DecBinary()
	_ = yym602
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym603 := z.EncBinary()
		_ = yym603
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep604 := !z.EncBinary()
			yy2arr604 := z.EncBasicHandle().StructToArray
			var yyq604 [4]bool
			_, _, _ = yysep604, yyq604, yy2arr604
			const yyr604 bool = false
			yyq604[1] = x.FSType != ""
			yyq604[2] = x.Partition != 0
			yyq604[3] = x.ReadOnly != false
			var yynn604 int
			if yyr604 || yy2arr604 {
				r.EncodeArrayStart(4)
			} else {
				yynn604 = 1
				for _, b := range yyq604 {
					if b {
						yynn604++
					}
				}
				r.EncodeMapStart(yynn604)
				yynn604 = 0
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym606 := z.EncBinary()
				_ = yym606
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym607 := z.EncBinary()
				_ = yym607
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq604[1] {
					yym609 := z.EncBinary()
					_ = yym609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq604[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym610 := z.EncBinary()
					_ = yym610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq604[2] {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq604[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq604[3] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq604[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym617 := z.DecBinary()
	_ = yym617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct618 := r.ContainerType()
		if yyct618 == codecSelferValueTypeMap1234 {
			yyl618 := r.ReadMapStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl618, d)
			}
		} else if yyct618 == codecSelferValueTypeArray1234 {
			yyl618 := r.ReadArrayStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys619Slc
	var yyhl619 bool = l >= 0
	for yyj619 := 0; ; yyj619++ {
		if yyhl619 {
			if yyj619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys619Slc = r.DecodeBytes(yys619Slc, true, true)
		yys619 := string(yys619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys619 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys619)
		} // end switch yys619
	} // end for yyj619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj624 int
	var yyb624 bool
	var yyhl624 bool = l >= 0
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj624++
		if yyhl624 {
			yyb624 = yyj624 > l
		} else {
			yyb624 = r.CheckBreak()
		}
		if yyb624 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj624-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym629 := z.EncBinary()
		_ = yym629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep630 := !z.EncBinary()
			yy2arr630 := z.EncBasicHandle().StructToArray
			var yyq630 [6]bool
			_, _, _ = yysep630, yyq630, yy2arr630
			const yyr630 bool = false
			yyq630[0] = x.TargetPortal != ""
			yyq630[1] = x.IQN != ""
			yyq630[2] = x.Lun != 0
			yyq630[3] = x.ISCSIInterface != ""
			yyq630[4] = x.FSType != ""
			yyq630[5] = x.ReadOnly != false
			var yynn630 int
			if yyr630 || yy2arr630 {
				r.EncodeArrayStart(6)
			} else {
				yynn630 = 0
				for _, b := range yyq630 {
					if b {
						yynn630++
					}
				}
				r.EncodeMapStart(yynn630)
				yynn630 = 0
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[0] {
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq630[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[1] {
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq630[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[2] {
					yym638 := z.EncBinary()
					_ = yym638
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq630[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[3] {
					yym641 := z.EncBinary()
					_ = yym641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq630[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[4] {
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq630[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[5] {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq630[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym649 := z.DecBinary()
	_ = yym649
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct650 := r.ContainerType()
		if yyct650 == codecSelferValueTypeMap1234 {
			yyl650 := r.ReadMapStart()
			if yyl650 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl650, d)
			}
		} else if yyct650 == codecSelferValueTypeArray1234 {
			yyl650 := r.ReadArrayStart()
			if yyl650 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl650, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys651Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys651Slc
	var yyhl651 bool = l >= 0
	for yyj651 := 0; ; yyj651++ {
		if yyhl651 {
			if yyj651 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys651Slc = r.DecodeBytes(yys651Slc, true, true)
		yys651 := string(yys651Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys651 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys651)
		} // end switch yys651
	} // end for yyj651
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj658 int
	var yyb658 bool
	var yyhl658 bool = l >= 0
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj658++
		if yyhl658 {
			yyb658 = yyj658 > l
		} else {
			yyb658 = r.CheckBreak()
		}
		if yyb658 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj658-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym665 := z.EncBinary()
		_ = yym665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep666 := !z.EncBinary()
			yy2arr666 := z.EncBasicHandle().StructToArray
			var yyq666 [4]bool
			_, _, _ = yysep666, yyq666, yy2arr666
			const yyr666 bool = false
			yyq666[2] = x.FSType != ""
			yyq666[3] = x.ReadOnly != false
			var yynn666 int
			if yyr666 || yy2arr666 {
				r.EncodeArrayStart(4)
			} else {
				yynn666 = 2
				for _, b := range yyq666 {
					if b {
						yynn666++
					}
				}
				r.EncodeMapStart(yynn666)
				yynn666 = 0
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy671 := *x.Lun
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeInt(int64(yy671))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy673 := *x.Lun
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeInt(int64(yy673))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[2] {
					yym676 := z.EncBinary()
					_ = yym676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq666[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[3] {
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq666[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym681 := z.DecBinary()
	_ = yym681
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct682 := r.ContainerType()
		if yyct682 == codecSelferValueTypeMap1234 {
			yyl682 := r.ReadMapStart()
			if yyl682 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl682, d)
			}
		} else if yyct682 == codecSelferValueTypeArray1234 {
			yyl682 := r.ReadArrayStart()
			if yyl682 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl682, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys683Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys683Slc
	var yyhl683 bool = l >= 0
	for yyj683 := 0; ; yyj683++ {
		if yyhl683 {
			if yyj683 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys683Slc = r.DecodeBytes(yys683Slc, true, true)
		yys683 := string(yys683Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys683 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv684 := &x.TargetWWNs
				yym685 := z.DecBinary()
				_ = yym685
				if false {
				} else {
					z.F.DecSliceStringX(yyv684, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym687 := z.DecBinary()
				_ = yym687
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys683)
		} // end switch yys683
	} // end for yyj683
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj690 int
	var yyb690 bool
	var yyhl690 bool = l >= 0
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv691 := &x.TargetWWNs
		yym692 := z.DecBinary()
		_ = yym692
		if false {
		} else {
			z.F.DecSliceStringX(yyv691, false, d)
		}
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym694 := z.DecBinary()
		_ = yym694
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj690++
		if yyhl690 {
			yyb690 = yyj690 > l
		} else {
			yyb690 = r.CheckBreak()
		}
		if yyb690 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj690-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym697 := z.EncBinary()
		_ = yym697
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep698 := !z.EncBinary()
			yy2arr698 := z.EncBasicHandle().StructToArray
			var yyq698 [5]bool
			_, _, _ = yysep698, yyq698, yy2arr698
			const yyr698 bool = false
			yyq698[1] = x.FSType != ""
			yyq698[2] = x.SecretRef != nil
			yyq698[3] = x.ReadOnly != false
			yyq698[4] = len(x.Options) != 0
			var yynn698 int
			if yyr698 || yy2arr698 {
				r.EncodeArrayStart(5)
			} else {
				yynn698 = 1
				for _, b := range yyq698 {
					if b {
						yynn698++
					}
				}
				r.EncodeMapStart(yynn698)
				yynn698 = 0
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym700 := z.EncBinary()
				_ = yym700
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym701 := z.EncBinary()
				_ = yym701
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[1] {
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq698[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq698[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[3] {
					yym707 := z.EncBinary()
					_ = yym707
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq698[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym708 := z.EncBinary()
					_ = yym708
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym710 := z.EncBinary()
						_ = yym710
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq698[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym711 := z.EncBinary()
						_ = yym711
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym712 := z.DecBinary()
	_ = yym712
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct713 := r.ContainerType()
		if yyct713 == codecSelferValueTypeMap1234 {
			yyl713 := r.ReadMapStart()
			if yyl713 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl713, d)
			}
		} else if yyct713 == codecSelferValueTypeArray1234 {
			yyl713 := r.ReadArrayStart()
			if yyl713 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl713, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys714Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys714Slc
	var yyhl714 bool = l >= 0
	for yyj714 := 0; ; yyj714++ {
		if yyhl714 {
			if yyj714 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys714Slc = r.DecodeBytes(yys714Slc, true, true)
		yys714 := string(yys714Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys714 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv719 := &x.Options
				yym720 := z.DecBinary()
				_ = yym720
				if false {
				} else {
					z.F.DecMapStringStringX(yyv719, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys714)
		} // end switch yys714
	} // end for yyj714
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj721 int
	var yyb721 bool
	var yyhl721 bool = l >= 0
	yyj721++
	if yyhl721 {
		yyb721 = yyj721 > l
	} else {
		yyb721 = r.CheckBreak()
	}
	if yyb721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj721++
	if yyhl721 {
		yyb721 = yyj721 > l
	} else {
		yyb721 = r.CheckBreak()
	}
	if yyb721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj721++
	if yyhl721 {
		yyb721 = yyj721 > l
	} else {
		yyb721 = r.CheckBreak()
	}
	if yyb721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj721++
	if yyhl721 {
		yyb721 = yyj721 > l
	} else {
		yyb721 = r.CheckBreak()
	}
	if yyb721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj721++
	if yyhl721 {
		yyb721 = yyj721 > l
	} else {
		yyb721 = r.CheckBreak()
	}
	if yyb721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv726 := &x.Options
		yym727 := z.DecBinary()
		_ = yym727
		if false {
		} else {
			z.F.DecMapStringStringX(yyv726, false, d)
		}
	}
	for {
		yyj721++
		if yyhl721 {
			yyb721 = yyj721 > l
		} else {
			yyb721 = r.CheckBreak()
		}
		if yyb721 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj721-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym728 := z.EncBinary()
		_ = yym728
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep729 := !z.EncBinary()
			yy2arr729 := z.EncBasicHandle().StructToArray
			var yyq729 [4]bool
			_, _, _ = yysep729, yyq729, yy2arr729
			const yyr729 bool = false
			yyq729[1] = x.FSType != ""
			yyq729[2] = x.Partition != 0
			yyq729[3] = x.ReadOnly != false
			var yynn729 int
			if yyr729 || yy2arr729 {
				r.EncodeArrayStart(4)
			} else {
				yynn729 = 1
				for _, b := range yyq729 {
					if b {
						yynn729++
					}
				}
				r.EncodeMapStart(yynn729)
				yynn729 = 0
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym731 := z.EncBinary()
				_ = yym731
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym732 := z.EncBinary()
				_ = yym732
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq729[1] {
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq729[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym735 := z.EncBinary()
					_ = yym735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq729[2] {
					yym737 := z.EncBinary()
					_ = yym737
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq729[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym738 := z.EncBinary()
					_ = yym738
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq729[3] {
					yym740 := z.EncBinary()
					_ = yym740
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq729[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym742 := z.DecBinary()
	_ = yym742
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct743 := r.ContainerType()
		if yyct743 == codecSelferValueTypeMap1234 {
			yyl743 := r.ReadMapStart()
			if yyl743 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl743, d)
			}
		} else if yyct743 == codecSelferValueTypeArray1234 {
			yyl743 := r.ReadArrayStart()
			if yyl743 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl743, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys744Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys744Slc
	var yyhl744 bool = l >= 0
	for yyj744 := 0; ; yyj744++ {
		if yyhl744 {
			if yyj744 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys744Slc = r.DecodeBytes(yys744Slc, true, true)
		yys744 := string(yys744Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys744 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys744)
		} // end switch yys744
	} // end for yyj744
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj749 int
	var yyb749 bool
	var yyhl749 bool = l >= 0
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj749++
		if yyhl749 {
			yyb749 = yyj749 > l
		} else {
			yyb749 = r.CheckBreak()
		}
		if yyb749 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj749-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym754 := z.EncBinary()
		_ = yym754
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep755 := !z.EncBinary()
			yy2arr755 := z.EncBasicHandle().StructToArray
			var yyq755 [3]bool
			_, _, _ = yysep755, yyq755, yy2arr755
			const yyr755 bool = false
			yyq755[1] = x.Revision != ""
			yyq755[2] = x.Directory != ""
			var yynn755 int
			if yyr755 || yy2arr755 {
				r.EncodeArrayStart(3)
			} else {
				yynn755 = 1
				for _, b := range yyq755 {
					if b {
						yynn755++
					}
				}
				r.EncodeMapStart(yynn755)
				yynn755 = 0
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym758 := z.EncBinary()
				_ = yym758
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq755[1] {
					yym760 := z.EncBinary()
					_ = yym760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq755[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym761 := z.EncBinary()
					_ = yym761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq755[2] {
					yym763 := z.EncBinary()
					_ = yym763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq755[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym765 := z.DecBinary()
	_ = yym765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct766 := r.ContainerType()
		if yyct766 == codecSelferValueTypeMap1234 {
			yyl766 := r.ReadMapStart()
			if yyl766 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl766, d)
			}
		} else if yyct766 == codecSelferValueTypeArray1234 {
			yyl766 := r.ReadArrayStart()
			if yyl766 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl766, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys767Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys767Slc
	var yyhl767 bool = l >= 0
	for yyj767 := 0; ; yyj767++ {
		if yyhl767 {
			if yyj767 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys767Slc = r.DecodeBytes(yys767Slc, true, true)
		yys767 := string(yys767Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys767 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys767)
		} // end switch yys767
	} // end for yyj767
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj771 int
	var yyb771 bool
	var yyhl771 bool = l >= 0
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj771++
		if yyhl771 {
			yyb771 = yyj771 > l
		} else {
			yyb771 = r.CheckBreak()
		}
		if yyb771 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj771-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym775 := z.EncBinary()
		_ = yym775
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep776 := !z.EncBinary()
			yy2arr776 := z.EncBasicHandle().StructToArray
			var yyq776 [3]bool
			_, _, _ = yysep776, yyq776, yy2arr776
			const yyr776 bool = false
			yyq776[0] = x.SecretName != ""
			yyq776[1] = len(x.Items) != 0
			yyq776[2] = x.DefaultMode != nil
			var yynn776 int
			if yyr776 || yy2arr776 {
				r.EncodeArrayStart(3)
			} else {
				yynn776 = 0
				for _, b := range yyq776 {
					if b {
						yynn776++
					}
				}
				r.EncodeMapStart(yynn776)
				yynn776 = 0
			}
			if yyr776 || yy2arr776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq776[0] {
					yym778 := z.EncBinary()
					_ = yym778
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq776[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym779 := z.EncBinary()
					_ = yym779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr776 || yy2arr776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq776[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym781 := z.EncBinary()
						_ = yym781
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq776[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym782 := z.EncBinary()
						_ = yym782
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr776 || yy2arr776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq776[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy784 := *x.DefaultMode
						yym785 := z.EncBinary()
						_ = yym785
						if false {
						} else {
							r.EncodeInt(int64(yy784))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq776[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy786 := *x.DefaultMode
						yym787 := z.EncBinary()
						_ = yym787
						if false {
						} else {
							r.EncodeInt(int64(yy786))
						}
					}
				}
			}
			if yyr776 || yy2arr776 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym788 := z.DecBinary()
	_ = yym788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct789 := r.ContainerType()
		if yyct789 == codecSelferValueTypeMap1234 {
			yyl789 := r.ReadMapStart()
			if yyl789 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl789, d)
			}
		} else if yyct789 == codecSelferValueTypeArray1234 {
			yyl789 := r.ReadArrayStart()
			if yyl789 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl789, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys790Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys790Slc
	var yyhl790 bool = l >= 0
	for yyj790 := 0; ; yyj790++ {
		if yyhl790 {
			if yyj790 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys790Slc = r.DecodeBytes(yys790Slc, true, true)
		yys790 := string(yys790Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys790 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv792 := &x.Items
				yym793 := z.DecBinary()
				_ = yym793
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv792), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym795 := z.DecBinary()
				_ = yym795
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys790)
		} // end switch yys790
	} // end for yyj790
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj796 int
	var yyb796 bool
	var yyhl796 bool = l >= 0
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv798 := &x.Items
		yym799 := z.DecBinary()
		_ = yym799
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv798), d)
		}
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym801 := z.DecBinary()
		_ = yym801
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj796++
		if yyhl796 {
			yyb796 = yyj796 > l
		} else {
			yyb796 = r.CheckBreak()
		}
		if yyb796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym802 := z.EncBinary()
		_ = yym802
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep803 := !z.EncBinary()
			yy2arr803 := z.EncBasicHandle().StructToArray
			var yyq803 [3]bool
			_, _, _ = yysep803, yyq803, yy2arr803
			const yyr803 bool = false
			yyq803[2] = x.ReadOnly != false
			var yynn803 int
			if yyr803 || yy2arr803 {
				r.EncodeArrayStart(3)
			} else {
				yynn803 = 2
				for _, b := range yyq803 {
					if b {
						yynn803++
					}
				}
				r.EncodeMapStart(yynn803)
				yynn803 = 0
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym805 := z.EncBinary()
				_ = yym805
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym806 := z.EncBinary()
				_ = yym806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym808 := z.EncBinary()
				_ = yym808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym809 := z.EncBinary()
				_ = yym809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq803[2] {
					yym811 := z.EncBinary()
					_ = yym811
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq803[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym812 := z.EncBinary()
					_ = yym812
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym813 := z.DecBinary()
	_ = yym813
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct814 := r.ContainerType()
		if yyct814 == codecSelferValueTypeMap1234 {
			yyl814 := r.ReadMapStart()
			if yyl814 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl814, d)
			}
		} else if yyct814 == codecSelferValueTypeArray1234 {
			yyl814 := r.ReadArrayStart()
			if yyl814 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl814, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys815Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys815Slc
	var yyhl815 bool = l >= 0
	for yyj815 := 0; ; yyj815++ {
		if yyhl815 {
			if yyj815 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys815Slc = r.DecodeBytes(yys815Slc, true, true)
		yys815 := string(yys815Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys815 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys815)
		} // end switch yys815
	} // end for yyj815
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj819 int
	var yyb819 bool
	var yyhl819 bool = l >= 0
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj819++
		if yyhl819 {
			yyb819 = yyj819 > l
		} else {
			yyb819 = r.CheckBreak()
		}
		if yyb819 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj819-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym823 := z.EncBinary()
		_ = yym823
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep824 := !z.EncBinary()
			yy2arr824 := z.EncBasicHandle().StructToArray
			var yyq824 [5]bool
			_, _, _ = yysep824, yyq824, yy2arr824
			const yyr824 bool = false
			yyq824[2] = x.ReadOnly != false
			yyq824[3] = x.User != ""
			yyq824[4] = x.Group != ""
			var yynn824 int
			if yyr824 || yy2arr824 {
				r.EncodeArrayStart(5)
			} else {
				yynn824 = 2
				for _, b := range yyq824 {
					if b {
						yynn824++
					}
				}
				r.EncodeMapStart(yynn824)
				yynn824 = 0
			}
			if yyr824 || yy2arr824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym826 := z.EncBinary()
				_ = yym826
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym827 := z.EncBinary()
				_ = yym827
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr824 || yy2arr824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym829 := z.EncBinary()
				_ = yym829
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym830 := z.EncBinary()
				_ = yym830
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr824 || yy2arr824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq824[2] {
					yym832 := z.EncBinary()
					_ = yym832
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq824[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr824 || yy2arr824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq824[3] {
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq824[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr824 || yy2arr824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq824[4] {
					yym838 := z.EncBinary()
					_ = yym838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq824[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr824 || yy2arr824 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym840 := z.DecBinary()
	_ = yym840
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct841 := r.ContainerType()
		if yyct841 == codecSelferValueTypeMap1234 {
			yyl841 := r.ReadMapStart()
			if yyl841 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl841, d)
			}
		} else if yyct841 == codecSelferValueTypeArray1234 {
			yyl841 := r.ReadArrayStart()
			if yyl841 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl841, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys842Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys842Slc
	var yyhl842 bool = l >= 0
	for yyj842 := 0; ; yyj842++ {
		if yyhl842 {
			if yyj842 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys842Slc = r.DecodeBytes(yys842Slc, true, true)
		yys842 := string(yys842Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys842 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys842)
		} // end switch yys842
	} // end for yyj842
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj848 int
	var yyb848 bool
	var yyhl848 bool = l >= 0
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj848++
		if yyhl848 {
			yyb848 = yyj848 > l
		} else {
			yyb848 = r.CheckBreak()
		}
		if yyb848 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj848-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym854 := z.EncBinary()
		_ = yym854
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep855 := !z.EncBinary()
			yy2arr855 := z.EncBasicHandle().StructToArray
			var yyq855 [3]bool
			_, _, _ = yysep855, yyq855, yy2arr855
			const yyr855 bool = false
			yyq855[2] = x.ReadOnly != false
			var yynn855 int
			if yyr855 || yy2arr855 {
				r.EncodeArrayStart(3)
			} else {
				yynn855 = 2
				for _, b := range yyq855 {
					if b {
						yynn855++
					}
				}
				r.EncodeMapStart(yynn855)
				yynn855 = 0
			}
			if yyr855 || yy2arr855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym857 := z.EncBinary()
				_ = yym857
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym858 := z.EncBinary()
				_ = yym858
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr855 || yy2arr855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym860 := z.EncBinary()
				_ = yym860
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym861 := z.EncBinary()
				_ = yym861
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr855 || yy2arr855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq855[2] {
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq855[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym864 := z.EncBinary()
					_ = yym864
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr855 || yy2arr855 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym865 := z.DecBinary()
	_ = yym865
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct866 := r.ContainerType()
		if yyct866 == codecSelferValueTypeMap1234 {
			yyl866 := r.ReadMapStart()
			if yyl866 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl866, d)
			}
		} else if yyct866 == codecSelferValueTypeArray1234 {
			yyl866 := r.ReadArrayStart()
			if yyl866 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl866, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys867Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys867Slc
	var yyhl867 bool = l >= 0
	for yyj867 := 0; ; yyj867++ {
		if yyhl867 {
			if yyj867 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys867Slc = r.DecodeBytes(yys867Slc, true, true)
		yys867 := string(yys867Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys867 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys867)
		} // end switch yys867
	} // end for yyj867
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj871 int
	var yyb871 bool
	var yyhl871 bool = l >= 0
	yyj871++
	if yyhl871 {
		yyb871 = yyj871 > l
	} else {
		yyb871 = r.CheckBreak()
	}
	if yyb871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj871++
	if yyhl871 {
		yyb871 = yyj871 > l
	} else {
		yyb871 = r.CheckBreak()
	}
	if yyb871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj871++
	if yyhl871 {
		yyb871 = yyj871 > l
	} else {
		yyb871 = r.CheckBreak()
	}
	if yyb871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj871++
		if yyhl871 {
			yyb871 = yyj871 > l
		} else {
			yyb871 = r.CheckBreak()
		}
		if yyb871 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj871-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym875 := z.EncBinary()
		_ = yym875
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep876 := !z.EncBinary()
			yy2arr876 := z.EncBasicHandle().StructToArray
			var yyq876 [8]bool
			_, _, _ = yysep876, yyq876, yy2arr876
			const yyr876 bool = false
			yyq876[2] = x.FSType != ""
			yyq876[3] = x.RBDPool != ""
			yyq876[4] = x.RadosUser != ""
			yyq876[5] = x.Keyring != ""
			yyq876[6] = x.SecretRef != nil
			yyq876[7] = x.ReadOnly != false
			var yynn876 int
			if yyr876 || yy2arr876 {
				r.EncodeArrayStart(8)
			} else {
				yynn876 = 2
				for _, b := range yyq876 {
					if b {
						yynn876++
					}
				}
				r.EncodeMapStart(yynn876)
				yynn876 = 0
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym878 := z.EncBinary()
					_ = yym878
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym879 := z.EncBinary()
					_ = yym879
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym881 := z.EncBinary()
				_ = yym881
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym882 := z.EncBinary()
				_ = yym882
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq876[2] {
					yym884 := z.EncBinary()
					_ = yym884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq876[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym885 := z.EncBinary()
					_ = yym885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq876[3] {
					yym887 := z.EncBinary()
					_ = yym887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq876[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq876[4] {
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq876[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq876[5] {
					yym893 := z.EncBinary()
					_ = yym893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq876[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq876[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq876[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq876[7] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq876[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym899 := z.DecBinary()
	_ = yym899
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct900 := r.ContainerType()
		if yyct900 == codecSelferValueTypeMap1234 {
			yyl900 := r.ReadMapStart()
			if yyl900 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl900, d)
			}
		} else if yyct900 == codecSelferValueTypeArray1234 {
			yyl900 := r.ReadArrayStart()
			if yyl900 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl900, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys901Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys901Slc
	var yyhl901 bool = l >= 0
	for yyj901 := 0; ; yyj901++ {
		if yyhl901 {
			if yyj901 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys901Slc = r.DecodeBytes(yys901Slc, true, true)
		yys901 := string(yys901Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys901 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv902 := &x.CephMonitors
				yym903 := z.DecBinary()
				_ = yym903
				if false {
				} else {
					z.F.DecSliceStringX(yyv902, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys901)
		} // end switch yys901
	} // end for yyj901
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj911 int
	var yyb911 bool
	var yyhl911 bool = l >= 0
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv912 := &x.CephMonitors
		yym913 := z.DecBinary()
		_ = yym913
		if false {
		} else {
			z.F.DecSliceStringX(yyv912, false, d)
		}
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj911++
		if yyhl911 {
			yyb911 = yyj911 > l
		} else {
			yyb911 = r.CheckBreak()
		}
		if yyb911 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj911-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym921 := z.EncBinary()
		_ = yym921
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep922 := !z.EncBinary()
			yy2arr922 := z.EncBasicHandle().StructToArray
			var yyq922 [3]bool
			_, _, _ = yysep922, yyq922, yy2arr922
			const yyr922 bool = false
			yyq922[1] = x.FSType != ""
			yyq922[2] = x.ReadOnly != false
			var yynn922 int
			if yyr922 || yy2arr922 {
				r.EncodeArrayStart(3)
			} else {
				yynn922 = 1
				for _, b := range yyq922 {
					if b {
						yynn922++
					}
				}
				r.EncodeMapStart(yynn922)
				yynn922 = 0
			}
			if yyr922 || yy2arr922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym924 := z.EncBinary()
				_ = yym924
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym925 := z.EncBinary()
				_ = yym925
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr922 || yy2arr922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq922[1] {
					yym927 := z.EncBinary()
					_ = yym927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq922[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym928 := z.EncBinary()
					_ = yym928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr922 || yy2arr922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq922[2] {
					yym930 := z.EncBinary()
					_ = yym930
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq922[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym931 := z.EncBinary()
					_ = yym931
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr922 || yy2arr922 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym932 := z.DecBinary()
	_ = yym932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct933 := r.ContainerType()
		if yyct933 == codecSelferValueTypeMap1234 {
			yyl933 := r.ReadMapStart()
			if yyl933 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl933, d)
			}
		} else if yyct933 == codecSelferValueTypeArray1234 {
			yyl933 := r.ReadArrayStart()
			if yyl933 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl933, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys934Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys934Slc
	var yyhl934 bool = l >= 0
	for yyj934 := 0; ; yyj934++ {
		if yyhl934 {
			if yyj934 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys934Slc = r.DecodeBytes(yys934Slc, true, true)
		yys934 := string(yys934Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys934 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys934)
		} // end switch yys934
	} // end for yyj934
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj938 int
	var yyb938 bool
	var yyhl938 bool = l >= 0
	yyj938++
	if yyhl938 {
		yyb938 = yyj938 > l
	} else {
		yyb938 = r.CheckBreak()
	}
	if yyb938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj938++
	if yyhl938 {
		yyb938 = yyj938 > l
	} else {
		yyb938 = r.CheckBreak()
	}
	if yyb938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj938++
	if yyhl938 {
		yyb938 = yyj938 > l
	} else {
		yyb938 = r.CheckBreak()
	}
	if yyb938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj938++
		if yyhl938 {
			yyb938 = yyj938 > l
		} else {
			yyb938 = r.CheckBreak()
		}
		if yyb938 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj938-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym942 := z.EncBinary()
		_ = yym942
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep943 := !z.EncBinary()
			yy2arr943 := z.EncBasicHandle().StructToArray
			var yyq943 [6]bool
			_, _, _ = yysep943, yyq943, yy2arr943
			const yyr943 bool = false
			yyq943[1] = x.Path != ""
			yyq943[2] = x.User != ""
			yyq943[3] = x.SecretFile != ""
			yyq943[4] = x.SecretRef != nil
			yyq943[5] = x.ReadOnly != false
			var yynn943 int
			if yyr943 || yy2arr943 {
				r.EncodeArrayStart(6)
			} else {
				yynn943 = 1
				for _, b := range yyq943 {
					if b {
						yynn943++
					}
				}
				r.EncodeMapStart(yynn943)
				yynn943 = 0
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym945 := z.EncBinary()
					_ = yym945
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq943[1] {
					yym948 := z.EncBinary()
					_ = yym948
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq943[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym949 := z.EncBinary()
					_ = yym949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq943[2] {
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq943[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym952 := z.EncBinary()
					_ = yym952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq943[3] {
					yym954 := z.EncBinary()
					_ = yym954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq943[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq943[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq943[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq943[5] {
					yym958 := z.EncBinary()
					_ = yym958
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq943[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym959 := z.EncBinary()
					_ = yym959
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym960 := z.DecBinary()
	_ = yym960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct961 := r.ContainerType()
		if yyct961 == codecSelferValueTypeMap1234 {
			yyl961 := r.ReadMapStart()
			if yyl961 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl961, d)
			}
		} else if yyct961 == codecSelferValueTypeArray1234 {
			yyl961 := r.ReadArrayStart()
			if yyl961 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys962Slc
	var yyhl962 bool = l >= 0
	for yyj962 := 0; ; yyj962++ {
		if yyhl962 {
			if yyj962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys962Slc = r.DecodeBytes(yys962Slc, true, true)
		yys962 := string(yys962Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys962 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv963 := &x.Monitors
				yym964 := z.DecBinary()
				_ = yym964
				if false {
				} else {
					z.F.DecSliceStringX(yyv963, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys962)
		} // end switch yys962
	} // end for yyj962
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj970 int
	var yyb970 bool
	var yyhl970 bool = l >= 0
	yyj970++
	if yyhl970 {
		yyb970 = yyj970 > l
	} else {
		yyb970 = r.CheckBreak()
	}
	if yyb970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv971 := &x.Monitors
		yym972 := z.DecBinary()
		_ = yym972
		if false {
		} else {
			z.F.DecSliceStringX(yyv971, false, d)
		}
	}
	yyj970++
	if yyhl970 {
		yyb970 = yyj970 > l
	} else {
		yyb970 = r.CheckBreak()
	}
	if yyb970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj970++
	if yyhl970 {
		yyb970 = yyj970 > l
	} else {
		yyb970 = r.CheckBreak()
	}
	if yyb970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj970++
	if yyhl970 {
		yyb970 = yyj970 > l
	} else {
		yyb970 = r.CheckBreak()
	}
	if yyb970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj970++
	if yyhl970 {
		yyb970 = yyj970 > l
	} else {
		yyb970 = r.CheckBreak()
	}
	if yyb970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj970++
	if yyhl970 {
		yyb970 = yyj970 > l
	} else {
		yyb970 = r.CheckBreak()
	}
	if yyb970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj970++
		if yyhl970 {
			yyb970 = yyj970 > l
		} else {
			yyb970 = r.CheckBreak()
		}
		if yyb970 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj970-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym978 := z.EncBinary()
		_ = yym978
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep979 := !z.EncBinary()
			yy2arr979 := z.EncBasicHandle().StructToArray
			var yyq979 [1]bool
			_, _, _ = yysep979, yyq979, yy2arr979
			const yyr979 bool = false
			var yynn979 int
			if yyr979 || yy2arr979 {
				r.EncodeArrayStart(1)
			} else {
				yynn979 = 1
				for _, b := range yyq979 {
					if b {
						yynn979++
					}
				}
				r.EncodeMapStart(yynn979)
				yynn979 = 0
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym981 := z.EncBinary()
				_ = yym981
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym982 := z.EncBinary()
				_ = yym982
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym983 := z.DecBinary()
	_ = yym983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct984 := r.ContainerType()
		if yyct984 == codecSelferValueTypeMap1234 {
			yyl984 := r.ReadMapStart()
			if yyl984 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl984, d)
			}
		} else if yyct984 == codecSelferValueTypeArray1234 {
			yyl984 := r.ReadArrayStart()
			if yyl984 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl984, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys985Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys985Slc
	var yyhl985 bool = l >= 0
	for yyj985 := 0; ; yyj985++ {
		if yyhl985 {
			if yyj985 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys985Slc = r.DecodeBytes(yys985Slc, true, true)
		yys985 := string(yys985Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys985 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys985)
		} // end switch yys985
	} // end for yyj985
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj987 int
	var yyb987 bool
	var yyhl987 bool = l >= 0
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj987++
		if yyhl987 {
			yyb987 = yyj987 > l
		} else {
			yyb987 = r.CheckBreak()
		}
		if yyb987 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj987-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym989 := z.EncBinary()
		_ = yym989
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep990 := !z.EncBinary()
			yy2arr990 := z.EncBasicHandle().StructToArray
			var yyq990 [2]bool
			_, _, _ = yysep990, yyq990, yy2arr990
			const yyr990 bool = false
			yyq990[0] = len(x.Items) != 0
			yyq990[1] = x.DefaultMode != nil
			var yynn990 int
			if yyr990 || yy2arr990 {
				r.EncodeArrayStart(2)
			} else {
				yynn990 = 0
				for _, b := range yyq990 {
					if b {
						yynn990++
					}
				}
				r.EncodeMapStart(yynn990)
				yynn990 = 0
			}
			if yyr990 || yy2arr990 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq990[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym992 := z.EncBinary()
						_ = yym992
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq990[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym993 := z.EncBinary()
						_ = yym993
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr990 || yy2arr990 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq990[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy995 := *x.DefaultMode
						yym996 := z.EncBinary()
						_ = yym996
						if false {
						} else {
							r.EncodeInt(int64(yy995))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq990[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy997 := *x.DefaultMode
						yym998 := z.EncBinary()
						_ = yym998
						if false {
						} else {
							r.EncodeInt(int64(yy997))
						}
					}
				}
			}
			if yyr990 || yy2arr990 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym999 := z.DecBinary()
	_ = yym999
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1000 := r.ContainerType()
		if yyct1000 == codecSelferValueTypeMap1234 {
			yyl1000 := r.ReadMapStart()
			if yyl1000 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1000, d)
			}
		} else if yyct1000 == codecSelferValueTypeArray1234 {
			yyl1000 := r.ReadArrayStart()
			if yyl1000 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1000, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1001Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1001Slc
	var yyhl1001 bool = l >= 0
	for yyj1001 := 0; ; yyj1001++ {
		if yyhl1001 {
			if yyj1001 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1001Slc = r.DecodeBytes(yys1001Slc, true, true)
		yys1001 := string(yys1001Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1001 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1002 := &x.Items
				yym1003 := z.DecBinary()
				_ = yym1003
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1002), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1005 := z.DecBinary()
				_ = yym1005
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1001)
		} // end switch yys1001
	} // end for yyj1001
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1006 int
	var yyb1006 bool
	var yyhl1006 bool = l >= 0
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1007 := &x.Items
		yym1008 := z.DecBinary()
		_ = yym1008
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1007), d)
		}
	}
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1010 := z.DecBinary()
		_ = yym1010
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1006++
		if yyhl1006 {
			yyb1006 = yyj1006 > l
		} else {
			yyb1006 = r.CheckBreak()
		}
		if yyb1006 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1006-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1011 := z.EncBinary()
		_ = yym1011
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1012 := !z.EncBinary()
			yy2arr1012 := z.EncBasicHandle().StructToArray
			var yyq1012 [4]bool
			_, _, _ = yysep1012, yyq1012, yy2arr1012
			const yyr1012 bool = false
			yyq1012[1] = x.FieldRef != nil
			yyq1012[2] = x.ResourceFieldRef != nil
			yyq1012[3] = x.Mode != nil
			var yynn1012 int
			if yyr1012 || yy2arr1012 {
				r.EncodeArrayStart(4)
			} else {
				yynn1012 = 1
				for _, b := range yyq1012 {
					if b {
						yynn1012++
					}
				}
				r.EncodeMapStart(yynn1012)
				yynn1012 = 0
			}
			if yyr1012 || yy2arr1012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1014 := z.EncBinary()
				_ = yym1014
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1015 := z.EncBinary()
				_ = yym1015
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1012 || yy2arr1012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1012[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1012[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1012 || yy2arr1012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1012[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1012[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1012 || yy2arr1012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1012[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1019 := *x.Mode
						yym1020 := z.EncBinary()
						_ = yym1020
						if false {
						} else {
							r.EncodeInt(int64(yy1019))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1012[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1021 := *x.Mode
						yym1022 := z.EncBinary()
						_ = yym1022
						if false {
						} else {
							r.EncodeInt(int64(yy1021))
						}
					}
				}
			}
			if yyr1012 || yy2arr1012 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1023 := z.DecBinary()
	_ = yym1023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1024 := r.ContainerType()
		if yyct1024 == codecSelferValueTypeMap1234 {
			yyl1024 := r.ReadMapStart()
			if yyl1024 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1024, d)
			}
		} else if yyct1024 == codecSelferValueTypeArray1234 {
			yyl1024 := r.ReadArrayStart()
			if yyl1024 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1024, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1025Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1025Slc
	var yyhl1025 bool = l >= 0
	for yyj1025 := 0; ; yyj1025++ {
		if yyhl1025 {
			if yyj1025 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1025Slc = r.DecodeBytes(yys1025Slc, true, true)
		yys1025 := string(yys1025Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1025 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1030 := z.DecBinary()
				_ = yym1030
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1025)
		} // end switch yys1025
	} // end for yyj1025
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1031 int
	var yyb1031 bool
	var yyhl1031 bool = l >= 0
	yyj1031++
	if yyhl1031 {
		yyb1031 = yyj1031 > l
	} else {
		yyb1031 = r.CheckBreak()
	}
	if yyb1031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1031++
	if yyhl1031 {
		yyb1031 = yyj1031 > l
	} else {
		yyb1031 = r.CheckBreak()
	}
	if yyb1031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1031++
	if yyhl1031 {
		yyb1031 = yyj1031 > l
	} else {
		yyb1031 = r.CheckBreak()
	}
	if yyb1031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1031++
	if yyhl1031 {
		yyb1031 = yyj1031 > l
	} else {
		yyb1031 = r.CheckBreak()
	}
	if yyb1031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1036 := z.DecBinary()
		_ = yym1036
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1031++
		if yyhl1031 {
			yyb1031 = yyj1031 > l
		} else {
			yyb1031 = r.CheckBreak()
		}
		if yyb1031 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1031-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1037 := z.EncBinary()
		_ = yym1037
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1038 := !z.EncBinary()
			yy2arr1038 := z.EncBasicHandle().StructToArray
			var yyq1038 [3]bool
			_, _, _ = yysep1038, yyq1038, yy2arr1038
			const yyr1038 bool = false
			yyq1038[2] = x.ReadOnly != false
			var yynn1038 int
			if yyr1038 || yy2arr1038 {
				r.EncodeArrayStart(3)
			} else {
				yynn1038 = 2
				for _, b := range yyq1038 {
					if b {
						yynn1038++
					}
				}
				r.EncodeMapStart(yynn1038)
				yynn1038 = 0
			}
			if yyr1038 || yy2arr1038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1040 := z.EncBinary()
				_ = yym1040
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1041 := z.EncBinary()
				_ = yym1041
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1038 || yy2arr1038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1043 := z.EncBinary()
				_ = yym1043
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1044 := z.EncBinary()
				_ = yym1044
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1038 || yy2arr1038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1038[2] {
					yym1046 := z.EncBinary()
					_ = yym1046
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1038[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1047 := z.EncBinary()
					_ = yym1047
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1038 || yy2arr1038 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1048 := z.DecBinary()
	_ = yym1048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1049 := r.ContainerType()
		if yyct1049 == codecSelferValueTypeMap1234 {
			yyl1049 := r.ReadMapStart()
			if yyl1049 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1049, d)
			}
		} else if yyct1049 == codecSelferValueTypeArray1234 {
			yyl1049 := r.ReadArrayStart()
			if yyl1049 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1050Slc
	var yyhl1050 bool = l >= 0
	for yyj1050 := 0; ; yyj1050++ {
		if yyhl1050 {
			if yyj1050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1050Slc = r.DecodeBytes(yys1050Slc, true, true)
		yys1050 := string(yys1050Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1050 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1050)
		} // end switch yys1050
	} // end for yyj1050
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1054 int
	var yyb1054 bool
	var yyhl1054 bool = l >= 0
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1054++
		if yyhl1054 {
			yyb1054 = yyj1054 > l
		} else {
			yyb1054 = r.CheckBreak()
		}
		if yyb1054 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1054-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1058 := z.EncBinary()
		_ = yym1058
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1059 := !z.EncBinary()
			yy2arr1059 := z.EncBasicHandle().StructToArray
			var yyq1059 [2]bool
			_, _, _ = yysep1059, yyq1059, yy2arr1059
			const yyr1059 bool = false
			yyq1059[1] = x.FSType != ""
			var yynn1059 int
			if yyr1059 || yy2arr1059 {
				r.EncodeArrayStart(2)
			} else {
				yynn1059 = 1
				for _, b := range yyq1059 {
					if b {
						yynn1059++
					}
				}
				r.EncodeMapStart(yynn1059)
				yynn1059 = 0
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1061 := z.EncBinary()
				_ = yym1061
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1062 := z.EncBinary()
				_ = yym1062
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1059[1] {
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1059[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1065 := z.EncBinary()
					_ = yym1065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1066 := z.DecBinary()
	_ = yym1066
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1067 := r.ContainerType()
		if yyct1067 == codecSelferValueTypeMap1234 {
			yyl1067 := r.ReadMapStart()
			if yyl1067 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1067, d)
			}
		} else if yyct1067 == codecSelferValueTypeArray1234 {
			yyl1067 := r.ReadArrayStart()
			if yyl1067 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1067, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1068Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1068Slc
	var yyhl1068 bool = l >= 0
	for yyj1068 := 0; ; yyj1068++ {
		if yyhl1068 {
			if yyj1068 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1068Slc = r.DecodeBytes(yys1068Slc, true, true)
		yys1068 := string(yys1068Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1068 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1068)
		} // end switch yys1068
	} // end for yyj1068
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1071 int
	var yyb1071 bool
	var yyhl1071 bool = l >= 0
	yyj1071++
	if yyhl1071 {
		yyb1071 = yyj1071 > l
	} else {
		yyb1071 = r.CheckBreak()
	}
	if yyb1071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1071++
	if yyhl1071 {
		yyb1071 = yyj1071 > l
	} else {
		yyb1071 = r.CheckBreak()
	}
	if yyb1071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1071++
		if yyhl1071 {
			yyb1071 = yyj1071 > l
		} else {
			yyb1071 = r.CheckBreak()
		}
		if yyb1071 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1071-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1074 := z.EncBinary()
		_ = yym1074
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1075 := !z.EncBinary()
			yy2arr1075 := z.EncBasicHandle().StructToArray
			var yyq1075 [3]bool
			_, _, _ = yysep1075, yyq1075, yy2arr1075
			const yyr1075 bool = false
			yyq1075[1] = len(x.Items) != 0
			yyq1075[2] = x.DefaultMode != nil
			var yynn1075 int
			if yyr1075 || yy2arr1075 {
				r.EncodeArrayStart(3)
			} else {
				yynn1075 = 1
				for _, b := range yyq1075 {
					if b {
						yynn1075++
					}
				}
				r.EncodeMapStart(yynn1075)
				yynn1075 = 0
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1077 := z.EncBinary()
				_ = yym1077
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1078 := z.EncBinary()
				_ = yym1078
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1075[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1080 := z.EncBinary()
						_ = yym1080
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1075[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1081 := z.EncBinary()
						_ = yym1081
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1075[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1083 := *x.DefaultMode
						yym1084 := z.EncBinary()
						_ = yym1084
						if false {
						} else {
							r.EncodeInt(int64(yy1083))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1075[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1085 := *x.DefaultMode
						yym1086 := z.EncBinary()
						_ = yym1086
						if false {
						} else {
							r.EncodeInt(int64(yy1085))
						}
					}
				}
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1087 := z.DecBinary()
	_ = yym1087
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1088 := r.ContainerType()
		if yyct1088 == codecSelferValueTypeMap1234 {
			yyl1088 := r.ReadMapStart()
			if yyl1088 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1088, d)
			}
		} else if yyct1088 == codecSelferValueTypeArray1234 {
			yyl1088 := r.ReadArrayStart()
			if yyl1088 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1088, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1089Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1089Slc
	var yyhl1089 bool = l >= 0
	for yyj1089 := 0; ; yyj1089++ {
		if yyhl1089 {
			if yyj1089 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1089Slc = r.DecodeBytes(yys1089Slc, true, true)
		yys1089 := string(yys1089Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1089 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1091 := &x.Items
				yym1092 := z.DecBinary()
				_ = yym1092
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1091), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1094 := z.DecBinary()
				_ = yym1094
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1089)
		} // end switch yys1089
	} // end for yyj1089
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1095 int
	var yyb1095 bool
	var yyhl1095 bool = l >= 0
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1097 := &x.Items
		yym1098 := z.DecBinary()
		_ = yym1098
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1097), d)
		}
	}
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1100 := z.DecBinary()
		_ = yym1100
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1095++
		if yyhl1095 {
			yyb1095 = yyj1095 > l
		} else {
			yyb1095 = r.CheckBreak()
		}
		if yyb1095 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1095-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1101 := z.EncBinary()
		_ = yym1101
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1102 := !z.EncBinary()
			yy2arr1102 := z.EncBasicHandle().StructToArray
			var yyq1102 [3]bool
			_, _, _ = yysep1102, yyq1102, yy2arr1102
			const yyr1102 bool = false
			yyq1102[2] = x.Mode != nil
			var yynn1102 int
			if yyr1102 || yy2arr1102 {
				r.EncodeArrayStart(3)
			} else {
				yynn1102 = 2
				for _, b := range yyq1102 {
					if b {
						yynn1102++
					}
				}
				r.EncodeMapStart(yynn1102)
				yynn1102 = 0
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1104 := z.EncBinary()
				_ = yym1104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1105 := z.EncBinary()
				_ = yym1105
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1107 := z.EncBinary()
				_ = yym1107
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1108 := z.EncBinary()
				_ = yym1108
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1102[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1110 := *x.Mode
						yym1111 := z.EncBinary()
						_ = yym1111
						if false {
						} else {
							r.EncodeInt(int64(yy1110))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1102[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1112 := *x.Mode
						yym1113 := z.EncBinary()
						_ = yym1113
						if false {
						} else {
							r.EncodeInt(int64(yy1112))
						}
					}
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1114 := z.DecBinary()
	_ = yym1114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1115 := r.ContainerType()
		if yyct1115 == codecSelferValueTypeMap1234 {
			yyl1115 := r.ReadMapStart()
			if yyl1115 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1115, d)
			}
		} else if yyct1115 == codecSelferValueTypeArray1234 {
			yyl1115 := r.ReadArrayStart()
			if yyl1115 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1115, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1116Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1116Slc
	var yyhl1116 bool = l >= 0
	for yyj1116 := 0; ; yyj1116++ {
		if yyhl1116 {
			if yyj1116 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1116Slc = r.DecodeBytes(yys1116Slc, true, true)
		yys1116 := string(yys1116Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1116 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1120 := z.DecBinary()
				_ = yym1120
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1116)
		} // end switch yys1116
	} // end for yyj1116
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1121 int
	var yyb1121 bool
	var yyhl1121 bool = l >= 0
	yyj1121++
	if yyhl1121 {
		yyb1121 = yyj1121 > l
	} else {
		yyb1121 = r.CheckBreak()
	}
	if yyb1121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1121++
	if yyhl1121 {
		yyb1121 = yyj1121 > l
	} else {
		yyb1121 = r.CheckBreak()
	}
	if yyb1121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1121++
	if yyhl1121 {
		yyb1121 = yyj1121 > l
	} else {
		yyb1121 = r.CheckBreak()
	}
	if yyb1121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1125 := z.DecBinary()
		_ = yym1125
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1121++
		if yyhl1121 {
			yyb1121 = yyj1121 > l
		} else {
			yyb1121 = r.CheckBreak()
		}
		if yyb1121 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1121-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1126 := z.EncBinary()
		_ = yym1126
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1127 := !z.EncBinary()
			yy2arr1127 := z.EncBasicHandle().StructToArray
			var yyq1127 [5]bool
			_, _, _ = yysep1127, yyq1127, yy2arr1127
			const yyr1127 bool = false
			yyq1127[0] = x.Name != ""
			yyq1127[1] = x.HostPort != 0
			yyq1127[3] = x.Protocol != ""
			yyq1127[4] = x.HostIP != ""
			var yynn1127 int
			if yyr1127 || yy2arr1127 {
				r.EncodeArrayStart(5)
			} else {
				yynn1127 = 1
				for _, b := range yyq1127 {
					if b {
						yynn1127++
					}
				}
				r.EncodeMapStart(yynn1127)
				yynn1127 = 0
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[0] {
					yym1129 := z.EncBinary()
					_ = yym1129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1127[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1130 := z.EncBinary()
					_ = yym1130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[1] {
					yym1132 := z.EncBinary()
					_ = yym1132
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1127[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1133 := z.EncBinary()
					_ = yym1133
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1135 := z.EncBinary()
				_ = yym1135
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1136 := z.EncBinary()
				_ = yym1136
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1127[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[4] {
					yym1139 := z.EncBinary()
					_ = yym1139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1127[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1140 := z.EncBinary()
					_ = yym1140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1141 := z.DecBinary()
	_ = yym1141
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1142 := r.ContainerType()
		if yyct1142 == codecSelferValueTypeMap1234 {
			yyl1142 := r.ReadMapStart()
			if yyl1142 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1142, d)
			}
		} else if yyct1142 == codecSelferValueTypeArray1234 {
			yyl1142 := r.ReadArrayStart()
			if yyl1142 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1142, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1143Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1143Slc
	var yyhl1143 bool = l >= 0
	for yyj1143 := 0; ; yyj1143++ {
		if yyhl1143 {
			if yyj1143 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1143Slc = r.DecodeBytes(yys1143Slc, true, true)
		yys1143 := string(yys1143Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1143 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1143)
		} // end switch yys1143
	} // end for yyj1143
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1149 int
	var yyb1149 bool
	var yyhl1149 bool = l >= 0
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1149++
		if yyhl1149 {
			yyb1149 = yyj1149 > l
		} else {
			yyb1149 = r.CheckBreak()
		}
		if yyb1149 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1149-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1155 := z.EncBinary()
		_ = yym1155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1156 := !z.EncBinary()
			yy2arr1156 := z.EncBasicHandle().StructToArray
			var yyq1156 [4]bool
			_, _, _ = yysep1156, yyq1156, yy2arr1156
			const yyr1156 bool = false
			yyq1156[1] = x.ReadOnly != false
			yyq1156[3] = x.SubPath != ""
			var yynn1156 int
			if yyr1156 || yy2arr1156 {
				r.EncodeArrayStart(4)
			} else {
				yynn1156 = 2
				for _, b := range yyq1156 {
					if b {
						yynn1156++
					}
				}
				r.EncodeMapStart(yynn1156)
				yynn1156 = 0
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1158 := z.EncBinary()
				_ = yym1158
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1159 := z.EncBinary()
				_ = yym1159
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1156[1] {
					yym1161 := z.EncBinary()
					_ = yym1161
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1156[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1162 := z.EncBinary()
					_ = yym1162
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1164 := z.EncBinary()
				_ = yym1164
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1165 := z.EncBinary()
				_ = yym1165
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1156[3] {
					yym1167 := z.EncBinary()
					_ = yym1167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1156[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1168 := z.EncBinary()
					_ = yym1168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1169 := z.DecBinary()
	_ = yym1169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1170 := r.ContainerType()
		if yyct1170 == codecSelferValueTypeMap1234 {
			yyl1170 := r.ReadMapStart()
			if yyl1170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1170, d)
			}
		} else if yyct1170 == codecSelferValueTypeArray1234 {
			yyl1170 := r.ReadArrayStart()
			if yyl1170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1171Slc
	var yyhl1171 bool = l >= 0
	for yyj1171 := 0; ; yyj1171++ {
		if yyhl1171 {
			if yyj1171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1171Slc = r.DecodeBytes(yys1171Slc, true, true)
		yys1171 := string(yys1171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1171 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1171)
		} // end switch yys1171
	} // end for yyj1171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1176 int
	var yyb1176 bool
	var yyhl1176 bool = l >= 0
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1176++
		if yyhl1176 {
			yyb1176 = yyj1176 > l
		} else {
			yyb1176 = r.CheckBreak()
		}
		if yyb1176 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1176-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1181 := z.EncBinary()
		_ = yym1181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1182 := !z.EncBinary()
			yy2arr1182 := z.EncBasicHandle().StructToArray
			var yyq1182 [3]bool
			_, _, _ = yysep1182, yyq1182, yy2arr1182
			const yyr1182 bool = false
			yyq1182[1] = x.Value != ""
			yyq1182[2] = x.ValueFrom != nil
			var yynn1182 int
			if yyr1182 || yy2arr1182 {
				r.EncodeArrayStart(3)
			} else {
				yynn1182 = 1
				for _, b := range yyq1182 {
					if b {
						yynn1182++
					}
				}
				r.EncodeMapStart(yynn1182)
				yynn1182 = 0
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1184 := z.EncBinary()
				_ = yym1184
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1185 := z.EncBinary()
				_ = yym1185
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1182[1] {
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1182[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1188 := z.EncBinary()
					_ = yym1188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1182[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1182[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1190 := z.DecBinary()
	_ = yym1190
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1191 := r.ContainerType()
		if yyct1191 == codecSelferValueTypeMap1234 {
			yyl1191 := r.ReadMapStart()
			if yyl1191 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1191, d)
			}
		} else if yyct1191 == codecSelferValueTypeArray1234 {
			yyl1191 := r.ReadArrayStart()
			if yyl1191 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1191, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1192Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1192Slc
	var yyhl1192 bool = l >= 0
	for yyj1192 := 0; ; yyj1192++ {
		if yyhl1192 {
			if yyj1192 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1192Slc = r.DecodeBytes(yys1192Slc, true, true)
		yys1192 := string(yys1192Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1192 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1192)
		} // end switch yys1192
	} // end for yyj1192
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1196 int
	var yyb1196 bool
	var yyhl1196 bool = l >= 0
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1196++
		if yyhl1196 {
			yyb1196 = yyj1196 > l
		} else {
			yyb1196 = r.CheckBreak()
		}
		if yyb1196 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1196-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1200 := z.EncBinary()
		_ = yym1200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1201 := !z.EncBinary()
			yy2arr1201 := z.EncBasicHandle().StructToArray
			var yyq1201 [4]bool
			_, _, _ = yysep1201, yyq1201, yy2arr1201
			const yyr1201 bool = false
			yyq1201[0] = x.FieldRef != nil
			yyq1201[1] = x.ResourceFieldRef != nil
			yyq1201[2] = x.ConfigMapKeyRef != nil
			yyq1201[3] = x.SecretKeyRef != nil
			var yynn1201 int
			if yyr1201 || yy2arr1201 {
				r.EncodeArrayStart(4)
			} else {
				yynn1201 = 0
				for _, b := range yyq1201 {
					if b {
						yynn1201++
					}
				}
				r.EncodeMapStart(yynn1201)
				yynn1201 = 0
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1201[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1201[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1201[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1201[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1201[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1201[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1201[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1201[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1206 := z.DecBinary()
	_ = yym1206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1207 := r.ContainerType()
		if yyct1207 == codecSelferValueTypeMap1234 {
			yyl1207 := r.ReadMapStart()
			if yyl1207 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1207, d)
			}
		} else if yyct1207 == codecSelferValueTypeArray1234 {
			yyl1207 := r.ReadArrayStart()
			if yyl1207 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1208Slc
	var yyhl1208 bool = l >= 0
	for yyj1208 := 0; ; yyj1208++ {
		if yyhl1208 {
			if yyj1208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1208Slc = r.DecodeBytes(yys1208Slc, true, true)
		yys1208 := string(yys1208Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1208 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1208)
		} // end switch yys1208
	} // end for yyj1208
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1213 int
	var yyb1213 bool
	var yyhl1213 bool = l >= 0
	yyj1213++
	if yyhl1213 {
		yyb1213 = yyj1213 > l
	} else {
		yyb1213 = r.CheckBreak()
	}
	if yyb1213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1213++
	if yyhl1213 {
		yyb1213 = yyj1213 > l
	} else {
		yyb1213 = r.CheckBreak()
	}
	if yyb1213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1213++
	if yyhl1213 {
		yyb1213 = yyj1213 > l
	} else {
		yyb1213 = r.CheckBreak()
	}
	if yyb1213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1213++
	if yyhl1213 {
		yyb1213 = yyj1213 > l
	} else {
		yyb1213 = r.CheckBreak()
	}
	if yyb1213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1213++
		if yyhl1213 {
			yyb1213 = yyj1213 > l
		} else {
			yyb1213 = r.CheckBreak()
		}
		if yyb1213 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1213-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1218 := z.EncBinary()
		_ = yym1218
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1219 := !z.EncBinary()
			yy2arr1219 := z.EncBasicHandle().StructToArray
			var yyq1219 [2]bool
			_, _, _ = yysep1219, yyq1219, yy2arr1219
			const yyr1219 bool = false
			var yynn1219 int
			if yyr1219 || yy2arr1219 {
				r.EncodeArrayStart(2)
			} else {
				yynn1219 = 2
				for _, b := range yyq1219 {
					if b {
						yynn1219++
					}
				}
				r.EncodeMapStart(yynn1219)
				yynn1219 = 0
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1221 := z.EncBinary()
				_ = yym1221
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1222 := z.EncBinary()
				_ = yym1222
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1224 := z.EncBinary()
				_ = yym1224
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1225 := z.EncBinary()
				_ = yym1225
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1226 := z.DecBinary()
	_ = yym1226
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1227 := r.ContainerType()
		if yyct1227 == codecSelferValueTypeMap1234 {
			yyl1227 := r.ReadMapStart()
			if yyl1227 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1227, d)
			}
		} else if yyct1227 == codecSelferValueTypeArray1234 {
			yyl1227 := r.ReadArrayStart()
			if yyl1227 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1227, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1228Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1228Slc
	var yyhl1228 bool = l >= 0
	for yyj1228 := 0; ; yyj1228++ {
		if yyhl1228 {
			if yyj1228 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1228Slc = r.DecodeBytes(yys1228Slc, true, true)
		yys1228 := string(yys1228Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1228 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1228)
		} // end switch yys1228
	} // end for yyj1228
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1231 int
	var yyb1231 bool
	var yyhl1231 bool = l >= 0
	yyj1231++
	if yyhl1231 {
		yyb1231 = yyj1231 > l
	} else {
		yyb1231 = r.CheckBreak()
	}
	if yyb1231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1231++
	if yyhl1231 {
		yyb1231 = yyj1231 > l
	} else {
		yyb1231 = r.CheckBreak()
	}
	if yyb1231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1231++
		if yyhl1231 {
			yyb1231 = yyj1231 > l
		} else {
			yyb1231 = r.CheckBreak()
		}
		if yyb1231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1234 := z.EncBinary()
		_ = yym1234
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1235 := !z.EncBinary()
			yy2arr1235 := z.EncBasicHandle().StructToArray
			var yyq1235 [3]bool
			_, _, _ = yysep1235, yyq1235, yy2arr1235
			const yyr1235 bool = false
			yyq1235[0] = x.ContainerName != ""
			yyq1235[2] = true
			var yynn1235 int
			if yyr1235 || yy2arr1235 {
				r.EncodeArrayStart(3)
			} else {
				yynn1235 = 1
				for _, b := range yyq1235 {
					if b {
						yynn1235++
					}
				}
				r.EncodeMapStart(yynn1235)
				yynn1235 = 0
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1235[0] {
					yym1237 := z.EncBinary()
					_ = yym1237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1235[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1238 := z.EncBinary()
					_ = yym1238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1240 := z.EncBinary()
				_ = yym1240
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1241 := z.EncBinary()
				_ = yym1241
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1235[2] {
					yy1243 := &x.Divisor
					yym1244 := z.EncBinary()
					_ = yym1244
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1243) {
					} else if !yym1244 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1243)
					} else {
						z.EncFallback(yy1243)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1245 := &x.Divisor
					yym1246 := z.EncBinary()
					_ = yym1246
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1245) {
					} else if !yym1246 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1245)
					} else {
						z.EncFallback(yy1245)
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1247 := z.DecBinary()
	_ = yym1247
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1248 := r.ContainerType()
		if yyct1248 == codecSelferValueTypeMap1234 {
			yyl1248 := r.ReadMapStart()
			if yyl1248 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1248, d)
			}
		} else if yyct1248 == codecSelferValueTypeArray1234 {
			yyl1248 := r.ReadArrayStart()
			if yyl1248 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1248, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1249Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1249Slc
	var yyhl1249 bool = l >= 0
	for yyj1249 := 0; ; yyj1249++ {
		if yyhl1249 {
			if yyj1249 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1249Slc = r.DecodeBytes(yys1249Slc, true, true)
		yys1249 := string(yys1249Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1249 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1252 := &x.Divisor
				yym1253 := z.DecBinary()
				_ = yym1253
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1252) {
				} else if !yym1253 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1252)
				} else {
					z.DecFallback(yyv1252, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1249)
		} // end switch yys1249
	} // end for yyj1249
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1254 int
	var yyb1254 bool
	var yyhl1254 bool = l >= 0
	yyj1254++
	if yyhl1254 {
		yyb1254 = yyj1254 > l
	} else {
		yyb1254 = r.CheckBreak()
	}
	if yyb1254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1254++
	if yyhl1254 {
		yyb1254 = yyj1254 > l
	} else {
		yyb1254 = r.CheckBreak()
	}
	if yyb1254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1254++
	if yyhl1254 {
		yyb1254 = yyj1254 > l
	} else {
		yyb1254 = r.CheckBreak()
	}
	if yyb1254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1257 := &x.Divisor
		yym1258 := z.DecBinary()
		_ = yym1258
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1257) {
		} else if !yym1258 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1257)
		} else {
			z.DecFallback(yyv1257, false)
		}
	}
	for {
		yyj1254++
		if yyhl1254 {
			yyb1254 = yyj1254 > l
		} else {
			yyb1254 = r.CheckBreak()
		}
		if yyb1254 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1254-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1259 := z.EncBinary()
		_ = yym1259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1260 := !z.EncBinary()
			yy2arr1260 := z.EncBasicHandle().StructToArray
			var yyq1260 [2]bool
			_, _, _ = yysep1260, yyq1260, yy2arr1260
			const yyr1260 bool = false
			var yynn1260 int
			if yyr1260 || yy2arr1260 {
				r.EncodeArrayStart(2)
			} else {
				yynn1260 = 2
				for _, b := range yyq1260 {
					if b {
						yynn1260++
					}
				}
				r.EncodeMapStart(yynn1260)
				yynn1260 = 0
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1262 := z.EncBinary()
				_ = yym1262
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1263 := z.EncBinary()
				_ = yym1263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1265 := z.EncBinary()
				_ = yym1265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1266 := z.EncBinary()
				_ = yym1266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1267 := z.DecBinary()
	_ = yym1267
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1268 := r.ContainerType()
		if yyct1268 == codecSelferValueTypeMap1234 {
			yyl1268 := r.ReadMapStart()
			if yyl1268 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1268, d)
			}
		} else if yyct1268 == codecSelferValueTypeArray1234 {
			yyl1268 := r.ReadArrayStart()
			if yyl1268 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1268, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1269Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1269Slc
	var yyhl1269 bool = l >= 0
	for yyj1269 := 0; ; yyj1269++ {
		if yyhl1269 {
			if yyj1269 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1269Slc = r.DecodeBytes(yys1269Slc, true, true)
		yys1269 := string(yys1269Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1269 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1269)
		} // end switch yys1269
	} // end for yyj1269
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1272 int
	var yyb1272 bool
	var yyhl1272 bool = l >= 0
	yyj1272++
	if yyhl1272 {
		yyb1272 = yyj1272 > l
	} else {
		yyb1272 = r.CheckBreak()
	}
	if yyb1272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1272++
	if yyhl1272 {
		yyb1272 = yyj1272 > l
	} else {
		yyb1272 = r.CheckBreak()
	}
	if yyb1272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1272++
		if yyhl1272 {
			yyb1272 = yyj1272 > l
		} else {
			yyb1272 = r.CheckBreak()
		}
		if yyb1272 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1272-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1275 := z.EncBinary()
		_ = yym1275
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1276 := !z.EncBinary()
			yy2arr1276 := z.EncBasicHandle().StructToArray
			var yyq1276 [2]bool
			_, _, _ = yysep1276, yyq1276, yy2arr1276
			const yyr1276 bool = false
			var yynn1276 int
			if yyr1276 || yy2arr1276 {
				r.EncodeArrayStart(2)
			} else {
				yynn1276 = 2
				for _, b := range yyq1276 {
					if b {
						yynn1276++
					}
				}
				r.EncodeMapStart(yynn1276)
				yynn1276 = 0
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1278 := z.EncBinary()
				_ = yym1278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1279 := z.EncBinary()
				_ = yym1279
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1281 := z.EncBinary()
				_ = yym1281
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1282 := z.EncBinary()
				_ = yym1282
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1283 := z.DecBinary()
	_ = yym1283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1284 := r.ContainerType()
		if yyct1284 == codecSelferValueTypeMap1234 {
			yyl1284 := r.ReadMapStart()
			if yyl1284 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1284, d)
			}
		} else if yyct1284 == codecSelferValueTypeArray1234 {
			yyl1284 := r.ReadArrayStart()
			if yyl1284 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1285Slc
	var yyhl1285 bool = l >= 0
	for yyj1285 := 0; ; yyj1285++ {
		if yyhl1285 {
			if yyj1285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1285Slc = r.DecodeBytes(yys1285Slc, true, true)
		yys1285 := string(yys1285Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1285 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1285)
		} // end switch yys1285
	} // end for yyj1285
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1288 int
	var yyb1288 bool
	var yyhl1288 bool = l >= 0
	yyj1288++
	if yyhl1288 {
		yyb1288 = yyj1288 > l
	} else {
		yyb1288 = r.CheckBreak()
	}
	if yyb1288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1288++
	if yyhl1288 {
		yyb1288 = yyj1288 > l
	} else {
		yyb1288 = r.CheckBreak()
	}
	if yyb1288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1288++
		if yyhl1288 {
			yyb1288 = yyj1288 > l
		} else {
			yyb1288 = r.CheckBreak()
		}
		if yyb1288 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1288-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1291 := z.EncBinary()
		_ = yym1291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1292 := !z.EncBinary()
			yy2arr1292 := z.EncBasicHandle().StructToArray
			var yyq1292 [2]bool
			_, _, _ = yysep1292, yyq1292, yy2arr1292
			const yyr1292 bool = false
			var yynn1292 int
			if yyr1292 || yy2arr1292 {
				r.EncodeArrayStart(2)
			} else {
				yynn1292 = 2
				for _, b := range yyq1292 {
					if b {
						yynn1292++
					}
				}
				r.EncodeMapStart(yynn1292)
				yynn1292 = 0
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1294 := z.EncBinary()
				_ = yym1294
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1295 := z.EncBinary()
				_ = yym1295
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1297 := z.EncBinary()
				_ = yym1297
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1298 := z.EncBinary()
				_ = yym1298
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1299 := z.DecBinary()
	_ = yym1299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1300 := r.ContainerType()
		if yyct1300 == codecSelferValueTypeMap1234 {
			yyl1300 := r.ReadMapStart()
			if yyl1300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1300, d)
			}
		} else if yyct1300 == codecSelferValueTypeArray1234 {
			yyl1300 := r.ReadArrayStart()
			if yyl1300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1301Slc
	var yyhl1301 bool = l >= 0
	for yyj1301 := 0; ; yyj1301++ {
		if yyhl1301 {
			if yyj1301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1301Slc = r.DecodeBytes(yys1301Slc, true, true)
		yys1301 := string(yys1301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1301 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1301)
		} // end switch yys1301
	} // end for yyj1301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1304 int
	var yyb1304 bool
	var yyhl1304 bool = l >= 0
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1304++
		if yyhl1304 {
			yyb1304 = yyj1304 > l
		} else {
			yyb1304 = r.CheckBreak()
		}
		if yyb1304 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1304-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1307 := z.EncBinary()
		_ = yym1307
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1308 := !z.EncBinary()
			yy2arr1308 := z.EncBasicHandle().StructToArray
			var yyq1308 [5]bool
			_, _, _ = yysep1308, yyq1308, yy2arr1308
			const yyr1308 bool = false
			yyq1308[0] = x.Path != ""
			yyq1308[1] = true
			yyq1308[2] = x.Host != ""
			yyq1308[3] = x.Scheme != ""
			yyq1308[4] = len(x.HTTPHeaders) != 0
			var yynn1308 int
			if yyr1308 || yy2arr1308 {
				r.EncodeArrayStart(5)
			} else {
				yynn1308 = 0
				for _, b := range yyq1308 {
					if b {
						yynn1308++
					}
				}
				r.EncodeMapStart(yynn1308)
				yynn1308 = 0
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[0] {
					yym1310 := z.EncBinary()
					_ = yym1310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1308[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1311 := z.EncBinary()
					_ = yym1311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[1] {
					yy1313 := &x.Port
					yym1314 := z.EncBinary()
					_ = yym1314
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1313) {
					} else if !yym1314 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1313)
					} else {
						z.EncFallback(yy1313)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1308[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1315 := &x.Port
					yym1316 := z.EncBinary()
					_ = yym1316
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1315) {
					} else if !yym1316 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1315)
					} else {
						z.EncFallback(yy1315)
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[2] {
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1308[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1319 := z.EncBinary()
					_ = yym1319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1308[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1322 := z.EncBinary()
						_ = yym1322
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1308[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1323 := z.EncBinary()
						_ = yym1323
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1324 := z.DecBinary()
	_ = yym1324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1325 := r.ContainerType()
		if yyct1325 == codecSelferValueTypeMap1234 {
			yyl1325 := r.ReadMapStart()
			if yyl1325 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1325, d)
			}
		} else if yyct1325 == codecSelferValueTypeArray1234 {
			yyl1325 := r.ReadArrayStart()
			if yyl1325 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1326Slc
	var yyhl1326 bool = l >= 0
	for yyj1326 := 0; ; yyj1326++ {
		if yyhl1326 {
			if yyj1326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1326Slc = r.DecodeBytes(yys1326Slc, true, true)
		yys1326 := string(yys1326Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1326 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1328 := &x.Port
				yym1329 := z.DecBinary()
				_ = yym1329
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1328) {
				} else if !yym1329 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1328)
				} else {
					z.DecFallback(yyv1328, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1332 := &x.HTTPHeaders
				yym1333 := z.DecBinary()
				_ = yym1333
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1332), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1326)
		} // end switch yys1326
	} // end for yyj1326
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1334 int
	var yyb1334 bool
	var yyhl1334 bool = l >= 0
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1336 := &x.Port
		yym1337 := z.DecBinary()
		_ = yym1337
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1336) {
		} else if !yym1337 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1336)
		} else {
			z.DecFallback(yyv1336, false)
		}
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1340 := &x.HTTPHeaders
		yym1341 := z.DecBinary()
		_ = yym1341
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1340), d)
		}
	}
	for {
		yyj1334++
		if yyhl1334 {
			yyb1334 = yyj1334 > l
		} else {
			yyb1334 = r.CheckBreak()
		}
		if yyb1334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1342 := z.EncBinary()
	_ = yym1342
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1343 := z.DecBinary()
	_ = yym1343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1344 := z.EncBinary()
		_ = yym1344
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1345 := !z.EncBinary()
			yy2arr1345 := z.EncBasicHandle().StructToArray
			var yyq1345 [1]bool
			_, _, _ = yysep1345, yyq1345, yy2arr1345
			const yyr1345 bool = false
			yyq1345[0] = true
			var yynn1345 int
			if yyr1345 || yy2arr1345 {
				r.EncodeArrayStart(1)
			} else {
				yynn1345 = 0
				for _, b := range yyq1345 {
					if b {
						yynn1345++
					}
				}
				r.EncodeMapStart(yynn1345)
				yynn1345 = 0
			}
			if yyr1345 || yy2arr1345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1345[0] {
					yy1347 := &x.Port
					yym1348 := z.EncBinary()
					_ = yym1348
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1347) {
					} else if !yym1348 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1347)
					} else {
						z.EncFallback(yy1347)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1345[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1349 := &x.Port
					yym1350 := z.EncBinary()
					_ = yym1350
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1349) {
					} else if !yym1350 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1349)
					} else {
						z.EncFallback(yy1349)
					}
				}
			}
			if yyr1345 || yy2arr1345 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1351 := z.DecBinary()
	_ = yym1351
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1352 := r.ContainerType()
		if yyct1352 == codecSelferValueTypeMap1234 {
			yyl1352 := r.ReadMapStart()
			if yyl1352 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1352, d)
			}
		} else if yyct1352 == codecSelferValueTypeArray1234 {
			yyl1352 := r.ReadArrayStart()
			if yyl1352 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1352, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1353Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1353Slc
	var yyhl1353 bool = l >= 0
	for yyj1353 := 0; ; yyj1353++ {
		if yyhl1353 {
			if yyj1353 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1353Slc = r.DecodeBytes(yys1353Slc, true, true)
		yys1353 := string(yys1353Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1353 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1354 := &x.Port
				yym1355 := z.DecBinary()
				_ = yym1355
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1354) {
				} else if !yym1355 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1354)
				} else {
					z.DecFallback(yyv1354, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1353)
		} // end switch yys1353
	} // end for yyj1353
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1356 int
	var yyb1356 bool
	var yyhl1356 bool = l >= 0
	yyj1356++
	if yyhl1356 {
		yyb1356 = yyj1356 > l
	} else {
		yyb1356 = r.CheckBreak()
	}
	if yyb1356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1357 := &x.Port
		yym1358 := z.DecBinary()
		_ = yym1358
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1357) {
		} else if !yym1358 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1357)
		} else {
			z.DecFallback(yyv1357, false)
		}
	}
	for {
		yyj1356++
		if yyhl1356 {
			yyb1356 = yyj1356 > l
		} else {
			yyb1356 = r.CheckBreak()
		}
		if yyb1356 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1356-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1359 := z.EncBinary()
		_ = yym1359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1360 := !z.EncBinary()
			yy2arr1360 := z.EncBasicHandle().StructToArray
			var yyq1360 [1]bool
			_, _, _ = yysep1360, yyq1360, yy2arr1360
			const yyr1360 bool = false
			yyq1360[0] = len(x.Command) != 0
			var yynn1360 int
			if yyr1360 || yy2arr1360 {
				r.EncodeArrayStart(1)
			} else {
				yynn1360 = 0
				for _, b := range yyq1360 {
					if b {
						yynn1360++
					}
				}
				r.EncodeMapStart(yynn1360)
				yynn1360 = 0
			}
			if yyr1360 || yy2arr1360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1360[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1362 := z.EncBinary()
						_ = yym1362
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1360[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1363 := z.EncBinary()
						_ = yym1363
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1360 || yy2arr1360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1364 := z.DecBinary()
	_ = yym1364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1365 := r.ContainerType()
		if yyct1365 == codecSelferValueTypeMap1234 {
			yyl1365 := r.ReadMapStart()
			if yyl1365 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1365, d)
			}
		} else if yyct1365 == codecSelferValueTypeArray1234 {
			yyl1365 := r.ReadArrayStart()
			if yyl1365 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1365, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1366Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1366Slc
	var yyhl1366 bool = l >= 0
	for yyj1366 := 0; ; yyj1366++ {
		if yyhl1366 {
			if yyj1366 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1366Slc = r.DecodeBytes(yys1366Slc, true, true)
		yys1366 := string(yys1366Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1366 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1367 := &x.Command
				yym1368 := z.DecBinary()
				_ = yym1368
				if false {
				} else {
					z.F.DecSliceStringX(yyv1367, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1366)
		} // end switch yys1366
	} // end for yyj1366
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1369 int
	var yyb1369 bool
	var yyhl1369 bool = l >= 0
	yyj1369++
	if yyhl1369 {
		yyb1369 = yyj1369 > l
	} else {
		yyb1369 = r.CheckBreak()
	}
	if yyb1369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1370 := &x.Command
		yym1371 := z.DecBinary()
		_ = yym1371
		if false {
		} else {
			z.F.DecSliceStringX(yyv1370, false, d)
		}
	}
	for {
		yyj1369++
		if yyhl1369 {
			yyb1369 = yyj1369 > l
		} else {
			yyb1369 = r.CheckBreak()
		}
		if yyb1369 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1369-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1372 := z.EncBinary()
		_ = yym1372
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1373 := !z.EncBinary()
			yy2arr1373 := z.EncBasicHandle().StructToArray
			var yyq1373 [8]bool
			_, _, _ = yysep1373, yyq1373, yy2arr1373
			const yyr1373 bool = false
			yyq1373[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1373[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1373[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1373[3] = x.InitialDelaySeconds != 0
			yyq1373[4] = x.TimeoutSeconds != 0
			yyq1373[5] = x.PeriodSeconds != 0
			yyq1373[6] = x.SuccessThreshold != 0
			yyq1373[7] = x.FailureThreshold != 0
			var yynn1373 int
			if yyr1373 || yy2arr1373 {
				r.EncodeArrayStart(8)
			} else {
				yynn1373 = 0
				for _, b := range yyq1373 {
					if b {
						yynn1373++
					}
				}
				r.EncodeMapStart(yynn1373)
				yynn1373 = 0
			}
			var yyn1374 bool
			if x.Handler.Exec == nil {
				yyn1374 = true
				goto LABEL1374
			}
		LABEL1374:
			if yyr1373 || yy2arr1373 {
				if yyn1374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1373[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1373[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1374 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1375 bool
			if x.Handler.HTTPGet == nil {
				yyn1375 = true
				goto LABEL1375
			}
		LABEL1375:
			if yyr1373 || yy2arr1373 {
				if yyn1375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1373[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1373[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1375 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1376 bool
			if x.Handler.TCPSocket == nil {
				yyn1376 = true
				goto LABEL1376
			}
		LABEL1376:
			if yyr1373 || yy2arr1373 {
				if yyn1376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1373[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1373[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1376 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[3] {
					yym1378 := z.EncBinary()
					_ = yym1378
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1379 := z.EncBinary()
					_ = yym1379
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[4] {
					yym1381 := z.EncBinary()
					_ = yym1381
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[5] {
					yym1384 := z.EncBinary()
					_ = yym1384
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[6] {
					yym1387 := z.EncBinary()
					_ = yym1387
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[7] {
					yym1390 := z.EncBinary()
					_ = yym1390
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1392 := z.DecBinary()
	_ = yym1392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1393 := r.ContainerType()
		if yyct1393 == codecSelferValueTypeMap1234 {
			yyl1393 := r.ReadMapStart()
			if yyl1393 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1393, d)
			}
		} else if yyct1393 == codecSelferValueTypeArray1234 {
			yyl1393 := r.ReadArrayStart()
			if yyl1393 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1393, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1394Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1394Slc
	var yyhl1394 bool = l >= 0
	for yyj1394 := 0; ; yyj1394++ {
		if yyhl1394 {
			if yyj1394 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1394Slc = r.DecodeBytes(yys1394Slc, true, true)
		yys1394 := string(yys1394Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1394 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1394)
		} // end switch yys1394
	} // end for yyj1394
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1403 int
	var yyb1403 bool
	var yyhl1403 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1403++
		if yyhl1403 {
			yyb1403 = yyj1403 > l
		} else {
			yyb1403 = r.CheckBreak()
		}
		if yyb1403 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1403-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1412 := z.EncBinary()
	_ = yym1412
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1413 := z.DecBinary()
	_ = yym1413
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1414 := z.EncBinary()
	_ = yym1414
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1415 := z.DecBinary()
	_ = yym1415
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1416 := z.EncBinary()
		_ = yym1416
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1417 := !z.EncBinary()
			yy2arr1417 := z.EncBasicHandle().StructToArray
			var yyq1417 [2]bool
			_, _, _ = yysep1417, yyq1417, yy2arr1417
			const yyr1417 bool = false
			yyq1417[0] = len(x.Add) != 0
			yyq1417[1] = len(x.Drop) != 0
			var yynn1417 int
			if yyr1417 || yy2arr1417 {
				r.EncodeArrayStart(2)
			} else {
				yynn1417 = 0
				for _, b := range yyq1417 {
					if b {
						yynn1417++
					}
				}
				r.EncodeMapStart(yynn1417)
				yynn1417 = 0
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1417[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1419 := z.EncBinary()
						_ = yym1419
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1417[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1420 := z.EncBinary()
						_ = yym1420
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1417[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1422 := z.EncBinary()
						_ = yym1422
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1417[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1423 := z.EncBinary()
						_ = yym1423
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1424 := z.DecBinary()
	_ = yym1424
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1425 := r.ContainerType()
		if yyct1425 == codecSelferValueTypeMap1234 {
			yyl1425 := r.ReadMapStart()
			if yyl1425 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1425, d)
			}
		} else if yyct1425 == codecSelferValueTypeArray1234 {
			yyl1425 := r.ReadArrayStart()
			if yyl1425 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1425, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1426Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1426Slc
	var yyhl1426 bool = l >= 0
	for yyj1426 := 0; ; yyj1426++ {
		if yyhl1426 {
			if yyj1426 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1426Slc = r.DecodeBytes(yys1426Slc, true, true)
		yys1426 := string(yys1426Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1426 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1427 := &x.Add
				yym1428 := z.DecBinary()
				_ = yym1428
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1427), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1429 := &x.Drop
				yym1430 := z.DecBinary()
				_ = yym1430
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1429), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1426)
		} // end switch yys1426
	} // end for yyj1426
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1431 int
	var yyb1431 bool
	var yyhl1431 bool = l >= 0
	yyj1431++
	if yyhl1431 {
		yyb1431 = yyj1431 > l
	} else {
		yyb1431 = r.CheckBreak()
	}
	if yyb1431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1432 := &x.Add
		yym1433 := z.DecBinary()
		_ = yym1433
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1432), d)
		}
	}
	yyj1431++
	if yyhl1431 {
		yyb1431 = yyj1431 > l
	} else {
		yyb1431 = r.CheckBreak()
	}
	if yyb1431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1434 := &x.Drop
		yym1435 := z.DecBinary()
		_ = yym1435
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1434), d)
		}
	}
	for {
		yyj1431++
		if yyhl1431 {
			yyb1431 = yyj1431 > l
		} else {
			yyb1431 = r.CheckBreak()
		}
		if yyb1431 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1431-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1436 := z.EncBinary()
		_ = yym1436
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1437 := !z.EncBinary()
			yy2arr1437 := z.EncBasicHandle().StructToArray
			var yyq1437 [2]bool
			_, _, _ = yysep1437, yyq1437, yy2arr1437
			const yyr1437 bool = false
			yyq1437[0] = len(x.Limits) != 0
			yyq1437[1] = len(x.Requests) != 0
			var yynn1437 int
			if yyr1437 || yy2arr1437 {
				r.EncodeArrayStart(2)
			} else {
				yynn1437 = 0
				for _, b := range yyq1437 {
					if b {
						yynn1437++
					}
				}
				r.EncodeMapStart(yynn1437)
				yynn1437 = 0
			}
			if yyr1437 || yy2arr1437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1437[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1437[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1437 || yy2arr1437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1437[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1437[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1437 || yy2arr1437 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1440 := z.DecBinary()
	_ = yym1440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1441 := r.ContainerType()
		if yyct1441 == codecSelferValueTypeMap1234 {
			yyl1441 := r.ReadMapStart()
			if yyl1441 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1441, d)
			}
		} else if yyct1441 == codecSelferValueTypeArray1234 {
			yyl1441 := r.ReadArrayStart()
			if yyl1441 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1441, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1442Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1442Slc
	var yyhl1442 bool = l >= 0
	for yyj1442 := 0; ; yyj1442++ {
		if yyhl1442 {
			if yyj1442 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1442Slc = r.DecodeBytes(yys1442Slc, true, true)
		yys1442 := string(yys1442Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1442 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1443 := &x.Limits
				yyv1443.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1444 := &x.Requests
				yyv1444.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1442)
		} // end switch yys1442
	} // end for yyj1442
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1445 int
	var yyb1445 bool
	var yyhl1445 bool = l >= 0
	yyj1445++
	if yyhl1445 {
		yyb1445 = yyj1445 > l
	} else {
		yyb1445 = r.CheckBreak()
	}
	if yyb1445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1446 := &x.Limits
		yyv1446.CodecDecodeSelf(d)
	}
	yyj1445++
	if yyhl1445 {
		yyb1445 = yyj1445 > l
	} else {
		yyb1445 = r.CheckBreak()
	}
	if yyb1445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1447 := &x.Requests
		yyv1447.CodecDecodeSelf(d)
	}
	for {
		yyj1445++
		if yyhl1445 {
			yyb1445 = yyj1445 > l
		} else {
			yyb1445 = r.CheckBreak()
		}
		if yyb1445 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1445-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1448 := z.EncBinary()
		_ = yym1448
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1449 := !z.EncBinary()
			yy2arr1449 := z.EncBasicHandle().StructToArray
			var yyq1449 [18]bool
			_, _, _ = yysep1449, yyq1449, yy2arr1449
			const yyr1449 bool = false
			yyq1449[2] = len(x.Command) != 0
			yyq1449[3] = len(x.Args) != 0
			yyq1449[4] = x.WorkingDir != ""
			yyq1449[5] = len(x.Ports) != 0
			yyq1449[6] = len(x.Env) != 0
			yyq1449[7] = true
			yyq1449[8] = len(x.VolumeMounts) != 0
			yyq1449[9] = x.LivenessProbe != nil
			yyq1449[10] = x.ReadinessProbe != nil
			yyq1449[11] = x.Lifecycle != nil
			yyq1449[12] = x.TerminationMessagePath != ""
			yyq1449[14] = x.SecurityContext != nil
			yyq1449[15] = x.Stdin != false
			yyq1449[16] = x.StdinOnce != false
			yyq1449[17] = x.TTY != false
			var yynn1449 int
			if yyr1449 || yy2arr1449 {
				r.EncodeArrayStart(18)
			} else {
				yynn1449 = 3
				for _, b := range yyq1449 {
					if b {
						yynn1449++
					}
				}
				r.EncodeMapStart(yynn1449)
				yynn1449 = 0
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1451 := z.EncBinary()
				_ = yym1451
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1452 := z.EncBinary()
				_ = yym1452
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1454 := z.EncBinary()
				_ = yym1454
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1455 := z.EncBinary()
				_ = yym1455
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1457 := z.EncBinary()
						_ = yym1457
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1458 := z.EncBinary()
						_ = yym1458
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1460 := z.EncBinary()
						_ = yym1460
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1461 := z.EncBinary()
						_ = yym1461
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[4] {
					yym1463 := z.EncBinary()
					_ = yym1463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1449[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1464 := z.EncBinary()
					_ = yym1464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1466 := z.EncBinary()
						_ = yym1466
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1467 := z.EncBinary()
						_ = yym1467
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1469 := z.EncBinary()
						_ = yym1469
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1470 := z.EncBinary()
						_ = yym1470
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[7] {
					yy1472 := &x.Resources
					yy1472.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1473 := &x.Resources
					yy1473.CodecEncodeSelf(e)
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1475 := z.EncBinary()
						_ = yym1475
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1476 := z.EncBinary()
						_ = yym1476
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[12] {
					yym1481 := z.EncBinary()
					_ = yym1481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1449[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[15] {
					yym1486 := z.EncBinary()
					_ = yym1486
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1449[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1487 := z.EncBinary()
					_ = yym1487
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[16] {
					yym1489 := z.EncBinary()
					_ = yym1489
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1449[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1490 := z.EncBinary()
					_ = yym1490
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[17] {
					yym1492 := z.EncBinary()
					_ = yym1492
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1449[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1493 := z.EncBinary()
					_ = yym1493
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1494 := z.DecBinary()
	_ = yym1494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1495 := r.ContainerType()
		if yyct1495 == codecSelferValueTypeMap1234 {
			yyl1495 := r.ReadMapStart()
			if yyl1495 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1495, d)
			}
		} else if yyct1495 == codecSelferValueTypeArray1234 {
			yyl1495 := r.ReadArrayStart()
			if yyl1495 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1495, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1496Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1496Slc
	var yyhl1496 bool = l >= 0
	for yyj1496 := 0; ; yyj1496++ {
		if yyhl1496 {
			if yyj1496 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1496Slc = r.DecodeBytes(yys1496Slc, true, true)
		yys1496 := string(yys1496Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1496 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1499 := &x.Command
				yym1500 := z.DecBinary()
				_ = yym1500
				if false {
				} else {
					z.F.DecSliceStringX(yyv1499, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1501 := &x.Args
				yym1502 := z.DecBinary()
				_ = yym1502
				if false {
				} else {
					z.F.DecSliceStringX(yyv1501, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1504 := &x.Ports
				yym1505 := z.DecBinary()
				_ = yym1505
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1504), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1506 := &x.Env
				yym1507 := z.DecBinary()
				_ = yym1507
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1506), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1508 := &x.Resources
				yyv1508.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1509 := &x.VolumeMounts
				yym1510 := z.DecBinary()
				_ = yym1510
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1509), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1496)
		} // end switch yys1496
	} // end for yyj1496
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1520 int
	var yyb1520 bool
	var yyhl1520 bool = l >= 0
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1523 := &x.Command
		yym1524 := z.DecBinary()
		_ = yym1524
		if false {
		} else {
			z.F.DecSliceStringX(yyv1523, false, d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1525 := &x.Args
		yym1526 := z.DecBinary()
		_ = yym1526
		if false {
		} else {
			z.F.DecSliceStringX(yyv1525, false, d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1528 := &x.Ports
		yym1529 := z.DecBinary()
		_ = yym1529
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1528), d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1530 := &x.Env
		yym1531 := z.DecBinary()
		_ = yym1531
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1530), d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1532 := &x.Resources
		yyv1532.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1533 := &x.VolumeMounts
		yym1534 := z.DecBinary()
		_ = yym1534
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1533), d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1520++
		if yyhl1520 {
			yyb1520 = yyj1520 > l
		} else {
			yyb1520 = r.CheckBreak()
		}
		if yyb1520 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1520-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1544 := z.EncBinary()
		_ = yym1544
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1545 := !z.EncBinary()
			yy2arr1545 := z.EncBasicHandle().StructToArray
			var yyq1545 [3]bool
			_, _, _ = yysep1545, yyq1545, yy2arr1545
			const yyr1545 bool = false
			yyq1545[0] = x.Exec != nil
			yyq1545[1] = x.HTTPGet != nil
			yyq1545[2] = x.TCPSocket != nil
			var yynn1545 int
			if yyr1545 || yy2arr1545 {
				r.EncodeArrayStart(3)
			} else {
				yynn1545 = 0
				for _, b := range yyq1545 {
					if b {
						yynn1545++
					}
				}
				r.EncodeMapStart(yynn1545)
				yynn1545 = 0
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1545[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1545[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1545[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1549 := z.DecBinary()
	_ = yym1549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1550 := r.ContainerType()
		if yyct1550 == codecSelferValueTypeMap1234 {
			yyl1550 := r.ReadMapStart()
			if yyl1550 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1550, d)
			}
		} else if yyct1550 == codecSelferValueTypeArray1234 {
			yyl1550 := r.ReadArrayStart()
			if yyl1550 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1551Slc
	var yyhl1551 bool = l >= 0
	for yyj1551 := 0; ; yyj1551++ {
		if yyhl1551 {
			if yyj1551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1551Slc = r.DecodeBytes(yys1551Slc, true, true)
		yys1551 := string(yys1551Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1551 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1551)
		} // end switch yys1551
	} // end for yyj1551
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1555 int
	var yyb1555 bool
	var yyhl1555 bool = l >= 0
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1555++
		if yyhl1555 {
			yyb1555 = yyj1555 > l
		} else {
			yyb1555 = r.CheckBreak()
		}
		if yyb1555 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1555-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1559 := z.EncBinary()
		_ = yym1559
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1560 := !z.EncBinary()
			yy2arr1560 := z.EncBasicHandle().StructToArray
			var yyq1560 [2]bool
			_, _, _ = yysep1560, yyq1560, yy2arr1560
			const yyr1560 bool = false
			yyq1560[0] = x.PostStart != nil
			yyq1560[1] = x.PreStop != nil
			var yynn1560 int
			if yyr1560 || yy2arr1560 {
				r.EncodeArrayStart(2)
			} else {
				yynn1560 = 0
				for _, b := range yyq1560 {
					if b {
						yynn1560++
					}
				}
				r.EncodeMapStart(yynn1560)
				yynn1560 = 0
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1560[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1560[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1560[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1560[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1563 := z.DecBinary()
	_ = yym1563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1564 := r.ContainerType()
		if yyct1564 == codecSelferValueTypeMap1234 {
			yyl1564 := r.ReadMapStart()
			if yyl1564 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1564, d)
			}
		} else if yyct1564 == codecSelferValueTypeArray1234 {
			yyl1564 := r.ReadArrayStart()
			if yyl1564 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1564, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1565Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1565Slc
	var yyhl1565 bool = l >= 0
	for yyj1565 := 0; ; yyj1565++ {
		if yyhl1565 {
			if yyj1565 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1565Slc = r.DecodeBytes(yys1565Slc, true, true)
		yys1565 := string(yys1565Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1565 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1565)
		} // end switch yys1565
	} // end for yyj1565
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1568 int
	var yyb1568 bool
	var yyhl1568 bool = l >= 0
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1568++
		if yyhl1568 {
			yyb1568 = yyj1568 > l
		} else {
			yyb1568 = r.CheckBreak()
		}
		if yyb1568 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1568-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1571 := z.EncBinary()
	_ = yym1571
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1572 := z.DecBinary()
	_ = yym1572
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1573 := z.EncBinary()
		_ = yym1573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1574 := !z.EncBinary()
			yy2arr1574 := z.EncBasicHandle().StructToArray
			var yyq1574 [2]bool
			_, _, _ = yysep1574, yyq1574, yy2arr1574
			const yyr1574 bool = false
			yyq1574[0] = x.Reason != ""
			yyq1574[1] = x.Message != ""
			var yynn1574 int
			if yyr1574 || yy2arr1574 {
				r.EncodeArrayStart(2)
			} else {
				yynn1574 = 0
				for _, b := range yyq1574 {
					if b {
						yynn1574++
					}
				}
				r.EncodeMapStart(yynn1574)
				yynn1574 = 0
			}
			if yyr1574 || yy2arr1574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1574[0] {
					yym1576 := z.EncBinary()
					_ = yym1576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1574[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1577 := z.EncBinary()
					_ = yym1577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1574 || yy2arr1574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1574[1] {
					yym1579 := z.EncBinary()
					_ = yym1579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1574[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1580 := z.EncBinary()
					_ = yym1580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1574 || yy2arr1574 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1581 := z.DecBinary()
	_ = yym1581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1582 := r.ContainerType()
		if yyct1582 == codecSelferValueTypeMap1234 {
			yyl1582 := r.ReadMapStart()
			if yyl1582 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1582, d)
			}
		} else if yyct1582 == codecSelferValueTypeArray1234 {
			yyl1582 := r.ReadArrayStart()
			if yyl1582 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1582, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1583Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1583Slc
	var yyhl1583 bool = l >= 0
	for yyj1583 := 0; ; yyj1583++ {
		if yyhl1583 {
			if yyj1583 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1583Slc = r.DecodeBytes(yys1583Slc, true, true)
		yys1583 := string(yys1583Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1583 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1583)
		} // end switch yys1583
	} // end for yyj1583
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1586 int
	var yyb1586 bool
	var yyhl1586 bool = l >= 0
	yyj1586++
	if yyhl1586 {
		yyb1586 = yyj1586 > l
	} else {
		yyb1586 = r.CheckBreak()
	}
	if yyb1586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1586++
	if yyhl1586 {
		yyb1586 = yyj1586 > l
	} else {
		yyb1586 = r.CheckBreak()
	}
	if yyb1586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1586++
		if yyhl1586 {
			yyb1586 = yyj1586 > l
		} else {
			yyb1586 = r.CheckBreak()
		}
		if yyb1586 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1586-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1589 := z.EncBinary()
		_ = yym1589
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1590 := !z.EncBinary()
			yy2arr1590 := z.EncBasicHandle().StructToArray
			var yyq1590 [1]bool
			_, _, _ = yysep1590, yyq1590, yy2arr1590
			const yyr1590 bool = false
			yyq1590[0] = true
			var yynn1590 int
			if yyr1590 || yy2arr1590 {
				r.EncodeArrayStart(1)
			} else {
				yynn1590 = 0
				for _, b := range yyq1590 {
					if b {
						yynn1590++
					}
				}
				r.EncodeMapStart(yynn1590)
				yynn1590 = 0
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1590[0] {
					yy1592 := &x.StartedAt
					yym1593 := z.EncBinary()
					_ = yym1593
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1592) {
					} else if yym1593 {
						z.EncBinaryMarshal(yy1592)
					} else if !yym1593 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1592)
					} else {
						z.EncFallback(yy1592)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1590[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1594 := &x.StartedAt
					yym1595 := z.EncBinary()
					_ = yym1595
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1594) {
					} else if yym1595 {
						z.EncBinaryMarshal(yy1594)
					} else if !yym1595 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1594)
					} else {
						z.EncFallback(yy1594)
					}
				}
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1596 := z.DecBinary()
	_ = yym1596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1597 := r.ContainerType()
		if yyct1597 == codecSelferValueTypeMap1234 {
			yyl1597 := r.ReadMapStart()
			if yyl1597 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1597, d)
			}
		} else if yyct1597 == codecSelferValueTypeArray1234 {
			yyl1597 := r.ReadArrayStart()
			if yyl1597 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1598Slc
	var yyhl1598 bool = l >= 0
	for yyj1598 := 0; ; yyj1598++ {
		if yyhl1598 {
			if yyj1598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1598Slc = r.DecodeBytes(yys1598Slc, true, true)
		yys1598 := string(yys1598Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1598 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1599 := &x.StartedAt
				yym1600 := z.DecBinary()
				_ = yym1600
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1599) {
				} else if yym1600 {
					z.DecBinaryUnmarshal(yyv1599)
				} else if !yym1600 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1599)
				} else {
					z.DecFallback(yyv1599, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1598)
		} // end switch yys1598
	} // end for yyj1598
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1601 int
	var yyb1601 bool
	var yyhl1601 bool = l >= 0
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1602 := &x.StartedAt
		yym1603 := z.DecBinary()
		_ = yym1603
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1602) {
		} else if yym1603 {
			z.DecBinaryUnmarshal(yyv1602)
		} else if !yym1603 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1602)
		} else {
			z.DecFallback(yyv1602, false)
		}
	}
	for {
		yyj1601++
		if yyhl1601 {
			yyb1601 = yyj1601 > l
		} else {
			yyb1601 = r.CheckBreak()
		}
		if yyb1601 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1601-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1604 := z.EncBinary()
		_ = yym1604
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1605 := !z.EncBinary()
			yy2arr1605 := z.EncBasicHandle().StructToArray
			var yyq1605 [7]bool
			_, _, _ = yysep1605, yyq1605, yy2arr1605
			const yyr1605 bool = false
			yyq1605[1] = x.Signal != 0
			yyq1605[2] = x.Reason != ""
			yyq1605[3] = x.Message != ""
			yyq1605[4] = true
			yyq1605[5] = true
			yyq1605[6] = x.ContainerID != ""
			var yynn1605 int
			if yyr1605 || yy2arr1605 {
				r.EncodeArrayStart(7)
			} else {
				yynn1605 = 1
				for _, b := range yyq1605 {
					if b {
						yynn1605++
					}
				}
				r.EncodeMapStart(yynn1605)
				yynn1605 = 0
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1607 := z.EncBinary()
				_ = yym1607
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1608 := z.EncBinary()
				_ = yym1608
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[1] {
					yym1610 := z.EncBinary()
					_ = yym1610
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1605[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1611 := z.EncBinary()
					_ = yym1611
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[2] {
					yym1613 := z.EncBinary()
					_ = yym1613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1605[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1614 := z.EncBinary()
					_ = yym1614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[3] {
					yym1616 := z.EncBinary()
					_ = yym1616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1605[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1617 := z.EncBinary()
					_ = yym1617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[4] {
					yy1619 := &x.StartedAt
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1619) {
					} else if yym1620 {
						z.EncBinaryMarshal(yy1619)
					} else if !yym1620 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1619)
					} else {
						z.EncFallback(yy1619)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1605[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1621 := &x.StartedAt
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1621) {
					} else if yym1622 {
						z.EncBinaryMarshal(yy1621)
					} else if !yym1622 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1621)
					} else {
						z.EncFallback(yy1621)
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[5] {
					yy1624 := &x.FinishedAt
					yym1625 := z.EncBinary()
					_ = yym1625
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1624) {
					} else if yym1625 {
						z.EncBinaryMarshal(yy1624)
					} else if !yym1625 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1624)
					} else {
						z.EncFallback(yy1624)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1605[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1626 := &x.FinishedAt
					yym1627 := z.EncBinary()
					_ = yym1627
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1626) {
					} else if yym1627 {
						z.EncBinaryMarshal(yy1626)
					} else if !yym1627 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1626)
					} else {
						z.EncFallback(yy1626)
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[6] {
					yym1629 := z.EncBinary()
					_ = yym1629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1605[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1630 := z.EncBinary()
					_ = yym1630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1631 := z.DecBinary()
	_ = yym1631
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1632 := r.ContainerType()
		if yyct1632 == codecSelferValueTypeMap1234 {
			yyl1632 := r.ReadMapStart()
			if yyl1632 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1632, d)
			}
		} else if yyct1632 == codecSelferValueTypeArray1234 {
			yyl1632 := r.ReadArrayStart()
			if yyl1632 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1632, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1633Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1633Slc
	var yyhl1633 bool = l >= 0
	for yyj1633 := 0; ; yyj1633++ {
		if yyhl1633 {
			if yyj1633 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1633Slc = r.DecodeBytes(yys1633Slc, true, true)
		yys1633 := string(yys1633Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1633 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1638 := &x.StartedAt
				yym1639 := z.DecBinary()
				_ = yym1639
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1638) {
				} else if yym1639 {
					z.DecBinaryUnmarshal(yyv1638)
				} else if !yym1639 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1638)
				} else {
					z.DecFallback(yyv1638, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1640 := &x.FinishedAt
				yym1641 := z.DecBinary()
				_ = yym1641
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1640) {
				} else if yym1641 {
					z.DecBinaryUnmarshal(yyv1640)
				} else if !yym1641 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1640)
				} else {
					z.DecFallback(yyv1640, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1633)
		} // end switch yys1633
	} // end for yyj1633
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1643 int
	var yyb1643 bool
	var yyhl1643 bool = l >= 0
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1648 := &x.StartedAt
		yym1649 := z.DecBinary()
		_ = yym1649
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1648) {
		} else if yym1649 {
			z.DecBinaryUnmarshal(yyv1648)
		} else if !yym1649 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1648)
		} else {
			z.DecFallback(yyv1648, false)
		}
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1650 := &x.FinishedAt
		yym1651 := z.DecBinary()
		_ = yym1651
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1650) {
		} else if yym1651 {
			z.DecBinaryUnmarshal(yyv1650)
		} else if !yym1651 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1650)
		} else {
			z.DecFallback(yyv1650, false)
		}
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1643++
		if yyhl1643 {
			yyb1643 = yyj1643 > l
		} else {
			yyb1643 = r.CheckBreak()
		}
		if yyb1643 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1643-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1653 := z.EncBinary()
		_ = yym1653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1654 := !z.EncBinary()
			yy2arr1654 := z.EncBasicHandle().StructToArray
			var yyq1654 [3]bool
			_, _, _ = yysep1654, yyq1654, yy2arr1654
			const yyr1654 bool = false
			yyq1654[0] = x.Waiting != nil
			yyq1654[1] = x.Running != nil
			yyq1654[2] = x.Terminated != nil
			var yynn1654 int
			if yyr1654 || yy2arr1654 {
				r.EncodeArrayStart(3)
			} else {
				yynn1654 = 0
				for _, b := range yyq1654 {
					if b {
						yynn1654++
					}
				}
				r.EncodeMapStart(yynn1654)
				yynn1654 = 0
			}
			if yyr1654 || yy2arr1654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1654[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1654[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1654 || yy2arr1654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1654[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1654[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1654 || yy2arr1654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1654[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1654[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1654 || yy2arr1654 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1658 := z.DecBinary()
	_ = yym1658
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1659 := r.ContainerType()
		if yyct1659 == codecSelferValueTypeMap1234 {
			yyl1659 := r.ReadMapStart()
			if yyl1659 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1659, d)
			}
		} else if yyct1659 == codecSelferValueTypeArray1234 {
			yyl1659 := r.ReadArrayStart()
			if yyl1659 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1659, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1660Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1660Slc
	var yyhl1660 bool = l >= 0
	for yyj1660 := 0; ; yyj1660++ {
		if yyhl1660 {
			if yyj1660 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1660Slc = r.DecodeBytes(yys1660Slc, true, true)
		yys1660 := string(yys1660Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1660 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1660)
		} // end switch yys1660
	} // end for yyj1660
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1664 int
	var yyb1664 bool
	var yyhl1664 bool = l >= 0
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1664++
		if yyhl1664 {
			yyb1664 = yyj1664 > l
		} else {
			yyb1664 = r.CheckBreak()
		}
		if yyb1664 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1664-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1668 := z.EncBinary()
		_ = yym1668
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1669 := !z.EncBinary()
			yy2arr1669 := z.EncBasicHandle().StructToArray
			var yyq1669 [8]bool
			_, _, _ = yysep1669, yyq1669, yy2arr1669
			const yyr1669 bool = false
			yyq1669[1] = true
			yyq1669[2] = true
			yyq1669[7] = x.ContainerID != ""
			var yynn1669 int
			if yyr1669 || yy2arr1669 {
				r.EncodeArrayStart(8)
			} else {
				yynn1669 = 5
				for _, b := range yyq1669 {
					if b {
						yynn1669++
					}
				}
				r.EncodeMapStart(yynn1669)
				yynn1669 = 0
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1671 := z.EncBinary()
				_ = yym1671
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1672 := z.EncBinary()
				_ = yym1672
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[1] {
					yy1674 := &x.State
					yy1674.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1669[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1675 := &x.State
					yy1675.CodecEncodeSelf(e)
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[2] {
					yy1677 := &x.LastTerminationState
					yy1677.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1669[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1678 := &x.LastTerminationState
					yy1678.CodecEncodeSelf(e)
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1680 := z.EncBinary()
				_ = yym1680
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1681 := z.EncBinary()
				_ = yym1681
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1683 := z.EncBinary()
				_ = yym1683
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1684 := z.EncBinary()
				_ = yym1684
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1686 := z.EncBinary()
				_ = yym1686
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1687 := z.EncBinary()
				_ = yym1687
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1689 := z.EncBinary()
				_ = yym1689
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1690 := z.EncBinary()
				_ = yym1690
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[7] {
					yym1692 := z.EncBinary()
					_ = yym1692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1669[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1693 := z.EncBinary()
					_ = yym1693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1694 := z.DecBinary()
	_ = yym1694
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1695 := r.ContainerType()
		if yyct1695 == codecSelferValueTypeMap1234 {
			yyl1695 := r.ReadMapStart()
			if yyl1695 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1695, d)
			}
		} else if yyct1695 == codecSelferValueTypeArray1234 {
			yyl1695 := r.ReadArrayStart()
			if yyl1695 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1695, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1696Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1696Slc
	var yyhl1696 bool = l >= 0
	for yyj1696 := 0; ; yyj1696++ {
		if yyhl1696 {
			if yyj1696 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1696Slc = r.DecodeBytes(yys1696Slc, true, true)
		yys1696 := string(yys1696Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1696 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1698 := &x.State
				yyv1698.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1699 := &x.LastTerminationState
				yyv1699.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1696)
		} // end switch yys1696
	} // end for yyj1696
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1705 int
	var yyb1705 bool
	var yyhl1705 bool = l >= 0
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1707 := &x.State
		yyv1707.CodecDecodeSelf(d)
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1708 := &x.LastTerminationState
		yyv1708.CodecDecodeSelf(d)
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1705++
		if yyhl1705 {
			yyb1705 = yyj1705 > l
		} else {
			yyb1705 = r.CheckBreak()
		}
		if yyb1705 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1705-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1714 := z.EncBinary()
	_ = yym1714
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1715 := z.DecBinary()
	_ = yym1715
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1716 := z.EncBinary()
	_ = yym1716
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1717 := z.DecBinary()
	_ = yym1717
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1718 := z.EncBinary()
		_ = yym1718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1719 := !z.EncBinary()
			yy2arr1719 := z.EncBasicHandle().StructToArray
			var yyq1719 [6]bool
			_, _, _ = yysep1719, yyq1719, yy2arr1719
			const yyr1719 bool = false
			yyq1719[2] = true
			yyq1719[3] = true
			yyq1719[4] = x.Reason != ""
			yyq1719[5] = x.Message != ""
			var yynn1719 int
			if yyr1719 || yy2arr1719 {
				r.EncodeArrayStart(6)
			} else {
				yynn1719 = 2
				for _, b := range yyq1719 {
					if b {
						yynn1719++
					}
				}
				r.EncodeMapStart(yynn1719)
				yynn1719 = 0
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[2] {
					yy1723 := &x.LastProbeTime
					yym1724 := z.EncBinary()
					_ = yym1724
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1723) {
					} else if yym1724 {
						z.EncBinaryMarshal(yy1723)
					} else if !yym1724 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1723)
					} else {
						z.EncFallback(yy1723)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1719[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1725 := &x.LastProbeTime
					yym1726 := z.EncBinary()
					_ = yym1726
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1725) {
					} else if yym1726 {
						z.EncBinaryMarshal(yy1725)
					} else if !yym1726 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1725)
					} else {
						z.EncFallback(yy1725)
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[3] {
					yy1728 := &x.LastTransitionTime
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1728) {
					} else if yym1729 {
						z.EncBinaryMarshal(yy1728)
					} else if !yym1729 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1728)
					} else {
						z.EncFallback(yy1728)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1719[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1730 := &x.LastTransitionTime
					yym1731 := z.EncBinary()
					_ = yym1731
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1730) {
					} else if yym1731 {
						z.EncBinaryMarshal(yy1730)
					} else if !yym1731 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1730)
					} else {
						z.EncFallback(yy1730)
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[4] {
					yym1733 := z.EncBinary()
					_ = yym1733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1719[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1734 := z.EncBinary()
					_ = yym1734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[5] {
					yym1736 := z.EncBinary()
					_ = yym1736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1719[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1737 := z.EncBinary()
					_ = yym1737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1738 := z.DecBinary()
	_ = yym1738
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1739 := r.ContainerType()
		if yyct1739 == codecSelferValueTypeMap1234 {
			yyl1739 := r.ReadMapStart()
			if yyl1739 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1739, d)
			}
		} else if yyct1739 == codecSelferValueTypeArray1234 {
			yyl1739 := r.ReadArrayStart()
			if yyl1739 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1739, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1740Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1740Slc
	var yyhl1740 bool = l >= 0
	for yyj1740 := 0; ; yyj1740++ {
		if yyhl1740 {
			if yyj1740 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1740Slc = r.DecodeBytes(yys1740Slc, true, true)
		yys1740 := string(yys1740Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1740 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1743 := &x.LastProbeTime
				yym1744 := z.DecBinary()
				_ = yym1744
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1743) {
				} else if yym1744 {
					z.DecBinaryUnmarshal(yyv1743)
				} else if !yym1744 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1743)
				} else {
					z.DecFallback(yyv1743, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1745 := &x.LastTransitionTime
				yym1746 := z.DecBinary()
				_ = yym1746
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1745) {
				} else if yym1746 {
					z.DecBinaryUnmarshal(yyv1745)
				} else if !yym1746 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1745)
				} else {
					z.DecFallback(yyv1745, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1740)
		} // end switch yys1740
	} // end for yyj1740
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1749 int
	var yyb1749 bool
	var yyhl1749 bool = l >= 0
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1752 := &x.LastProbeTime
		yym1753 := z.DecBinary()
		_ = yym1753
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1752) {
		} else if yym1753 {
			z.DecBinaryUnmarshal(yyv1752)
		} else if !yym1753 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1752)
		} else {
			z.DecFallback(yyv1752, false)
		}
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1754 := &x.LastTransitionTime
		yym1755 := z.DecBinary()
		_ = yym1755
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1754) {
		} else if yym1755 {
			z.DecBinaryUnmarshal(yyv1754)
		} else if !yym1755 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1754)
		} else {
			z.DecFallback(yyv1754, false)
		}
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1749++
		if yyhl1749 {
			yyb1749 = yyj1749 > l
		} else {
			yyb1749 = r.CheckBreak()
		}
		if yyb1749 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1749-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1758 := z.EncBinary()
	_ = yym1758
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1759 := z.DecBinary()
	_ = yym1759
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1760 := z.EncBinary()
		_ = yym1760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1761 := !z.EncBinary()
			yy2arr1761 := z.EncBasicHandle().StructToArray
			var yyq1761 [4]bool
			_, _, _ = yysep1761, yyq1761, yy2arr1761
			const yyr1761 bool = false
			yyq1761[0] = x.Kind != ""
			yyq1761[1] = x.APIVersion != ""
			yyq1761[2] = true
			var yynn1761 int
			if yyr1761 || yy2arr1761 {
				r.EncodeArrayStart(4)
			} else {
				yynn1761 = 1
				for _, b := range yyq1761 {
					if b {
						yynn1761++
					}
				}
				r.EncodeMapStart(yynn1761)
				yynn1761 = 0
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1761[0] {
					yym1763 := z.EncBinary()
					_ = yym1763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1761[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1764 := z.EncBinary()
					_ = yym1764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1761[1] {
					yym1766 := z.EncBinary()
					_ = yym1766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1761[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1767 := z.EncBinary()
					_ = yym1767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1761[2] {
					yy1769 := &x.ListMeta
					yym1770 := z.EncBinary()
					_ = yym1770
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1769) {
					} else {
						z.EncFallback(yy1769)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1761[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1771 := &x.ListMeta
					yym1772 := z.EncBinary()
					_ = yym1772
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1771) {
					} else {
						z.EncFallback(yy1771)
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1774 := z.EncBinary()
					_ = yym1774
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1775 := z.EncBinary()
					_ = yym1775
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1776 := z.DecBinary()
	_ = yym1776
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1777 := r.ContainerType()
		if yyct1777 == codecSelferValueTypeMap1234 {
			yyl1777 := r.ReadMapStart()
			if yyl1777 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1777, d)
			}
		} else if yyct1777 == codecSelferValueTypeArray1234 {
			yyl1777 := r.ReadArrayStart()
			if yyl1777 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1777, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1778Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1778Slc
	var yyhl1778 bool = l >= 0
	for yyj1778 := 0; ; yyj1778++ {
		if yyhl1778 {
			if yyj1778 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1778Slc = r.DecodeBytes(yys1778Slc, true, true)
		yys1778 := string(yys1778Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1778 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1781 := &x.ListMeta
				yym1782 := z.DecBinary()
				_ = yym1782
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1781) {
				} else {
					z.DecFallback(yyv1781, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1783 := &x.Items
				yym1784 := z.DecBinary()
				_ = yym1784
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1783), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1778)
		} // end switch yys1778
	} // end for yyj1778
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1785 int
	var yyb1785 bool
	var yyhl1785 bool = l >= 0
	yyj1785++
	if yyhl1785 {
		yyb1785 = yyj1785 > l
	} else {
		yyb1785 = r.CheckBreak()
	}
	if yyb1785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1785++
	if yyhl1785 {
		yyb1785 = yyj1785 > l
	} else {
		yyb1785 = r.CheckBreak()
	}
	if yyb1785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1785++
	if yyhl1785 {
		yyb1785 = yyj1785 > l
	} else {
		yyb1785 = r.CheckBreak()
	}
	if yyb1785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1788 := &x.ListMeta
		yym1789 := z.DecBinary()
		_ = yym1789
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1788) {
		} else {
			z.DecFallback(yyv1788, false)
		}
	}
	yyj1785++
	if yyhl1785 {
		yyb1785 = yyj1785 > l
	} else {
		yyb1785 = r.CheckBreak()
	}
	if yyb1785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1790 := &x.Items
		yym1791 := z.DecBinary()
		_ = yym1791
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1790), d)
		}
	}
	for {
		yyj1785++
		if yyhl1785 {
			yyb1785 = yyj1785 > l
		} else {
			yyb1785 = r.CheckBreak()
		}
		if yyb1785 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1785-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1792 := z.EncBinary()
	_ = yym1792
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1793 := z.DecBinary()
	_ = yym1793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1794 := z.EncBinary()
		_ = yym1794
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1795 := !z.EncBinary()
			yy2arr1795 := z.EncBasicHandle().StructToArray
			var yyq1795 [1]bool
			_, _, _ = yysep1795, yyq1795, yy2arr1795
			const yyr1795 bool = false
			var yynn1795 int
			if yyr1795 || yy2arr1795 {
				r.EncodeArrayStart(1)
			} else {
				yynn1795 = 1
				for _, b := range yyq1795 {
					if b {
						yynn1795++
					}
				}
				r.EncodeMapStart(yynn1795)
				yynn1795 = 0
			}
			if yyr1795 || yy2arr1795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1797 := z.EncBinary()
					_ = yym1797
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1798 := z.EncBinary()
					_ = yym1798
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1795 || yy2arr1795 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1799 := z.DecBinary()
	_ = yym1799
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1800 := r.ContainerType()
		if yyct1800 == codecSelferValueTypeMap1234 {
			yyl1800 := r.ReadMapStart()
			if yyl1800 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1800, d)
			}
		} else if yyct1800 == codecSelferValueTypeArray1234 {
			yyl1800 := r.ReadArrayStart()
			if yyl1800 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1800, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1801Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1801Slc
	var yyhl1801 bool = l >= 0
	for yyj1801 := 0; ; yyj1801++ {
		if yyhl1801 {
			if yyj1801 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1801Slc = r.DecodeBytes(yys1801Slc, true, true)
		yys1801 := string(yys1801Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1801 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1802 := &x.NodeSelectorTerms
				yym1803 := z.DecBinary()
				_ = yym1803
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1802), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1801)
		} // end switch yys1801
	} // end for yyj1801
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1804 int
	var yyb1804 bool
	var yyhl1804 bool = l >= 0
	yyj1804++
	if yyhl1804 {
		yyb1804 = yyj1804 > l
	} else {
		yyb1804 = r.CheckBreak()
	}
	if yyb1804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1805 := &x.NodeSelectorTerms
		yym1806 := z.DecBinary()
		_ = yym1806
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1805), d)
		}
	}
	for {
		yyj1804++
		if yyhl1804 {
			yyb1804 = yyj1804 > l
		} else {
			yyb1804 = r.CheckBreak()
		}
		if yyb1804 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1804-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1807 := z.EncBinary()
		_ = yym1807
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1808 := !z.EncBinary()
			yy2arr1808 := z.EncBasicHandle().StructToArray
			var yyq1808 [1]bool
			_, _, _ = yysep1808, yyq1808, yy2arr1808
			const yyr1808 bool = false
			var yynn1808 int
			if yyr1808 || yy2arr1808 {
				r.EncodeArrayStart(1)
			} else {
				yynn1808 = 1
				for _, b := range yyq1808 {
					if b {
						yynn1808++
					}
				}
				r.EncodeMapStart(yynn1808)
				yynn1808 = 0
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1810 := z.EncBinary()
					_ = yym1810
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1811 := z.EncBinary()
					_ = yym1811
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1812 := z.DecBinary()
	_ = yym1812
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1813 := r.ContainerType()
		if yyct1813 == codecSelferValueTypeMap1234 {
			yyl1813 := r.ReadMapStart()
			if yyl1813 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1813, d)
			}
		} else if yyct1813 == codecSelferValueTypeArray1234 {
			yyl1813 := r.ReadArrayStart()
			if yyl1813 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1813, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1814Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1814Slc
	var yyhl1814 bool = l >= 0
	for yyj1814 := 0; ; yyj1814++ {
		if yyhl1814 {
			if yyj1814 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1814Slc = r.DecodeBytes(yys1814Slc, true, true)
		yys1814 := string(yys1814Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1814 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1815 := &x.MatchExpressions
				yym1816 := z.DecBinary()
				_ = yym1816
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1815), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1814)
		} // end switch yys1814
	} // end for yyj1814
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1817 int
	var yyb1817 bool
	var yyhl1817 bool = l >= 0
	yyj1817++
	if yyhl1817 {
		yyb1817 = yyj1817 > l
	} else {
		yyb1817 = r.CheckBreak()
	}
	if yyb1817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1818 := &x.MatchExpressions
		yym1819 := z.DecBinary()
		_ = yym1819
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1818), d)
		}
	}
	for {
		yyj1817++
		if yyhl1817 {
			yyb1817 = yyj1817 > l
		} else {
			yyb1817 = r.CheckBreak()
		}
		if yyb1817 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1817-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1820 := z.EncBinary()
		_ = yym1820
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1821 := !z.EncBinary()
			yy2arr1821 := z.EncBasicHandle().StructToArray
			var yyq1821 [3]bool
			_, _, _ = yysep1821, yyq1821, yy2arr1821
			const yyr1821 bool = false
			yyq1821[2] = len(x.Values) != 0
			var yynn1821 int
			if yyr1821 || yy2arr1821 {
				r.EncodeArrayStart(3)
			} else {
				yynn1821 = 2
				for _, b := range yyq1821 {
					if b {
						yynn1821++
					}
				}
				r.EncodeMapStart(yynn1821)
				yynn1821 = 0
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1823 := z.EncBinary()
				_ = yym1823
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1824 := z.EncBinary()
				_ = yym1824
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1821[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1827 := z.EncBinary()
						_ = yym1827
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1821[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1828 := z.EncBinary()
						_ = yym1828
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1829 := z.DecBinary()
	_ = yym1829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1830 := r.ContainerType()
		if yyct1830 == codecSelferValueTypeMap1234 {
			yyl1830 := r.ReadMapStart()
			if yyl1830 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1830, d)
			}
		} else if yyct1830 == codecSelferValueTypeArray1234 {
			yyl1830 := r.ReadArrayStart()
			if yyl1830 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1830, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1831Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1831Slc
	var yyhl1831 bool = l >= 0
	for yyj1831 := 0; ; yyj1831++ {
		if yyhl1831 {
			if yyj1831 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1831Slc = r.DecodeBytes(yys1831Slc, true, true)
		yys1831 := string(yys1831Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1831 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1834 := &x.Values
				yym1835 := z.DecBinary()
				_ = yym1835
				if false {
				} else {
					z.F.DecSliceStringX(yyv1834, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1831)
		} // end switch yys1831
	} // end for yyj1831
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1836 int
	var yyb1836 bool
	var yyhl1836 bool = l >= 0
	yyj1836++
	if yyhl1836 {
		yyb1836 = yyj1836 > l
	} else {
		yyb1836 = r.CheckBreak()
	}
	if yyb1836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1836++
	if yyhl1836 {
		yyb1836 = yyj1836 > l
	} else {
		yyb1836 = r.CheckBreak()
	}
	if yyb1836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1836++
	if yyhl1836 {
		yyb1836 = yyj1836 > l
	} else {
		yyb1836 = r.CheckBreak()
	}
	if yyb1836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1839 := &x.Values
		yym1840 := z.DecBinary()
		_ = yym1840
		if false {
		} else {
			z.F.DecSliceStringX(yyv1839, false, d)
		}
	}
	for {
		yyj1836++
		if yyhl1836 {
			yyb1836 = yyj1836 > l
		} else {
			yyb1836 = r.CheckBreak()
		}
		if yyb1836 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1836-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1841 := z.EncBinary()
	_ = yym1841
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1842 := z.DecBinary()
	_ = yym1842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1843 := z.EncBinary()
		_ = yym1843
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1844 := !z.EncBinary()
			yy2arr1844 := z.EncBasicHandle().StructToArray
			var yyq1844 [3]bool
			_, _, _ = yysep1844, yyq1844, yy2arr1844
			const yyr1844 bool = false
			yyq1844[0] = x.NodeAffinity != nil
			yyq1844[1] = x.PodAffinity != nil
			yyq1844[2] = x.PodAntiAffinity != nil
			var yynn1844 int
			if yyr1844 || yy2arr1844 {
				r.EncodeArrayStart(3)
			} else {
				yynn1844 = 0
				for _, b := range yyq1844 {
					if b {
						yynn1844++
					}
				}
				r.EncodeMapStart(yynn1844)
				yynn1844 = 0
			}
			if yyr1844 || yy2arr1844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1844[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1844[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1844 || yy2arr1844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1844[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1844[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1844 || yy2arr1844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1844[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1844[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1844 || yy2arr1844 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1848 := z.DecBinary()
	_ = yym1848
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1849 := r.ContainerType()
		if yyct1849 == codecSelferValueTypeMap1234 {
			yyl1849 := r.ReadMapStart()
			if yyl1849 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1849, d)
			}
		} else if yyct1849 == codecSelferValueTypeArray1234 {
			yyl1849 := r.ReadArrayStart()
			if yyl1849 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1849, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1850Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1850Slc
	var yyhl1850 bool = l >= 0
	for yyj1850 := 0; ; yyj1850++ {
		if yyhl1850 {
			if yyj1850 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1850Slc = r.DecodeBytes(yys1850Slc, true, true)
		yys1850 := string(yys1850Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1850 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1850)
		} // end switch yys1850
	} // end for yyj1850
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1854 int
	var yyb1854 bool
	var yyhl1854 bool = l >= 0
	yyj1854++
	if yyhl1854 {
		yyb1854 = yyj1854 > l
	} else {
		yyb1854 = r.CheckBreak()
	}
	if yyb1854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1854++
	if yyhl1854 {
		yyb1854 = yyj1854 > l
	} else {
		yyb1854 = r.CheckBreak()
	}
	if yyb1854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1854++
	if yyhl1854 {
		yyb1854 = yyj1854 > l
	} else {
		yyb1854 = r.CheckBreak()
	}
	if yyb1854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1854++
		if yyhl1854 {
			yyb1854 = yyj1854 > l
		} else {
			yyb1854 = r.CheckBreak()
		}
		if yyb1854 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1854-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1858 := z.EncBinary()
		_ = yym1858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1859 := !z.EncBinary()
			yy2arr1859 := z.EncBasicHandle().StructToArray
			var yyq1859 [2]bool
			_, _, _ = yysep1859, yyq1859, yy2arr1859
			const yyr1859 bool = false
			yyq1859[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1859[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1859 int
			if yyr1859 || yy2arr1859 {
				r.EncodeArrayStart(2)
			} else {
				yynn1859 = 0
				for _, b := range yyq1859 {
					if b {
						yynn1859++
					}
				}
				r.EncodeMapStart(yynn1859)
				yynn1859 = 0
			}
			if yyr1859 || yy2arr1859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1859[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1861 := z.EncBinary()
						_ = yym1861
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1859[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1862 := z.EncBinary()
						_ = yym1862
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1859 || yy2arr1859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1859[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1864 := z.EncBinary()
						_ = yym1864
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1859[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1865 := z.EncBinary()
						_ = yym1865
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1859 || yy2arr1859 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1866 := z.DecBinary()
	_ = yym1866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1867 := r.ContainerType()
		if yyct1867 == codecSelferValueTypeMap1234 {
			yyl1867 := r.ReadMapStart()
			if yyl1867 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1867, d)
			}
		} else if yyct1867 == codecSelferValueTypeArray1234 {
			yyl1867 := r.ReadArrayStart()
			if yyl1867 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1867, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1868Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1868Slc
	var yyhl1868 bool = l >= 0
	for yyj1868 := 0; ; yyj1868++ {
		if yyhl1868 {
			if yyj1868 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1868Slc = r.DecodeBytes(yys1868Slc, true, true)
		yys1868 := string(yys1868Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1868 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1869 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1870 := z.DecBinary()
				_ = yym1870
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1869), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1871 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1872 := z.DecBinary()
				_ = yym1872
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1871), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1868)
		} // end switch yys1868
	} // end for yyj1868
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1873 int
	var yyb1873 bool
	var yyhl1873 bool = l >= 0
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1874 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1875 := z.DecBinary()
		_ = yym1875
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1874), d)
		}
	}
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1876 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1877 := z.DecBinary()
		_ = yym1877
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1876), d)
		}
	}
	for {
		yyj1873++
		if yyhl1873 {
			yyb1873 = yyj1873 > l
		} else {
			yyb1873 = r.CheckBreak()
		}
		if yyb1873 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1873-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1878 := z.EncBinary()
		_ = yym1878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1879 := !z.EncBinary()
			yy2arr1879 := z.EncBasicHandle().StructToArray
			var yyq1879 [2]bool
			_, _, _ = yysep1879, yyq1879, yy2arr1879
			const yyr1879 bool = false
			yyq1879[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1879[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1879 int
			if yyr1879 || yy2arr1879 {
				r.EncodeArrayStart(2)
			} else {
				yynn1879 = 0
				for _, b := range yyq1879 {
					if b {
						yynn1879++
					}
				}
				r.EncodeMapStart(yynn1879)
				yynn1879 = 0
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1881 := z.EncBinary()
						_ = yym1881
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1879[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1882 := z.EncBinary()
						_ = yym1882
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1884 := z.EncBinary()
						_ = yym1884
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1879[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1885 := z.EncBinary()
						_ = yym1885
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1886 := z.DecBinary()
	_ = yym1886
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1887 := r.ContainerType()
		if yyct1887 == codecSelferValueTypeMap1234 {
			yyl1887 := r.ReadMapStart()
			if yyl1887 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1887, d)
			}
		} else if yyct1887 == codecSelferValueTypeArray1234 {
			yyl1887 := r.ReadArrayStart()
			if yyl1887 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1887, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1888Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1888Slc
	var yyhl1888 bool = l >= 0
	for yyj1888 := 0; ; yyj1888++ {
		if yyhl1888 {
			if yyj1888 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1888Slc = r.DecodeBytes(yys1888Slc, true, true)
		yys1888 := string(yys1888Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1888 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1889 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1890 := z.DecBinary()
				_ = yym1890
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1889), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1891 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1892 := z.DecBinary()
				_ = yym1892
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1891), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1888)
		} // end switch yys1888
	} // end for yyj1888
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1893 int
	var yyb1893 bool
	var yyhl1893 bool = l >= 0
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1894 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1895 := z.DecBinary()
		_ = yym1895
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1894), d)
		}
	}
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1896 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1897 := z.DecBinary()
		_ = yym1897
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1896), d)
		}
	}
	for {
		yyj1893++
		if yyhl1893 {
			yyb1893 = yyj1893 > l
		} else {
			yyb1893 = r.CheckBreak()
		}
		if yyb1893 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1893-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1898 := z.EncBinary()
		_ = yym1898
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1899 := !z.EncBinary()
			yy2arr1899 := z.EncBasicHandle().StructToArray
			var yyq1899 [2]bool
			_, _, _ = yysep1899, yyq1899, yy2arr1899
			const yyr1899 bool = false
			var yynn1899 int
			if yyr1899 || yy2arr1899 {
				r.EncodeArrayStart(2)
			} else {
				yynn1899 = 2
				for _, b := range yyq1899 {
					if b {
						yynn1899++
					}
				}
				r.EncodeMapStart(yynn1899)
				yynn1899 = 0
			}
			if yyr1899 || yy2arr1899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1901 := z.EncBinary()
				_ = yym1901
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1902 := z.EncBinary()
				_ = yym1902
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1899 || yy2arr1899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1904 := &x.PodAffinityTerm
				yy1904.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1905 := &x.PodAffinityTerm
				yy1905.CodecEncodeSelf(e)
			}
			if yyr1899 || yy2arr1899 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1906 := z.DecBinary()
	_ = yym1906
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1907 := r.ContainerType()
		if yyct1907 == codecSelferValueTypeMap1234 {
			yyl1907 := r.ReadMapStart()
			if yyl1907 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1907, d)
			}
		} else if yyct1907 == codecSelferValueTypeArray1234 {
			yyl1907 := r.ReadArrayStart()
			if yyl1907 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1907, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1908Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1908Slc
	var yyhl1908 bool = l >= 0
	for yyj1908 := 0; ; yyj1908++ {
		if yyhl1908 {
			if yyj1908 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1908Slc = r.DecodeBytes(yys1908Slc, true, true)
		yys1908 := string(yys1908Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1908 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1910 := &x.PodAffinityTerm
				yyv1910.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1908)
		} // end switch yys1908
	} // end for yyj1908
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1911 int
	var yyb1911 bool
	var yyhl1911 bool = l >= 0
	yyj1911++
	if yyhl1911 {
		yyb1911 = yyj1911 > l
	} else {
		yyb1911 = r.CheckBreak()
	}
	if yyb1911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1911++
	if yyhl1911 {
		yyb1911 = yyj1911 > l
	} else {
		yyb1911 = r.CheckBreak()
	}
	if yyb1911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1913 := &x.PodAffinityTerm
		yyv1913.CodecDecodeSelf(d)
	}
	for {
		yyj1911++
		if yyhl1911 {
			yyb1911 = yyj1911 > l
		} else {
			yyb1911 = r.CheckBreak()
		}
		if yyb1911 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1911-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1914 := z.EncBinary()
		_ = yym1914
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1915 := !z.EncBinary()
			yy2arr1915 := z.EncBasicHandle().StructToArray
			var yyq1915 [3]bool
			_, _, _ = yysep1915, yyq1915, yy2arr1915
			const yyr1915 bool = false
			yyq1915[0] = x.LabelSelector != nil
			yyq1915[2] = x.TopologyKey != ""
			var yynn1915 int
			if yyr1915 || yy2arr1915 {
				r.EncodeArrayStart(3)
			} else {
				yynn1915 = 1
				for _, b := range yyq1915 {
					if b {
						yynn1915++
					}
				}
				r.EncodeMapStart(yynn1915)
				yynn1915 = 0
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1917 := z.EncBinary()
						_ = yym1917
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1915[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1918 := z.EncBinary()
						_ = yym1918
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1920 := z.EncBinary()
					_ = yym1920
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1921 := z.EncBinary()
					_ = yym1921
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[2] {
					yym1923 := z.EncBinary()
					_ = yym1923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1915[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1925 := z.DecBinary()
	_ = yym1925
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1926 := r.ContainerType()
		if yyct1926 == codecSelferValueTypeMap1234 {
			yyl1926 := r.ReadMapStart()
			if yyl1926 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1926, d)
			}
		} else if yyct1926 == codecSelferValueTypeArray1234 {
			yyl1926 := r.ReadArrayStart()
			if yyl1926 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1926, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1927Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1927Slc
	var yyhl1927 bool = l >= 0
	for yyj1927 := 0; ; yyj1927++ {
		if yyhl1927 {
			if yyj1927 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1927Slc = r.DecodeBytes(yys1927Slc, true, true)
		yys1927 := string(yys1927Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1927 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1929 := z.DecBinary()
				_ = yym1929
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1930 := &x.Namespaces
				yym1931 := z.DecBinary()
				_ = yym1931
				if false {
				} else {
					z.F.DecSliceStringX(yyv1930, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1927)
		} // end switch yys1927
	} // end for yyj1927
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1933 int
	var yyb1933 bool
	var yyhl1933 bool = l >= 0
	yyj1933++
	if yyhl1933 {
		yyb1933 = yyj1933 > l
	} else {
		yyb1933 = r.CheckBreak()
	}
	if yyb1933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1935 := z.DecBinary()
		_ = yym1935
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1933++
	if yyhl1933 {
		yyb1933 = yyj1933 > l
	} else {
		yyb1933 = r.CheckBreak()
	}
	if yyb1933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1936 := &x.Namespaces
		yym1937 := z.DecBinary()
		_ = yym1937
		if false {
		} else {
			z.F.DecSliceStringX(yyv1936, false, d)
		}
	}
	yyj1933++
	if yyhl1933 {
		yyb1933 = yyj1933 > l
	} else {
		yyb1933 = r.CheckBreak()
	}
	if yyb1933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1933++
		if yyhl1933 {
			yyb1933 = yyj1933 > l
		} else {
			yyb1933 = r.CheckBreak()
		}
		if yyb1933 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1933-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1939 := z.EncBinary()
		_ = yym1939
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1940 := !z.EncBinary()
			yy2arr1940 := z.EncBasicHandle().StructToArray
			var yyq1940 [2]bool
			_, _, _ = yysep1940, yyq1940, yy2arr1940
			const yyr1940 bool = false
			yyq1940[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1940[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1940 int
			if yyr1940 || yy2arr1940 {
				r.EncodeArrayStart(2)
			} else {
				yynn1940 = 0
				for _, b := range yyq1940 {
					if b {
						yynn1940++
					}
				}
				r.EncodeMapStart(yynn1940)
				yynn1940 = 0
			}
			if yyr1940 || yy2arr1940 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1940[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1940[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1940 || yy2arr1940 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1940[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1943 := z.EncBinary()
						_ = yym1943
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1940[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1944 := z.EncBinary()
						_ = yym1944
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1940 || yy2arr1940 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1945 := z.DecBinary()
	_ = yym1945
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1946 := r.ContainerType()
		if yyct1946 == codecSelferValueTypeMap1234 {
			yyl1946 := r.ReadMapStart()
			if yyl1946 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1946, d)
			}
		} else if yyct1946 == codecSelferValueTypeArray1234 {
			yyl1946 := r.ReadArrayStart()
			if yyl1946 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1946, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1947Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1947Slc
	var yyhl1947 bool = l >= 0
	for yyj1947 := 0; ; yyj1947++ {
		if yyhl1947 {
			if yyj1947 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1947Slc = r.DecodeBytes(yys1947Slc, true, true)
		yys1947 := string(yys1947Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1947 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1949 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1950 := z.DecBinary()
				_ = yym1950
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1949), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1947)
		} // end switch yys1947
	} // end for yyj1947
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1951 int
	var yyb1951 bool
	var yyhl1951 bool = l >= 0
	yyj1951++
	if yyhl1951 {
		yyb1951 = yyj1951 > l
	} else {
		yyb1951 = r.CheckBreak()
	}
	if yyb1951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1951++
	if yyhl1951 {
		yyb1951 = yyj1951 > l
	} else {
		yyb1951 = r.CheckBreak()
	}
	if yyb1951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1953 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1954 := z.DecBinary()
		_ = yym1954
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1953), d)
		}
	}
	for {
		yyj1951++
		if yyhl1951 {
			yyb1951 = yyj1951 > l
		} else {
			yyb1951 = r.CheckBreak()
		}
		if yyb1951 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1951-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1955 := z.EncBinary()
		_ = yym1955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1956 := !z.EncBinary()
			yy2arr1956 := z.EncBasicHandle().StructToArray
			var yyq1956 [2]bool
			_, _, _ = yysep1956, yyq1956, yy2arr1956
			const yyr1956 bool = false
			var yynn1956 int
			if yyr1956 || yy2arr1956 {
				r.EncodeArrayStart(2)
			} else {
				yynn1956 = 2
				for _, b := range yyq1956 {
					if b {
						yynn1956++
					}
				}
				r.EncodeMapStart(yynn1956)
				yynn1956 = 0
			}
			if yyr1956 || yy2arr1956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1958 := z.EncBinary()
				_ = yym1958
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1959 := z.EncBinary()
				_ = yym1959
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1956 || yy2arr1956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1961 := &x.Preference
				yy1961.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1962 := &x.Preference
				yy1962.CodecEncodeSelf(e)
			}
			if yyr1956 || yy2arr1956 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1963 := z.DecBinary()
	_ = yym1963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1964 := r.ContainerType()
		if yyct1964 == codecSelferValueTypeMap1234 {
			yyl1964 := r.ReadMapStart()
			if yyl1964 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1964, d)
			}
		} else if yyct1964 == codecSelferValueTypeArray1234 {
			yyl1964 := r.ReadArrayStart()
			if yyl1964 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1965Slc
	var yyhl1965 bool = l >= 0
	for yyj1965 := 0; ; yyj1965++ {
		if yyhl1965 {
			if yyj1965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1965Slc = r.DecodeBytes(yys1965Slc, true, true)
		yys1965 := string(yys1965Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1965 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1967 := &x.Preference
				yyv1967.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1965)
		} // end switch yys1965
	} // end for yyj1965
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1968 int
	var yyb1968 bool
	var yyhl1968 bool = l >= 0
	yyj1968++
	if yyhl1968 {
		yyb1968 = yyj1968 > l
	} else {
		yyb1968 = r.CheckBreak()
	}
	if yyb1968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1968++
	if yyhl1968 {
		yyb1968 = yyj1968 > l
	} else {
		yyb1968 = r.CheckBreak()
	}
	if yyb1968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1970 := &x.Preference
		yyv1970.CodecDecodeSelf(d)
	}
	for {
		yyj1968++
		if yyhl1968 {
			yyb1968 = yyj1968 > l
		} else {
			yyb1968 = r.CheckBreak()
		}
		if yyb1968 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1968-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1971 := z.EncBinary()
		_ = yym1971
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1972 := !z.EncBinary()
			yy2arr1972 := z.EncBasicHandle().StructToArray
			var yyq1972 [3]bool
			_, _, _ = yysep1972, yyq1972, yy2arr1972
			const yyr1972 bool = false
			yyq1972[1] = x.Value != ""
			var yynn1972 int
			if yyr1972 || yy2arr1972 {
				r.EncodeArrayStart(3)
			} else {
				yynn1972 = 2
				for _, b := range yyq1972 {
					if b {
						yynn1972++
					}
				}
				r.EncodeMapStart(yynn1972)
				yynn1972 = 0
			}
			if yyr1972 || yy2arr1972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1974 := z.EncBinary()
				_ = yym1974
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1975 := z.EncBinary()
				_ = yym1975
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1972 || yy2arr1972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1972[1] {
					yym1977 := z.EncBinary()
					_ = yym1977
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1972[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1978 := z.EncBinary()
					_ = yym1978
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1972 || yy2arr1972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1972 || yy2arr1972 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1980 := z.DecBinary()
	_ = yym1980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1981 := r.ContainerType()
		if yyct1981 == codecSelferValueTypeMap1234 {
			yyl1981 := r.ReadMapStart()
			if yyl1981 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1981, d)
			}
		} else if yyct1981 == codecSelferValueTypeArray1234 {
			yyl1981 := r.ReadArrayStart()
			if yyl1981 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1981, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1982Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1982Slc
	var yyhl1982 bool = l >= 0
	for yyj1982 := 0; ; yyj1982++ {
		if yyhl1982 {
			if yyj1982 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1982Slc = r.DecodeBytes(yys1982Slc, true, true)
		yys1982 := string(yys1982Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1982 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1982)
		} // end switch yys1982
	} // end for yyj1982
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1986 int
	var yyb1986 bool
	var yyhl1986 bool = l >= 0
	yyj1986++
	if yyhl1986 {
		yyb1986 = yyj1986 > l
	} else {
		yyb1986 = r.CheckBreak()
	}
	if yyb1986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1986++
	if yyhl1986 {
		yyb1986 = yyj1986 > l
	} else {
		yyb1986 = r.CheckBreak()
	}
	if yyb1986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1986++
	if yyhl1986 {
		yyb1986 = yyj1986 > l
	} else {
		yyb1986 = r.CheckBreak()
	}
	if yyb1986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1986++
		if yyhl1986 {
			yyb1986 = yyj1986 > l
		} else {
			yyb1986 = r.CheckBreak()
		}
		if yyb1986 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1986-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1990 := z.EncBinary()
	_ = yym1990
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1991 := z.DecBinary()
	_ = yym1991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1992 := z.EncBinary()
		_ = yym1992
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1993 := !z.EncBinary()
			yy2arr1993 := z.EncBasicHandle().StructToArray
			var yyq1993 [4]bool
			_, _, _ = yysep1993, yyq1993, yy2arr1993
			const yyr1993 bool = false
			yyq1993[0] = x.Key != ""
			yyq1993[1] = x.Operator != ""
			yyq1993[2] = x.Value != ""
			yyq1993[3] = x.Effect != ""
			var yynn1993 int
			if yyr1993 || yy2arr1993 {
				r.EncodeArrayStart(4)
			} else {
				yynn1993 = 0
				for _, b := range yyq1993 {
					if b {
						yynn1993++
					}
				}
				r.EncodeMapStart(yynn1993)
				yynn1993 = 0
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[0] {
					yym1995 := z.EncBinary()
					_ = yym1995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1993[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1996 := z.EncBinary()
					_ = yym1996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1993[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[2] {
					yym1999 := z.EncBinary()
					_ = yym1999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1993[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2000 := z.EncBinary()
					_ = yym2000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1993[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2002 := z.DecBinary()
	_ = yym2002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2003 := r.ContainerType()
		if yyct2003 == codecSelferValueTypeMap1234 {
			yyl2003 := r.ReadMapStart()
			if yyl2003 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2003, d)
			}
		} else if yyct2003 == codecSelferValueTypeArray1234 {
			yyl2003 := r.ReadArrayStart()
			if yyl2003 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2003, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2004Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2004Slc
	var yyhl2004 bool = l >= 0
	for yyj2004 := 0; ; yyj2004++ {
		if yyhl2004 {
			if yyj2004 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2004Slc = r.DecodeBytes(yys2004Slc, true, true)
		yys2004 := string(yys2004Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2004 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2004)
		} // end switch yys2004
	} // end for yyj2004
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2009 int
	var yyb2009 bool
	var yyhl2009 bool = l >= 0
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2009++
		if yyhl2009 {
			yyb2009 = yyj2009 > l
		} else {
			yyb2009 = r.CheckBreak()
		}
		if yyb2009 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2009-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2014 := z.EncBinary()
	_ = yym2014
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2015 := z.DecBinary()
	_ = yym2015
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2016 := z.EncBinary()
		_ = yym2016
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2017 := !z.EncBinary()
			yy2arr2017 := z.EncBasicHandle().StructToArray
			var yyq2017 [13]bool
			_, _, _ = yysep2017, yyq2017, yy2arr2017
			const yyr2017 bool = false
			yyq2017[2] = x.RestartPolicy != ""
			yyq2017[3] = x.TerminationGracePeriodSeconds != nil
			yyq2017[4] = x.ActiveDeadlineSeconds != nil
			yyq2017[5] = x.DNSPolicy != ""
			yyq2017[6] = len(x.NodeSelector) != 0
			yyq2017[8] = x.NodeName != ""
			yyq2017[9] = x.SecurityContext != nil
			yyq2017[10] = len(x.ImagePullSecrets) != 0
			yyq2017[11] = x.Hostname != ""
			yyq2017[12] = x.Subdomain != ""
			var yynn2017 int
			if yyr2017 || yy2arr2017 {
				r.EncodeArrayStart(13)
			} else {
				yynn2017 = 3
				for _, b := range yyq2017 {
					if b {
						yynn2017++
					}
				}
				r.EncodeMapStart(yynn2017)
				yynn2017 = 0
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2019 := z.EncBinary()
					_ = yym2019
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2020 := z.EncBinary()
					_ = yym2020
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2022 := z.EncBinary()
					_ = yym2022
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2023 := z.EncBinary()
					_ = yym2023
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2017[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2026 := *x.TerminationGracePeriodSeconds
						yym2027 := z.EncBinary()
						_ = yym2027
						if false {
						} else {
							r.EncodeInt(int64(yy2026))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2017[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2028 := *x.TerminationGracePeriodSeconds
						yym2029 := z.EncBinary()
						_ = yym2029
						if false {
						} else {
							r.EncodeInt(int64(yy2028))
						}
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2031 := *x.ActiveDeadlineSeconds
						yym2032 := z.EncBinary()
						_ = yym2032
						if false {
						} else {
							r.EncodeInt(int64(yy2031))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2017[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2033 := *x.ActiveDeadlineSeconds
						yym2034 := z.EncBinary()
						_ = yym2034
						if false {
						} else {
							r.EncodeInt(int64(yy2033))
						}
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2017[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2037 := z.EncBinary()
						_ = yym2037
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2017[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2038 := z.EncBinary()
						_ = yym2038
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2040 := z.EncBinary()
				_ = yym2040
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2041 := z.EncBinary()
				_ = yym2041
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[8] {
					yym2043 := z.EncBinary()
					_ = yym2043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2017[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2044 := z.EncBinary()
					_ = yym2044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2017[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2047 := z.EncBinary()
						_ = yym2047
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2017[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2048 := z.EncBinary()
						_ = yym2048
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[11] {
					yym2050 := z.EncBinary()
					_ = yym2050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2017[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2051 := z.EncBinary()
					_ = yym2051
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[12] {
					yym2053 := z.EncBinary()
					_ = yym2053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2017[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2054 := z.EncBinary()
					_ = yym2054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2055 := z.DecBinary()
	_ = yym2055
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2056 := r.ContainerType()
		if yyct2056 == codecSelferValueTypeMap1234 {
			yyl2056 := r.ReadMapStart()
			if yyl2056 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2056, d)
			}
		} else if yyct2056 == codecSelferValueTypeArray1234 {
			yyl2056 := r.ReadArrayStart()
			if yyl2056 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2056, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2057Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2057Slc
	var yyhl2057 bool = l >= 0
	for yyj2057 := 0; ; yyj2057++ {
		if yyhl2057 {
			if yyj2057 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2057Slc = r.DecodeBytes(yys2057Slc, true, true)
		yys2057 := string(yys2057Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2057 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2058 := &x.Volumes
				yym2059 := z.DecBinary()
				_ = yym2059
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2058), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2060 := &x.Containers
				yym2061 := z.DecBinary()
				_ = yym2061
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2060), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2064 := z.DecBinary()
				_ = yym2064
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2066 := z.DecBinary()
				_ = yym2066
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2068 := &x.NodeSelector
				yym2069 := z.DecBinary()
				_ = yym2069
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2068, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2073 := &x.ImagePullSecrets
				yym2074 := z.DecBinary()
				_ = yym2074
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2073), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2057)
		} // end switch yys2057
	} // end for yyj2057
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2077 int
	var yyb2077 bool
	var yyhl2077 bool = l >= 0
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2078 := &x.Volumes
		yym2079 := z.DecBinary()
		_ = yym2079
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2078), d)
		}
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2080 := &x.Containers
		yym2081 := z.DecBinary()
		_ = yym2081
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2080), d)
		}
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2084 := z.DecBinary()
		_ = yym2084
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2086 := z.DecBinary()
		_ = yym2086
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2088 := &x.NodeSelector
		yym2089 := z.DecBinary()
		_ = yym2089
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2088, false, d)
		}
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2093 := &x.ImagePullSecrets
		yym2094 := z.DecBinary()
		_ = yym2094
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2093), d)
		}
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2077++
		if yyhl2077 {
			yyb2077 = yyj2077 > l
		} else {
			yyb2077 = r.CheckBreak()
		}
		if yyb2077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2097 := z.EncBinary()
		_ = yym2097
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2098 := !z.EncBinary()
			yy2arr2098 := z.EncBasicHandle().StructToArray
			var yyq2098 [8]bool
			_, _, _ = yysep2098, yyq2098, yy2arr2098
			const yyr2098 bool = false
			yyq2098[0] = x.HostNetwork != false
			yyq2098[1] = x.HostPID != false
			yyq2098[2] = x.HostIPC != false
			yyq2098[3] = x.SELinuxOptions != nil
			yyq2098[4] = x.RunAsUser != nil
			yyq2098[5] = x.RunAsNonRoot != nil
			yyq2098[6] = len(x.SupplementalGroups) != 0
			yyq2098[7] = x.FSGroup != nil
			var yynn2098 int
			if yyr2098 || yy2arr2098 {
				r.EncodeArrayStart(8)
			} else {
				yynn2098 = 0
				for _, b := range yyq2098 {
					if b {
						yynn2098++
					}
				}
				r.EncodeMapStart(yynn2098)
				yynn2098 = 0
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2098[0] {
					yym2100 := z.EncBinary()
					_ = yym2100
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2098[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2101 := z.EncBinary()
					_ = yym2101
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2098[1] {
					yym2103 := z.EncBinary()
					_ = yym2103
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2098[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2104 := z.EncBinary()
					_ = yym2104
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2098[2] {
					yym2106 := z.EncBinary()
					_ = yym2106
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2098[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2107 := z.EncBinary()
					_ = yym2107
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2098[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2098[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2110 := *x.RunAsUser
						yym2111 := z.EncBinary()
						_ = yym2111
						if false {
						} else {
							r.EncodeInt(int64(yy2110))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2112 := *x.RunAsUser
						yym2113 := z.EncBinary()
						_ = yym2113
						if false {
						} else {
							r.EncodeInt(int64(yy2112))
						}
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2098[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2115 := *x.RunAsNonRoot
						yym2116 := z.EncBinary()
						_ = yym2116
						if false {
						} else {
							r.EncodeBool(bool(yy2115))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2117 := *x.RunAsNonRoot
						yym2118 := z.EncBinary()
						_ = yym2118
						if false {
						} else {
							r.EncodeBool(bool(yy2117))
						}
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2098[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2120 := z.EncBinary()
						_ = yym2120
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2121 := z.EncBinary()
						_ = yym2121
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2098[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2123 := *x.FSGroup
						yym2124 := z.EncBinary()
						_ = yym2124
						if false {
						} else {
							r.EncodeInt(int64(yy2123))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2125 := *x.FSGroup
						yym2126 := z.EncBinary()
						_ = yym2126
						if false {
						} else {
							r.EncodeInt(int64(yy2125))
						}
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2127 := z.DecBinary()
	_ = yym2127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2128 := r.ContainerType()
		if yyct2128 == codecSelferValueTypeMap1234 {
			yyl2128 := r.ReadMapStart()
			if yyl2128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2128, d)
			}
		} else if yyct2128 == codecSelferValueTypeArray1234 {
			yyl2128 := r.ReadArrayStart()
			if yyl2128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2129Slc
	var yyhl2129 bool = l >= 0
	for yyj2129 := 0; ; yyj2129++ {
		if yyhl2129 {
			if yyj2129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2129Slc = r.DecodeBytes(yys2129Slc, true, true)
		yys2129 := string(yys2129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2129 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2135 := z.DecBinary()
				_ = yym2135
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2137 := z.DecBinary()
				_ = yym2137
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2138 := &x.SupplementalGroups
				yym2139 := z.DecBinary()
				_ = yym2139
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2138, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2141 := z.DecBinary()
				_ = yym2141
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2129)
		} // end switch yys2129
	} // end for yyj2129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2142 int
	var yyb2142 bool
	var yyhl2142 bool = l >= 0
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2148 := z.DecBinary()
		_ = yym2148
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2150 := z.DecBinary()
		_ = yym2150
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2151 := &x.SupplementalGroups
		yym2152 := z.DecBinary()
		_ = yym2152
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2151, false, d)
		}
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2154 := z.DecBinary()
		_ = yym2154
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2142++
		if yyhl2142 {
			yyb2142 = yyj2142 > l
		} else {
			yyb2142 = r.CheckBreak()
		}
		if yyb2142 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2142-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2155 := z.EncBinary()
		_ = yym2155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2156 := !z.EncBinary()
			yy2arr2156 := z.EncBasicHandle().StructToArray
			var yyq2156 [8]bool
			_, _, _ = yysep2156, yyq2156, yy2arr2156
			const yyr2156 bool = false
			yyq2156[0] = x.Phase != ""
			yyq2156[1] = len(x.Conditions) != 0
			yyq2156[2] = x.Message != ""
			yyq2156[3] = x.Reason != ""
			yyq2156[4] = x.HostIP != ""
			yyq2156[5] = x.PodIP != ""
			yyq2156[6] = x.StartTime != nil
			yyq2156[7] = len(x.ContainerStatuses) != 0
			var yynn2156 int
			if yyr2156 || yy2arr2156 {
				r.EncodeArrayStart(8)
			} else {
				yynn2156 = 0
				for _, b := range yyq2156 {
					if b {
						yynn2156++
					}
				}
				r.EncodeMapStart(yynn2156)
				yynn2156 = 0
			}
			if yyr2156 || yy2arr2156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2156[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2156[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2156 || yy2arr2156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2156[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2159 := z.EncBinary()
						_ = yym2159
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2156[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2160 := z.EncBinary()
						_ = yym2160
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2156 || yy2arr2156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2156[2] {
					yym2162 := z.EncBinary()
					_ = yym2162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2156[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2163 := z.EncBinary()
					_ = yym2163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2156 || yy2arr2156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2156[3] {
					yym2165 := z.EncBinary()
					_ = yym2165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2156[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2166 := z.EncBinary()
					_ = yym2166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2156 || yy2arr2156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2156[4] {
					yym2168 := z.EncBinary()
					_ = yym2168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2156[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2169 := z.EncBinary()
					_ = yym2169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2156 || yy2arr2156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2156[5] {
					yym2171 := z.EncBinary()
					_ = yym2171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2156[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2172 := z.EncBinary()
					_ = yym2172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2156 || yy2arr2156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2156[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2174 := z.EncBinary()
						_ = yym2174
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2174 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2174 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2156[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2175 := z.EncBinary()
						_ = yym2175
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2175 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2175 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2156 || yy2arr2156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2156[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2177 := z.EncBinary()
						_ = yym2177
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2156[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2178 := z.EncBinary()
						_ = yym2178
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2156 || yy2arr2156 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2179 := z.DecBinary()
	_ = yym2179
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2180 := r.ContainerType()
		if yyct2180 == codecSelferValueTypeMap1234 {
			yyl2180 := r.ReadMapStart()
			if yyl2180 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2180, d)
			}
		} else if yyct2180 == codecSelferValueTypeArray1234 {
			yyl2180 := r.ReadArrayStart()
			if yyl2180 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2180, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2181Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2181Slc
	var yyhl2181 bool = l >= 0
	for yyj2181 := 0; ; yyj2181++ {
		if yyhl2181 {
			if yyj2181 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2181Slc = r.DecodeBytes(yys2181Slc, true, true)
		yys2181 := string(yys2181Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2181 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2183 := &x.Conditions
				yym2184 := z.DecBinary()
				_ = yym2184
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2183), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2190 := z.DecBinary()
				_ = yym2190
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2190 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2190 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2191 := &x.ContainerStatuses
				yym2192 := z.DecBinary()
				_ = yym2192
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2191), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2181)
		} // end switch yys2181
	} // end for yyj2181
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2193 int
	var yyb2193 bool
	var yyhl2193 bool = l >= 0
	yyj2193++
	if yyhl2193 {
		yyb2193 = yyj2193 > l
	} else {
		yyb2193 = r.CheckBreak()
	}
	if yyb2193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2193++
	if yyhl2193 {
		yyb2193 = yyj2193 > l
	} else {
		yyb2193 = r.CheckBreak()
	}
	if yyb2193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2195 := &x.Conditions
		yym2196 := z.DecBinary()
		_ = yym2196
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2195), d)
		}
	}
	yyj2193++
	if yyhl2193 {
		yyb2193 = yyj2193 > l
	} else {
		yyb2193 = r.CheckBreak()
	}
	if yyb2193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2193++
	if yyhl2193 {
		yyb2193 = yyj2193 > l
	} else {
		yyb2193 = r.CheckBreak()
	}
	if yyb2193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2193++
	if yyhl2193 {
		yyb2193 = yyj2193 > l
	} else {
		yyb2193 = r.CheckBreak()
	}
	if yyb2193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2193++
	if yyhl2193 {
		yyb2193 = yyj2193 > l
	} else {
		yyb2193 = r.CheckBreak()
	}
	if yyb2193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2193++
	if yyhl2193 {
		yyb2193 = yyj2193 > l
	} else {
		yyb2193 = r.CheckBreak()
	}
	if yyb2193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2202 := z.DecBinary()
		_ = yym2202
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2202 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2202 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2193++
	if yyhl2193 {
		yyb2193 = yyj2193 > l
	} else {
		yyb2193 = r.CheckBreak()
	}
	if yyb2193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2203 := &x.ContainerStatuses
		yym2204 := z.DecBinary()
		_ = yym2204
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2203), d)
		}
	}
	for {
		yyj2193++
		if yyhl2193 {
			yyb2193 = yyj2193 > l
		} else {
			yyb2193 = r.CheckBreak()
		}
		if yyb2193 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2193-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2205 := z.EncBinary()
		_ = yym2205
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2206 := !z.EncBinary()
			yy2arr2206 := z.EncBasicHandle().StructToArray
			var yyq2206 [4]bool
			_, _, _ = yysep2206, yyq2206, yy2arr2206
			const yyr2206 bool = false
			yyq2206[0] = x.Kind != ""
			yyq2206[1] = x.APIVersion != ""
			yyq2206[2] = true
			yyq2206[3] = true
			var yynn2206 int
			if yyr2206 || yy2arr2206 {
				r.EncodeArrayStart(4)
			} else {
				yynn2206 = 0
				for _, b := range yyq2206 {
					if b {
						yynn2206++
					}
				}
				r.EncodeMapStart(yynn2206)
				yynn2206 = 0
			}
			if yyr2206 || yy2arr2206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2206[0] {
					yym2208 := z.EncBinary()
					_ = yym2208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2206[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2209 := z.EncBinary()
					_ = yym2209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2206 || yy2arr2206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2206[1] {
					yym2211 := z.EncBinary()
					_ = yym2211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2206[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2212 := z.EncBinary()
					_ = yym2212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2206 || yy2arr2206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2206[2] {
					yy2214 := &x.ObjectMeta
					yy2214.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2206[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2215 := &x.ObjectMeta
					yy2215.CodecEncodeSelf(e)
				}
			}
			if yyr2206 || yy2arr2206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2206[3] {
					yy2217 := &x.Status
					yy2217.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2206[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2218 := &x.Status
					yy2218.CodecEncodeSelf(e)
				}
			}
			if yyr2206 || yy2arr2206 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2219 := z.DecBinary()
	_ = yym2219
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2220 := r.ContainerType()
		if yyct2220 == codecSelferValueTypeMap1234 {
			yyl2220 := r.ReadMapStart()
			if yyl2220 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2220, d)
			}
		} else if yyct2220 == codecSelferValueTypeArray1234 {
			yyl2220 := r.ReadArrayStart()
			if yyl2220 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2220, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2221Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2221Slc
	var yyhl2221 bool = l >= 0
	for yyj2221 := 0; ; yyj2221++ {
		if yyhl2221 {
			if yyj2221 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2221Slc = r.DecodeBytes(yys2221Slc, true, true)
		yys2221 := string(yys2221Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2221 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2224 := &x.ObjectMeta
				yyv2224.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2225 := &x.Status
				yyv2225.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2221)
		} // end switch yys2221
	} // end for yyj2221
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2226 int
	var yyb2226 bool
	var yyhl2226 bool = l >= 0
	yyj2226++
	if yyhl2226 {
		yyb2226 = yyj2226 > l
	} else {
		yyb2226 = r.CheckBreak()
	}
	if yyb2226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2226++
	if yyhl2226 {
		yyb2226 = yyj2226 > l
	} else {
		yyb2226 = r.CheckBreak()
	}
	if yyb2226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2226++
	if yyhl2226 {
		yyb2226 = yyj2226 > l
	} else {
		yyb2226 = r.CheckBreak()
	}
	if yyb2226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2229 := &x.ObjectMeta
		yyv2229.CodecDecodeSelf(d)
	}
	yyj2226++
	if yyhl2226 {
		yyb2226 = yyj2226 > l
	} else {
		yyb2226 = r.CheckBreak()
	}
	if yyb2226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2230 := &x.Status
		yyv2230.CodecDecodeSelf(d)
	}
	for {
		yyj2226++
		if yyhl2226 {
			yyb2226 = yyj2226 > l
		} else {
			yyb2226 = r.CheckBreak()
		}
		if yyb2226 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2226-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2231 := z.EncBinary()
		_ = yym2231
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2232 := !z.EncBinary()
			yy2arr2232 := z.EncBasicHandle().StructToArray
			var yyq2232 [5]bool
			_, _, _ = yysep2232, yyq2232, yy2arr2232
			const yyr2232 bool = false
			yyq2232[0] = x.Kind != ""
			yyq2232[1] = x.APIVersion != ""
			yyq2232[2] = true
			yyq2232[3] = true
			yyq2232[4] = true
			var yynn2232 int
			if yyr2232 || yy2arr2232 {
				r.EncodeArrayStart(5)
			} else {
				yynn2232 = 0
				for _, b := range yyq2232 {
					if b {
						yynn2232++
					}
				}
				r.EncodeMapStart(yynn2232)
				yynn2232 = 0
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[0] {
					yym2234 := z.EncBinary()
					_ = yym2234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2232[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2235 := z.EncBinary()
					_ = yym2235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[1] {
					yym2237 := z.EncBinary()
					_ = yym2237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2232[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2238 := z.EncBinary()
					_ = yym2238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[2] {
					yy2240 := &x.ObjectMeta
					yy2240.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2232[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2241 := &x.ObjectMeta
					yy2241.CodecEncodeSelf(e)
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[3] {
					yy2243 := &x.Spec
					yy2243.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2232[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2244 := &x.Spec
					yy2244.CodecEncodeSelf(e)
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[4] {
					yy2246 := &x.Status
					yy2246.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2232[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2247 := &x.Status
					yy2247.CodecEncodeSelf(e)
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2248 := z.DecBinary()
	_ = yym2248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2249 := r.ContainerType()
		if yyct2249 == codecSelferValueTypeMap1234 {
			yyl2249 := r.ReadMapStart()
			if yyl2249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2249, d)
			}
		} else if yyct2249 == codecSelferValueTypeArray1234 {
			yyl2249 := r.ReadArrayStart()
			if yyl2249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2250Slc
	var yyhl2250 bool = l >= 0
	for yyj2250 := 0; ; yyj2250++ {
		if yyhl2250 {
			if yyj2250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2250Slc = r.DecodeBytes(yys2250Slc, true, true)
		yys2250 := string(yys2250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2250 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2253 := &x.ObjectMeta
				yyv2253.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2254 := &x.Spec
				yyv2254.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2255 := &x.Status
				yyv2255.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2250)
		} // end switch yys2250
	} // end for yyj2250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2256 int
	var yyb2256 bool
	var yyhl2256 bool = l >= 0
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2259 := &x.ObjectMeta
		yyv2259.CodecDecodeSelf(d)
	}
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2260 := &x.Spec
		yyv2260.CodecDecodeSelf(d)
	}
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2261 := &x.Status
		yyv2261.CodecDecodeSelf(d)
	}
	for {
		yyj2256++
		if yyhl2256 {
			yyb2256 = yyj2256 > l
		} else {
			yyb2256 = r.CheckBreak()
		}
		if yyb2256 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2256-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2262 := z.EncBinary()
		_ = yym2262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2263 := !z.EncBinary()
			yy2arr2263 := z.EncBasicHandle().StructToArray
			var yyq2263 [2]bool
			_, _, _ = yysep2263, yyq2263, yy2arr2263
			const yyr2263 bool = false
			yyq2263[0] = true
			yyq2263[1] = true
			var yynn2263 int
			if yyr2263 || yy2arr2263 {
				r.EncodeArrayStart(2)
			} else {
				yynn2263 = 0
				for _, b := range yyq2263 {
					if b {
						yynn2263++
					}
				}
				r.EncodeMapStart(yynn2263)
				yynn2263 = 0
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2263[0] {
					yy2265 := &x.ObjectMeta
					yy2265.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2263[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2266 := &x.ObjectMeta
					yy2266.CodecEncodeSelf(e)
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2263[1] {
					yy2268 := &x.Spec
					yy2268.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2263[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2269 := &x.Spec
					yy2269.CodecEncodeSelf(e)
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2270 := z.DecBinary()
	_ = yym2270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2271 := r.ContainerType()
		if yyct2271 == codecSelferValueTypeMap1234 {
			yyl2271 := r.ReadMapStart()
			if yyl2271 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2271, d)
			}
		} else if yyct2271 == codecSelferValueTypeArray1234 {
			yyl2271 := r.ReadArrayStart()
			if yyl2271 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2271, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2272Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2272Slc
	var yyhl2272 bool = l >= 0
	for yyj2272 := 0; ; yyj2272++ {
		if yyhl2272 {
			if yyj2272 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2272Slc = r.DecodeBytes(yys2272Slc, true, true)
		yys2272 := string(yys2272Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2272 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2273 := &x.ObjectMeta
				yyv2273.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2274 := &x.Spec
				yyv2274.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2272)
		} // end switch yys2272
	} // end for yyj2272
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2275 int
	var yyb2275 bool
	var yyhl2275 bool = l >= 0
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2276 := &x.ObjectMeta
		yyv2276.CodecDecodeSelf(d)
	}
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2277 := &x.Spec
		yyv2277.CodecDecodeSelf(d)
	}
	for {
		yyj2275++
		if yyhl2275 {
			yyb2275 = yyj2275 > l
		} else {
			yyb2275 = r.CheckBreak()
		}
		if yyb2275 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2275-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2278 := z.EncBinary()
		_ = yym2278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2279 := !z.EncBinary()
			yy2arr2279 := z.EncBasicHandle().StructToArray
			var yyq2279 [4]bool
			_, _, _ = yysep2279, yyq2279, yy2arr2279
			const yyr2279 bool = false
			yyq2279[0] = x.Kind != ""
			yyq2279[1] = x.APIVersion != ""
			yyq2279[2] = true
			yyq2279[3] = true
			var yynn2279 int
			if yyr2279 || yy2arr2279 {
				r.EncodeArrayStart(4)
			} else {
				yynn2279 = 0
				for _, b := range yyq2279 {
					if b {
						yynn2279++
					}
				}
				r.EncodeMapStart(yynn2279)
				yynn2279 = 0
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[0] {
					yym2281 := z.EncBinary()
					_ = yym2281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2279[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2282 := z.EncBinary()
					_ = yym2282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[1] {
					yym2284 := z.EncBinary()
					_ = yym2284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2279[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2285 := z.EncBinary()
					_ = yym2285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[2] {
					yy2287 := &x.ObjectMeta
					yy2287.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2279[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2288 := &x.ObjectMeta
					yy2288.CodecEncodeSelf(e)
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[3] {
					yy2290 := &x.Template
					yy2290.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2279[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2291 := &x.Template
					yy2291.CodecEncodeSelf(e)
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2292 := z.DecBinary()
	_ = yym2292
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2293 := r.ContainerType()
		if yyct2293 == codecSelferValueTypeMap1234 {
			yyl2293 := r.ReadMapStart()
			if yyl2293 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2293, d)
			}
		} else if yyct2293 == codecSelferValueTypeArray1234 {
			yyl2293 := r.ReadArrayStart()
			if yyl2293 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2293, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2294Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2294Slc
	var yyhl2294 bool = l >= 0
	for yyj2294 := 0; ; yyj2294++ {
		if yyhl2294 {
			if yyj2294 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2294Slc = r.DecodeBytes(yys2294Slc, true, true)
		yys2294 := string(yys2294Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2294 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2297 := &x.ObjectMeta
				yyv2297.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2298 := &x.Template
				yyv2298.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2294)
		} // end switch yys2294
	} // end for yyj2294
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2299 int
	var yyb2299 bool
	var yyhl2299 bool = l >= 0
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2302 := &x.ObjectMeta
		yyv2302.CodecDecodeSelf(d)
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2303 := &x.Template
		yyv2303.CodecDecodeSelf(d)
	}
	for {
		yyj2299++
		if yyhl2299 {
			yyb2299 = yyj2299 > l
		} else {
			yyb2299 = r.CheckBreak()
		}
		if yyb2299 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2299-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2304 := z.EncBinary()
		_ = yym2304
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2305 := !z.EncBinary()
			yy2arr2305 := z.EncBasicHandle().StructToArray
			var yyq2305 [4]bool
			_, _, _ = yysep2305, yyq2305, yy2arr2305
			const yyr2305 bool = false
			yyq2305[0] = x.Kind != ""
			yyq2305[1] = x.APIVersion != ""
			yyq2305[2] = true
			var yynn2305 int
			if yyr2305 || yy2arr2305 {
				r.EncodeArrayStart(4)
			} else {
				yynn2305 = 1
				for _, b := range yyq2305 {
					if b {
						yynn2305++
					}
				}
				r.EncodeMapStart(yynn2305)
				yynn2305 = 0
			}
			if yyr2305 || yy2arr2305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2305[0] {
					yym2307 := z.EncBinary()
					_ = yym2307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2305[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2308 := z.EncBinary()
					_ = yym2308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2305 || yy2arr2305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2305[1] {
					yym2310 := z.EncBinary()
					_ = yym2310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2305[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2311 := z.EncBinary()
					_ = yym2311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2305 || yy2arr2305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2305[2] {
					yy2313 := &x.ListMeta
					yym2314 := z.EncBinary()
					_ = yym2314
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2313) {
					} else {
						z.EncFallback(yy2313)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2305[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2315 := &x.ListMeta
					yym2316 := z.EncBinary()
					_ = yym2316
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2315) {
					} else {
						z.EncFallback(yy2315)
					}
				}
			}
			if yyr2305 || yy2arr2305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2318 := z.EncBinary()
					_ = yym2318
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2319 := z.EncBinary()
					_ = yym2319
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2305 || yy2arr2305 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2320 := z.DecBinary()
	_ = yym2320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2321 := r.ContainerType()
		if yyct2321 == codecSelferValueTypeMap1234 {
			yyl2321 := r.ReadMapStart()
			if yyl2321 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2321, d)
			}
		} else if yyct2321 == codecSelferValueTypeArray1234 {
			yyl2321 := r.ReadArrayStart()
			if yyl2321 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2321, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2322Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2322Slc
	var yyhl2322 bool = l >= 0
	for yyj2322 := 0; ; yyj2322++ {
		if yyhl2322 {
			if yyj2322 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2322Slc = r.DecodeBytes(yys2322Slc, true, true)
		yys2322 := string(yys2322Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2322 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2325 := &x.ListMeta
				yym2326 := z.DecBinary()
				_ = yym2326
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2325) {
				} else {
					z.DecFallback(yyv2325, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2327 := &x.Items
				yym2328 := z.DecBinary()
				_ = yym2328
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2327), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2322)
		} // end switch yys2322
	} // end for yyj2322
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2329 int
	var yyb2329 bool
	var yyhl2329 bool = l >= 0
	yyj2329++
	if yyhl2329 {
		yyb2329 = yyj2329 > l
	} else {
		yyb2329 = r.CheckBreak()
	}
	if yyb2329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2329++
	if yyhl2329 {
		yyb2329 = yyj2329 > l
	} else {
		yyb2329 = r.CheckBreak()
	}
	if yyb2329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2329++
	if yyhl2329 {
		yyb2329 = yyj2329 > l
	} else {
		yyb2329 = r.CheckBreak()
	}
	if yyb2329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2332 := &x.ListMeta
		yym2333 := z.DecBinary()
		_ = yym2333
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2332) {
		} else {
			z.DecFallback(yyv2332, false)
		}
	}
	yyj2329++
	if yyhl2329 {
		yyb2329 = yyj2329 > l
	} else {
		yyb2329 = r.CheckBreak()
	}
	if yyb2329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2334 := &x.Items
		yym2335 := z.DecBinary()
		_ = yym2335
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2334), d)
		}
	}
	for {
		yyj2329++
		if yyhl2329 {
			yyb2329 = yyj2329 > l
		} else {
			yyb2329 = r.CheckBreak()
		}
		if yyb2329 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2329-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2336 := z.EncBinary()
		_ = yym2336
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2337 := !z.EncBinary()
			yy2arr2337 := z.EncBasicHandle().StructToArray
			var yyq2337 [3]bool
			_, _, _ = yysep2337, yyq2337, yy2arr2337
			const yyr2337 bool = false
			yyq2337[2] = x.Template != nil
			var yynn2337 int
			if yyr2337 || yy2arr2337 {
				r.EncodeArrayStart(3)
			} else {
				yynn2337 = 2
				for _, b := range yyq2337 {
					if b {
						yynn2337++
					}
				}
				r.EncodeMapStart(yynn2337)
				yynn2337 = 0
			}
			if yyr2337 || yy2arr2337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2339 := z.EncBinary()
				_ = yym2339
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2340 := z.EncBinary()
				_ = yym2340
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2337 || yy2arr2337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2342 := z.EncBinary()
					_ = yym2342
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2343 := z.EncBinary()
					_ = yym2343
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2337 || yy2arr2337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2337[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2337[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2337 || yy2arr2337 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2345 := z.DecBinary()
	_ = yym2345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2346 := r.ContainerType()
		if yyct2346 == codecSelferValueTypeMap1234 {
			yyl2346 := r.ReadMapStart()
			if yyl2346 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2346, d)
			}
		} else if yyct2346 == codecSelferValueTypeArray1234 {
			yyl2346 := r.ReadArrayStart()
			if yyl2346 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2346, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2347Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2347Slc
	var yyhl2347 bool = l >= 0
	for yyj2347 := 0; ; yyj2347++ {
		if yyhl2347 {
			if yyj2347 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2347Slc = r.DecodeBytes(yys2347Slc, true, true)
		yys2347 := string(yys2347Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2347 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2349 := &x.Selector
				yym2350 := z.DecBinary()
				_ = yym2350
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2349, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2347)
		} // end switch yys2347
	} // end for yyj2347
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2352 int
	var yyb2352 bool
	var yyhl2352 bool = l >= 0
	yyj2352++
	if yyhl2352 {
		yyb2352 = yyj2352 > l
	} else {
		yyb2352 = r.CheckBreak()
	}
	if yyb2352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2352++
	if yyhl2352 {
		yyb2352 = yyj2352 > l
	} else {
		yyb2352 = r.CheckBreak()
	}
	if yyb2352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2354 := &x.Selector
		yym2355 := z.DecBinary()
		_ = yym2355
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2354, false, d)
		}
	}
	yyj2352++
	if yyhl2352 {
		yyb2352 = yyj2352 > l
	} else {
		yyb2352 = r.CheckBreak()
	}
	if yyb2352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2352++
		if yyhl2352 {
			yyb2352 = yyj2352 > l
		} else {
			yyb2352 = r.CheckBreak()
		}
		if yyb2352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2357 := z.EncBinary()
		_ = yym2357
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2358 := !z.EncBinary()
			yy2arr2358 := z.EncBasicHandle().StructToArray
			var yyq2358 [4]bool
			_, _, _ = yysep2358, yyq2358, yy2arr2358
			const yyr2358 bool = false
			yyq2358[1] = x.FullyLabeledReplicas != 0
			yyq2358[2] = x.ReadyReplicas != 0
			yyq2358[3] = x.ObservedGeneration != 0
			var yynn2358 int
			if yyr2358 || yy2arr2358 {
				r.EncodeArrayStart(4)
			} else {
				yynn2358 = 1
				for _, b := range yyq2358 {
					if b {
						yynn2358++
					}
				}
				r.EncodeMapStart(yynn2358)
				yynn2358 = 0
			}
			if yyr2358 || yy2arr2358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2360 := z.EncBinary()
				_ = yym2360
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2361 := z.EncBinary()
				_ = yym2361
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2358 || yy2arr2358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2358[1] {
					yym2363 := z.EncBinary()
					_ = yym2363
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2358[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2358 || yy2arr2358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2358[2] {
					yym2366 := z.EncBinary()
					_ = yym2366
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2358[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2367 := z.EncBinary()
					_ = yym2367
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2358 || yy2arr2358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2358[3] {
					yym2369 := z.EncBinary()
					_ = yym2369
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2358[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2370 := z.EncBinary()
					_ = yym2370
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2358 || yy2arr2358 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2371 := z.DecBinary()
	_ = yym2371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2372 := r.ContainerType()
		if yyct2372 == codecSelferValueTypeMap1234 {
			yyl2372 := r.ReadMapStart()
			if yyl2372 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2372, d)
			}
		} else if yyct2372 == codecSelferValueTypeArray1234 {
			yyl2372 := r.ReadArrayStart()
			if yyl2372 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2373Slc
	var yyhl2373 bool = l >= 0
	for yyj2373 := 0; ; yyj2373++ {
		if yyhl2373 {
			if yyj2373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2373Slc = r.DecodeBytes(yys2373Slc, true, true)
		yys2373 := string(yys2373Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2373 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2373)
		} // end switch yys2373
	} // end for yyj2373
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2378 int
	var yyb2378 bool
	var yyhl2378 bool = l >= 0
	yyj2378++
	if yyhl2378 {
		yyb2378 = yyj2378 > l
	} else {
		yyb2378 = r.CheckBreak()
	}
	if yyb2378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2378++
	if yyhl2378 {
		yyb2378 = yyj2378 > l
	} else {
		yyb2378 = r.CheckBreak()
	}
	if yyb2378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2378++
	if yyhl2378 {
		yyb2378 = yyj2378 > l
	} else {
		yyb2378 = r.CheckBreak()
	}
	if yyb2378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2378++
	if yyhl2378 {
		yyb2378 = yyj2378 > l
	} else {
		yyb2378 = r.CheckBreak()
	}
	if yyb2378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2378++
		if yyhl2378 {
			yyb2378 = yyj2378 > l
		} else {
			yyb2378 = r.CheckBreak()
		}
		if yyb2378 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2378-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2383 := z.EncBinary()
		_ = yym2383
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2384 := !z.EncBinary()
			yy2arr2384 := z.EncBasicHandle().StructToArray
			var yyq2384 [5]bool
			_, _, _ = yysep2384, yyq2384, yy2arr2384
			const yyr2384 bool = false
			yyq2384[0] = x.Kind != ""
			yyq2384[1] = x.APIVersion != ""
			yyq2384[2] = true
			yyq2384[3] = true
			yyq2384[4] = true
			var yynn2384 int
			if yyr2384 || yy2arr2384 {
				r.EncodeArrayStart(5)
			} else {
				yynn2384 = 0
				for _, b := range yyq2384 {
					if b {
						yynn2384++
					}
				}
				r.EncodeMapStart(yynn2384)
				yynn2384 = 0
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2384[0] {
					yym2386 := z.EncBinary()
					_ = yym2386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2384[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2387 := z.EncBinary()
					_ = yym2387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2384[1] {
					yym2389 := z.EncBinary()
					_ = yym2389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2384[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2390 := z.EncBinary()
					_ = yym2390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2384[2] {
					yy2392 := &x.ObjectMeta
					yy2392.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2384[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2393 := &x.ObjectMeta
					yy2393.CodecEncodeSelf(e)
				}
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2384[3] {
					yy2395 := &x.Spec
					yy2395.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2384[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2396 := &x.Spec
					yy2396.CodecEncodeSelf(e)
				}
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2384[4] {
					yy2398 := &x.Status
					yy2398.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2384[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2399 := &x.Status
					yy2399.CodecEncodeSelf(e)
				}
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2400 := z.DecBinary()
	_ = yym2400
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2401 := r.ContainerType()
		if yyct2401 == codecSelferValueTypeMap1234 {
			yyl2401 := r.ReadMapStart()
			if yyl2401 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2401, d)
			}
		} else if yyct2401 == codecSelferValueTypeArray1234 {
			yyl2401 := r.ReadArrayStart()
			if yyl2401 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2401, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2402Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2402Slc
	var yyhl2402 bool = l >= 0
	for yyj2402 := 0; ; yyj2402++ {
		if yyhl2402 {
			if yyj2402 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2402Slc = r.DecodeBytes(yys2402Slc, true, true)
		yys2402 := string(yys2402Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2402 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2405 := &x.ObjectMeta
				yyv2405.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2406 := &x.Spec
				yyv2406.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2407 := &x.Status
				yyv2407.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2402)
		} // end switch yys2402
	} // end for yyj2402
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2408 int
	var yyb2408 bool
	var yyhl2408 bool = l >= 0
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2411 := &x.ObjectMeta
		yyv2411.CodecDecodeSelf(d)
	}
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2412 := &x.Spec
		yyv2412.CodecDecodeSelf(d)
	}
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2413 := &x.Status
		yyv2413.CodecDecodeSelf(d)
	}
	for {
		yyj2408++
		if yyhl2408 {
			yyb2408 = yyj2408 > l
		} else {
			yyb2408 = r.CheckBreak()
		}
		if yyb2408 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2408-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2414 := z.EncBinary()
		_ = yym2414
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2415 := !z.EncBinary()
			yy2arr2415 := z.EncBasicHandle().StructToArray
			var yyq2415 [4]bool
			_, _, _ = yysep2415, yyq2415, yy2arr2415
			const yyr2415 bool = false
			yyq2415[0] = x.Kind != ""
			yyq2415[1] = x.APIVersion != ""
			yyq2415[2] = true
			var yynn2415 int
			if yyr2415 || yy2arr2415 {
				r.EncodeArrayStart(4)
			} else {
				yynn2415 = 1
				for _, b := range yyq2415 {
					if b {
						yynn2415++
					}
				}
				r.EncodeMapStart(yynn2415)
				yynn2415 = 0
			}
			if yyr2415 || yy2arr2415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2415[0] {
					yym2417 := z.EncBinary()
					_ = yym2417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2415[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2415 || yy2arr2415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2415[1] {
					yym2420 := z.EncBinary()
					_ = yym2420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2415[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2421 := z.EncBinary()
					_ = yym2421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2415 || yy2arr2415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2415[2] {
					yy2423 := &x.ListMeta
					yym2424 := z.EncBinary()
					_ = yym2424
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2423) {
					} else {
						z.EncFallback(yy2423)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2415[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2425 := &x.ListMeta
					yym2426 := z.EncBinary()
					_ = yym2426
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2425) {
					} else {
						z.EncFallback(yy2425)
					}
				}
			}
			if yyr2415 || yy2arr2415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2428 := z.EncBinary()
					_ = yym2428
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2429 := z.EncBinary()
					_ = yym2429
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2415 || yy2arr2415 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2430 := z.DecBinary()
	_ = yym2430
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2431 := r.ContainerType()
		if yyct2431 == codecSelferValueTypeMap1234 {
			yyl2431 := r.ReadMapStart()
			if yyl2431 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2431, d)
			}
		} else if yyct2431 == codecSelferValueTypeArray1234 {
			yyl2431 := r.ReadArrayStart()
			if yyl2431 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2431, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2432Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2432Slc
	var yyhl2432 bool = l >= 0
	for yyj2432 := 0; ; yyj2432++ {
		if yyhl2432 {
			if yyj2432 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2432Slc = r.DecodeBytes(yys2432Slc, true, true)
		yys2432 := string(yys2432Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2432 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2435 := &x.ListMeta
				yym2436 := z.DecBinary()
				_ = yym2436
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2435) {
				} else {
					z.DecFallback(yyv2435, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2437 := &x.Items
				yym2438 := z.DecBinary()
				_ = yym2438
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2437), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2432)
		} // end switch yys2432
	} // end for yyj2432
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2439 int
	var yyb2439 bool
	var yyhl2439 bool = l >= 0
	yyj2439++
	if yyhl2439 {
		yyb2439 = yyj2439 > l
	} else {
		yyb2439 = r.CheckBreak()
	}
	if yyb2439 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2439++
	if yyhl2439 {
		yyb2439 = yyj2439 > l
	} else {
		yyb2439 = r.CheckBreak()
	}
	if yyb2439 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2439++
	if yyhl2439 {
		yyb2439 = yyj2439 > l
	} else {
		yyb2439 = r.CheckBreak()
	}
	if yyb2439 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2442 := &x.ListMeta
		yym2443 := z.DecBinary()
		_ = yym2443
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2442) {
		} else {
			z.DecFallback(yyv2442, false)
		}
	}
	yyj2439++
	if yyhl2439 {
		yyb2439 = yyj2439 > l
	} else {
		yyb2439 = r.CheckBreak()
	}
	if yyb2439 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2444 := &x.Items
		yym2445 := z.DecBinary()
		_ = yym2445
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2444), d)
		}
	}
	for {
		yyj2439++
		if yyhl2439 {
			yyb2439 = yyj2439 > l
		} else {
			yyb2439 = r.CheckBreak()
		}
		if yyb2439 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2439-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2446 := z.EncBinary()
		_ = yym2446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2447 := !z.EncBinary()
			yy2arr2447 := z.EncBasicHandle().StructToArray
			var yyq2447 [4]bool
			_, _, _ = yysep2447, yyq2447, yy2arr2447
			const yyr2447 bool = false
			yyq2447[0] = x.Kind != ""
			yyq2447[1] = x.APIVersion != ""
			yyq2447[2] = true
			var yynn2447 int
			if yyr2447 || yy2arr2447 {
				r.EncodeArrayStart(4)
			} else {
				yynn2447 = 1
				for _, b := range yyq2447 {
					if b {
						yynn2447++
					}
				}
				r.EncodeMapStart(yynn2447)
				yynn2447 = 0
			}
			if yyr2447 || yy2arr2447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2447[0] {
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2447[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2450 := z.EncBinary()
					_ = yym2450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2447 || yy2arr2447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2447[1] {
					yym2452 := z.EncBinary()
					_ = yym2452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2447[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2453 := z.EncBinary()
					_ = yym2453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2447 || yy2arr2447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2447[2] {
					yy2455 := &x.ListMeta
					yym2456 := z.EncBinary()
					_ = yym2456
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2455) {
					} else {
						z.EncFallback(yy2455)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2447[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2457 := &x.ListMeta
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2457) {
					} else {
						z.EncFallback(yy2457)
					}
				}
			}
			if yyr2447 || yy2arr2447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2460 := z.EncBinary()
					_ = yym2460
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2461 := z.EncBinary()
					_ = yym2461
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2447 || yy2arr2447 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2462 := z.DecBinary()
	_ = yym2462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2463 := r.ContainerType()
		if yyct2463 == codecSelferValueTypeMap1234 {
			yyl2463 := r.ReadMapStart()
			if yyl2463 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2463, d)
			}
		} else if yyct2463 == codecSelferValueTypeArray1234 {
			yyl2463 := r.ReadArrayStart()
			if yyl2463 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2464Slc
	var yyhl2464 bool = l >= 0
	for yyj2464 := 0; ; yyj2464++ {
		if yyhl2464 {
			if yyj2464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2464Slc = r.DecodeBytes(yys2464Slc, true, true)
		yys2464 := string(yys2464Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2464 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2467 := &x.ListMeta
				yym2468 := z.DecBinary()
				_ = yym2468
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2467) {
				} else {
					z.DecFallback(yyv2467, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2469 := &x.Items
				yym2470 := z.DecBinary()
				_ = yym2470
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2469), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2464)
		} // end switch yys2464
	} // end for yyj2464
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2471 int
	var yyb2471 bool
	var yyhl2471 bool = l >= 0
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2474 := &x.ListMeta
		yym2475 := z.DecBinary()
		_ = yym2475
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2474) {
		} else {
			z.DecFallback(yyv2474, false)
		}
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2476 := &x.Items
		yym2477 := z.DecBinary()
		_ = yym2477
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2476), d)
		}
	}
	for {
		yyj2471++
		if yyhl2471 {
			yyb2471 = yyj2471 > l
		} else {
			yyb2471 = r.CheckBreak()
		}
		if yyb2471 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2471-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2478 := z.EncBinary()
	_ = yym2478
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2479 := z.DecBinary()
	_ = yym2479
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2480 := z.EncBinary()
	_ = yym2480
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2481 := z.DecBinary()
	_ = yym2481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2482 := z.EncBinary()
		_ = yym2482
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2483 := !z.EncBinary()
			yy2arr2483 := z.EncBasicHandle().StructToArray
			var yyq2483 [1]bool
			_, _, _ = yysep2483, yyq2483, yy2arr2483
			const yyr2483 bool = false
			yyq2483[0] = true
			var yynn2483 int
			if yyr2483 || yy2arr2483 {
				r.EncodeArrayStart(1)
			} else {
				yynn2483 = 0
				for _, b := range yyq2483 {
					if b {
						yynn2483++
					}
				}
				r.EncodeMapStart(yynn2483)
				yynn2483 = 0
			}
			if yyr2483 || yy2arr2483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2483[0] {
					yy2485 := &x.LoadBalancer
					yy2485.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2483[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2486 := &x.LoadBalancer
					yy2486.CodecEncodeSelf(e)
				}
			}
			if yyr2483 || yy2arr2483 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2487 := z.DecBinary()
	_ = yym2487
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2488 := r.ContainerType()
		if yyct2488 == codecSelferValueTypeMap1234 {
			yyl2488 := r.ReadMapStart()
			if yyl2488 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2488, d)
			}
		} else if yyct2488 == codecSelferValueTypeArray1234 {
			yyl2488 := r.ReadArrayStart()
			if yyl2488 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2488, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2489Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2489Slc
	var yyhl2489 bool = l >= 0
	for yyj2489 := 0; ; yyj2489++ {
		if yyhl2489 {
			if yyj2489 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2489Slc = r.DecodeBytes(yys2489Slc, true, true)
		yys2489 := string(yys2489Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2489 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2490 := &x.LoadBalancer
				yyv2490.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2489)
		} // end switch yys2489
	} // end for yyj2489
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2491 int
	var yyb2491 bool
	var yyhl2491 bool = l >= 0
	yyj2491++
	if yyhl2491 {
		yyb2491 = yyj2491 > l
	} else {
		yyb2491 = r.CheckBreak()
	}
	if yyb2491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2492 := &x.LoadBalancer
		yyv2492.CodecDecodeSelf(d)
	}
	for {
		yyj2491++
		if yyhl2491 {
			yyb2491 = yyj2491 > l
		} else {
			yyb2491 = r.CheckBreak()
		}
		if yyb2491 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2491-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2493 := z.EncBinary()
		_ = yym2493
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2494 := !z.EncBinary()
			yy2arr2494 := z.EncBasicHandle().StructToArray
			var yyq2494 [1]bool
			_, _, _ = yysep2494, yyq2494, yy2arr2494
			const yyr2494 bool = false
			yyq2494[0] = len(x.Ingress) != 0
			var yynn2494 int
			if yyr2494 || yy2arr2494 {
				r.EncodeArrayStart(1)
			} else {
				yynn2494 = 0
				for _, b := range yyq2494 {
					if b {
						yynn2494++
					}
				}
				r.EncodeMapStart(yynn2494)
				yynn2494 = 0
			}
			if yyr2494 || yy2arr2494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2494[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2496 := z.EncBinary()
						_ = yym2496
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2494[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2497 := z.EncBinary()
						_ = yym2497
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2494 || yy2arr2494 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2498 := z.DecBinary()
	_ = yym2498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2499 := r.ContainerType()
		if yyct2499 == codecSelferValueTypeMap1234 {
			yyl2499 := r.ReadMapStart()
			if yyl2499 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2499, d)
			}
		} else if yyct2499 == codecSelferValueTypeArray1234 {
			yyl2499 := r.ReadArrayStart()
			if yyl2499 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2499, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2500Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2500Slc
	var yyhl2500 bool = l >= 0
	for yyj2500 := 0; ; yyj2500++ {
		if yyhl2500 {
			if yyj2500 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2500Slc = r.DecodeBytes(yys2500Slc, true, true)
		yys2500 := string(yys2500Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2500 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2501 := &x.Ingress
				yym2502 := z.DecBinary()
				_ = yym2502
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2501), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2500)
		} // end switch yys2500
	} // end for yyj2500
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2503 int
	var yyb2503 bool
	var yyhl2503 bool = l >= 0
	yyj2503++
	if yyhl2503 {
		yyb2503 = yyj2503 > l
	} else {
		yyb2503 = r.CheckBreak()
	}
	if yyb2503 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2504 := &x.Ingress
		yym2505 := z.DecBinary()
		_ = yym2505
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2504), d)
		}
	}
	for {
		yyj2503++
		if yyhl2503 {
			yyb2503 = yyj2503 > l
		} else {
			yyb2503 = r.CheckBreak()
		}
		if yyb2503 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2503-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2506 := z.EncBinary()
		_ = yym2506
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2507 := !z.EncBinary()
			yy2arr2507 := z.EncBasicHandle().StructToArray
			var yyq2507 [2]bool
			_, _, _ = yysep2507, yyq2507, yy2arr2507
			const yyr2507 bool = false
			yyq2507[0] = x.IP != ""
			yyq2507[1] = x.Hostname != ""
			var yynn2507 int
			if yyr2507 || yy2arr2507 {
				r.EncodeArrayStart(2)
			} else {
				yynn2507 = 0
				for _, b := range yyq2507 {
					if b {
						yynn2507++
					}
				}
				r.EncodeMapStart(yynn2507)
				yynn2507 = 0
			}
			if yyr2507 || yy2arr2507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2507[0] {
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2507[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2510 := z.EncBinary()
					_ = yym2510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2507 || yy2arr2507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2507[1] {
					yym2512 := z.EncBinary()
					_ = yym2512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2507[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2513 := z.EncBinary()
					_ = yym2513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2507 || yy2arr2507 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2514 := z.DecBinary()
	_ = yym2514
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2515 := r.ContainerType()
		if yyct2515 == codecSelferValueTypeMap1234 {
			yyl2515 := r.ReadMapStart()
			if yyl2515 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2515, d)
			}
		} else if yyct2515 == codecSelferValueTypeArray1234 {
			yyl2515 := r.ReadArrayStart()
			if yyl2515 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2515, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2516Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2516Slc
	var yyhl2516 bool = l >= 0
	for yyj2516 := 0; ; yyj2516++ {
		if yyhl2516 {
			if yyj2516 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2516Slc = r.DecodeBytes(yys2516Slc, true, true)
		yys2516 := string(yys2516Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2516 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2516)
		} // end switch yys2516
	} // end for yyj2516
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2519 int
	var yyb2519 bool
	var yyhl2519 bool = l >= 0
	yyj2519++
	if yyhl2519 {
		yyb2519 = yyj2519 > l
	} else {
		yyb2519 = r.CheckBreak()
	}
	if yyb2519 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2519++
	if yyhl2519 {
		yyb2519 = yyj2519 > l
	} else {
		yyb2519 = r.CheckBreak()
	}
	if yyb2519 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2519++
		if yyhl2519 {
			yyb2519 = yyj2519 > l
		} else {
			yyb2519 = r.CheckBreak()
		}
		if yyb2519 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2519-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2522 := z.EncBinary()
		_ = yym2522
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2523 := !z.EncBinary()
			yy2arr2523 := z.EncBasicHandle().StructToArray
			var yyq2523 [9]bool
			_, _, _ = yysep2523, yyq2523, yy2arr2523
			const yyr2523 bool = false
			yyq2523[0] = x.Type != ""
			yyq2523[3] = x.ClusterIP != ""
			yyq2523[5] = len(x.ExternalIPs) != 0
			yyq2523[6] = x.LoadBalancerIP != ""
			yyq2523[7] = x.SessionAffinity != ""
			yyq2523[8] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2523 int
			if yyr2523 || yy2arr2523 {
				r.EncodeArrayStart(9)
			} else {
				yynn2523 = 3
				for _, b := range yyq2523 {
					if b {
						yynn2523++
					}
				}
				r.EncodeMapStart(yynn2523)
				yynn2523 = 0
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2523[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2526 := z.EncBinary()
					_ = yym2526
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2527 := z.EncBinary()
					_ = yym2527
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2529 := z.EncBinary()
					_ = yym2529
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2530 := z.EncBinary()
					_ = yym2530
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[3] {
					yym2532 := z.EncBinary()
					_ = yym2532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2523[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2533 := z.EncBinary()
					_ = yym2533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2535 := z.EncBinary()
				_ = yym2535
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ExternalName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2536 := z.EncBinary()
				_ = yym2536
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[5] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2538 := z.EncBinary()
						_ = yym2538
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2523[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2539 := z.EncBinary()
						_ = yym2539
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[6] {
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2523[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2542 := z.EncBinary()
					_ = yym2542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[7] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2523[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2545 := z.EncBinary()
						_ = yym2545
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2523[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2546 := z.EncBinary()
						_ = yym2546
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2547 := z.DecBinary()
	_ = yym2547
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2548 := r.ContainerType()
		if yyct2548 == codecSelferValueTypeMap1234 {
			yyl2548 := r.ReadMapStart()
			if yyl2548 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2548, d)
			}
		} else if yyct2548 == codecSelferValueTypeArray1234 {
			yyl2548 := r.ReadArrayStart()
			if yyl2548 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2548, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2549Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2549Slc
	var yyhl2549 bool = l >= 0
	for yyj2549 := 0; ; yyj2549++ {
		if yyhl2549 {
			if yyj2549 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2549Slc = r.DecodeBytes(yys2549Slc, true, true)
		yys2549 := string(yys2549Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2549 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2551 := &x.Ports
				yym2552 := z.DecBinary()
				_ = yym2552
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2551), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2553 := &x.Selector
				yym2554 := z.DecBinary()
				_ = yym2554
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2553, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "ExternalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2557 := &x.ExternalIPs
				yym2558 := z.DecBinary()
				_ = yym2558
				if false {
				} else {
					z.F.DecSliceStringX(yyv2557, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2561 := &x.LoadBalancerSourceRanges
				yym2562 := z.DecBinary()
				_ = yym2562
				if false {
				} else {
					z.F.DecSliceStringX(yyv2561, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2549)
		} // end switch yys2549
	} // end for yyj2549
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2563 int
	var yyb2563 bool
	var yyhl2563 bool = l >= 0
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2565 := &x.Ports
		yym2566 := z.DecBinary()
		_ = yym2566
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2565), d)
		}
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2567 := &x.Selector
		yym2568 := z.DecBinary()
		_ = yym2568
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2567, false, d)
		}
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2571 := &x.ExternalIPs
		yym2572 := z.DecBinary()
		_ = yym2572
		if false {
		} else {
			z.F.DecSliceStringX(yyv2571, false, d)
		}
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2575 := &x.LoadBalancerSourceRanges
		yym2576 := z.DecBinary()
		_ = yym2576
		if false {
		} else {
			z.F.DecSliceStringX(yyv2575, false, d)
		}
	}
	for {
		yyj2563++
		if yyhl2563 {
			yyb2563 = yyj2563 > l
		} else {
			yyb2563 = r.CheckBreak()
		}
		if yyb2563 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2563-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2577 := z.EncBinary()
		_ = yym2577
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2578 := !z.EncBinary()
			yy2arr2578 := z.EncBasicHandle().StructToArray
			var yyq2578 [5]bool
			_, _, _ = yysep2578, yyq2578, yy2arr2578
			const yyr2578 bool = false
			var yynn2578 int
			if yyr2578 || yy2arr2578 {
				r.EncodeArrayStart(5)
			} else {
				yynn2578 = 5
				for _, b := range yyq2578 {
					if b {
						yynn2578++
					}
				}
				r.EncodeMapStart(yynn2578)
				yynn2578 = 0
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2580 := z.EncBinary()
				_ = yym2580
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2581 := z.EncBinary()
				_ = yym2581
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2584 := z.EncBinary()
				_ = yym2584
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2585 := z.EncBinary()
				_ = yym2585
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2587 := &x.TargetPort
				yym2588 := z.EncBinary()
				_ = yym2588
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2587) {
				} else if !yym2588 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2587)
				} else {
					z.EncFallback(yy2587)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2589 := &x.TargetPort
				yym2590 := z.EncBinary()
				_ = yym2590
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2589) {
				} else if !yym2590 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2589)
				} else {
					z.EncFallback(yy2589)
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2592 := z.EncBinary()
				_ = yym2592
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2593 := z.EncBinary()
				_ = yym2593
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2594 := z.DecBinary()
	_ = yym2594
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2595 := r.ContainerType()
		if yyct2595 == codecSelferValueTypeMap1234 {
			yyl2595 := r.ReadMapStart()
			if yyl2595 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2595, d)
			}
		} else if yyct2595 == codecSelferValueTypeArray1234 {
			yyl2595 := r.ReadArrayStart()
			if yyl2595 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2595, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2596Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2596Slc
	var yyhl2596 bool = l >= 0
	for yyj2596 := 0; ; yyj2596++ {
		if yyhl2596 {
			if yyj2596 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2596Slc = r.DecodeBytes(yys2596Slc, true, true)
		yys2596 := string(yys2596Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2596 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2600 := &x.TargetPort
				yym2601 := z.DecBinary()
				_ = yym2601
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2600) {
				} else if !yym2601 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2600)
				} else {
					z.DecFallback(yyv2600, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2596)
		} // end switch yys2596
	} // end for yyj2596
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2603 int
	var yyb2603 bool
	var yyhl2603 bool = l >= 0
	yyj2603++
	if yyhl2603 {
		yyb2603 = yyj2603 > l
	} else {
		yyb2603 = r.CheckBreak()
	}
	if yyb2603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2603++
	if yyhl2603 {
		yyb2603 = yyj2603 > l
	} else {
		yyb2603 = r.CheckBreak()
	}
	if yyb2603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2603++
	if yyhl2603 {
		yyb2603 = yyj2603 > l
	} else {
		yyb2603 = r.CheckBreak()
	}
	if yyb2603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2603++
	if yyhl2603 {
		yyb2603 = yyj2603 > l
	} else {
		yyb2603 = r.CheckBreak()
	}
	if yyb2603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2607 := &x.TargetPort
		yym2608 := z.DecBinary()
		_ = yym2608
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2607) {
		} else if !yym2608 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2607)
		} else {
			z.DecFallback(yyv2607, false)
		}
	}
	yyj2603++
	if yyhl2603 {
		yyb2603 = yyj2603 > l
	} else {
		yyb2603 = r.CheckBreak()
	}
	if yyb2603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2603++
		if yyhl2603 {
			yyb2603 = yyj2603 > l
		} else {
			yyb2603 = r.CheckBreak()
		}
		if yyb2603 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2603-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2610 := z.EncBinary()
		_ = yym2610
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2611 := !z.EncBinary()
			yy2arr2611 := z.EncBasicHandle().StructToArray
			var yyq2611 [5]bool
			_, _, _ = yysep2611, yyq2611, yy2arr2611
			const yyr2611 bool = false
			yyq2611[0] = x.Kind != ""
			yyq2611[1] = x.APIVersion != ""
			yyq2611[2] = true
			yyq2611[3] = true
			yyq2611[4] = true
			var yynn2611 int
			if yyr2611 || yy2arr2611 {
				r.EncodeArrayStart(5)
			} else {
				yynn2611 = 0
				for _, b := range yyq2611 {
					if b {
						yynn2611++
					}
				}
				r.EncodeMapStart(yynn2611)
				yynn2611 = 0
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2611[0] {
					yym2613 := z.EncBinary()
					_ = yym2613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2611[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2614 := z.EncBinary()
					_ = yym2614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2611[1] {
					yym2616 := z.EncBinary()
					_ = yym2616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2611[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2611[2] {
					yy2619 := &x.ObjectMeta
					yy2619.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2611[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2620 := &x.ObjectMeta
					yy2620.CodecEncodeSelf(e)
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2611[3] {
					yy2622 := &x.Spec
					yy2622.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2611[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2623 := &x.Spec
					yy2623.CodecEncodeSelf(e)
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2611[4] {
					yy2625 := &x.Status
					yy2625.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2611[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2626 := &x.Status
					yy2626.CodecEncodeSelf(e)
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2627 := z.DecBinary()
	_ = yym2627
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2628 := r.ContainerType()
		if yyct2628 == codecSelferValueTypeMap1234 {
			yyl2628 := r.ReadMapStart()
			if yyl2628 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2628, d)
			}
		} else if yyct2628 == codecSelferValueTypeArray1234 {
			yyl2628 := r.ReadArrayStart()
			if yyl2628 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2628, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2629Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2629Slc
	var yyhl2629 bool = l >= 0
	for yyj2629 := 0; ; yyj2629++ {
		if yyhl2629 {
			if yyj2629 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2629Slc = r.DecodeBytes(yys2629Slc, true, true)
		yys2629 := string(yys2629Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2629 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2632 := &x.ObjectMeta
				yyv2632.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2633 := &x.Spec
				yyv2633.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2634 := &x.Status
				yyv2634.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2629)
		} // end switch yys2629
	} // end for yyj2629
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2635 int
	var yyb2635 bool
	var yyhl2635 bool = l >= 0
	yyj2635++
	if yyhl2635 {
		yyb2635 = yyj2635 > l
	} else {
		yyb2635 = r.CheckBreak()
	}
	if yyb2635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2635++
	if yyhl2635 {
		yyb2635 = yyj2635 > l
	} else {
		yyb2635 = r.CheckBreak()
	}
	if yyb2635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2635++
	if yyhl2635 {
		yyb2635 = yyj2635 > l
	} else {
		yyb2635 = r.CheckBreak()
	}
	if yyb2635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2638 := &x.ObjectMeta
		yyv2638.CodecDecodeSelf(d)
	}
	yyj2635++
	if yyhl2635 {
		yyb2635 = yyj2635 > l
	} else {
		yyb2635 = r.CheckBreak()
	}
	if yyb2635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2639 := &x.Spec
		yyv2639.CodecDecodeSelf(d)
	}
	yyj2635++
	if yyhl2635 {
		yyb2635 = yyj2635 > l
	} else {
		yyb2635 = r.CheckBreak()
	}
	if yyb2635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2640 := &x.Status
		yyv2640.CodecDecodeSelf(d)
	}
	for {
		yyj2635++
		if yyhl2635 {
			yyb2635 = yyj2635 > l
		} else {
			yyb2635 = r.CheckBreak()
		}
		if yyb2635 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2635-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2641 := z.EncBinary()
		_ = yym2641
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2642 := !z.EncBinary()
			yy2arr2642 := z.EncBasicHandle().StructToArray
			var yyq2642 [5]bool
			_, _, _ = yysep2642, yyq2642, yy2arr2642
			const yyr2642 bool = false
			yyq2642[0] = x.Kind != ""
			yyq2642[1] = x.APIVersion != ""
			yyq2642[2] = true
			yyq2642[4] = len(x.ImagePullSecrets) != 0
			var yynn2642 int
			if yyr2642 || yy2arr2642 {
				r.EncodeArrayStart(5)
			} else {
				yynn2642 = 1
				for _, b := range yyq2642 {
					if b {
						yynn2642++
					}
				}
				r.EncodeMapStart(yynn2642)
				yynn2642 = 0
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[0] {
					yym2644 := z.EncBinary()
					_ = yym2644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2642[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2645 := z.EncBinary()
					_ = yym2645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[1] {
					yym2647 := z.EncBinary()
					_ = yym2647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2642[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2648 := z.EncBinary()
					_ = yym2648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[2] {
					yy2650 := &x.ObjectMeta
					yy2650.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2642[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2651 := &x.ObjectMeta
					yy2651.CodecEncodeSelf(e)
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2653 := z.EncBinary()
					_ = yym2653
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2654 := z.EncBinary()
					_ = yym2654
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2656 := z.EncBinary()
						_ = yym2656
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2642[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2657 := z.EncBinary()
						_ = yym2657
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2658 := z.DecBinary()
	_ = yym2658
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2659 := r.ContainerType()
		if yyct2659 == codecSelferValueTypeMap1234 {
			yyl2659 := r.ReadMapStart()
			if yyl2659 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2659, d)
			}
		} else if yyct2659 == codecSelferValueTypeArray1234 {
			yyl2659 := r.ReadArrayStart()
			if yyl2659 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2659, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2660Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2660Slc
	var yyhl2660 bool = l >= 0
	for yyj2660 := 0; ; yyj2660++ {
		if yyhl2660 {
			if yyj2660 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2660Slc = r.DecodeBytes(yys2660Slc, true, true)
		yys2660 := string(yys2660Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2660 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2663 := &x.ObjectMeta
				yyv2663.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2664 := &x.Secrets
				yym2665 := z.DecBinary()
				_ = yym2665
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2664), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2666 := &x.ImagePullSecrets
				yym2667 := z.DecBinary()
				_ = yym2667
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2666), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2660)
		} // end switch yys2660
	} // end for yyj2660
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2668 int
	var yyb2668 bool
	var yyhl2668 bool = l >= 0
	yyj2668++
	if yyhl2668 {
		yyb2668 = yyj2668 > l
	} else {
		yyb2668 = r.CheckBreak()
	}
	if yyb2668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2668++
	if yyhl2668 {
		yyb2668 = yyj2668 > l
	} else {
		yyb2668 = r.CheckBreak()
	}
	if yyb2668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2668++
	if yyhl2668 {
		yyb2668 = yyj2668 > l
	} else {
		yyb2668 = r.CheckBreak()
	}
	if yyb2668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2671 := &x.ObjectMeta
		yyv2671.CodecDecodeSelf(d)
	}
	yyj2668++
	if yyhl2668 {
		yyb2668 = yyj2668 > l
	} else {
		yyb2668 = r.CheckBreak()
	}
	if yyb2668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2672 := &x.Secrets
		yym2673 := z.DecBinary()
		_ = yym2673
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2672), d)
		}
	}
	yyj2668++
	if yyhl2668 {
		yyb2668 = yyj2668 > l
	} else {
		yyb2668 = r.CheckBreak()
	}
	if yyb2668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2674 := &x.ImagePullSecrets
		yym2675 := z.DecBinary()
		_ = yym2675
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2674), d)
		}
	}
	for {
		yyj2668++
		if yyhl2668 {
			yyb2668 = yyj2668 > l
		} else {
			yyb2668 = r.CheckBreak()
		}
		if yyb2668 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2668-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2676 := z.EncBinary()
		_ = yym2676
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2677 := !z.EncBinary()
			yy2arr2677 := z.EncBasicHandle().StructToArray
			var yyq2677 [4]bool
			_, _, _ = yysep2677, yyq2677, yy2arr2677
			const yyr2677 bool = false
			yyq2677[0] = x.Kind != ""
			yyq2677[1] = x.APIVersion != ""
			yyq2677[2] = true
			var yynn2677 int
			if yyr2677 || yy2arr2677 {
				r.EncodeArrayStart(4)
			} else {
				yynn2677 = 1
				for _, b := range yyq2677 {
					if b {
						yynn2677++
					}
				}
				r.EncodeMapStart(yynn2677)
				yynn2677 = 0
			}
			if yyr2677 || yy2arr2677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2677[0] {
					yym2679 := z.EncBinary()
					_ = yym2679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2677[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2680 := z.EncBinary()
					_ = yym2680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2677 || yy2arr2677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2677[1] {
					yym2682 := z.EncBinary()
					_ = yym2682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2677[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2683 := z.EncBinary()
					_ = yym2683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2677 || yy2arr2677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2677[2] {
					yy2685 := &x.ListMeta
					yym2686 := z.EncBinary()
					_ = yym2686
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2685) {
					} else {
						z.EncFallback(yy2685)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2677[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2687 := &x.ListMeta
					yym2688 := z.EncBinary()
					_ = yym2688
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2687) {
					} else {
						z.EncFallback(yy2687)
					}
				}
			}
			if yyr2677 || yy2arr2677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2690 := z.EncBinary()
					_ = yym2690
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2691 := z.EncBinary()
					_ = yym2691
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2677 || yy2arr2677 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2692 := z.DecBinary()
	_ = yym2692
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2693 := r.ContainerType()
		if yyct2693 == codecSelferValueTypeMap1234 {
			yyl2693 := r.ReadMapStart()
			if yyl2693 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2693, d)
			}
		} else if yyct2693 == codecSelferValueTypeArray1234 {
			yyl2693 := r.ReadArrayStart()
			if yyl2693 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2693, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2694Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2694Slc
	var yyhl2694 bool = l >= 0
	for yyj2694 := 0; ; yyj2694++ {
		if yyhl2694 {
			if yyj2694 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2694Slc = r.DecodeBytes(yys2694Slc, true, true)
		yys2694 := string(yys2694Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2694 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2697 := &x.ListMeta
				yym2698 := z.DecBinary()
				_ = yym2698
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2697) {
				} else {
					z.DecFallback(yyv2697, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2699 := &x.Items
				yym2700 := z.DecBinary()
				_ = yym2700
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2699), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2694)
		} // end switch yys2694
	} // end for yyj2694
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2701 int
	var yyb2701 bool
	var yyhl2701 bool = l >= 0
	yyj2701++
	if yyhl2701 {
		yyb2701 = yyj2701 > l
	} else {
		yyb2701 = r.CheckBreak()
	}
	if yyb2701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2701++
	if yyhl2701 {
		yyb2701 = yyj2701 > l
	} else {
		yyb2701 = r.CheckBreak()
	}
	if yyb2701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2701++
	if yyhl2701 {
		yyb2701 = yyj2701 > l
	} else {
		yyb2701 = r.CheckBreak()
	}
	if yyb2701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2704 := &x.ListMeta
		yym2705 := z.DecBinary()
		_ = yym2705
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2704) {
		} else {
			z.DecFallback(yyv2704, false)
		}
	}
	yyj2701++
	if yyhl2701 {
		yyb2701 = yyj2701 > l
	} else {
		yyb2701 = r.CheckBreak()
	}
	if yyb2701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2706 := &x.Items
		yym2707 := z.DecBinary()
		_ = yym2707
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2706), d)
		}
	}
	for {
		yyj2701++
		if yyhl2701 {
			yyb2701 = yyj2701 > l
		} else {
			yyb2701 = r.CheckBreak()
		}
		if yyb2701 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2701-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2708 := z.EncBinary()
		_ = yym2708
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2709 := !z.EncBinary()
			yy2arr2709 := z.EncBasicHandle().StructToArray
			var yyq2709 [4]bool
			_, _, _ = yysep2709, yyq2709, yy2arr2709
			const yyr2709 bool = false
			yyq2709[0] = x.Kind != ""
			yyq2709[1] = x.APIVersion != ""
			yyq2709[2] = true
			var yynn2709 int
			if yyr2709 || yy2arr2709 {
				r.EncodeArrayStart(4)
			} else {
				yynn2709 = 1
				for _, b := range yyq2709 {
					if b {
						yynn2709++
					}
				}
				r.EncodeMapStart(yynn2709)
				yynn2709 = 0
			}
			if yyr2709 || yy2arr2709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2709[0] {
					yym2711 := z.EncBinary()
					_ = yym2711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2709[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2712 := z.EncBinary()
					_ = yym2712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2709 || yy2arr2709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2709[1] {
					yym2714 := z.EncBinary()
					_ = yym2714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2709[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2715 := z.EncBinary()
					_ = yym2715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2709 || yy2arr2709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2709[2] {
					yy2717 := &x.ObjectMeta
					yy2717.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2709[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2718 := &x.ObjectMeta
					yy2718.CodecEncodeSelf(e)
				}
			}
			if yyr2709 || yy2arr2709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2720 := z.EncBinary()
					_ = yym2720
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2709 || yy2arr2709 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2722 := z.DecBinary()
	_ = yym2722
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2723 := r.ContainerType()
		if yyct2723 == codecSelferValueTypeMap1234 {
			yyl2723 := r.ReadMapStart()
			if yyl2723 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2723, d)
			}
		} else if yyct2723 == codecSelferValueTypeArray1234 {
			yyl2723 := r.ReadArrayStart()
			if yyl2723 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2723, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2724Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2724Slc
	var yyhl2724 bool = l >= 0
	for yyj2724 := 0; ; yyj2724++ {
		if yyhl2724 {
			if yyj2724 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2724Slc = r.DecodeBytes(yys2724Slc, true, true)
		yys2724 := string(yys2724Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2724 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2727 := &x.ObjectMeta
				yyv2727.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2728 := &x.Subsets
				yym2729 := z.DecBinary()
				_ = yym2729
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2728), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2724)
		} // end switch yys2724
	} // end for yyj2724
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2730 int
	var yyb2730 bool
	var yyhl2730 bool = l >= 0
	yyj2730++
	if yyhl2730 {
		yyb2730 = yyj2730 > l
	} else {
		yyb2730 = r.CheckBreak()
	}
	if yyb2730 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2730++
	if yyhl2730 {
		yyb2730 = yyj2730 > l
	} else {
		yyb2730 = r.CheckBreak()
	}
	if yyb2730 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2730++
	if yyhl2730 {
		yyb2730 = yyj2730 > l
	} else {
		yyb2730 = r.CheckBreak()
	}
	if yyb2730 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2733 := &x.ObjectMeta
		yyv2733.CodecDecodeSelf(d)
	}
	yyj2730++
	if yyhl2730 {
		yyb2730 = yyj2730 > l
	} else {
		yyb2730 = r.CheckBreak()
	}
	if yyb2730 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2734 := &x.Subsets
		yym2735 := z.DecBinary()
		_ = yym2735
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2734), d)
		}
	}
	for {
		yyj2730++
		if yyhl2730 {
			yyb2730 = yyj2730 > l
		} else {
			yyb2730 = r.CheckBreak()
		}
		if yyb2730 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2730-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2736 := z.EncBinary()
		_ = yym2736
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2737 := !z.EncBinary()
			yy2arr2737 := z.EncBasicHandle().StructToArray
			var yyq2737 [3]bool
			_, _, _ = yysep2737, yyq2737, yy2arr2737
			const yyr2737 bool = false
			var yynn2737 int
			if yyr2737 || yy2arr2737 {
				r.EncodeArrayStart(3)
			} else {
				yynn2737 = 3
				for _, b := range yyq2737 {
					if b {
						yynn2737++
					}
				}
				r.EncodeMapStart(yynn2737)
				yynn2737 = 0
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2739 := z.EncBinary()
					_ = yym2739
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2740 := z.EncBinary()
					_ = yym2740
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2742 := z.EncBinary()
					_ = yym2742
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2743 := z.EncBinary()
					_ = yym2743
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2745 := z.EncBinary()
					_ = yym2745
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2747 := z.DecBinary()
	_ = yym2747
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2748 := r.ContainerType()
		if yyct2748 == codecSelferValueTypeMap1234 {
			yyl2748 := r.ReadMapStart()
			if yyl2748 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2748, d)
			}
		} else if yyct2748 == codecSelferValueTypeArray1234 {
			yyl2748 := r.ReadArrayStart()
			if yyl2748 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2748, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2749Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2749Slc
	var yyhl2749 bool = l >= 0
	for yyj2749 := 0; ; yyj2749++ {
		if yyhl2749 {
			if yyj2749 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2749Slc = r.DecodeBytes(yys2749Slc, true, true)
		yys2749 := string(yys2749Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2749 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2750 := &x.Addresses
				yym2751 := z.DecBinary()
				_ = yym2751
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2750), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2752 := &x.NotReadyAddresses
				yym2753 := z.DecBinary()
				_ = yym2753
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2752), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2754 := &x.Ports
				yym2755 := z.DecBinary()
				_ = yym2755
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2754), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2749)
		} // end switch yys2749
	} // end for yyj2749
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2756 int
	var yyb2756 bool
	var yyhl2756 bool = l >= 0
	yyj2756++
	if yyhl2756 {
		yyb2756 = yyj2756 > l
	} else {
		yyb2756 = r.CheckBreak()
	}
	if yyb2756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2757 := &x.Addresses
		yym2758 := z.DecBinary()
		_ = yym2758
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2757), d)
		}
	}
	yyj2756++
	if yyhl2756 {
		yyb2756 = yyj2756 > l
	} else {
		yyb2756 = r.CheckBreak()
	}
	if yyb2756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2759 := &x.NotReadyAddresses
		yym2760 := z.DecBinary()
		_ = yym2760
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2759), d)
		}
	}
	yyj2756++
	if yyhl2756 {
		yyb2756 = yyj2756 > l
	} else {
		yyb2756 = r.CheckBreak()
	}
	if yyb2756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2761 := &x.Ports
		yym2762 := z.DecBinary()
		_ = yym2762
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2761), d)
		}
	}
	for {
		yyj2756++
		if yyhl2756 {
			yyb2756 = yyj2756 > l
		} else {
			yyb2756 = r.CheckBreak()
		}
		if yyb2756 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2756-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2763 := z.EncBinary()
		_ = yym2763
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2764 := !z.EncBinary()
			yy2arr2764 := z.EncBasicHandle().StructToArray
			var yyq2764 [4]bool
			_, _, _ = yysep2764, yyq2764, yy2arr2764
			const yyr2764 bool = false
			yyq2764[1] = x.Hostname != ""
			yyq2764[2] = x.NodeName != nil
			var yynn2764 int
			if yyr2764 || yy2arr2764 {
				r.EncodeArrayStart(4)
			} else {
				yynn2764 = 2
				for _, b := range yyq2764 {
					if b {
						yynn2764++
					}
				}
				r.EncodeMapStart(yynn2764)
				yynn2764 = 0
			}
			if yyr2764 || yy2arr2764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2766 := z.EncBinary()
				_ = yym2766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2767 := z.EncBinary()
				_ = yym2767
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2764 || yy2arr2764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2764[1] {
					yym2769 := z.EncBinary()
					_ = yym2769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2764[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2770 := z.EncBinary()
					_ = yym2770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2764 || yy2arr2764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2764[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2772 := *x.NodeName
						yym2773 := z.EncBinary()
						_ = yym2773
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2772))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2764[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2774 := *x.NodeName
						yym2775 := z.EncBinary()
						_ = yym2775
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2774))
						}
					}
				}
			}
			if yyr2764 || yy2arr2764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2764 || yy2arr2764 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2777 := z.DecBinary()
	_ = yym2777
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2778 := r.ContainerType()
		if yyct2778 == codecSelferValueTypeMap1234 {
			yyl2778 := r.ReadMapStart()
			if yyl2778 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2778, d)
			}
		} else if yyct2778 == codecSelferValueTypeArray1234 {
			yyl2778 := r.ReadArrayStart()
			if yyl2778 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2778, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2779Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2779Slc
	var yyhl2779 bool = l >= 0
	for yyj2779 := 0; ; yyj2779++ {
		if yyhl2779 {
			if yyj2779 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2779Slc = r.DecodeBytes(yys2779Slc, true, true)
		yys2779 := string(yys2779Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2779 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2783 := z.DecBinary()
				_ = yym2783
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2779)
		} // end switch yys2779
	} // end for yyj2779
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2785 int
	var yyb2785 bool
	var yyhl2785 bool = l >= 0
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2789 := z.DecBinary()
		_ = yym2789
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2785++
		if yyhl2785 {
			yyb2785 = yyj2785 > l
		} else {
			yyb2785 = r.CheckBreak()
		}
		if yyb2785 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2785-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2791 := z.EncBinary()
		_ = yym2791
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2792 := !z.EncBinary()
			yy2arr2792 := z.EncBasicHandle().StructToArray
			var yyq2792 [3]bool
			_, _, _ = yysep2792, yyq2792, yy2arr2792
			const yyr2792 bool = false
			var yynn2792 int
			if yyr2792 || yy2arr2792 {
				r.EncodeArrayStart(3)
			} else {
				yynn2792 = 3
				for _, b := range yyq2792 {
					if b {
						yynn2792++
					}
				}
				r.EncodeMapStart(yynn2792)
				yynn2792 = 0
			}
			if yyr2792 || yy2arr2792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2794 := z.EncBinary()
				_ = yym2794
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2795 := z.EncBinary()
				_ = yym2795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2792 || yy2arr2792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2797 := z.EncBinary()
				_ = yym2797
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2798 := z.EncBinary()
				_ = yym2798
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2792 || yy2arr2792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2792 || yy2arr2792 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2800 := z.DecBinary()
	_ = yym2800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2801 := r.ContainerType()
		if yyct2801 == codecSelferValueTypeMap1234 {
			yyl2801 := r.ReadMapStart()
			if yyl2801 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2801, d)
			}
		} else if yyct2801 == codecSelferValueTypeArray1234 {
			yyl2801 := r.ReadArrayStart()
			if yyl2801 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2802Slc
	var yyhl2802 bool = l >= 0
	for yyj2802 := 0; ; yyj2802++ {
		if yyhl2802 {
			if yyj2802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2802Slc = r.DecodeBytes(yys2802Slc, true, true)
		yys2802 := string(yys2802Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2802 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2802)
		} // end switch yys2802
	} // end for yyj2802
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2806 int
	var yyb2806 bool
	var yyhl2806 bool = l >= 0
	yyj2806++
	if yyhl2806 {
		yyb2806 = yyj2806 > l
	} else {
		yyb2806 = r.CheckBreak()
	}
	if yyb2806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2806++
	if yyhl2806 {
		yyb2806 = yyj2806 > l
	} else {
		yyb2806 = r.CheckBreak()
	}
	if yyb2806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2806++
	if yyhl2806 {
		yyb2806 = yyj2806 > l
	} else {
		yyb2806 = r.CheckBreak()
	}
	if yyb2806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2806++
		if yyhl2806 {
			yyb2806 = yyj2806 > l
		} else {
			yyb2806 = r.CheckBreak()
		}
		if yyb2806 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2806-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2810 := z.EncBinary()
		_ = yym2810
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2811 := !z.EncBinary()
			yy2arr2811 := z.EncBasicHandle().StructToArray
			var yyq2811 [4]bool
			_, _, _ = yysep2811, yyq2811, yy2arr2811
			const yyr2811 bool = false
			yyq2811[0] = x.Kind != ""
			yyq2811[1] = x.APIVersion != ""
			yyq2811[2] = true
			var yynn2811 int
			if yyr2811 || yy2arr2811 {
				r.EncodeArrayStart(4)
			} else {
				yynn2811 = 1
				for _, b := range yyq2811 {
					if b {
						yynn2811++
					}
				}
				r.EncodeMapStart(yynn2811)
				yynn2811 = 0
			}
			if yyr2811 || yy2arr2811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2811[0] {
					yym2813 := z.EncBinary()
					_ = yym2813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2811[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2814 := z.EncBinary()
					_ = yym2814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2811 || yy2arr2811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2811[1] {
					yym2816 := z.EncBinary()
					_ = yym2816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2811[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2817 := z.EncBinary()
					_ = yym2817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2811 || yy2arr2811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2811[2] {
					yy2819 := &x.ListMeta
					yym2820 := z.EncBinary()
					_ = yym2820
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2819) {
					} else {
						z.EncFallback(yy2819)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2811[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2821 := &x.ListMeta
					yym2822 := z.EncBinary()
					_ = yym2822
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2821) {
					} else {
						z.EncFallback(yy2821)
					}
				}
			}
			if yyr2811 || yy2arr2811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2824 := z.EncBinary()
					_ = yym2824
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2825 := z.EncBinary()
					_ = yym2825
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2811 || yy2arr2811 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2826 := z.DecBinary()
	_ = yym2826
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2827 := r.ContainerType()
		if yyct2827 == codecSelferValueTypeMap1234 {
			yyl2827 := r.ReadMapStart()
			if yyl2827 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2827, d)
			}
		} else if yyct2827 == codecSelferValueTypeArray1234 {
			yyl2827 := r.ReadArrayStart()
			if yyl2827 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2827, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2828Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2828Slc
	var yyhl2828 bool = l >= 0
	for yyj2828 := 0; ; yyj2828++ {
		if yyhl2828 {
			if yyj2828 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2828Slc = r.DecodeBytes(yys2828Slc, true, true)
		yys2828 := string(yys2828Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2828 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2831 := &x.ListMeta
				yym2832 := z.DecBinary()
				_ = yym2832
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2831) {
				} else {
					z.DecFallback(yyv2831, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2833 := &x.Items
				yym2834 := z.DecBinary()
				_ = yym2834
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2833), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2828)
		} // end switch yys2828
	} // end for yyj2828
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2835 int
	var yyb2835 bool
	var yyhl2835 bool = l >= 0
	yyj2835++
	if yyhl2835 {
		yyb2835 = yyj2835 > l
	} else {
		yyb2835 = r.CheckBreak()
	}
	if yyb2835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2835++
	if yyhl2835 {
		yyb2835 = yyj2835 > l
	} else {
		yyb2835 = r.CheckBreak()
	}
	if yyb2835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2835++
	if yyhl2835 {
		yyb2835 = yyj2835 > l
	} else {
		yyb2835 = r.CheckBreak()
	}
	if yyb2835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2838 := &x.ListMeta
		yym2839 := z.DecBinary()
		_ = yym2839
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2838) {
		} else {
			z.DecFallback(yyv2838, false)
		}
	}
	yyj2835++
	if yyhl2835 {
		yyb2835 = yyj2835 > l
	} else {
		yyb2835 = r.CheckBreak()
	}
	if yyb2835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2840 := &x.Items
		yym2841 := z.DecBinary()
		_ = yym2841
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2840), d)
		}
	}
	for {
		yyj2835++
		if yyhl2835 {
			yyb2835 = yyj2835 > l
		} else {
			yyb2835 = r.CheckBreak()
		}
		if yyb2835 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2835-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2842 := z.EncBinary()
		_ = yym2842
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2843 := !z.EncBinary()
			yy2arr2843 := z.EncBasicHandle().StructToArray
			var yyq2843 [4]bool
			_, _, _ = yysep2843, yyq2843, yy2arr2843
			const yyr2843 bool = false
			yyq2843[0] = x.PodCIDR != ""
			yyq2843[1] = x.ExternalID != ""
			yyq2843[2] = x.ProviderID != ""
			yyq2843[3] = x.Unschedulable != false
			var yynn2843 int
			if yyr2843 || yy2arr2843 {
				r.EncodeArrayStart(4)
			} else {
				yynn2843 = 0
				for _, b := range yyq2843 {
					if b {
						yynn2843++
					}
				}
				r.EncodeMapStart(yynn2843)
				yynn2843 = 0
			}
			if yyr2843 || yy2arr2843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2843[0] {
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2843[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2846 := z.EncBinary()
					_ = yym2846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2843 || yy2arr2843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2843[1] {
					yym2848 := z.EncBinary()
					_ = yym2848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2843[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2849 := z.EncBinary()
					_ = yym2849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2843 || yy2arr2843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2843[2] {
					yym2851 := z.EncBinary()
					_ = yym2851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2843[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2852 := z.EncBinary()
					_ = yym2852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2843 || yy2arr2843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2843[3] {
					yym2854 := z.EncBinary()
					_ = yym2854
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2843[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2855 := z.EncBinary()
					_ = yym2855
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2843 || yy2arr2843 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2856 := z.DecBinary()
	_ = yym2856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2857 := r.ContainerType()
		if yyct2857 == codecSelferValueTypeMap1234 {
			yyl2857 := r.ReadMapStart()
			if yyl2857 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2857, d)
			}
		} else if yyct2857 == codecSelferValueTypeArray1234 {
			yyl2857 := r.ReadArrayStart()
			if yyl2857 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2858Slc
	var yyhl2858 bool = l >= 0
	for yyj2858 := 0; ; yyj2858++ {
		if yyhl2858 {
			if yyj2858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2858Slc = r.DecodeBytes(yys2858Slc, true, true)
		yys2858 := string(yys2858Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2858 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2858)
		} // end switch yys2858
	} // end for yyj2858
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2863 int
	var yyb2863 bool
	var yyhl2863 bool = l >= 0
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2863++
		if yyhl2863 {
			yyb2863 = yyj2863 > l
		} else {
			yyb2863 = r.CheckBreak()
		}
		if yyb2863 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2863-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2868 := z.EncBinary()
		_ = yym2868
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2869 := !z.EncBinary()
			yy2arr2869 := z.EncBasicHandle().StructToArray
			var yyq2869 [1]bool
			_, _, _ = yysep2869, yyq2869, yy2arr2869
			const yyr2869 bool = false
			var yynn2869 int
			if yyr2869 || yy2arr2869 {
				r.EncodeArrayStart(1)
			} else {
				yynn2869 = 1
				for _, b := range yyq2869 {
					if b {
						yynn2869++
					}
				}
				r.EncodeMapStart(yynn2869)
				yynn2869 = 0
			}
			if yyr2869 || yy2arr2869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2871 := z.EncBinary()
				_ = yym2871
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2872 := z.EncBinary()
				_ = yym2872
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2869 || yy2arr2869 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2873 := z.DecBinary()
	_ = yym2873
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2874 := r.ContainerType()
		if yyct2874 == codecSelferValueTypeMap1234 {
			yyl2874 := r.ReadMapStart()
			if yyl2874 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2874, d)
			}
		} else if yyct2874 == codecSelferValueTypeArray1234 {
			yyl2874 := r.ReadArrayStart()
			if yyl2874 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2874, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2875Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2875Slc
	var yyhl2875 bool = l >= 0
	for yyj2875 := 0; ; yyj2875++ {
		if yyhl2875 {
			if yyj2875 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2875Slc = r.DecodeBytes(yys2875Slc, true, true)
		yys2875 := string(yys2875Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2875 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2875)
		} // end switch yys2875
	} // end for yyj2875
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2877 int
	var yyb2877 bool
	var yyhl2877 bool = l >= 0
	yyj2877++
	if yyhl2877 {
		yyb2877 = yyj2877 > l
	} else {
		yyb2877 = r.CheckBreak()
	}
	if yyb2877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2877++
		if yyhl2877 {
			yyb2877 = yyj2877 > l
		} else {
			yyb2877 = r.CheckBreak()
		}
		if yyb2877 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2877-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2879 := z.EncBinary()
		_ = yym2879
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2880 := !z.EncBinary()
			yy2arr2880 := z.EncBasicHandle().StructToArray
			var yyq2880 [1]bool
			_, _, _ = yysep2880, yyq2880, yy2arr2880
			const yyr2880 bool = false
			yyq2880[0] = true
			var yynn2880 int
			if yyr2880 || yy2arr2880 {
				r.EncodeArrayStart(1)
			} else {
				yynn2880 = 0
				for _, b := range yyq2880 {
					if b {
						yynn2880++
					}
				}
				r.EncodeMapStart(yynn2880)
				yynn2880 = 0
			}
			if yyr2880 || yy2arr2880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2880[0] {
					yy2882 := &x.KubeletEndpoint
					yy2882.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2880[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2883 := &x.KubeletEndpoint
					yy2883.CodecEncodeSelf(e)
				}
			}
			if yyr2880 || yy2arr2880 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2884 := z.DecBinary()
	_ = yym2884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2885 := r.ContainerType()
		if yyct2885 == codecSelferValueTypeMap1234 {
			yyl2885 := r.ReadMapStart()
			if yyl2885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2885, d)
			}
		} else if yyct2885 == codecSelferValueTypeArray1234 {
			yyl2885 := r.ReadArrayStart()
			if yyl2885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2886Slc
	var yyhl2886 bool = l >= 0
	for yyj2886 := 0; ; yyj2886++ {
		if yyhl2886 {
			if yyj2886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2886Slc = r.DecodeBytes(yys2886Slc, true, true)
		yys2886 := string(yys2886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2886 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2887 := &x.KubeletEndpoint
				yyv2887.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2886)
		} // end switch yys2886
	} // end for yyj2886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2888 int
	var yyb2888 bool
	var yyhl2888 bool = l >= 0
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2889 := &x.KubeletEndpoint
		yyv2889.CodecDecodeSelf(d)
	}
	for {
		yyj2888++
		if yyhl2888 {
			yyb2888 = yyj2888 > l
		} else {
			yyb2888 = r.CheckBreak()
		}
		if yyb2888 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2888-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2890 := z.EncBinary()
		_ = yym2890
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2891 := !z.EncBinary()
			yy2arr2891 := z.EncBasicHandle().StructToArray
			var yyq2891 [10]bool
			_, _, _ = yysep2891, yyq2891, yy2arr2891
			const yyr2891 bool = false
			var yynn2891 int
			if yyr2891 || yy2arr2891 {
				r.EncodeArrayStart(10)
			} else {
				yynn2891 = 10
				for _, b := range yyq2891 {
					if b {
						yynn2891++
					}
				}
				r.EncodeMapStart(yynn2891)
				yynn2891 = 0
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2893 := z.EncBinary()
				_ = yym2893
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2894 := z.EncBinary()
				_ = yym2894
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2896 := z.EncBinary()
				_ = yym2896
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2897 := z.EncBinary()
				_ = yym2897
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2899 := z.EncBinary()
				_ = yym2899
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2900 := z.EncBinary()
				_ = yym2900
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2902 := z.EncBinary()
				_ = yym2902
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2903 := z.EncBinary()
				_ = yym2903
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2905 := z.EncBinary()
				_ = yym2905
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2906 := z.EncBinary()
				_ = yym2906
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2908 := z.EncBinary()
				_ = yym2908
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2909 := z.EncBinary()
				_ = yym2909
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2911 := z.EncBinary()
				_ = yym2911
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2912 := z.EncBinary()
				_ = yym2912
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2914 := z.EncBinary()
				_ = yym2914
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2915 := z.EncBinary()
				_ = yym2915
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2917 := z.EncBinary()
				_ = yym2917
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2918 := z.EncBinary()
				_ = yym2918
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2920 := z.EncBinary()
				_ = yym2920
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2921 := z.EncBinary()
				_ = yym2921
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2922 := z.DecBinary()
	_ = yym2922
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2923 := r.ContainerType()
		if yyct2923 == codecSelferValueTypeMap1234 {
			yyl2923 := r.ReadMapStart()
			if yyl2923 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2923, d)
			}
		} else if yyct2923 == codecSelferValueTypeArray1234 {
			yyl2923 := r.ReadArrayStart()
			if yyl2923 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2923, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2924Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2924Slc
	var yyhl2924 bool = l >= 0
	for yyj2924 := 0; ; yyj2924++ {
		if yyhl2924 {
			if yyj2924 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2924Slc = r.DecodeBytes(yys2924Slc, true, true)
		yys2924 := string(yys2924Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2924 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2924)
		} // end switch yys2924
	} // end for yyj2924
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2935 int
	var yyb2935 bool
	var yyhl2935 bool = l >= 0
	yyj2935++
	if yyhl2935 {
		yyb2935 = yyj2935 > l
	} else {
		yyb2935 = r.CheckBreak()
	}
	if yyb2935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2935++
	if yyhl2935 {
		yyb2935 = yyj2935 > l
	} else {
		yyb2935 = r.CheckBreak()
	}
	if yyb2935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2935++
	if yyhl2935 {
		yyb2935 = yyj2935 > l
	} else {
		yyb2935 = r.CheckBreak()
	}
	if yyb2935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2935++
	if yyhl2935 {
		yyb2935 = yyj2935 > l
	} else {
		yyb2935 = r.CheckBreak()
	}
	if yyb2935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2935++
	if yyhl2935 {
		yyb2935 = yyj2935 > l
	} else {
		yyb2935 = r.CheckBreak()
	}
	if yyb2935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2935++
	if yyhl2935 {
		yyb2935 = yyj2935 > l
	} else {
		yyb2935 = r.CheckBreak()
	}
	if yyb2935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2935++
	if yyhl2935 {
		yyb2935 = yyj2935 > l
	} else {
		yyb2935 = r.CheckBreak()
	}
	if yyb2935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2935++
	if yyhl2935 {
		yyb2935 = yyj2935 > l
	} else {
		yyb2935 = r.CheckBreak()
	}
	if yyb2935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2935++
	if yyhl2935 {
		yyb2935 = yyj2935 > l
	} else {
		yyb2935 = r.CheckBreak()
	}
	if yyb2935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2935++
	if yyhl2935 {
		yyb2935 = yyj2935 > l
	} else {
		yyb2935 = r.CheckBreak()
	}
	if yyb2935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2935++
		if yyhl2935 {
			yyb2935 = yyj2935 > l
		} else {
			yyb2935 = r.CheckBreak()
		}
		if yyb2935 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2935-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2946 := z.EncBinary()
		_ = yym2946
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2947 := !z.EncBinary()
			yy2arr2947 := z.EncBasicHandle().StructToArray
			var yyq2947 [10]bool
			_, _, _ = yysep2947, yyq2947, yy2arr2947
			const yyr2947 bool = false
			yyq2947[0] = len(x.Capacity) != 0
			yyq2947[1] = len(x.Allocatable) != 0
			yyq2947[2] = x.Phase != ""
			yyq2947[3] = len(x.Conditions) != 0
			yyq2947[4] = len(x.Addresses) != 0
			yyq2947[5] = true
			yyq2947[6] = true
			yyq2947[7] = len(x.Images) != 0
			yyq2947[8] = len(x.VolumesInUse) != 0
			yyq2947[9] = len(x.VolumesAttached) != 0
			var yynn2947 int
			if yyr2947 || yy2arr2947 {
				r.EncodeArrayStart(10)
			} else {
				yynn2947 = 0
				for _, b := range yyq2947 {
					if b {
						yynn2947++
					}
				}
				r.EncodeMapStart(yynn2947)
				yynn2947 = 0
			}
			if yyr2947 || yy2arr2947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2947[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2947[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2947 || yy2arr2947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2947[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2947[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2947 || yy2arr2947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2947[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2947[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2947 || yy2arr2947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2947[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2952 := z.EncBinary()
						_ = yym2952
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2947[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2953 := z.EncBinary()
						_ = yym2953
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2947 || yy2arr2947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2947[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2955 := z.EncBinary()
						_ = yym2955
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2947[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2956 := z.EncBinary()
						_ = yym2956
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2947 || yy2arr2947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2947[5] {
					yy2958 := &x.DaemonEndpoints
					yy2958.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2947[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2959 := &x.DaemonEndpoints
					yy2959.CodecEncodeSelf(e)
				}
			}
			if yyr2947 || yy2arr2947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2947[6] {
					yy2961 := &x.NodeInfo
					yy2961.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2947[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2962 := &x.NodeInfo
					yy2962.CodecEncodeSelf(e)
				}
			}
			if yyr2947 || yy2arr2947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2947[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2964 := z.EncBinary()
						_ = yym2964
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2947[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2965 := z.EncBinary()
						_ = yym2965
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2947 || yy2arr2947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2947[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2967 := z.EncBinary()
						_ = yym2967
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2947[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2968 := z.EncBinary()
						_ = yym2968
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2947 || yy2arr2947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2947[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2970 := z.EncBinary()
						_ = yym2970
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2947[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2971 := z.EncBinary()
						_ = yym2971
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2947 || yy2arr2947 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2972 := z.DecBinary()
	_ = yym2972
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2973 := r.ContainerType()
		if yyct2973 == codecSelferValueTypeMap1234 {
			yyl2973 := r.ReadMapStart()
			if yyl2973 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2973, d)
			}
		} else if yyct2973 == codecSelferValueTypeArray1234 {
			yyl2973 := r.ReadArrayStart()
			if yyl2973 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2973, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2974Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2974Slc
	var yyhl2974 bool = l >= 0
	for yyj2974 := 0; ; yyj2974++ {
		if yyhl2974 {
			if yyj2974 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2974Slc = r.DecodeBytes(yys2974Slc, true, true)
		yys2974 := string(yys2974Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2974 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2975 := &x.Capacity
				yyv2975.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2976 := &x.Allocatable
				yyv2976.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2978 := &x.Conditions
				yym2979 := z.DecBinary()
				_ = yym2979
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2978), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2980 := &x.Addresses
				yym2981 := z.DecBinary()
				_ = yym2981
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2980), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2982 := &x.DaemonEndpoints
				yyv2982.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2983 := &x.NodeInfo
				yyv2983.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2984 := &x.Images
				yym2985 := z.DecBinary()
				_ = yym2985
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2984), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv2986 := &x.VolumesInUse
				yym2987 := z.DecBinary()
				_ = yym2987
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2986), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv2988 := &x.VolumesAttached
				yym2989 := z.DecBinary()
				_ = yym2989
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2988), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2974)
		} // end switch yys2974
	} // end for yyj2974
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2990 int
	var yyb2990 bool
	var yyhl2990 bool = l >= 0
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2991 := &x.Capacity
		yyv2991.CodecDecodeSelf(d)
	}
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2992 := &x.Allocatable
		yyv2992.CodecDecodeSelf(d)
	}
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2994 := &x.Conditions
		yym2995 := z.DecBinary()
		_ = yym2995
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2994), d)
		}
	}
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2996 := &x.Addresses
		yym2997 := z.DecBinary()
		_ = yym2997
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2996), d)
		}
	}
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2998 := &x.DaemonEndpoints
		yyv2998.CodecDecodeSelf(d)
	}
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2999 := &x.NodeInfo
		yyv2999.CodecDecodeSelf(d)
	}
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3000 := &x.Images
		yym3001 := z.DecBinary()
		_ = yym3001
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3000), d)
		}
	}
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3002 := &x.VolumesInUse
		yym3003 := z.DecBinary()
		_ = yym3003
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3002), d)
		}
	}
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3004 := &x.VolumesAttached
		yym3005 := z.DecBinary()
		_ = yym3005
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3004), d)
		}
	}
	for {
		yyj2990++
		if yyhl2990 {
			yyb2990 = yyj2990 > l
		} else {
			yyb2990 = r.CheckBreak()
		}
		if yyb2990 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2990-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3006 := z.EncBinary()
	_ = yym3006
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3007 := z.DecBinary()
	_ = yym3007
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3008 := z.EncBinary()
		_ = yym3008
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3009 := !z.EncBinary()
			yy2arr3009 := z.EncBasicHandle().StructToArray
			var yyq3009 [2]bool
			_, _, _ = yysep3009, yyq3009, yy2arr3009
			const yyr3009 bool = false
			var yynn3009 int
			if yyr3009 || yy2arr3009 {
				r.EncodeArrayStart(2)
			} else {
				yynn3009 = 2
				for _, b := range yyq3009 {
					if b {
						yynn3009++
					}
				}
				r.EncodeMapStart(yynn3009)
				yynn3009 = 0
			}
			if yyr3009 || yy2arr3009 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3009 || yy2arr3009 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3012 := z.EncBinary()
				_ = yym3012
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3013 := z.EncBinary()
				_ = yym3013
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3009 || yy2arr3009 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3014 := z.DecBinary()
	_ = yym3014
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3015 := r.ContainerType()
		if yyct3015 == codecSelferValueTypeMap1234 {
			yyl3015 := r.ReadMapStart()
			if yyl3015 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3015, d)
			}
		} else if yyct3015 == codecSelferValueTypeArray1234 {
			yyl3015 := r.ReadArrayStart()
			if yyl3015 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3015, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3016Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3016Slc
	var yyhl3016 bool = l >= 0
	for yyj3016 := 0; ; yyj3016++ {
		if yyhl3016 {
			if yyj3016 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3016Slc = r.DecodeBytes(yys3016Slc, true, true)
		yys3016 := string(yys3016Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3016 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3016)
		} // end switch yys3016
	} // end for yyj3016
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3019 int
	var yyb3019 bool
	var yyhl3019 bool = l >= 0
	yyj3019++
	if yyhl3019 {
		yyb3019 = yyj3019 > l
	} else {
		yyb3019 = r.CheckBreak()
	}
	if yyb3019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3019++
	if yyhl3019 {
		yyb3019 = yyj3019 > l
	} else {
		yyb3019 = r.CheckBreak()
	}
	if yyb3019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3019++
		if yyhl3019 {
			yyb3019 = yyj3019 > l
		} else {
			yyb3019 = r.CheckBreak()
		}
		if yyb3019 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3019-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3022 := z.EncBinary()
		_ = yym3022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3023 := !z.EncBinary()
			yy2arr3023 := z.EncBasicHandle().StructToArray
			var yyq3023 [1]bool
			_, _, _ = yysep3023, yyq3023, yy2arr3023
			const yyr3023 bool = false
			yyq3023[0] = len(x.PreferAvoidPods) != 0
			var yynn3023 int
			if yyr3023 || yy2arr3023 {
				r.EncodeArrayStart(1)
			} else {
				yynn3023 = 0
				for _, b := range yyq3023 {
					if b {
						yynn3023++
					}
				}
				r.EncodeMapStart(yynn3023)
				yynn3023 = 0
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3025 := z.EncBinary()
						_ = yym3025
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3023[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3026 := z.EncBinary()
						_ = yym3026
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3027 := z.DecBinary()
	_ = yym3027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3028 := r.ContainerType()
		if yyct3028 == codecSelferValueTypeMap1234 {
			yyl3028 := r.ReadMapStart()
			if yyl3028 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3028, d)
			}
		} else if yyct3028 == codecSelferValueTypeArray1234 {
			yyl3028 := r.ReadArrayStart()
			if yyl3028 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3029Slc
	var yyhl3029 bool = l >= 0
	for yyj3029 := 0; ; yyj3029++ {
		if yyhl3029 {
			if yyj3029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3029Slc = r.DecodeBytes(yys3029Slc, true, true)
		yys3029 := string(yys3029Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3029 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3030 := &x.PreferAvoidPods
				yym3031 := z.DecBinary()
				_ = yym3031
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3030), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3029)
		} // end switch yys3029
	} // end for yyj3029
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3032 int
	var yyb3032 bool
	var yyhl3032 bool = l >= 0
	yyj3032++
	if yyhl3032 {
		yyb3032 = yyj3032 > l
	} else {
		yyb3032 = r.CheckBreak()
	}
	if yyb3032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3033 := &x.PreferAvoidPods
		yym3034 := z.DecBinary()
		_ = yym3034
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3033), d)
		}
	}
	for {
		yyj3032++
		if yyhl3032 {
			yyb3032 = yyj3032 > l
		} else {
			yyb3032 = r.CheckBreak()
		}
		if yyb3032 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3032-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3035 := z.EncBinary()
		_ = yym3035
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3036 := !z.EncBinary()
			yy2arr3036 := z.EncBasicHandle().StructToArray
			var yyq3036 [4]bool
			_, _, _ = yysep3036, yyq3036, yy2arr3036
			const yyr3036 bool = false
			yyq3036[1] = true
			yyq3036[2] = x.Reason != ""
			yyq3036[3] = x.Message != ""
			var yynn3036 int
			if yyr3036 || yy2arr3036 {
				r.EncodeArrayStart(4)
			} else {
				yynn3036 = 1
				for _, b := range yyq3036 {
					if b {
						yynn3036++
					}
				}
				r.EncodeMapStart(yynn3036)
				yynn3036 = 0
			}
			if yyr3036 || yy2arr3036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3038 := &x.PodSignature
				yy3038.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3039 := &x.PodSignature
				yy3039.CodecEncodeSelf(e)
			}
			if yyr3036 || yy2arr3036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3036[1] {
					yy3041 := &x.EvictionTime
					yym3042 := z.EncBinary()
					_ = yym3042
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3041) {
					} else if yym3042 {
						z.EncBinaryMarshal(yy3041)
					} else if !yym3042 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3041)
					} else {
						z.EncFallback(yy3041)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3036[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3043 := &x.EvictionTime
					yym3044 := z.EncBinary()
					_ = yym3044
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3043) {
					} else if yym3044 {
						z.EncBinaryMarshal(yy3043)
					} else if !yym3044 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3043)
					} else {
						z.EncFallback(yy3043)
					}
				}
			}
			if yyr3036 || yy2arr3036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3036[2] {
					yym3046 := z.EncBinary()
					_ = yym3046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3036[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3047 := z.EncBinary()
					_ = yym3047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3036 || yy2arr3036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3036[3] {
					yym3049 := z.EncBinary()
					_ = yym3049
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3036[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3050 := z.EncBinary()
					_ = yym3050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3036 || yy2arr3036 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3051 := z.DecBinary()
	_ = yym3051
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3052 := r.ContainerType()
		if yyct3052 == codecSelferValueTypeMap1234 {
			yyl3052 := r.ReadMapStart()
			if yyl3052 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3052, d)
			}
		} else if yyct3052 == codecSelferValueTypeArray1234 {
			yyl3052 := r.ReadArrayStart()
			if yyl3052 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3052, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3053Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3053Slc
	var yyhl3053 bool = l >= 0
	for yyj3053 := 0; ; yyj3053++ {
		if yyhl3053 {
			if yyj3053 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3053Slc = r.DecodeBytes(yys3053Slc, true, true)
		yys3053 := string(yys3053Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3053 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3054 := &x.PodSignature
				yyv3054.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3055 := &x.EvictionTime
				yym3056 := z.DecBinary()
				_ = yym3056
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3055) {
				} else if yym3056 {
					z.DecBinaryUnmarshal(yyv3055)
				} else if !yym3056 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3055)
				} else {
					z.DecFallback(yyv3055, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3053)
		} // end switch yys3053
	} // end for yyj3053
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3059 int
	var yyb3059 bool
	var yyhl3059 bool = l >= 0
	yyj3059++
	if yyhl3059 {
		yyb3059 = yyj3059 > l
	} else {
		yyb3059 = r.CheckBreak()
	}
	if yyb3059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3060 := &x.PodSignature
		yyv3060.CodecDecodeSelf(d)
	}
	yyj3059++
	if yyhl3059 {
		yyb3059 = yyj3059 > l
	} else {
		yyb3059 = r.CheckBreak()
	}
	if yyb3059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3061 := &x.EvictionTime
		yym3062 := z.DecBinary()
		_ = yym3062
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3061) {
		} else if yym3062 {
			z.DecBinaryUnmarshal(yyv3061)
		} else if !yym3062 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3061)
		} else {
			z.DecFallback(yyv3061, false)
		}
	}
	yyj3059++
	if yyhl3059 {
		yyb3059 = yyj3059 > l
	} else {
		yyb3059 = r.CheckBreak()
	}
	if yyb3059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3059++
	if yyhl3059 {
		yyb3059 = yyj3059 > l
	} else {
		yyb3059 = r.CheckBreak()
	}
	if yyb3059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3059++
		if yyhl3059 {
			yyb3059 = yyj3059 > l
		} else {
			yyb3059 = r.CheckBreak()
		}
		if yyb3059 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3059-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3065 := z.EncBinary()
		_ = yym3065
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3066 := !z.EncBinary()
			yy2arr3066 := z.EncBasicHandle().StructToArray
			var yyq3066 [1]bool
			_, _, _ = yysep3066, yyq3066, yy2arr3066
			const yyr3066 bool = false
			yyq3066[0] = x.PodController != nil
			var yynn3066 int
			if yyr3066 || yy2arr3066 {
				r.EncodeArrayStart(1)
			} else {
				yynn3066 = 0
				for _, b := range yyq3066 {
					if b {
						yynn3066++
					}
				}
				r.EncodeMapStart(yynn3066)
				yynn3066 = 0
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3068 := z.DecBinary()
	_ = yym3068
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3069 := r.ContainerType()
		if yyct3069 == codecSelferValueTypeMap1234 {
			yyl3069 := r.ReadMapStart()
			if yyl3069 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3069, d)
			}
		} else if yyct3069 == codecSelferValueTypeArray1234 {
			yyl3069 := r.ReadArrayStart()
			if yyl3069 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3069, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3070Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3070Slc
	var yyhl3070 bool = l >= 0
	for yyj3070 := 0; ; yyj3070++ {
		if yyhl3070 {
			if yyj3070 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3070Slc = r.DecodeBytes(yys3070Slc, true, true)
		yys3070 := string(yys3070Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3070 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3070)
		} // end switch yys3070
	} // end for yyj3070
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3072 int
	var yyb3072 bool
	var yyhl3072 bool = l >= 0
	yyj3072++
	if yyhl3072 {
		yyb3072 = yyj3072 > l
	} else {
		yyb3072 = r.CheckBreak()
	}
	if yyb3072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3072++
		if yyhl3072 {
			yyb3072 = yyj3072 > l
		} else {
			yyb3072 = r.CheckBreak()
		}
		if yyb3072 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3072-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3074 := z.EncBinary()
		_ = yym3074
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3075 := !z.EncBinary()
			yy2arr3075 := z.EncBasicHandle().StructToArray
			var yyq3075 [2]bool
			_, _, _ = yysep3075, yyq3075, yy2arr3075
			const yyr3075 bool = false
			yyq3075[1] = x.SizeBytes != 0
			var yynn3075 int
			if yyr3075 || yy2arr3075 {
				r.EncodeArrayStart(2)
			} else {
				yynn3075 = 1
				for _, b := range yyq3075 {
					if b {
						yynn3075++
					}
				}
				r.EncodeMapStart(yynn3075)
				yynn3075 = 0
			}
			if yyr3075 || yy2arr3075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3077 := z.EncBinary()
					_ = yym3077
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3078 := z.EncBinary()
					_ = yym3078
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3075 || yy2arr3075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3075[1] {
					yym3080 := z.EncBinary()
					_ = yym3080
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3075[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3081 := z.EncBinary()
					_ = yym3081
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3075 || yy2arr3075 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3082 := z.DecBinary()
	_ = yym3082
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3083 := r.ContainerType()
		if yyct3083 == codecSelferValueTypeMap1234 {
			yyl3083 := r.ReadMapStart()
			if yyl3083 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3083, d)
			}
		} else if yyct3083 == codecSelferValueTypeArray1234 {
			yyl3083 := r.ReadArrayStart()
			if yyl3083 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3083, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3084Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3084Slc
	var yyhl3084 bool = l >= 0
	for yyj3084 := 0; ; yyj3084++ {
		if yyhl3084 {
			if yyj3084 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3084Slc = r.DecodeBytes(yys3084Slc, true, true)
		yys3084 := string(yys3084Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3084 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3085 := &x.Names
				yym3086 := z.DecBinary()
				_ = yym3086
				if false {
				} else {
					z.F.DecSliceStringX(yyv3085, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3084)
		} // end switch yys3084
	} // end for yyj3084
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3088 int
	var yyb3088 bool
	var yyhl3088 bool = l >= 0
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3089 := &x.Names
		yym3090 := z.DecBinary()
		_ = yym3090
		if false {
		} else {
			z.F.DecSliceStringX(yyv3089, false, d)
		}
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3088++
		if yyhl3088 {
			yyb3088 = yyj3088 > l
		} else {
			yyb3088 = r.CheckBreak()
		}
		if yyb3088 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3088-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3092 := z.EncBinary()
	_ = yym3092
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3093 := z.DecBinary()
	_ = yym3093
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3094 := z.EncBinary()
	_ = yym3094
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3095 := z.DecBinary()
	_ = yym3095
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3096 := z.EncBinary()
		_ = yym3096
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3097 := !z.EncBinary()
			yy2arr3097 := z.EncBasicHandle().StructToArray
			var yyq3097 [6]bool
			_, _, _ = yysep3097, yyq3097, yy2arr3097
			const yyr3097 bool = false
			yyq3097[2] = true
			yyq3097[3] = true
			yyq3097[4] = x.Reason != ""
			yyq3097[5] = x.Message != ""
			var yynn3097 int
			if yyr3097 || yy2arr3097 {
				r.EncodeArrayStart(6)
			} else {
				yynn3097 = 2
				for _, b := range yyq3097 {
					if b {
						yynn3097++
					}
				}
				r.EncodeMapStart(yynn3097)
				yynn3097 = 0
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3097[2] {
					yy3101 := &x.LastHeartbeatTime
					yym3102 := z.EncBinary()
					_ = yym3102
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3101) {
					} else if yym3102 {
						z.EncBinaryMarshal(yy3101)
					} else if !yym3102 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3101)
					} else {
						z.EncFallback(yy3101)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3097[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3103 := &x.LastHeartbeatTime
					yym3104 := z.EncBinary()
					_ = yym3104
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3103) {
					} else if yym3104 {
						z.EncBinaryMarshal(yy3103)
					} else if !yym3104 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3103)
					} else {
						z.EncFallback(yy3103)
					}
				}
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3097[3] {
					yy3106 := &x.LastTransitionTime
					yym3107 := z.EncBinary()
					_ = yym3107
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3106) {
					} else if yym3107 {
						z.EncBinaryMarshal(yy3106)
					} else if !yym3107 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3106)
					} else {
						z.EncFallback(yy3106)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3097[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3108 := &x.LastTransitionTime
					yym3109 := z.EncBinary()
					_ = yym3109
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3108) {
					} else if yym3109 {
						z.EncBinaryMarshal(yy3108)
					} else if !yym3109 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3108)
					} else {
						z.EncFallback(yy3108)
					}
				}
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3097[4] {
					yym3111 := z.EncBinary()
					_ = yym3111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3097[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3112 := z.EncBinary()
					_ = yym3112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3097[5] {
					yym3114 := z.EncBinary()
					_ = yym3114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3097[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3115 := z.EncBinary()
					_ = yym3115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3116 := z.DecBinary()
	_ = yym3116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3117 := r.ContainerType()
		if yyct3117 == codecSelferValueTypeMap1234 {
			yyl3117 := r.ReadMapStart()
			if yyl3117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3117, d)
			}
		} else if yyct3117 == codecSelferValueTypeArray1234 {
			yyl3117 := r.ReadArrayStart()
			if yyl3117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3118Slc
	var yyhl3118 bool = l >= 0
	for yyj3118 := 0; ; yyj3118++ {
		if yyhl3118 {
			if yyj3118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3118Slc = r.DecodeBytes(yys3118Slc, true, true)
		yys3118 := string(yys3118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3118 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3121 := &x.LastHeartbeatTime
				yym3122 := z.DecBinary()
				_ = yym3122
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3121) {
				} else if yym3122 {
					z.DecBinaryUnmarshal(yyv3121)
				} else if !yym3122 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3121)
				} else {
					z.DecFallback(yyv3121, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3123 := &x.LastTransitionTime
				yym3124 := z.DecBinary()
				_ = yym3124
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3123) {
				} else if yym3124 {
					z.DecBinaryUnmarshal(yyv3123)
				} else if !yym3124 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3123)
				} else {
					z.DecFallback(yyv3123, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3118)
		} // end switch yys3118
	} // end for yyj3118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3127 int
	var yyb3127 bool
	var yyhl3127 bool = l >= 0
	yyj3127++
	if yyhl3127 {
		yyb3127 = yyj3127 > l
	} else {
		yyb3127 = r.CheckBreak()
	}
	if yyb3127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3127++
	if yyhl3127 {
		yyb3127 = yyj3127 > l
	} else {
		yyb3127 = r.CheckBreak()
	}
	if yyb3127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3127++
	if yyhl3127 {
		yyb3127 = yyj3127 > l
	} else {
		yyb3127 = r.CheckBreak()
	}
	if yyb3127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3130 := &x.LastHeartbeatTime
		yym3131 := z.DecBinary()
		_ = yym3131
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3130) {
		} else if yym3131 {
			z.DecBinaryUnmarshal(yyv3130)
		} else if !yym3131 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3130)
		} else {
			z.DecFallback(yyv3130, false)
		}
	}
	yyj3127++
	if yyhl3127 {
		yyb3127 = yyj3127 > l
	} else {
		yyb3127 = r.CheckBreak()
	}
	if yyb3127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3132 := &x.LastTransitionTime
		yym3133 := z.DecBinary()
		_ = yym3133
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3132) {
		} else if yym3133 {
			z.DecBinaryUnmarshal(yyv3132)
		} else if !yym3133 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3132)
		} else {
			z.DecFallback(yyv3132, false)
		}
	}
	yyj3127++
	if yyhl3127 {
		yyb3127 = yyj3127 > l
	} else {
		yyb3127 = r.CheckBreak()
	}
	if yyb3127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3127++
	if yyhl3127 {
		yyb3127 = yyj3127 > l
	} else {
		yyb3127 = r.CheckBreak()
	}
	if yyb3127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3127++
		if yyhl3127 {
			yyb3127 = yyj3127 > l
		} else {
			yyb3127 = r.CheckBreak()
		}
		if yyb3127 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3127-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3136 := z.EncBinary()
	_ = yym3136
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3137 := z.DecBinary()
	_ = yym3137
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3138 := z.EncBinary()
		_ = yym3138
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3139 := !z.EncBinary()
			yy2arr3139 := z.EncBasicHandle().StructToArray
			var yyq3139 [2]bool
			_, _, _ = yysep3139, yyq3139, yy2arr3139
			const yyr3139 bool = false
			var yynn3139 int
			if yyr3139 || yy2arr3139 {
				r.EncodeArrayStart(2)
			} else {
				yynn3139 = 2
				for _, b := range yyq3139 {
					if b {
						yynn3139++
					}
				}
				r.EncodeMapStart(yynn3139)
				yynn3139 = 0
			}
			if yyr3139 || yy2arr3139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3139 || yy2arr3139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3142 := z.EncBinary()
				_ = yym3142
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3143 := z.EncBinary()
				_ = yym3143
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3139 || yy2arr3139 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3144 := z.DecBinary()
	_ = yym3144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3145 := r.ContainerType()
		if yyct3145 == codecSelferValueTypeMap1234 {
			yyl3145 := r.ReadMapStart()
			if yyl3145 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3145, d)
			}
		} else if yyct3145 == codecSelferValueTypeArray1234 {
			yyl3145 := r.ReadArrayStart()
			if yyl3145 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3145, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3146Slc
	var yyhl3146 bool = l >= 0
	for yyj3146 := 0; ; yyj3146++ {
		if yyhl3146 {
			if yyj3146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3146Slc = r.DecodeBytes(yys3146Slc, true, true)
		yys3146 := string(yys3146Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3146 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3146)
		} // end switch yys3146
	} // end for yyj3146
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3149 int
	var yyb3149 bool
	var yyhl3149 bool = l >= 0
	yyj3149++
	if yyhl3149 {
		yyb3149 = yyj3149 > l
	} else {
		yyb3149 = r.CheckBreak()
	}
	if yyb3149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3149++
	if yyhl3149 {
		yyb3149 = yyj3149 > l
	} else {
		yyb3149 = r.CheckBreak()
	}
	if yyb3149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3149++
		if yyhl3149 {
			yyb3149 = yyj3149 > l
		} else {
			yyb3149 = r.CheckBreak()
		}
		if yyb3149 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3149-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3152 := z.EncBinary()
		_ = yym3152
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3153 := !z.EncBinary()
			yy2arr3153 := z.EncBasicHandle().StructToArray
			var yyq3153 [1]bool
			_, _, _ = yysep3153, yyq3153, yy2arr3153
			const yyr3153 bool = false
			yyq3153[0] = len(x.Capacity) != 0
			var yynn3153 int
			if yyr3153 || yy2arr3153 {
				r.EncodeArrayStart(1)
			} else {
				yynn3153 = 0
				for _, b := range yyq3153 {
					if b {
						yynn3153++
					}
				}
				r.EncodeMapStart(yynn3153)
				yynn3153 = 0
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3153[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3153[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3155 := z.DecBinary()
	_ = yym3155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3156 := r.ContainerType()
		if yyct3156 == codecSelferValueTypeMap1234 {
			yyl3156 := r.ReadMapStart()
			if yyl3156 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3156, d)
			}
		} else if yyct3156 == codecSelferValueTypeArray1234 {
			yyl3156 := r.ReadArrayStart()
			if yyl3156 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3157Slc
	var yyhl3157 bool = l >= 0
	for yyj3157 := 0; ; yyj3157++ {
		if yyhl3157 {
			if yyj3157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3157Slc = r.DecodeBytes(yys3157Slc, true, true)
		yys3157 := string(yys3157Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3157 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3158 := &x.Capacity
				yyv3158.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3157)
		} // end switch yys3157
	} // end for yyj3157
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3159 int
	var yyb3159 bool
	var yyhl3159 bool = l >= 0
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3160 := &x.Capacity
		yyv3160.CodecDecodeSelf(d)
	}
	for {
		yyj3159++
		if yyhl3159 {
			yyb3159 = yyj3159 > l
		} else {
			yyb3159 = r.CheckBreak()
		}
		if yyb3159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3161 := z.EncBinary()
	_ = yym3161
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3162 := z.DecBinary()
	_ = yym3162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3163 := z.EncBinary()
		_ = yym3163
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3164 := z.DecBinary()
	_ = yym3164
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3165 := z.EncBinary()
		_ = yym3165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3166 := !z.EncBinary()
			yy2arr3166 := z.EncBasicHandle().StructToArray
			var yyq3166 [5]bool
			_, _, _ = yysep3166, yyq3166, yy2arr3166
			const yyr3166 bool = false
			yyq3166[0] = x.Kind != ""
			yyq3166[1] = x.APIVersion != ""
			yyq3166[2] = true
			yyq3166[3] = true
			yyq3166[4] = true
			var yynn3166 int
			if yyr3166 || yy2arr3166 {
				r.EncodeArrayStart(5)
			} else {
				yynn3166 = 0
				for _, b := range yyq3166 {
					if b {
						yynn3166++
					}
				}
				r.EncodeMapStart(yynn3166)
				yynn3166 = 0
			}
			if yyr3166 || yy2arr3166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3166[0] {
					yym3168 := z.EncBinary()
					_ = yym3168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3166[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3169 := z.EncBinary()
					_ = yym3169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3166 || yy2arr3166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3166[1] {
					yym3171 := z.EncBinary()
					_ = yym3171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3166[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3172 := z.EncBinary()
					_ = yym3172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3166 || yy2arr3166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3166[2] {
					yy3174 := &x.ObjectMeta
					yy3174.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3166[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3175 := &x.ObjectMeta
					yy3175.CodecEncodeSelf(e)
				}
			}
			if yyr3166 || yy2arr3166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3166[3] {
					yy3177 := &x.Spec
					yy3177.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3166[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3178 := &x.Spec
					yy3178.CodecEncodeSelf(e)
				}
			}
			if yyr3166 || yy2arr3166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3166[4] {
					yy3180 := &x.Status
					yy3180.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3166[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3181 := &x.Status
					yy3181.CodecEncodeSelf(e)
				}
			}
			if yyr3166 || yy2arr3166 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3182 := z.DecBinary()
	_ = yym3182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3183 := r.ContainerType()
		if yyct3183 == codecSelferValueTypeMap1234 {
			yyl3183 := r.ReadMapStart()
			if yyl3183 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3183, d)
			}
		} else if yyct3183 == codecSelferValueTypeArray1234 {
			yyl3183 := r.ReadArrayStart()
			if yyl3183 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3183, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3184Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3184Slc
	var yyhl3184 bool = l >= 0
	for yyj3184 := 0; ; yyj3184++ {
		if yyhl3184 {
			if yyj3184 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3184Slc = r.DecodeBytes(yys3184Slc, true, true)
		yys3184 := string(yys3184Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3184 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3187 := &x.ObjectMeta
				yyv3187.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3188 := &x.Spec
				yyv3188.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3189 := &x.Status
				yyv3189.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3184)
		} // end switch yys3184
	} // end for yyj3184
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3190 int
	var yyb3190 bool
	var yyhl3190 bool = l >= 0
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3193 := &x.ObjectMeta
		yyv3193.CodecDecodeSelf(d)
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3194 := &x.Spec
		yyv3194.CodecDecodeSelf(d)
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3195 := &x.Status
		yyv3195.CodecDecodeSelf(d)
	}
	for {
		yyj3190++
		if yyhl3190 {
			yyb3190 = yyj3190 > l
		} else {
			yyb3190 = r.CheckBreak()
		}
		if yyb3190 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3190-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3196 := z.EncBinary()
		_ = yym3196
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3197 := !z.EncBinary()
			yy2arr3197 := z.EncBasicHandle().StructToArray
			var yyq3197 [4]bool
			_, _, _ = yysep3197, yyq3197, yy2arr3197
			const yyr3197 bool = false
			yyq3197[0] = x.Kind != ""
			yyq3197[1] = x.APIVersion != ""
			yyq3197[2] = true
			var yynn3197 int
			if yyr3197 || yy2arr3197 {
				r.EncodeArrayStart(4)
			} else {
				yynn3197 = 1
				for _, b := range yyq3197 {
					if b {
						yynn3197++
					}
				}
				r.EncodeMapStart(yynn3197)
				yynn3197 = 0
			}
			if yyr3197 || yy2arr3197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3197[0] {
					yym3199 := z.EncBinary()
					_ = yym3199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3197[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3200 := z.EncBinary()
					_ = yym3200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3197 || yy2arr3197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3197[1] {
					yym3202 := z.EncBinary()
					_ = yym3202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3197[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3203 := z.EncBinary()
					_ = yym3203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3197 || yy2arr3197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3197[2] {
					yy3205 := &x.ListMeta
					yym3206 := z.EncBinary()
					_ = yym3206
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3205) {
					} else {
						z.EncFallback(yy3205)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3197[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3207 := &x.ListMeta
					yym3208 := z.EncBinary()
					_ = yym3208
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3207) {
					} else {
						z.EncFallback(yy3207)
					}
				}
			}
			if yyr3197 || yy2arr3197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3210 := z.EncBinary()
					_ = yym3210
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3211 := z.EncBinary()
					_ = yym3211
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3197 || yy2arr3197 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3212 := z.DecBinary()
	_ = yym3212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3213 := r.ContainerType()
		if yyct3213 == codecSelferValueTypeMap1234 {
			yyl3213 := r.ReadMapStart()
			if yyl3213 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3213, d)
			}
		} else if yyct3213 == codecSelferValueTypeArray1234 {
			yyl3213 := r.ReadArrayStart()
			if yyl3213 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3214Slc
	var yyhl3214 bool = l >= 0
	for yyj3214 := 0; ; yyj3214++ {
		if yyhl3214 {
			if yyj3214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3214Slc = r.DecodeBytes(yys3214Slc, true, true)
		yys3214 := string(yys3214Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3214 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3217 := &x.ListMeta
				yym3218 := z.DecBinary()
				_ = yym3218
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3217) {
				} else {
					z.DecFallback(yyv3217, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3219 := &x.Items
				yym3220 := z.DecBinary()
				_ = yym3220
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3219), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3214)
		} // end switch yys3214
	} // end for yyj3214
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3221 int
	var yyb3221 bool
	var yyhl3221 bool = l >= 0
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3224 := &x.ListMeta
		yym3225 := z.DecBinary()
		_ = yym3225
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3224) {
		} else {
			z.DecFallback(yyv3224, false)
		}
	}
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3226 := &x.Items
		yym3227 := z.DecBinary()
		_ = yym3227
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3226), d)
		}
	}
	for {
		yyj3221++
		if yyhl3221 {
			yyb3221 = yyj3221 > l
		} else {
			yyb3221 = r.CheckBreak()
		}
		if yyb3221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3228 := z.EncBinary()
		_ = yym3228
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3229 := !z.EncBinary()
			yy2arr3229 := z.EncBasicHandle().StructToArray
			var yyq3229 [1]bool
			_, _, _ = yysep3229, yyq3229, yy2arr3229
			const yyr3229 bool = false
			var yynn3229 int
			if yyr3229 || yy2arr3229 {
				r.EncodeArrayStart(1)
			} else {
				yynn3229 = 1
				for _, b := range yyq3229 {
					if b {
						yynn3229++
					}
				}
				r.EncodeMapStart(yynn3229)
				yynn3229 = 0
			}
			if yyr3229 || yy2arr3229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3231 := z.EncBinary()
					_ = yym3231
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3232 := z.EncBinary()
					_ = yym3232
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3229 || yy2arr3229 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3233 := z.DecBinary()
	_ = yym3233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3234 := r.ContainerType()
		if yyct3234 == codecSelferValueTypeMap1234 {
			yyl3234 := r.ReadMapStart()
			if yyl3234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3234, d)
			}
		} else if yyct3234 == codecSelferValueTypeArray1234 {
			yyl3234 := r.ReadArrayStart()
			if yyl3234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3235Slc
	var yyhl3235 bool = l >= 0
	for yyj3235 := 0; ; yyj3235++ {
		if yyhl3235 {
			if yyj3235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3235Slc = r.DecodeBytes(yys3235Slc, true, true)
		yys3235 := string(yys3235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3235 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3236 := &x.Finalizers
				yym3237 := z.DecBinary()
				_ = yym3237
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3236), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3235)
		} // end switch yys3235
	} // end for yyj3235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3238 int
	var yyb3238 bool
	var yyhl3238 bool = l >= 0
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3239 := &x.Finalizers
		yym3240 := z.DecBinary()
		_ = yym3240
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3239), d)
		}
	}
	for {
		yyj3238++
		if yyhl3238 {
			yyb3238 = yyj3238 > l
		} else {
			yyb3238 = r.CheckBreak()
		}
		if yyb3238 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3238-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3241 := z.EncBinary()
	_ = yym3241
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3242 := z.DecBinary()
	_ = yym3242
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3243 := z.EncBinary()
		_ = yym3243
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3244 := !z.EncBinary()
			yy2arr3244 := z.EncBasicHandle().StructToArray
			var yyq3244 [1]bool
			_, _, _ = yysep3244, yyq3244, yy2arr3244
			const yyr3244 bool = false
			yyq3244[0] = x.Phase != ""
			var yynn3244 int
			if yyr3244 || yy2arr3244 {
				r.EncodeArrayStart(1)
			} else {
				yynn3244 = 0
				for _, b := range yyq3244 {
					if b {
						yynn3244++
					}
				}
				r.EncodeMapStart(yynn3244)
				yynn3244 = 0
			}
			if yyr3244 || yy2arr3244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3244[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3244[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3244 || yy2arr3244 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3246 := z.DecBinary()
	_ = yym3246
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3247 := r.ContainerType()
		if yyct3247 == codecSelferValueTypeMap1234 {
			yyl3247 := r.ReadMapStart()
			if yyl3247 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3247, d)
			}
		} else if yyct3247 == codecSelferValueTypeArray1234 {
			yyl3247 := r.ReadArrayStart()
			if yyl3247 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3247, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3248Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3248Slc
	var yyhl3248 bool = l >= 0
	for yyj3248 := 0; ; yyj3248++ {
		if yyhl3248 {
			if yyj3248 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3248Slc = r.DecodeBytes(yys3248Slc, true, true)
		yys3248 := string(yys3248Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3248 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3248)
		} // end switch yys3248
	} // end for yyj3248
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3250 int
	var yyb3250 bool
	var yyhl3250 bool = l >= 0
	yyj3250++
	if yyhl3250 {
		yyb3250 = yyj3250 > l
	} else {
		yyb3250 = r.CheckBreak()
	}
	if yyb3250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3250++
		if yyhl3250 {
			yyb3250 = yyj3250 > l
		} else {
			yyb3250 = r.CheckBreak()
		}
		if yyb3250 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3250-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3252 := z.EncBinary()
	_ = yym3252
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3253 := z.DecBinary()
	_ = yym3253
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3254 := z.EncBinary()
		_ = yym3254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3255 := !z.EncBinary()
			yy2arr3255 := z.EncBasicHandle().StructToArray
			var yyq3255 [5]bool
			_, _, _ = yysep3255, yyq3255, yy2arr3255
			const yyr3255 bool = false
			yyq3255[0] = x.Kind != ""
			yyq3255[1] = x.APIVersion != ""
			yyq3255[2] = true
			yyq3255[3] = true
			yyq3255[4] = true
			var yynn3255 int
			if yyr3255 || yy2arr3255 {
				r.EncodeArrayStart(5)
			} else {
				yynn3255 = 0
				for _, b := range yyq3255 {
					if b {
						yynn3255++
					}
				}
				r.EncodeMapStart(yynn3255)
				yynn3255 = 0
			}
			if yyr3255 || yy2arr3255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3255[0] {
					yym3257 := z.EncBinary()
					_ = yym3257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3255[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3258 := z.EncBinary()
					_ = yym3258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3255 || yy2arr3255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3255[1] {
					yym3260 := z.EncBinary()
					_ = yym3260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3255[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3261 := z.EncBinary()
					_ = yym3261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3255 || yy2arr3255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3255[2] {
					yy3263 := &x.ObjectMeta
					yy3263.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3255[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3264 := &x.ObjectMeta
					yy3264.CodecEncodeSelf(e)
				}
			}
			if yyr3255 || yy2arr3255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3255[3] {
					yy3266 := &x.Spec
					yy3266.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3255[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3267 := &x.Spec
					yy3267.CodecEncodeSelf(e)
				}
			}
			if yyr3255 || yy2arr3255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3255[4] {
					yy3269 := &x.Status
					yy3269.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3255[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3270 := &x.Status
					yy3270.CodecEncodeSelf(e)
				}
			}
			if yyr3255 || yy2arr3255 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3271 := z.DecBinary()
	_ = yym3271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3272 := r.ContainerType()
		if yyct3272 == codecSelferValueTypeMap1234 {
			yyl3272 := r.ReadMapStart()
			if yyl3272 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3272, d)
			}
		} else if yyct3272 == codecSelferValueTypeArray1234 {
			yyl3272 := r.ReadArrayStart()
			if yyl3272 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3273Slc
	var yyhl3273 bool = l >= 0
	for yyj3273 := 0; ; yyj3273++ {
		if yyhl3273 {
			if yyj3273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3273Slc = r.DecodeBytes(yys3273Slc, true, true)
		yys3273 := string(yys3273Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3273 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3276 := &x.ObjectMeta
				yyv3276.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3277 := &x.Spec
				yyv3277.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3278 := &x.Status
				yyv3278.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3273)
		} // end switch yys3273
	} // end for yyj3273
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3279 int
	var yyb3279 bool
	var yyhl3279 bool = l >= 0
	yyj3279++
	if yyhl3279 {
		yyb3279 = yyj3279 > l
	} else {
		yyb3279 = r.CheckBreak()
	}
	if yyb3279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3279++
	if yyhl3279 {
		yyb3279 = yyj3279 > l
	} else {
		yyb3279 = r.CheckBreak()
	}
	if yyb3279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3279++
	if yyhl3279 {
		yyb3279 = yyj3279 > l
	} else {
		yyb3279 = r.CheckBreak()
	}
	if yyb3279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3282 := &x.ObjectMeta
		yyv3282.CodecDecodeSelf(d)
	}
	yyj3279++
	if yyhl3279 {
		yyb3279 = yyj3279 > l
	} else {
		yyb3279 = r.CheckBreak()
	}
	if yyb3279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3283 := &x.Spec
		yyv3283.CodecDecodeSelf(d)
	}
	yyj3279++
	if yyhl3279 {
		yyb3279 = yyj3279 > l
	} else {
		yyb3279 = r.CheckBreak()
	}
	if yyb3279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3284 := &x.Status
		yyv3284.CodecDecodeSelf(d)
	}
	for {
		yyj3279++
		if yyhl3279 {
			yyb3279 = yyj3279 > l
		} else {
			yyb3279 = r.CheckBreak()
		}
		if yyb3279 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3279-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3285 := z.EncBinary()
		_ = yym3285
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3286 := !z.EncBinary()
			yy2arr3286 := z.EncBasicHandle().StructToArray
			var yyq3286 [4]bool
			_, _, _ = yysep3286, yyq3286, yy2arr3286
			const yyr3286 bool = false
			yyq3286[0] = x.Kind != ""
			yyq3286[1] = x.APIVersion != ""
			yyq3286[2] = true
			var yynn3286 int
			if yyr3286 || yy2arr3286 {
				r.EncodeArrayStart(4)
			} else {
				yynn3286 = 1
				for _, b := range yyq3286 {
					if b {
						yynn3286++
					}
				}
				r.EncodeMapStart(yynn3286)
				yynn3286 = 0
			}
			if yyr3286 || yy2arr3286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3286[0] {
					yym3288 := z.EncBinary()
					_ = yym3288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3286[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3289 := z.EncBinary()
					_ = yym3289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3286 || yy2arr3286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3286[1] {
					yym3291 := z.EncBinary()
					_ = yym3291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3286[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3292 := z.EncBinary()
					_ = yym3292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3286 || yy2arr3286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3286[2] {
					yy3294 := &x.ListMeta
					yym3295 := z.EncBinary()
					_ = yym3295
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3294) {
					} else {
						z.EncFallback(yy3294)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3286[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3296 := &x.ListMeta
					yym3297 := z.EncBinary()
					_ = yym3297
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3296) {
					} else {
						z.EncFallback(yy3296)
					}
				}
			}
			if yyr3286 || yy2arr3286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3299 := z.EncBinary()
					_ = yym3299
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3300 := z.EncBinary()
					_ = yym3300
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3286 || yy2arr3286 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3301 := z.DecBinary()
	_ = yym3301
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3302 := r.ContainerType()
		if yyct3302 == codecSelferValueTypeMap1234 {
			yyl3302 := r.ReadMapStart()
			if yyl3302 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3302, d)
			}
		} else if yyct3302 == codecSelferValueTypeArray1234 {
			yyl3302 := r.ReadArrayStart()
			if yyl3302 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3302, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3303Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3303Slc
	var yyhl3303 bool = l >= 0
	for yyj3303 := 0; ; yyj3303++ {
		if yyhl3303 {
			if yyj3303 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3303Slc = r.DecodeBytes(yys3303Slc, true, true)
		yys3303 := string(yys3303Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3303 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3306 := &x.ListMeta
				yym3307 := z.DecBinary()
				_ = yym3307
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3306) {
				} else {
					z.DecFallback(yyv3306, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3308 := &x.Items
				yym3309 := z.DecBinary()
				_ = yym3309
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3308), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3303)
		} // end switch yys3303
	} // end for yyj3303
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3310 int
	var yyb3310 bool
	var yyhl3310 bool = l >= 0
	yyj3310++
	if yyhl3310 {
		yyb3310 = yyj3310 > l
	} else {
		yyb3310 = r.CheckBreak()
	}
	if yyb3310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3310++
	if yyhl3310 {
		yyb3310 = yyj3310 > l
	} else {
		yyb3310 = r.CheckBreak()
	}
	if yyb3310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3310++
	if yyhl3310 {
		yyb3310 = yyj3310 > l
	} else {
		yyb3310 = r.CheckBreak()
	}
	if yyb3310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3313 := &x.ListMeta
		yym3314 := z.DecBinary()
		_ = yym3314
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3313) {
		} else {
			z.DecFallback(yyv3313, false)
		}
	}
	yyj3310++
	if yyhl3310 {
		yyb3310 = yyj3310 > l
	} else {
		yyb3310 = r.CheckBreak()
	}
	if yyb3310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3315 := &x.Items
		yym3316 := z.DecBinary()
		_ = yym3316
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3315), d)
		}
	}
	for {
		yyj3310++
		if yyhl3310 {
			yyb3310 = yyj3310 > l
		} else {
			yyb3310 = r.CheckBreak()
		}
		if yyb3310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3317 := z.EncBinary()
		_ = yym3317
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3318 := !z.EncBinary()
			yy2arr3318 := z.EncBasicHandle().StructToArray
			var yyq3318 [4]bool
			_, _, _ = yysep3318, yyq3318, yy2arr3318
			const yyr3318 bool = false
			yyq3318[0] = x.Kind != ""
			yyq3318[1] = x.APIVersion != ""
			yyq3318[2] = true
			var yynn3318 int
			if yyr3318 || yy2arr3318 {
				r.EncodeArrayStart(4)
			} else {
				yynn3318 = 1
				for _, b := range yyq3318 {
					if b {
						yynn3318++
					}
				}
				r.EncodeMapStart(yynn3318)
				yynn3318 = 0
			}
			if yyr3318 || yy2arr3318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3318[0] {
					yym3320 := z.EncBinary()
					_ = yym3320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3318[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3321 := z.EncBinary()
					_ = yym3321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3318 || yy2arr3318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3318[1] {
					yym3323 := z.EncBinary()
					_ = yym3323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3318[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3324 := z.EncBinary()
					_ = yym3324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3318 || yy2arr3318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3318[2] {
					yy3326 := &x.ObjectMeta
					yy3326.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3318[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3327 := &x.ObjectMeta
					yy3327.CodecEncodeSelf(e)
				}
			}
			if yyr3318 || yy2arr3318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3329 := &x.Target
				yy3329.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3330 := &x.Target
				yy3330.CodecEncodeSelf(e)
			}
			if yyr3318 || yy2arr3318 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3331 := z.DecBinary()
	_ = yym3331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3332 := r.ContainerType()
		if yyct3332 == codecSelferValueTypeMap1234 {
			yyl3332 := r.ReadMapStart()
			if yyl3332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3332, d)
			}
		} else if yyct3332 == codecSelferValueTypeArray1234 {
			yyl3332 := r.ReadArrayStart()
			if yyl3332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3333Slc
	var yyhl3333 bool = l >= 0
	for yyj3333 := 0; ; yyj3333++ {
		if yyhl3333 {
			if yyj3333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3333Slc = r.DecodeBytes(yys3333Slc, true, true)
		yys3333 := string(yys3333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3333 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3336 := &x.ObjectMeta
				yyv3336.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3337 := &x.Target
				yyv3337.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3333)
		} // end switch yys3333
	} // end for yyj3333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3338 int
	var yyb3338 bool
	var yyhl3338 bool = l >= 0
	yyj3338++
	if yyhl3338 {
		yyb3338 = yyj3338 > l
	} else {
		yyb3338 = r.CheckBreak()
	}
	if yyb3338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3338++
	if yyhl3338 {
		yyb3338 = yyj3338 > l
	} else {
		yyb3338 = r.CheckBreak()
	}
	if yyb3338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3338++
	if yyhl3338 {
		yyb3338 = yyj3338 > l
	} else {
		yyb3338 = r.CheckBreak()
	}
	if yyb3338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3341 := &x.ObjectMeta
		yyv3341.CodecDecodeSelf(d)
	}
	yyj3338++
	if yyhl3338 {
		yyb3338 = yyj3338 > l
	} else {
		yyb3338 = r.CheckBreak()
	}
	if yyb3338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3342 := &x.Target
		yyv3342.CodecDecodeSelf(d)
	}
	for {
		yyj3338++
		if yyhl3338 {
			yyb3338 = yyj3338 > l
		} else {
			yyb3338 = r.CheckBreak()
		}
		if yyb3338 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3338-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3343 := z.EncBinary()
		_ = yym3343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3344 := !z.EncBinary()
			yy2arr3344 := z.EncBasicHandle().StructToArray
			var yyq3344 [1]bool
			_, _, _ = yysep3344, yyq3344, yy2arr3344
			const yyr3344 bool = false
			yyq3344[0] = x.UID != nil
			var yynn3344 int
			if yyr3344 || yy2arr3344 {
				r.EncodeArrayStart(1)
			} else {
				yynn3344 = 0
				for _, b := range yyq3344 {
					if b {
						yynn3344++
					}
				}
				r.EncodeMapStart(yynn3344)
				yynn3344 = 0
			}
			if yyr3344 || yy2arr3344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3344[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3346 := *x.UID
						yym3347 := z.EncBinary()
						_ = yym3347
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3346) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3346))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3344[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3348 := *x.UID
						yym3349 := z.EncBinary()
						_ = yym3349
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3348) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3348))
						}
					}
				}
			}
			if yyr3344 || yy2arr3344 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3350 := z.DecBinary()
	_ = yym3350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3351 := r.ContainerType()
		if yyct3351 == codecSelferValueTypeMap1234 {
			yyl3351 := r.ReadMapStart()
			if yyl3351 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3351, d)
			}
		} else if yyct3351 == codecSelferValueTypeArray1234 {
			yyl3351 := r.ReadArrayStart()
			if yyl3351 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3351, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3352Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3352Slc
	var yyhl3352 bool = l >= 0
	for yyj3352 := 0; ; yyj3352++ {
		if yyhl3352 {
			if yyj3352 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3352Slc = r.DecodeBytes(yys3352Slc, true, true)
		yys3352 := string(yys3352Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3352 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3354 := z.DecBinary()
				_ = yym3354
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3352)
		} // end switch yys3352
	} // end for yyj3352
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3355 int
	var yyb3355 bool
	var yyhl3355 bool = l >= 0
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3357 := z.DecBinary()
		_ = yym3357
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3355++
		if yyhl3355 {
			yyb3355 = yyj3355 > l
		} else {
			yyb3355 = r.CheckBreak()
		}
		if yyb3355 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3355-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3358 := z.EncBinary()
		_ = yym3358
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3359 := !z.EncBinary()
			yy2arr3359 := z.EncBasicHandle().StructToArray
			var yyq3359 [5]bool
			_, _, _ = yysep3359, yyq3359, yy2arr3359
			const yyr3359 bool = false
			yyq3359[0] = x.Kind != ""
			yyq3359[1] = x.APIVersion != ""
			yyq3359[2] = x.GracePeriodSeconds != nil
			yyq3359[3] = x.Preconditions != nil
			yyq3359[4] = x.OrphanDependents != nil
			var yynn3359 int
			if yyr3359 || yy2arr3359 {
				r.EncodeArrayStart(5)
			} else {
				yynn3359 = 0
				for _, b := range yyq3359 {
					if b {
						yynn3359++
					}
				}
				r.EncodeMapStart(yynn3359)
				yynn3359 = 0
			}
			if yyr3359 || yy2arr3359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3359[0] {
					yym3361 := z.EncBinary()
					_ = yym3361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3359[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3362 := z.EncBinary()
					_ = yym3362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3359 || yy2arr3359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3359[1] {
					yym3364 := z.EncBinary()
					_ = yym3364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3359[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3365 := z.EncBinary()
					_ = yym3365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3359 || yy2arr3359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3359[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3367 := *x.GracePeriodSeconds
						yym3368 := z.EncBinary()
						_ = yym3368
						if false {
						} else {
							r.EncodeInt(int64(yy3367))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3359[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3369 := *x.GracePeriodSeconds
						yym3370 := z.EncBinary()
						_ = yym3370
						if false {
						} else {
							r.EncodeInt(int64(yy3369))
						}
					}
				}
			}
			if yyr3359 || yy2arr3359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3359[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3359[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3359 || yy2arr3359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3359[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3373 := *x.OrphanDependents
						yym3374 := z.EncBinary()
						_ = yym3374
						if false {
						} else {
							r.EncodeBool(bool(yy3373))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3359[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3375 := *x.OrphanDependents
						yym3376 := z.EncBinary()
						_ = yym3376
						if false {
						} else {
							r.EncodeBool(bool(yy3375))
						}
					}
				}
			}
			if yyr3359 || yy2arr3359 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3377 := z.DecBinary()
	_ = yym3377
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3378 := r.ContainerType()
		if yyct3378 == codecSelferValueTypeMap1234 {
			yyl3378 := r.ReadMapStart()
			if yyl3378 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3378, d)
			}
		} else if yyct3378 == codecSelferValueTypeArray1234 {
			yyl3378 := r.ReadArrayStart()
			if yyl3378 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3378, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3379Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3379Slc
	var yyhl3379 bool = l >= 0
	for yyj3379 := 0; ; yyj3379++ {
		if yyhl3379 {
			if yyj3379 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3379Slc = r.DecodeBytes(yys3379Slc, true, true)
		yys3379 := string(yys3379Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3379 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3383 := z.DecBinary()
				_ = yym3383
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3386 := z.DecBinary()
				_ = yym3386
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3379)
		} // end switch yys3379
	} // end for yyj3379
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3387 int
	var yyb3387 bool
	var yyhl3387 bool = l >= 0
	yyj3387++
	if yyhl3387 {
		yyb3387 = yyj3387 > l
	} else {
		yyb3387 = r.CheckBreak()
	}
	if yyb3387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3387++
	if yyhl3387 {
		yyb3387 = yyj3387 > l
	} else {
		yyb3387 = r.CheckBreak()
	}
	if yyb3387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3387++
	if yyhl3387 {
		yyb3387 = yyj3387 > l
	} else {
		yyb3387 = r.CheckBreak()
	}
	if yyb3387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3391 := z.DecBinary()
		_ = yym3391
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3387++
	if yyhl3387 {
		yyb3387 = yyj3387 > l
	} else {
		yyb3387 = r.CheckBreak()
	}
	if yyb3387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3387++
	if yyhl3387 {
		yyb3387 = yyj3387 > l
	} else {
		yyb3387 = r.CheckBreak()
	}
	if yyb3387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3394 := z.DecBinary()
		_ = yym3394
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3387++
		if yyhl3387 {
			yyb3387 = yyj3387 > l
		} else {
			yyb3387 = r.CheckBreak()
		}
		if yyb3387 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3387-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3395 := z.EncBinary()
		_ = yym3395
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3396 := !z.EncBinary()
			yy2arr3396 := z.EncBasicHandle().StructToArray
			var yyq3396 [4]bool
			_, _, _ = yysep3396, yyq3396, yy2arr3396
			const yyr3396 bool = false
			yyq3396[0] = x.Kind != ""
			yyq3396[1] = x.APIVersion != ""
			var yynn3396 int
			if yyr3396 || yy2arr3396 {
				r.EncodeArrayStart(4)
			} else {
				yynn3396 = 2
				for _, b := range yyq3396 {
					if b {
						yynn3396++
					}
				}
				r.EncodeMapStart(yynn3396)
				yynn3396 = 0
			}
			if yyr3396 || yy2arr3396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3396[0] {
					yym3398 := z.EncBinary()
					_ = yym3398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3396[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3399 := z.EncBinary()
					_ = yym3399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3396 || yy2arr3396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3396[1] {
					yym3401 := z.EncBinary()
					_ = yym3401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3396[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3402 := z.EncBinary()
					_ = yym3402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3396 || yy2arr3396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3404 := z.EncBinary()
				_ = yym3404
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3405 := z.EncBinary()
				_ = yym3405
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3396 || yy2arr3396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3407 := z.EncBinary()
				_ = yym3407
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3408 := z.EncBinary()
				_ = yym3408
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3396 || yy2arr3396 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3409 := z.DecBinary()
	_ = yym3409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3410 := r.ContainerType()
		if yyct3410 == codecSelferValueTypeMap1234 {
			yyl3410 := r.ReadMapStart()
			if yyl3410 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3410, d)
			}
		} else if yyct3410 == codecSelferValueTypeArray1234 {
			yyl3410 := r.ReadArrayStart()
			if yyl3410 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3410, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3411Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3411Slc
	var yyhl3411 bool = l >= 0
	for yyj3411 := 0; ; yyj3411++ {
		if yyhl3411 {
			if yyj3411 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3411Slc = r.DecodeBytes(yys3411Slc, true, true)
		yys3411 := string(yys3411Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3411 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3411)
		} // end switch yys3411
	} // end for yyj3411
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3416 int
	var yyb3416 bool
	var yyhl3416 bool = l >= 0
	yyj3416++
	if yyhl3416 {
		yyb3416 = yyj3416 > l
	} else {
		yyb3416 = r.CheckBreak()
	}
	if yyb3416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3416++
	if yyhl3416 {
		yyb3416 = yyj3416 > l
	} else {
		yyb3416 = r.CheckBreak()
	}
	if yyb3416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3416++
	if yyhl3416 {
		yyb3416 = yyj3416 > l
	} else {
		yyb3416 = r.CheckBreak()
	}
	if yyb3416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3416++
	if yyhl3416 {
		yyb3416 = yyj3416 > l
	} else {
		yyb3416 = r.CheckBreak()
	}
	if yyb3416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3416++
		if yyhl3416 {
			yyb3416 = yyj3416 > l
		} else {
			yyb3416 = r.CheckBreak()
		}
		if yyb3416 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3416-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3421 := z.EncBinary()
		_ = yym3421
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3422 := !z.EncBinary()
			yy2arr3422 := z.EncBasicHandle().StructToArray
			var yyq3422 [7]bool
			_, _, _ = yysep3422, yyq3422, yy2arr3422
			const yyr3422 bool = false
			yyq3422[0] = x.Kind != ""
			yyq3422[1] = x.APIVersion != ""
			var yynn3422 int
			if yyr3422 || yy2arr3422 {
				r.EncodeArrayStart(7)
			} else {
				yynn3422 = 5
				for _, b := range yyq3422 {
					if b {
						yynn3422++
					}
				}
				r.EncodeMapStart(yynn3422)
				yynn3422 = 0
			}
			if yyr3422 || yy2arr3422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3422[0] {
					yym3424 := z.EncBinary()
					_ = yym3424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3422[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3422 || yy2arr3422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3422[1] {
					yym3427 := z.EncBinary()
					_ = yym3427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3422[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3428 := z.EncBinary()
					_ = yym3428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3422 || yy2arr3422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3430 := z.EncBinary()
					_ = yym3430
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3431 := z.EncBinary()
					_ = yym3431
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3422 || yy2arr3422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3433 := z.EncBinary()
					_ = yym3433
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3434 := z.EncBinary()
					_ = yym3434
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3422 || yy2arr3422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3436 := z.EncBinary()
				_ = yym3436
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3437 := z.EncBinary()
				_ = yym3437
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3422 || yy2arr3422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3439 := z.EncBinary()
				_ = yym3439
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3440 := z.EncBinary()
				_ = yym3440
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3422 || yy2arr3422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3442 := *x.TimeoutSeconds
					yym3443 := z.EncBinary()
					_ = yym3443
					if false {
					} else {
						r.EncodeInt(int64(yy3442))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3444 := *x.TimeoutSeconds
					yym3445 := z.EncBinary()
					_ = yym3445
					if false {
					} else {
						r.EncodeInt(int64(yy3444))
					}
				}
			}
			if yyr3422 || yy2arr3422 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3446 := z.DecBinary()
	_ = yym3446
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3447 := r.ContainerType()
		if yyct3447 == codecSelferValueTypeMap1234 {
			yyl3447 := r.ReadMapStart()
			if yyl3447 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3447, d)
			}
		} else if yyct3447 == codecSelferValueTypeArray1234 {
			yyl3447 := r.ReadArrayStart()
			if yyl3447 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3447, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3448Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3448Slc
	var yyhl3448 bool = l >= 0
	for yyj3448 := 0; ; yyj3448++ {
		if yyhl3448 {
			if yyj3448 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3448Slc = r.DecodeBytes(yys3448Slc, true, true)
		yys3448 := string(yys3448Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3448 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3451 := &x.LabelSelector
				yym3452 := z.DecBinary()
				_ = yym3452
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3451) {
				} else {
					z.DecFallback(yyv3451, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3453 := &x.FieldSelector
				yym3454 := z.DecBinary()
				_ = yym3454
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3453) {
				} else {
					z.DecFallback(yyv3453, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3458 := z.DecBinary()
				_ = yym3458
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3448)
		} // end switch yys3448
	} // end for yyj3448
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3459 int
	var yyb3459 bool
	var yyhl3459 bool = l >= 0
	yyj3459++
	if yyhl3459 {
		yyb3459 = yyj3459 > l
	} else {
		yyb3459 = r.CheckBreak()
	}
	if yyb3459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3459++
	if yyhl3459 {
		yyb3459 = yyj3459 > l
	} else {
		yyb3459 = r.CheckBreak()
	}
	if yyb3459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3459++
	if yyhl3459 {
		yyb3459 = yyj3459 > l
	} else {
		yyb3459 = r.CheckBreak()
	}
	if yyb3459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3462 := &x.LabelSelector
		yym3463 := z.DecBinary()
		_ = yym3463
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3462) {
		} else {
			z.DecFallback(yyv3462, true)
		}
	}
	yyj3459++
	if yyhl3459 {
		yyb3459 = yyj3459 > l
	} else {
		yyb3459 = r.CheckBreak()
	}
	if yyb3459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3464 := &x.FieldSelector
		yym3465 := z.DecBinary()
		_ = yym3465
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3464) {
		} else {
			z.DecFallback(yyv3464, true)
		}
	}
	yyj3459++
	if yyhl3459 {
		yyb3459 = yyj3459 > l
	} else {
		yyb3459 = r.CheckBreak()
	}
	if yyb3459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3459++
	if yyhl3459 {
		yyb3459 = yyj3459 > l
	} else {
		yyb3459 = r.CheckBreak()
	}
	if yyb3459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3459++
	if yyhl3459 {
		yyb3459 = yyj3459 > l
	} else {
		yyb3459 = r.CheckBreak()
	}
	if yyb3459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3469 := z.DecBinary()
		_ = yym3469
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3459++
		if yyhl3459 {
			yyb3459 = yyj3459 > l
		} else {
			yyb3459 = r.CheckBreak()
		}
		if yyb3459 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3459-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3470 := z.EncBinary()
		_ = yym3470
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3471 := !z.EncBinary()
			yy2arr3471 := z.EncBasicHandle().StructToArray
			var yyq3471 [10]bool
			_, _, _ = yysep3471, yyq3471, yy2arr3471
			const yyr3471 bool = false
			yyq3471[0] = x.Kind != ""
			yyq3471[1] = x.APIVersion != ""
			var yynn3471 int
			if yyr3471 || yy2arr3471 {
				r.EncodeArrayStart(10)
			} else {
				yynn3471 = 8
				for _, b := range yyq3471 {
					if b {
						yynn3471++
					}
				}
				r.EncodeMapStart(yynn3471)
				yynn3471 = 0
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3471[0] {
					yym3473 := z.EncBinary()
					_ = yym3473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3471[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3474 := z.EncBinary()
					_ = yym3474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3471[1] {
					yym3476 := z.EncBinary()
					_ = yym3476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3471[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3477 := z.EncBinary()
					_ = yym3477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3479 := z.EncBinary()
				_ = yym3479
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3480 := z.EncBinary()
				_ = yym3480
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3482 := z.EncBinary()
				_ = yym3482
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3483 := z.EncBinary()
				_ = yym3483
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3485 := z.EncBinary()
				_ = yym3485
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3486 := z.EncBinary()
				_ = yym3486
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3488 := *x.SinceSeconds
					yym3489 := z.EncBinary()
					_ = yym3489
					if false {
					} else {
						r.EncodeInt(int64(yy3488))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3490 := *x.SinceSeconds
					yym3491 := z.EncBinary()
					_ = yym3491
					if false {
					} else {
						r.EncodeInt(int64(yy3490))
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3493 := z.EncBinary()
					_ = yym3493
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3493 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3493 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3494 := z.EncBinary()
					_ = yym3494
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3494 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3494 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3496 := z.EncBinary()
				_ = yym3496
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3497 := z.EncBinary()
				_ = yym3497
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3499 := *x.TailLines
					yym3500 := z.EncBinary()
					_ = yym3500
					if false {
					} else {
						r.EncodeInt(int64(yy3499))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3501 := *x.TailLines
					yym3502 := z.EncBinary()
					_ = yym3502
					if false {
					} else {
						r.EncodeInt(int64(yy3501))
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3504 := *x.LimitBytes
					yym3505 := z.EncBinary()
					_ = yym3505
					if false {
					} else {
						r.EncodeInt(int64(yy3504))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3506 := *x.LimitBytes
					yym3507 := z.EncBinary()
					_ = yym3507
					if false {
					} else {
						r.EncodeInt(int64(yy3506))
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3508 := z.DecBinary()
	_ = yym3508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3509 := r.ContainerType()
		if yyct3509 == codecSelferValueTypeMap1234 {
			yyl3509 := r.ReadMapStart()
			if yyl3509 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3509, d)
			}
		} else if yyct3509 == codecSelferValueTypeArray1234 {
			yyl3509 := r.ReadArrayStart()
			if yyl3509 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3509, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3510Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3510Slc
	var yyhl3510 bool = l >= 0
	for yyj3510 := 0; ; yyj3510++ {
		if yyhl3510 {
			if yyj3510 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3510Slc = r.DecodeBytes(yys3510Slc, true, true)
		yys3510 := string(yys3510Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3510 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3517 := z.DecBinary()
				_ = yym3517
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3519 := z.DecBinary()
				_ = yym3519
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3519 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3519 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3522 := z.DecBinary()
				_ = yym3522
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3524 := z.DecBinary()
				_ = yym3524
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3510)
		} // end switch yys3510
	} // end for yyj3510
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3525 int
	var yyb3525 bool
	var yyhl3525 bool = l >= 0
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3532 := z.DecBinary()
		_ = yym3532
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3534 := z.DecBinary()
		_ = yym3534
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3534 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3534 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3537 := z.DecBinary()
		_ = yym3537
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3539 := z.DecBinary()
		_ = yym3539
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3525++
		if yyhl3525 {
			yyb3525 = yyj3525 > l
		} else {
			yyb3525 = r.CheckBreak()
		}
		if yyb3525 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3525-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3540 := z.EncBinary()
		_ = yym3540
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3541 := !z.EncBinary()
			yy2arr3541 := z.EncBasicHandle().StructToArray
			var yyq3541 [7]bool
			_, _, _ = yysep3541, yyq3541, yy2arr3541
			const yyr3541 bool = false
			yyq3541[0] = x.Kind != ""
			yyq3541[1] = x.APIVersion != ""
			yyq3541[2] = x.Stdin != false
			yyq3541[3] = x.Stdout != false
			yyq3541[4] = x.Stderr != false
			yyq3541[5] = x.TTY != false
			yyq3541[6] = x.Container != ""
			var yynn3541 int
			if yyr3541 || yy2arr3541 {
				r.EncodeArrayStart(7)
			} else {
				yynn3541 = 0
				for _, b := range yyq3541 {
					if b {
						yynn3541++
					}
				}
				r.EncodeMapStart(yynn3541)
				yynn3541 = 0
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3541[0] {
					yym3543 := z.EncBinary()
					_ = yym3543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3541[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3544 := z.EncBinary()
					_ = yym3544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3541[1] {
					yym3546 := z.EncBinary()
					_ = yym3546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3541[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3547 := z.EncBinary()
					_ = yym3547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3541[2] {
					yym3549 := z.EncBinary()
					_ = yym3549
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3541[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3541[3] {
					yym3552 := z.EncBinary()
					_ = yym3552
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3541[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3553 := z.EncBinary()
					_ = yym3553
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3541[4] {
					yym3555 := z.EncBinary()
					_ = yym3555
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3541[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3556 := z.EncBinary()
					_ = yym3556
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3541[5] {
					yym3558 := z.EncBinary()
					_ = yym3558
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3541[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3559 := z.EncBinary()
					_ = yym3559
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3541[6] {
					yym3561 := z.EncBinary()
					_ = yym3561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3541[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3562 := z.EncBinary()
					_ = yym3562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3563 := z.DecBinary()
	_ = yym3563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3564 := r.ContainerType()
		if yyct3564 == codecSelferValueTypeMap1234 {
			yyl3564 := r.ReadMapStart()
			if yyl3564 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3564, d)
			}
		} else if yyct3564 == codecSelferValueTypeArray1234 {
			yyl3564 := r.ReadArrayStart()
			if yyl3564 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3564, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3565Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3565Slc
	var yyhl3565 bool = l >= 0
	for yyj3565 := 0; ; yyj3565++ {
		if yyhl3565 {
			if yyj3565 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3565Slc = r.DecodeBytes(yys3565Slc, true, true)
		yys3565 := string(yys3565Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3565 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3565)
		} // end switch yys3565
	} // end for yyj3565
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3573 int
	var yyb3573 bool
	var yyhl3573 bool = l >= 0
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3573++
		if yyhl3573 {
			yyb3573 = yyj3573 > l
		} else {
			yyb3573 = r.CheckBreak()
		}
		if yyb3573 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3573-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3581 := z.EncBinary()
		_ = yym3581
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3582 := !z.EncBinary()
			yy2arr3582 := z.EncBasicHandle().StructToArray
			var yyq3582 [8]bool
			_, _, _ = yysep3582, yyq3582, yy2arr3582
			const yyr3582 bool = false
			yyq3582[0] = x.Kind != ""
			yyq3582[1] = x.APIVersion != ""
			var yynn3582 int
			if yyr3582 || yy2arr3582 {
				r.EncodeArrayStart(8)
			} else {
				yynn3582 = 6
				for _, b := range yyq3582 {
					if b {
						yynn3582++
					}
				}
				r.EncodeMapStart(yynn3582)
				yynn3582 = 0
			}
			if yyr3582 || yy2arr3582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3582[0] {
					yym3584 := z.EncBinary()
					_ = yym3584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3582[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3585 := z.EncBinary()
					_ = yym3585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3582 || yy2arr3582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3582[1] {
					yym3587 := z.EncBinary()
					_ = yym3587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3582[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3588 := z.EncBinary()
					_ = yym3588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3582 || yy2arr3582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3590 := z.EncBinary()
				_ = yym3590
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3591 := z.EncBinary()
				_ = yym3591
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3582 || yy2arr3582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3593 := z.EncBinary()
				_ = yym3593
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3594 := z.EncBinary()
				_ = yym3594
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3582 || yy2arr3582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3596 := z.EncBinary()
				_ = yym3596
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3597 := z.EncBinary()
				_ = yym3597
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3582 || yy2arr3582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3599 := z.EncBinary()
				_ = yym3599
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3600 := z.EncBinary()
				_ = yym3600
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3582 || yy2arr3582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3602 := z.EncBinary()
				_ = yym3602
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3603 := z.EncBinary()
				_ = yym3603
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3582 || yy2arr3582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3605 := z.EncBinary()
					_ = yym3605
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3606 := z.EncBinary()
					_ = yym3606
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3582 || yy2arr3582 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3607 := z.DecBinary()
	_ = yym3607
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3608 := r.ContainerType()
		if yyct3608 == codecSelferValueTypeMap1234 {
			yyl3608 := r.ReadMapStart()
			if yyl3608 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3608, d)
			}
		} else if yyct3608 == codecSelferValueTypeArray1234 {
			yyl3608 := r.ReadArrayStart()
			if yyl3608 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3608, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3609Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3609Slc
	var yyhl3609 bool = l >= 0
	for yyj3609 := 0; ; yyj3609++ {
		if yyhl3609 {
			if yyj3609 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3609Slc = r.DecodeBytes(yys3609Slc, true, true)
		yys3609 := string(yys3609Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3609 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3617 := &x.Command
				yym3618 := z.DecBinary()
				_ = yym3618
				if false {
				} else {
					z.F.DecSliceStringX(yyv3617, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3609)
		} // end switch yys3609
	} // end for yyj3609
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3619 int
	var yyb3619 bool
	var yyhl3619 bool = l >= 0
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3627 := &x.Command
		yym3628 := z.DecBinary()
		_ = yym3628
		if false {
		} else {
			z.F.DecSliceStringX(yyv3627, false, d)
		}
	}
	for {
		yyj3619++
		if yyhl3619 {
			yyb3619 = yyj3619 > l
		} else {
			yyb3619 = r.CheckBreak()
		}
		if yyb3619 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3619-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3629 := z.EncBinary()
		_ = yym3629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3630 := !z.EncBinary()
			yy2arr3630 := z.EncBasicHandle().StructToArray
			var yyq3630 [3]bool
			_, _, _ = yysep3630, yyq3630, yy2arr3630
			const yyr3630 bool = false
			yyq3630[0] = x.Kind != ""
			yyq3630[1] = x.APIVersion != ""
			var yynn3630 int
			if yyr3630 || yy2arr3630 {
				r.EncodeArrayStart(3)
			} else {
				yynn3630 = 1
				for _, b := range yyq3630 {
					if b {
						yynn3630++
					}
				}
				r.EncodeMapStart(yynn3630)
				yynn3630 = 0
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3630[0] {
					yym3632 := z.EncBinary()
					_ = yym3632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3630[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3633 := z.EncBinary()
					_ = yym3633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3630[1] {
					yym3635 := z.EncBinary()
					_ = yym3635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3630[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3636 := z.EncBinary()
					_ = yym3636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3638 := z.EncBinary()
				_ = yym3638
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3639 := z.EncBinary()
				_ = yym3639
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3640 := z.DecBinary()
	_ = yym3640
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3641 := r.ContainerType()
		if yyct3641 == codecSelferValueTypeMap1234 {
			yyl3641 := r.ReadMapStart()
			if yyl3641 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3641, d)
			}
		} else if yyct3641 == codecSelferValueTypeArray1234 {
			yyl3641 := r.ReadArrayStart()
			if yyl3641 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3641, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3642Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3642Slc
	var yyhl3642 bool = l >= 0
	for yyj3642 := 0; ; yyj3642++ {
		if yyhl3642 {
			if yyj3642 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3642Slc = r.DecodeBytes(yys3642Slc, true, true)
		yys3642 := string(yys3642Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3642 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3642)
		} // end switch yys3642
	} // end for yyj3642
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3646 int
	var yyb3646 bool
	var yyhl3646 bool = l >= 0
	yyj3646++
	if yyhl3646 {
		yyb3646 = yyj3646 > l
	} else {
		yyb3646 = r.CheckBreak()
	}
	if yyb3646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3646++
	if yyhl3646 {
		yyb3646 = yyj3646 > l
	} else {
		yyb3646 = r.CheckBreak()
	}
	if yyb3646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3646++
	if yyhl3646 {
		yyb3646 = yyj3646 > l
	} else {
		yyb3646 = r.CheckBreak()
	}
	if yyb3646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3646++
		if yyhl3646 {
			yyb3646 = yyj3646 > l
		} else {
			yyb3646 = r.CheckBreak()
		}
		if yyb3646 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3646-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3650 := z.EncBinary()
		_ = yym3650
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3651 := !z.EncBinary()
			yy2arr3651 := z.EncBasicHandle().StructToArray
			var yyq3651 [3]bool
			_, _, _ = yysep3651, yyq3651, yy2arr3651
			const yyr3651 bool = false
			yyq3651[0] = x.Kind != ""
			yyq3651[1] = x.APIVersion != ""
			var yynn3651 int
			if yyr3651 || yy2arr3651 {
				r.EncodeArrayStart(3)
			} else {
				yynn3651 = 1
				for _, b := range yyq3651 {
					if b {
						yynn3651++
					}
				}
				r.EncodeMapStart(yynn3651)
				yynn3651 = 0
			}
			if yyr3651 || yy2arr3651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3651[0] {
					yym3653 := z.EncBinary()
					_ = yym3653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3651[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3654 := z.EncBinary()
					_ = yym3654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3651 || yy2arr3651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3651[1] {
					yym3656 := z.EncBinary()
					_ = yym3656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3651[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3657 := z.EncBinary()
					_ = yym3657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3651 || yy2arr3651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3659 := z.EncBinary()
				_ = yym3659
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3660 := z.EncBinary()
				_ = yym3660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3651 || yy2arr3651 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3661 := z.DecBinary()
	_ = yym3661
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3662 := r.ContainerType()
		if yyct3662 == codecSelferValueTypeMap1234 {
			yyl3662 := r.ReadMapStart()
			if yyl3662 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3662, d)
			}
		} else if yyct3662 == codecSelferValueTypeArray1234 {
			yyl3662 := r.ReadArrayStart()
			if yyl3662 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3662, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3663Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3663Slc
	var yyhl3663 bool = l >= 0
	for yyj3663 := 0; ; yyj3663++ {
		if yyhl3663 {
			if yyj3663 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3663Slc = r.DecodeBytes(yys3663Slc, true, true)
		yys3663 := string(yys3663Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3663 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3663)
		} // end switch yys3663
	} // end for yyj3663
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3667 int
	var yyb3667 bool
	var yyhl3667 bool = l >= 0
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3667++
		if yyhl3667 {
			yyb3667 = yyj3667 > l
		} else {
			yyb3667 = r.CheckBreak()
		}
		if yyb3667 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3667-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3671 := z.EncBinary()
		_ = yym3671
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3672 := !z.EncBinary()
			yy2arr3672 := z.EncBasicHandle().StructToArray
			var yyq3672 [3]bool
			_, _, _ = yysep3672, yyq3672, yy2arr3672
			const yyr3672 bool = false
			yyq3672[0] = x.Kind != ""
			yyq3672[1] = x.APIVersion != ""
			var yynn3672 int
			if yyr3672 || yy2arr3672 {
				r.EncodeArrayStart(3)
			} else {
				yynn3672 = 1
				for _, b := range yyq3672 {
					if b {
						yynn3672++
					}
				}
				r.EncodeMapStart(yynn3672)
				yynn3672 = 0
			}
			if yyr3672 || yy2arr3672 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3672[0] {
					yym3674 := z.EncBinary()
					_ = yym3674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3672[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3675 := z.EncBinary()
					_ = yym3675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3672 || yy2arr3672 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3672[1] {
					yym3677 := z.EncBinary()
					_ = yym3677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3672[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3678 := z.EncBinary()
					_ = yym3678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3672 || yy2arr3672 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3680 := z.EncBinary()
				_ = yym3680
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3681 := z.EncBinary()
				_ = yym3681
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3672 || yy2arr3672 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3682 := z.DecBinary()
	_ = yym3682
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3683 := r.ContainerType()
		if yyct3683 == codecSelferValueTypeMap1234 {
			yyl3683 := r.ReadMapStart()
			if yyl3683 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3683, d)
			}
		} else if yyct3683 == codecSelferValueTypeArray1234 {
			yyl3683 := r.ReadArrayStart()
			if yyl3683 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3683, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3684Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3684Slc
	var yyhl3684 bool = l >= 0
	for yyj3684 := 0; ; yyj3684++ {
		if yyhl3684 {
			if yyj3684 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3684Slc = r.DecodeBytes(yys3684Slc, true, true)
		yys3684 := string(yys3684Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3684 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3684)
		} // end switch yys3684
	} // end for yyj3684
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3688 int
	var yyb3688 bool
	var yyhl3688 bool = l >= 0
	yyj3688++
	if yyhl3688 {
		yyb3688 = yyj3688 > l
	} else {
		yyb3688 = r.CheckBreak()
	}
	if yyb3688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3688++
	if yyhl3688 {
		yyb3688 = yyj3688 > l
	} else {
		yyb3688 = r.CheckBreak()
	}
	if yyb3688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3688++
	if yyhl3688 {
		yyb3688 = yyj3688 > l
	} else {
		yyb3688 = r.CheckBreak()
	}
	if yyb3688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3688++
		if yyhl3688 {
			yyb3688 = yyj3688 > l
		} else {
			yyb3688 = r.CheckBreak()
		}
		if yyb3688 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3688-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3692 := z.EncBinary()
		_ = yym3692
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3693 := !z.EncBinary()
			yy2arr3693 := z.EncBasicHandle().StructToArray
			var yyq3693 [5]bool
			_, _, _ = yysep3693, yyq3693, yy2arr3693
			const yyr3693 bool = false
			yyq3693[4] = x.Controller != nil
			var yynn3693 int
			if yyr3693 || yy2arr3693 {
				r.EncodeArrayStart(5)
			} else {
				yynn3693 = 4
				for _, b := range yyq3693 {
					if b {
						yynn3693++
					}
				}
				r.EncodeMapStart(yynn3693)
				yynn3693 = 0
			}
			if yyr3693 || yy2arr3693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3695 := z.EncBinary()
				_ = yym3695
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3696 := z.EncBinary()
				_ = yym3696
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3693 || yy2arr3693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3698 := z.EncBinary()
				_ = yym3698
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3699 := z.EncBinary()
				_ = yym3699
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3693 || yy2arr3693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3701 := z.EncBinary()
				_ = yym3701
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3702 := z.EncBinary()
				_ = yym3702
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3693 || yy2arr3693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3704 := z.EncBinary()
				_ = yym3704
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3705 := z.EncBinary()
				_ = yym3705
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3693 || yy2arr3693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3693[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3707 := *x.Controller
						yym3708 := z.EncBinary()
						_ = yym3708
						if false {
						} else {
							r.EncodeBool(bool(yy3707))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3693[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3709 := *x.Controller
						yym3710 := z.EncBinary()
						_ = yym3710
						if false {
						} else {
							r.EncodeBool(bool(yy3709))
						}
					}
				}
			}
			if yyr3693 || yy2arr3693 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3711 := z.DecBinary()
	_ = yym3711
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3712 := r.ContainerType()
		if yyct3712 == codecSelferValueTypeMap1234 {
			yyl3712 := r.ReadMapStart()
			if yyl3712 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3712, d)
			}
		} else if yyct3712 == codecSelferValueTypeArray1234 {
			yyl3712 := r.ReadArrayStart()
			if yyl3712 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3712, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3713Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3713Slc
	var yyhl3713 bool = l >= 0
	for yyj3713 := 0; ; yyj3713++ {
		if yyhl3713 {
			if yyj3713 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3713Slc = r.DecodeBytes(yys3713Slc, true, true)
		yys3713 := string(yys3713Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3713 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3719 := z.DecBinary()
				_ = yym3719
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3713)
		} // end switch yys3713
	} // end for yyj3713
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3720 int
	var yyb3720 bool
	var yyhl3720 bool = l >= 0
	yyj3720++
	if yyhl3720 {
		yyb3720 = yyj3720 > l
	} else {
		yyb3720 = r.CheckBreak()
	}
	if yyb3720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3720++
	if yyhl3720 {
		yyb3720 = yyj3720 > l
	} else {
		yyb3720 = r.CheckBreak()
	}
	if yyb3720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3720++
	if yyhl3720 {
		yyb3720 = yyj3720 > l
	} else {
		yyb3720 = r.CheckBreak()
	}
	if yyb3720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3720++
	if yyhl3720 {
		yyb3720 = yyj3720 > l
	} else {
		yyb3720 = r.CheckBreak()
	}
	if yyb3720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3720++
	if yyhl3720 {
		yyb3720 = yyj3720 > l
	} else {
		yyb3720 = r.CheckBreak()
	}
	if yyb3720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3726 := z.DecBinary()
		_ = yym3726
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3720++
		if yyhl3720 {
			yyb3720 = yyj3720 > l
		} else {
			yyb3720 = r.CheckBreak()
		}
		if yyb3720 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3720-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3727 := z.EncBinary()
		_ = yym3727
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3728 := !z.EncBinary()
			yy2arr3728 := z.EncBasicHandle().StructToArray
			var yyq3728 [7]bool
			_, _, _ = yysep3728, yyq3728, yy2arr3728
			const yyr3728 bool = false
			yyq3728[0] = x.Kind != ""
			yyq3728[1] = x.Namespace != ""
			yyq3728[2] = x.Name != ""
			yyq3728[3] = x.UID != ""
			yyq3728[4] = x.APIVersion != ""
			yyq3728[5] = x.ResourceVersion != ""
			yyq3728[6] = x.FieldPath != ""
			var yynn3728 int
			if yyr3728 || yy2arr3728 {
				r.EncodeArrayStart(7)
			} else {
				yynn3728 = 0
				for _, b := range yyq3728 {
					if b {
						yynn3728++
					}
				}
				r.EncodeMapStart(yynn3728)
				yynn3728 = 0
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[0] {
					yym3730 := z.EncBinary()
					_ = yym3730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3728[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3731 := z.EncBinary()
					_ = yym3731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[1] {
					yym3733 := z.EncBinary()
					_ = yym3733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3728[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3734 := z.EncBinary()
					_ = yym3734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[2] {
					yym3736 := z.EncBinary()
					_ = yym3736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3728[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3737 := z.EncBinary()
					_ = yym3737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[3] {
					yym3739 := z.EncBinary()
					_ = yym3739
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3728[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3740 := z.EncBinary()
					_ = yym3740
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[4] {
					yym3742 := z.EncBinary()
					_ = yym3742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3728[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3743 := z.EncBinary()
					_ = yym3743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[5] {
					yym3745 := z.EncBinary()
					_ = yym3745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3728[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3746 := z.EncBinary()
					_ = yym3746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[6] {
					yym3748 := z.EncBinary()
					_ = yym3748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3728[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3749 := z.EncBinary()
					_ = yym3749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3750 := z.DecBinary()
	_ = yym3750
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3751 := r.ContainerType()
		if yyct3751 == codecSelferValueTypeMap1234 {
			yyl3751 := r.ReadMapStart()
			if yyl3751 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3751, d)
			}
		} else if yyct3751 == codecSelferValueTypeArray1234 {
			yyl3751 := r.ReadArrayStart()
			if yyl3751 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3751, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3752Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3752Slc
	var yyhl3752 bool = l >= 0
	for yyj3752 := 0; ; yyj3752++ {
		if yyhl3752 {
			if yyj3752 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3752Slc = r.DecodeBytes(yys3752Slc, true, true)
		yys3752 := string(yys3752Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3752 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3752)
		} // end switch yys3752
	} // end for yyj3752
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3760 int
	var yyb3760 bool
	var yyhl3760 bool = l >= 0
	yyj3760++
	if yyhl3760 {
		yyb3760 = yyj3760 > l
	} else {
		yyb3760 = r.CheckBreak()
	}
	if yyb3760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3760++
	if yyhl3760 {
		yyb3760 = yyj3760 > l
	} else {
		yyb3760 = r.CheckBreak()
	}
	if yyb3760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3760++
	if yyhl3760 {
		yyb3760 = yyj3760 > l
	} else {
		yyb3760 = r.CheckBreak()
	}
	if yyb3760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3760++
	if yyhl3760 {
		yyb3760 = yyj3760 > l
	} else {
		yyb3760 = r.CheckBreak()
	}
	if yyb3760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3760++
	if yyhl3760 {
		yyb3760 = yyj3760 > l
	} else {
		yyb3760 = r.CheckBreak()
	}
	if yyb3760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3760++
	if yyhl3760 {
		yyb3760 = yyj3760 > l
	} else {
		yyb3760 = r.CheckBreak()
	}
	if yyb3760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3760++
	if yyhl3760 {
		yyb3760 = yyj3760 > l
	} else {
		yyb3760 = r.CheckBreak()
	}
	if yyb3760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3760++
		if yyhl3760 {
			yyb3760 = yyj3760 > l
		} else {
			yyb3760 = r.CheckBreak()
		}
		if yyb3760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3768 := z.EncBinary()
		_ = yym3768
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3769 := !z.EncBinary()
			yy2arr3769 := z.EncBasicHandle().StructToArray
			var yyq3769 [1]bool
			_, _, _ = yysep3769, yyq3769, yy2arr3769
			const yyr3769 bool = false
			var yynn3769 int
			if yyr3769 || yy2arr3769 {
				r.EncodeArrayStart(1)
			} else {
				yynn3769 = 1
				for _, b := range yyq3769 {
					if b {
						yynn3769++
					}
				}
				r.EncodeMapStart(yynn3769)
				yynn3769 = 0
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3771 := z.EncBinary()
				_ = yym3771
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3772 := z.EncBinary()
				_ = yym3772
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3773 := z.DecBinary()
	_ = yym3773
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3774 := r.ContainerType()
		if yyct3774 == codecSelferValueTypeMap1234 {
			yyl3774 := r.ReadMapStart()
			if yyl3774 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3774, d)
			}
		} else if yyct3774 == codecSelferValueTypeArray1234 {
			yyl3774 := r.ReadArrayStart()
			if yyl3774 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3774, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3775Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3775Slc
	var yyhl3775 bool = l >= 0
	for yyj3775 := 0; ; yyj3775++ {
		if yyhl3775 {
			if yyj3775 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3775Slc = r.DecodeBytes(yys3775Slc, true, true)
		yys3775 := string(yys3775Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3775 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3775)
		} // end switch yys3775
	} // end for yyj3775
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3777 int
	var yyb3777 bool
	var yyhl3777 bool = l >= 0
	yyj3777++
	if yyhl3777 {
		yyb3777 = yyj3777 > l
	} else {
		yyb3777 = r.CheckBreak()
	}
	if yyb3777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3777++
		if yyhl3777 {
			yyb3777 = yyj3777 > l
		} else {
			yyb3777 = r.CheckBreak()
		}
		if yyb3777 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3777-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3779 := z.EncBinary()
		_ = yym3779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3780 := !z.EncBinary()
			yy2arr3780 := z.EncBasicHandle().StructToArray
			var yyq3780 [3]bool
			_, _, _ = yysep3780, yyq3780, yy2arr3780
			const yyr3780 bool = false
			yyq3780[0] = x.Kind != ""
			yyq3780[1] = x.APIVersion != ""
			yyq3780[2] = true
			var yynn3780 int
			if yyr3780 || yy2arr3780 {
				r.EncodeArrayStart(3)
			} else {
				yynn3780 = 0
				for _, b := range yyq3780 {
					if b {
						yynn3780++
					}
				}
				r.EncodeMapStart(yynn3780)
				yynn3780 = 0
			}
			if yyr3780 || yy2arr3780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3780[0] {
					yym3782 := z.EncBinary()
					_ = yym3782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3780[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3783 := z.EncBinary()
					_ = yym3783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3780 || yy2arr3780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3780[1] {
					yym3785 := z.EncBinary()
					_ = yym3785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3780[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3786 := z.EncBinary()
					_ = yym3786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3780 || yy2arr3780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3780[2] {
					yy3788 := &x.Reference
					yy3788.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3780[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3789 := &x.Reference
					yy3789.CodecEncodeSelf(e)
				}
			}
			if yyr3780 || yy2arr3780 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3790 := z.DecBinary()
	_ = yym3790
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3791 := r.ContainerType()
		if yyct3791 == codecSelferValueTypeMap1234 {
			yyl3791 := r.ReadMapStart()
			if yyl3791 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3791, d)
			}
		} else if yyct3791 == codecSelferValueTypeArray1234 {
			yyl3791 := r.ReadArrayStart()
			if yyl3791 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3791, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3792Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3792Slc
	var yyhl3792 bool = l >= 0
	for yyj3792 := 0; ; yyj3792++ {
		if yyhl3792 {
			if yyj3792 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3792Slc = r.DecodeBytes(yys3792Slc, true, true)
		yys3792 := string(yys3792Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3792 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3795 := &x.Reference
				yyv3795.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3792)
		} // end switch yys3792
	} // end for yyj3792
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3796 int
	var yyb3796 bool
	var yyhl3796 bool = l >= 0
	yyj3796++
	if yyhl3796 {
		yyb3796 = yyj3796 > l
	} else {
		yyb3796 = r.CheckBreak()
	}
	if yyb3796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3796++
	if yyhl3796 {
		yyb3796 = yyj3796 > l
	} else {
		yyb3796 = r.CheckBreak()
	}
	if yyb3796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3796++
	if yyhl3796 {
		yyb3796 = yyj3796 > l
	} else {
		yyb3796 = r.CheckBreak()
	}
	if yyb3796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3799 := &x.Reference
		yyv3799.CodecDecodeSelf(d)
	}
	for {
		yyj3796++
		if yyhl3796 {
			yyb3796 = yyj3796 > l
		} else {
			yyb3796 = r.CheckBreak()
		}
		if yyb3796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3800 := z.EncBinary()
		_ = yym3800
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3801 := !z.EncBinary()
			yy2arr3801 := z.EncBasicHandle().StructToArray
			var yyq3801 [2]bool
			_, _, _ = yysep3801, yyq3801, yy2arr3801
			const yyr3801 bool = false
			yyq3801[0] = x.Component != ""
			yyq3801[1] = x.Host != ""
			var yynn3801 int
			if yyr3801 || yy2arr3801 {
				r.EncodeArrayStart(2)
			} else {
				yynn3801 = 0
				for _, b := range yyq3801 {
					if b {
						yynn3801++
					}
				}
				r.EncodeMapStart(yynn3801)
				yynn3801 = 0
			}
			if yyr3801 || yy2arr3801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3801[0] {
					yym3803 := z.EncBinary()
					_ = yym3803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3801[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3804 := z.EncBinary()
					_ = yym3804
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3801 || yy2arr3801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3801[1] {
					yym3806 := z.EncBinary()
					_ = yym3806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3801[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3807 := z.EncBinary()
					_ = yym3807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3801 || yy2arr3801 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3808 := z.DecBinary()
	_ = yym3808
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3809 := r.ContainerType()
		if yyct3809 == codecSelferValueTypeMap1234 {
			yyl3809 := r.ReadMapStart()
			if yyl3809 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3809, d)
			}
		} else if yyct3809 == codecSelferValueTypeArray1234 {
			yyl3809 := r.ReadArrayStart()
			if yyl3809 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3809, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3810Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3810Slc
	var yyhl3810 bool = l >= 0
	for yyj3810 := 0; ; yyj3810++ {
		if yyhl3810 {
			if yyj3810 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3810Slc = r.DecodeBytes(yys3810Slc, true, true)
		yys3810 := string(yys3810Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3810 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3810)
		} // end switch yys3810
	} // end for yyj3810
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3813 int
	var yyb3813 bool
	var yyhl3813 bool = l >= 0
	yyj3813++
	if yyhl3813 {
		yyb3813 = yyj3813 > l
	} else {
		yyb3813 = r.CheckBreak()
	}
	if yyb3813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3813++
	if yyhl3813 {
		yyb3813 = yyj3813 > l
	} else {
		yyb3813 = r.CheckBreak()
	}
	if yyb3813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3813++
		if yyhl3813 {
			yyb3813 = yyj3813 > l
		} else {
			yyb3813 = r.CheckBreak()
		}
		if yyb3813 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3813-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3816 := z.EncBinary()
		_ = yym3816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3817 := !z.EncBinary()
			yy2arr3817 := z.EncBasicHandle().StructToArray
			var yyq3817 [11]bool
			_, _, _ = yysep3817, yyq3817, yy2arr3817
			const yyr3817 bool = false
			yyq3817[0] = x.Kind != ""
			yyq3817[1] = x.APIVersion != ""
			yyq3817[2] = true
			yyq3817[3] = true
			yyq3817[4] = x.Reason != ""
			yyq3817[5] = x.Message != ""
			yyq3817[6] = true
			yyq3817[7] = true
			yyq3817[8] = true
			yyq3817[9] = x.Count != 0
			yyq3817[10] = x.Type != ""
			var yynn3817 int
			if yyr3817 || yy2arr3817 {
				r.EncodeArrayStart(11)
			} else {
				yynn3817 = 0
				for _, b := range yyq3817 {
					if b {
						yynn3817++
					}
				}
				r.EncodeMapStart(yynn3817)
				yynn3817 = 0
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[0] {
					yym3819 := z.EncBinary()
					_ = yym3819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3817[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3820 := z.EncBinary()
					_ = yym3820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[1] {
					yym3822 := z.EncBinary()
					_ = yym3822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3817[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3823 := z.EncBinary()
					_ = yym3823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[2] {
					yy3825 := &x.ObjectMeta
					yy3825.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3817[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3826 := &x.ObjectMeta
					yy3826.CodecEncodeSelf(e)
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[3] {
					yy3828 := &x.InvolvedObject
					yy3828.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3817[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3829 := &x.InvolvedObject
					yy3829.CodecEncodeSelf(e)
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[4] {
					yym3831 := z.EncBinary()
					_ = yym3831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3817[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3832 := z.EncBinary()
					_ = yym3832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[5] {
					yym3834 := z.EncBinary()
					_ = yym3834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3817[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3835 := z.EncBinary()
					_ = yym3835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[6] {
					yy3837 := &x.Source
					yy3837.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3817[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3838 := &x.Source
					yy3838.CodecEncodeSelf(e)
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[7] {
					yy3840 := &x.FirstTimestamp
					yym3841 := z.EncBinary()
					_ = yym3841
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3840) {
					} else if yym3841 {
						z.EncBinaryMarshal(yy3840)
					} else if !yym3841 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3840)
					} else {
						z.EncFallback(yy3840)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3817[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3842 := &x.FirstTimestamp
					yym3843 := z.EncBinary()
					_ = yym3843
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3842) {
					} else if yym3843 {
						z.EncBinaryMarshal(yy3842)
					} else if !yym3843 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3842)
					} else {
						z.EncFallback(yy3842)
					}
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[8] {
					yy3845 := &x.LastTimestamp
					yym3846 := z.EncBinary()
					_ = yym3846
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3845) {
					} else if yym3846 {
						z.EncBinaryMarshal(yy3845)
					} else if !yym3846 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3845)
					} else {
						z.EncFallback(yy3845)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3817[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3847 := &x.LastTimestamp
					yym3848 := z.EncBinary()
					_ = yym3848
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3847) {
					} else if yym3848 {
						z.EncBinaryMarshal(yy3847)
					} else if !yym3848 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3847)
					} else {
						z.EncFallback(yy3847)
					}
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[9] {
					yym3850 := z.EncBinary()
					_ = yym3850
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3817[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3851 := z.EncBinary()
					_ = yym3851
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[10] {
					yym3853 := z.EncBinary()
					_ = yym3853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3817[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3854 := z.EncBinary()
					_ = yym3854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3855 := z.DecBinary()
	_ = yym3855
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3856 := r.ContainerType()
		if yyct3856 == codecSelferValueTypeMap1234 {
			yyl3856 := r.ReadMapStart()
			if yyl3856 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3856, d)
			}
		} else if yyct3856 == codecSelferValueTypeArray1234 {
			yyl3856 := r.ReadArrayStart()
			if yyl3856 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3856, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3857Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3857Slc
	var yyhl3857 bool = l >= 0
	for yyj3857 := 0; ; yyj3857++ {
		if yyhl3857 {
			if yyj3857 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3857Slc = r.DecodeBytes(yys3857Slc, true, true)
		yys3857 := string(yys3857Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3857 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3860 := &x.ObjectMeta
				yyv3860.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3861 := &x.InvolvedObject
				yyv3861.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3864 := &x.Source
				yyv3864.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3865 := &x.FirstTimestamp
				yym3866 := z.DecBinary()
				_ = yym3866
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3865) {
				} else if yym3866 {
					z.DecBinaryUnmarshal(yyv3865)
				} else if !yym3866 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3865)
				} else {
					z.DecFallback(yyv3865, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3867 := &x.LastTimestamp
				yym3868 := z.DecBinary()
				_ = yym3868
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3867) {
				} else if yym3868 {
					z.DecBinaryUnmarshal(yyv3867)
				} else if !yym3868 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3867)
				} else {
					z.DecFallback(yyv3867, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3857)
		} // end switch yys3857
	} // end for yyj3857
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3871 int
	var yyb3871 bool
	var yyhl3871 bool = l >= 0
	yyj3871++
	if yyhl3871 {
		yyb3871 = yyj3871 > l
	} else {
		yyb3871 = r.CheckBreak()
	}
	if yyb3871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3871++
	if yyhl3871 {
		yyb3871 = yyj3871 > l
	} else {
		yyb3871 = r.CheckBreak()
	}
	if yyb3871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3871++
	if yyhl3871 {
		yyb3871 = yyj3871 > l
	} else {
		yyb3871 = r.CheckBreak()
	}
	if yyb3871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3874 := &x.ObjectMeta
		yyv3874.CodecDecodeSelf(d)
	}
	yyj3871++
	if yyhl3871 {
		yyb3871 = yyj3871 > l
	} else {
		yyb3871 = r.CheckBreak()
	}
	if yyb3871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3875 := &x.InvolvedObject
		yyv3875.CodecDecodeSelf(d)
	}
	yyj3871++
	if yyhl3871 {
		yyb3871 = yyj3871 > l
	} else {
		yyb3871 = r.CheckBreak()
	}
	if yyb3871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3871++
	if yyhl3871 {
		yyb3871 = yyj3871 > l
	} else {
		yyb3871 = r.CheckBreak()
	}
	if yyb3871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3871++
	if yyhl3871 {
		yyb3871 = yyj3871 > l
	} else {
		yyb3871 = r.CheckBreak()
	}
	if yyb3871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3878 := &x.Source
		yyv3878.CodecDecodeSelf(d)
	}
	yyj3871++
	if yyhl3871 {
		yyb3871 = yyj3871 > l
	} else {
		yyb3871 = r.CheckBreak()
	}
	if yyb3871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3879 := &x.FirstTimestamp
		yym3880 := z.DecBinary()
		_ = yym3880
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3879) {
		} else if yym3880 {
			z.DecBinaryUnmarshal(yyv3879)
		} else if !yym3880 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3879)
		} else {
			z.DecFallback(yyv3879, false)
		}
	}
	yyj3871++
	if yyhl3871 {
		yyb3871 = yyj3871 > l
	} else {
		yyb3871 = r.CheckBreak()
	}
	if yyb3871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3881 := &x.LastTimestamp
		yym3882 := z.DecBinary()
		_ = yym3882
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3881) {
		} else if yym3882 {
			z.DecBinaryUnmarshal(yyv3881)
		} else if !yym3882 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3881)
		} else {
			z.DecFallback(yyv3881, false)
		}
	}
	yyj3871++
	if yyhl3871 {
		yyb3871 = yyj3871 > l
	} else {
		yyb3871 = r.CheckBreak()
	}
	if yyb3871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3871++
	if yyhl3871 {
		yyb3871 = yyj3871 > l
	} else {
		yyb3871 = r.CheckBreak()
	}
	if yyb3871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3871++
		if yyhl3871 {
			yyb3871 = yyj3871 > l
		} else {
			yyb3871 = r.CheckBreak()
		}
		if yyb3871 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3871-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3885 := z.EncBinary()
		_ = yym3885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3886 := !z.EncBinary()
			yy2arr3886 := z.EncBasicHandle().StructToArray
			var yyq3886 [4]bool
			_, _, _ = yysep3886, yyq3886, yy2arr3886
			const yyr3886 bool = false
			yyq3886[0] = x.Kind != ""
			yyq3886[1] = x.APIVersion != ""
			yyq3886[2] = true
			var yynn3886 int
			if yyr3886 || yy2arr3886 {
				r.EncodeArrayStart(4)
			} else {
				yynn3886 = 1
				for _, b := range yyq3886 {
					if b {
						yynn3886++
					}
				}
				r.EncodeMapStart(yynn3886)
				yynn3886 = 0
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3886[0] {
					yym3888 := z.EncBinary()
					_ = yym3888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3886[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3889 := z.EncBinary()
					_ = yym3889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3886[1] {
					yym3891 := z.EncBinary()
					_ = yym3891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3886[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3892 := z.EncBinary()
					_ = yym3892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3886[2] {
					yy3894 := &x.ListMeta
					yym3895 := z.EncBinary()
					_ = yym3895
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3894) {
					} else {
						z.EncFallback(yy3894)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3886[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3896 := &x.ListMeta
					yym3897 := z.EncBinary()
					_ = yym3897
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3896) {
					} else {
						z.EncFallback(yy3896)
					}
				}
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3899 := z.EncBinary()
					_ = yym3899
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3900 := z.EncBinary()
					_ = yym3900
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3901 := z.DecBinary()
	_ = yym3901
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3902 := r.ContainerType()
		if yyct3902 == codecSelferValueTypeMap1234 {
			yyl3902 := r.ReadMapStart()
			if yyl3902 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3902, d)
			}
		} else if yyct3902 == codecSelferValueTypeArray1234 {
			yyl3902 := r.ReadArrayStart()
			if yyl3902 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3902, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3903Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3903Slc
	var yyhl3903 bool = l >= 0
	for yyj3903 := 0; ; yyj3903++ {
		if yyhl3903 {
			if yyj3903 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3903Slc = r.DecodeBytes(yys3903Slc, true, true)
		yys3903 := string(yys3903Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3903 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3906 := &x.ListMeta
				yym3907 := z.DecBinary()
				_ = yym3907
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3906) {
				} else {
					z.DecFallback(yyv3906, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3908 := &x.Items
				yym3909 := z.DecBinary()
				_ = yym3909
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3908), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3903)
		} // end switch yys3903
	} // end for yyj3903
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3910 int
	var yyb3910 bool
	var yyhl3910 bool = l >= 0
	yyj3910++
	if yyhl3910 {
		yyb3910 = yyj3910 > l
	} else {
		yyb3910 = r.CheckBreak()
	}
	if yyb3910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3910++
	if yyhl3910 {
		yyb3910 = yyj3910 > l
	} else {
		yyb3910 = r.CheckBreak()
	}
	if yyb3910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3910++
	if yyhl3910 {
		yyb3910 = yyj3910 > l
	} else {
		yyb3910 = r.CheckBreak()
	}
	if yyb3910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3913 := &x.ListMeta
		yym3914 := z.DecBinary()
		_ = yym3914
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3913) {
		} else {
			z.DecFallback(yyv3913, false)
		}
	}
	yyj3910++
	if yyhl3910 {
		yyb3910 = yyj3910 > l
	} else {
		yyb3910 = r.CheckBreak()
	}
	if yyb3910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3915 := &x.Items
		yym3916 := z.DecBinary()
		_ = yym3916
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3915), d)
		}
	}
	for {
		yyj3910++
		if yyhl3910 {
			yyb3910 = yyj3910 > l
		} else {
			yyb3910 = r.CheckBreak()
		}
		if yyb3910 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3910-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3917 := z.EncBinary()
		_ = yym3917
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3918 := !z.EncBinary()
			yy2arr3918 := z.EncBasicHandle().StructToArray
			var yyq3918 [4]bool
			_, _, _ = yysep3918, yyq3918, yy2arr3918
			const yyr3918 bool = false
			yyq3918[0] = x.Kind != ""
			yyq3918[1] = x.APIVersion != ""
			yyq3918[2] = true
			var yynn3918 int
			if yyr3918 || yy2arr3918 {
				r.EncodeArrayStart(4)
			} else {
				yynn3918 = 1
				for _, b := range yyq3918 {
					if b {
						yynn3918++
					}
				}
				r.EncodeMapStart(yynn3918)
				yynn3918 = 0
			}
			if yyr3918 || yy2arr3918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3918[0] {
					yym3920 := z.EncBinary()
					_ = yym3920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3918[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3921 := z.EncBinary()
					_ = yym3921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3918 || yy2arr3918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3918[1] {
					yym3923 := z.EncBinary()
					_ = yym3923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3918[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3924 := z.EncBinary()
					_ = yym3924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3918 || yy2arr3918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3918[2] {
					yy3926 := &x.ListMeta
					yym3927 := z.EncBinary()
					_ = yym3927
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3926) {
					} else {
						z.EncFallback(yy3926)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3918[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3928 := &x.ListMeta
					yym3929 := z.EncBinary()
					_ = yym3929
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3928) {
					} else {
						z.EncFallback(yy3928)
					}
				}
			}
			if yyr3918 || yy2arr3918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3931 := z.EncBinary()
					_ = yym3931
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3932 := z.EncBinary()
					_ = yym3932
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3918 || yy2arr3918 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3933 := z.DecBinary()
	_ = yym3933
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3934 := r.ContainerType()
		if yyct3934 == codecSelferValueTypeMap1234 {
			yyl3934 := r.ReadMapStart()
			if yyl3934 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3934, d)
			}
		} else if yyct3934 == codecSelferValueTypeArray1234 {
			yyl3934 := r.ReadArrayStart()
			if yyl3934 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3934, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3935Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3935Slc
	var yyhl3935 bool = l >= 0
	for yyj3935 := 0; ; yyj3935++ {
		if yyhl3935 {
			if yyj3935 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3935Slc = r.DecodeBytes(yys3935Slc, true, true)
		yys3935 := string(yys3935Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3935 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3938 := &x.ListMeta
				yym3939 := z.DecBinary()
				_ = yym3939
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3938) {
				} else {
					z.DecFallback(yyv3938, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3940 := &x.Items
				yym3941 := z.DecBinary()
				_ = yym3941
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3940), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3935)
		} // end switch yys3935
	} // end for yyj3935
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3942 int
	var yyb3942 bool
	var yyhl3942 bool = l >= 0
	yyj3942++
	if yyhl3942 {
		yyb3942 = yyj3942 > l
	} else {
		yyb3942 = r.CheckBreak()
	}
	if yyb3942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3942++
	if yyhl3942 {
		yyb3942 = yyj3942 > l
	} else {
		yyb3942 = r.CheckBreak()
	}
	if yyb3942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3942++
	if yyhl3942 {
		yyb3942 = yyj3942 > l
	} else {
		yyb3942 = r.CheckBreak()
	}
	if yyb3942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3945 := &x.ListMeta
		yym3946 := z.DecBinary()
		_ = yym3946
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3945) {
		} else {
			z.DecFallback(yyv3945, false)
		}
	}
	yyj3942++
	if yyhl3942 {
		yyb3942 = yyj3942 > l
	} else {
		yyb3942 = r.CheckBreak()
	}
	if yyb3942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3947 := &x.Items
		yym3948 := z.DecBinary()
		_ = yym3948
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3947), d)
		}
	}
	for {
		yyj3942++
		if yyhl3942 {
			yyb3942 = yyj3942 > l
		} else {
			yyb3942 = r.CheckBreak()
		}
		if yyb3942 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3942-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3949 := z.EncBinary()
	_ = yym3949
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3950 := z.DecBinary()
	_ = yym3950
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3951 := z.EncBinary()
		_ = yym3951
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3952 := !z.EncBinary()
			yy2arr3952 := z.EncBasicHandle().StructToArray
			var yyq3952 [6]bool
			_, _, _ = yysep3952, yyq3952, yy2arr3952
			const yyr3952 bool = false
			yyq3952[0] = x.Type != ""
			yyq3952[1] = len(x.Max) != 0
			yyq3952[2] = len(x.Min) != 0
			yyq3952[3] = len(x.Default) != 0
			yyq3952[4] = len(x.DefaultRequest) != 0
			yyq3952[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3952 int
			if yyr3952 || yy2arr3952 {
				r.EncodeArrayStart(6)
			} else {
				yynn3952 = 0
				for _, b := range yyq3952 {
					if b {
						yynn3952++
					}
				}
				r.EncodeMapStart(yynn3952)
				yynn3952 = 0
			}
			if yyr3952 || yy2arr3952 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3952[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3952[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3952 || yy2arr3952 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3952[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3952[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3952 || yy2arr3952 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3952[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3952[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3952 || yy2arr3952 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3952[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3952[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3952 || yy2arr3952 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3952[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3952[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3952 || yy2arr3952 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3952[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3952[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3952 || yy2arr3952 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3959 := z.DecBinary()
	_ = yym3959
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3960 := r.ContainerType()
		if yyct3960 == codecSelferValueTypeMap1234 {
			yyl3960 := r.ReadMapStart()
			if yyl3960 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3960, d)
			}
		} else if yyct3960 == codecSelferValueTypeArray1234 {
			yyl3960 := r.ReadArrayStart()
			if yyl3960 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3960, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3961Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3961Slc
	var yyhl3961 bool = l >= 0
	for yyj3961 := 0; ; yyj3961++ {
		if yyhl3961 {
			if yyj3961 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3961Slc = r.DecodeBytes(yys3961Slc, true, true)
		yys3961 := string(yys3961Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3961 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3963 := &x.Max
				yyv3963.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3964 := &x.Min
				yyv3964.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3965 := &x.Default
				yyv3965.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3966 := &x.DefaultRequest
				yyv3966.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3967 := &x.MaxLimitRequestRatio
				yyv3967.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3961)
		} // end switch yys3961
	} // end for yyj3961
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3968 int
	var yyb3968 bool
	var yyhl3968 bool = l >= 0
	yyj3968++
	if yyhl3968 {
		yyb3968 = yyj3968 > l
	} else {
		yyb3968 = r.CheckBreak()
	}
	if yyb3968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3968++
	if yyhl3968 {
		yyb3968 = yyj3968 > l
	} else {
		yyb3968 = r.CheckBreak()
	}
	if yyb3968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3970 := &x.Max
		yyv3970.CodecDecodeSelf(d)
	}
	yyj3968++
	if yyhl3968 {
		yyb3968 = yyj3968 > l
	} else {
		yyb3968 = r.CheckBreak()
	}
	if yyb3968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3971 := &x.Min
		yyv3971.CodecDecodeSelf(d)
	}
	yyj3968++
	if yyhl3968 {
		yyb3968 = yyj3968 > l
	} else {
		yyb3968 = r.CheckBreak()
	}
	if yyb3968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3972 := &x.Default
		yyv3972.CodecDecodeSelf(d)
	}
	yyj3968++
	if yyhl3968 {
		yyb3968 = yyj3968 > l
	} else {
		yyb3968 = r.CheckBreak()
	}
	if yyb3968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3973 := &x.DefaultRequest
		yyv3973.CodecDecodeSelf(d)
	}
	yyj3968++
	if yyhl3968 {
		yyb3968 = yyj3968 > l
	} else {
		yyb3968 = r.CheckBreak()
	}
	if yyb3968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3974 := &x.MaxLimitRequestRatio
		yyv3974.CodecDecodeSelf(d)
	}
	for {
		yyj3968++
		if yyhl3968 {
			yyb3968 = yyj3968 > l
		} else {
			yyb3968 = r.CheckBreak()
		}
		if yyb3968 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3968-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3975 := z.EncBinary()
		_ = yym3975
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3976 := !z.EncBinary()
			yy2arr3976 := z.EncBasicHandle().StructToArray
			var yyq3976 [1]bool
			_, _, _ = yysep3976, yyq3976, yy2arr3976
			const yyr3976 bool = false
			var yynn3976 int
			if yyr3976 || yy2arr3976 {
				r.EncodeArrayStart(1)
			} else {
				yynn3976 = 1
				for _, b := range yyq3976 {
					if b {
						yynn3976++
					}
				}
				r.EncodeMapStart(yynn3976)
				yynn3976 = 0
			}
			if yyr3976 || yy2arr3976 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3978 := z.EncBinary()
					_ = yym3978
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3979 := z.EncBinary()
					_ = yym3979
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3976 || yy2arr3976 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3980 := z.DecBinary()
	_ = yym3980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3981 := r.ContainerType()
		if yyct3981 == codecSelferValueTypeMap1234 {
			yyl3981 := r.ReadMapStart()
			if yyl3981 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3981, d)
			}
		} else if yyct3981 == codecSelferValueTypeArray1234 {
			yyl3981 := r.ReadArrayStart()
			if yyl3981 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3981, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3982Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3982Slc
	var yyhl3982 bool = l >= 0
	for yyj3982 := 0; ; yyj3982++ {
		if yyhl3982 {
			if yyj3982 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3982Slc = r.DecodeBytes(yys3982Slc, true, true)
		yys3982 := string(yys3982Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3982 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3983 := &x.Limits
				yym3984 := z.DecBinary()
				_ = yym3984
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3983), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3982)
		} // end switch yys3982
	} // end for yyj3982
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3985 int
	var yyb3985 bool
	var yyhl3985 bool = l >= 0
	yyj3985++
	if yyhl3985 {
		yyb3985 = yyj3985 > l
	} else {
		yyb3985 = r.CheckBreak()
	}
	if yyb3985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3986 := &x.Limits
		yym3987 := z.DecBinary()
		_ = yym3987
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3986), d)
		}
	}
	for {
		yyj3985++
		if yyhl3985 {
			yyb3985 = yyj3985 > l
		} else {
			yyb3985 = r.CheckBreak()
		}
		if yyb3985 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3985-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3988 := z.EncBinary()
		_ = yym3988
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3989 := !z.EncBinary()
			yy2arr3989 := z.EncBasicHandle().StructToArray
			var yyq3989 [4]bool
			_, _, _ = yysep3989, yyq3989, yy2arr3989
			const yyr3989 bool = false
			yyq3989[0] = x.Kind != ""
			yyq3989[1] = x.APIVersion != ""
			yyq3989[2] = true
			yyq3989[3] = true
			var yynn3989 int
			if yyr3989 || yy2arr3989 {
				r.EncodeArrayStart(4)
			} else {
				yynn3989 = 0
				for _, b := range yyq3989 {
					if b {
						yynn3989++
					}
				}
				r.EncodeMapStart(yynn3989)
				yynn3989 = 0
			}
			if yyr3989 || yy2arr3989 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3989[0] {
					yym3991 := z.EncBinary()
					_ = yym3991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3989[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3992 := z.EncBinary()
					_ = yym3992
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3989 || yy2arr3989 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3989[1] {
					yym3994 := z.EncBinary()
					_ = yym3994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3989[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3995 := z.EncBinary()
					_ = yym3995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3989 || yy2arr3989 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3989[2] {
					yy3997 := &x.ObjectMeta
					yy3997.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3989[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3998 := &x.ObjectMeta
					yy3998.CodecEncodeSelf(e)
				}
			}
			if yyr3989 || yy2arr3989 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3989[3] {
					yy4000 := &x.Spec
					yy4000.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3989[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4001 := &x.Spec
					yy4001.CodecEncodeSelf(e)
				}
			}
			if yyr3989 || yy2arr3989 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4002 := z.DecBinary()
	_ = yym4002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4003 := r.ContainerType()
		if yyct4003 == codecSelferValueTypeMap1234 {
			yyl4003 := r.ReadMapStart()
			if yyl4003 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4003, d)
			}
		} else if yyct4003 == codecSelferValueTypeArray1234 {
			yyl4003 := r.ReadArrayStart()
			if yyl4003 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4003, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4004Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4004Slc
	var yyhl4004 bool = l >= 0
	for yyj4004 := 0; ; yyj4004++ {
		if yyhl4004 {
			if yyj4004 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4004Slc = r.DecodeBytes(yys4004Slc, true, true)
		yys4004 := string(yys4004Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4004 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4007 := &x.ObjectMeta
				yyv4007.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4008 := &x.Spec
				yyv4008.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4004)
		} // end switch yys4004
	} // end for yyj4004
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4009 int
	var yyb4009 bool
	var yyhl4009 bool = l >= 0
	yyj4009++
	if yyhl4009 {
		yyb4009 = yyj4009 > l
	} else {
		yyb4009 = r.CheckBreak()
	}
	if yyb4009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4009++
	if yyhl4009 {
		yyb4009 = yyj4009 > l
	} else {
		yyb4009 = r.CheckBreak()
	}
	if yyb4009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4009++
	if yyhl4009 {
		yyb4009 = yyj4009 > l
	} else {
		yyb4009 = r.CheckBreak()
	}
	if yyb4009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4012 := &x.ObjectMeta
		yyv4012.CodecDecodeSelf(d)
	}
	yyj4009++
	if yyhl4009 {
		yyb4009 = yyj4009 > l
	} else {
		yyb4009 = r.CheckBreak()
	}
	if yyb4009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4013 := &x.Spec
		yyv4013.CodecDecodeSelf(d)
	}
	for {
		yyj4009++
		if yyhl4009 {
			yyb4009 = yyj4009 > l
		} else {
			yyb4009 = r.CheckBreak()
		}
		if yyb4009 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4009-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4014 := z.EncBinary()
		_ = yym4014
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4015 := !z.EncBinary()
			yy2arr4015 := z.EncBasicHandle().StructToArray
			var yyq4015 [4]bool
			_, _, _ = yysep4015, yyq4015, yy2arr4015
			const yyr4015 bool = false
			yyq4015[0] = x.Kind != ""
			yyq4015[1] = x.APIVersion != ""
			yyq4015[2] = true
			var yynn4015 int
			if yyr4015 || yy2arr4015 {
				r.EncodeArrayStart(4)
			} else {
				yynn4015 = 1
				for _, b := range yyq4015 {
					if b {
						yynn4015++
					}
				}
				r.EncodeMapStart(yynn4015)
				yynn4015 = 0
			}
			if yyr4015 || yy2arr4015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4015[0] {
					yym4017 := z.EncBinary()
					_ = yym4017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4015[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4018 := z.EncBinary()
					_ = yym4018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4015 || yy2arr4015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4015[1] {
					yym4020 := z.EncBinary()
					_ = yym4020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4015[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4021 := z.EncBinary()
					_ = yym4021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4015 || yy2arr4015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4015[2] {
					yy4023 := &x.ListMeta
					yym4024 := z.EncBinary()
					_ = yym4024
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4023) {
					} else {
						z.EncFallback(yy4023)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4015[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4025 := &x.ListMeta
					yym4026 := z.EncBinary()
					_ = yym4026
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4025) {
					} else {
						z.EncFallback(yy4025)
					}
				}
			}
			if yyr4015 || yy2arr4015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4028 := z.EncBinary()
					_ = yym4028
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4029 := z.EncBinary()
					_ = yym4029
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4015 || yy2arr4015 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4030 := z.DecBinary()
	_ = yym4030
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4031 := r.ContainerType()
		if yyct4031 == codecSelferValueTypeMap1234 {
			yyl4031 := r.ReadMapStart()
			if yyl4031 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4031, d)
			}
		} else if yyct4031 == codecSelferValueTypeArray1234 {
			yyl4031 := r.ReadArrayStart()
			if yyl4031 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4031, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4032Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4032Slc
	var yyhl4032 bool = l >= 0
	for yyj4032 := 0; ; yyj4032++ {
		if yyhl4032 {
			if yyj4032 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4032Slc = r.DecodeBytes(yys4032Slc, true, true)
		yys4032 := string(yys4032Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4032 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4035 := &x.ListMeta
				yym4036 := z.DecBinary()
				_ = yym4036
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4035) {
				} else {
					z.DecFallback(yyv4035, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4037 := &x.Items
				yym4038 := z.DecBinary()
				_ = yym4038
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4037), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4032)
		} // end switch yys4032
	} // end for yyj4032
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4039 int
	var yyb4039 bool
	var yyhl4039 bool = l >= 0
	yyj4039++
	if yyhl4039 {
		yyb4039 = yyj4039 > l
	} else {
		yyb4039 = r.CheckBreak()
	}
	if yyb4039 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4039++
	if yyhl4039 {
		yyb4039 = yyj4039 > l
	} else {
		yyb4039 = r.CheckBreak()
	}
	if yyb4039 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4039++
	if yyhl4039 {
		yyb4039 = yyj4039 > l
	} else {
		yyb4039 = r.CheckBreak()
	}
	if yyb4039 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4042 := &x.ListMeta
		yym4043 := z.DecBinary()
		_ = yym4043
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4042) {
		} else {
			z.DecFallback(yyv4042, false)
		}
	}
	yyj4039++
	if yyhl4039 {
		yyb4039 = yyj4039 > l
	} else {
		yyb4039 = r.CheckBreak()
	}
	if yyb4039 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4044 := &x.Items
		yym4045 := z.DecBinary()
		_ = yym4045
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4044), d)
		}
	}
	for {
		yyj4039++
		if yyhl4039 {
			yyb4039 = yyj4039 > l
		} else {
			yyb4039 = r.CheckBreak()
		}
		if yyb4039 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4039-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4046 := z.EncBinary()
	_ = yym4046
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4047 := z.DecBinary()
	_ = yym4047
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4048 := z.EncBinary()
		_ = yym4048
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4049 := !z.EncBinary()
			yy2arr4049 := z.EncBasicHandle().StructToArray
			var yyq4049 [2]bool
			_, _, _ = yysep4049, yyq4049, yy2arr4049
			const yyr4049 bool = false
			yyq4049[0] = len(x.Hard) != 0
			yyq4049[1] = len(x.Scopes) != 0
			var yynn4049 int
			if yyr4049 || yy2arr4049 {
				r.EncodeArrayStart(2)
			} else {
				yynn4049 = 0
				for _, b := range yyq4049 {
					if b {
						yynn4049++
					}
				}
				r.EncodeMapStart(yynn4049)
				yynn4049 = 0
			}
			if yyr4049 || yy2arr4049 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4049[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4049[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4049 || yy2arr4049 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4049[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4052 := z.EncBinary()
						_ = yym4052
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4049[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4053 := z.EncBinary()
						_ = yym4053
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4049 || yy2arr4049 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4054 := z.DecBinary()
	_ = yym4054
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4055 := r.ContainerType()
		if yyct4055 == codecSelferValueTypeMap1234 {
			yyl4055 := r.ReadMapStart()
			if yyl4055 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4055, d)
			}
		} else if yyct4055 == codecSelferValueTypeArray1234 {
			yyl4055 := r.ReadArrayStart()
			if yyl4055 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4055, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4056Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4056Slc
	var yyhl4056 bool = l >= 0
	for yyj4056 := 0; ; yyj4056++ {
		if yyhl4056 {
			if yyj4056 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4056Slc = r.DecodeBytes(yys4056Slc, true, true)
		yys4056 := string(yys4056Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4056 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4057 := &x.Hard
				yyv4057.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4058 := &x.Scopes
				yym4059 := z.DecBinary()
				_ = yym4059
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4058), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4056)
		} // end switch yys4056
	} // end for yyj4056
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4060 int
	var yyb4060 bool
	var yyhl4060 bool = l >= 0
	yyj4060++
	if yyhl4060 {
		yyb4060 = yyj4060 > l
	} else {
		yyb4060 = r.CheckBreak()
	}
	if yyb4060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4061 := &x.Hard
		yyv4061.CodecDecodeSelf(d)
	}
	yyj4060++
	if yyhl4060 {
		yyb4060 = yyj4060 > l
	} else {
		yyb4060 = r.CheckBreak()
	}
	if yyb4060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4062 := &x.Scopes
		yym4063 := z.DecBinary()
		_ = yym4063
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4062), d)
		}
	}
	for {
		yyj4060++
		if yyhl4060 {
			yyb4060 = yyj4060 > l
		} else {
			yyb4060 = r.CheckBreak()
		}
		if yyb4060 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4060-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4064 := z.EncBinary()
		_ = yym4064
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4065 := !z.EncBinary()
			yy2arr4065 := z.EncBasicHandle().StructToArray
			var yyq4065 [2]bool
			_, _, _ = yysep4065, yyq4065, yy2arr4065
			const yyr4065 bool = false
			yyq4065[0] = len(x.Hard) != 0
			yyq4065[1] = len(x.Used) != 0
			var yynn4065 int
			if yyr4065 || yy2arr4065 {
				r.EncodeArrayStart(2)
			} else {
				yynn4065 = 0
				for _, b := range yyq4065 {
					if b {
						yynn4065++
					}
				}
				r.EncodeMapStart(yynn4065)
				yynn4065 = 0
			}
			if yyr4065 || yy2arr4065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4065[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4065[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4065 || yy2arr4065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4065[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4065[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4065 || yy2arr4065 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4068 := z.DecBinary()
	_ = yym4068
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4069 := r.ContainerType()
		if yyct4069 == codecSelferValueTypeMap1234 {
			yyl4069 := r.ReadMapStart()
			if yyl4069 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4069, d)
			}
		} else if yyct4069 == codecSelferValueTypeArray1234 {
			yyl4069 := r.ReadArrayStart()
			if yyl4069 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4069, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4070Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4070Slc
	var yyhl4070 bool = l >= 0
	for yyj4070 := 0; ; yyj4070++ {
		if yyhl4070 {
			if yyj4070 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4070Slc = r.DecodeBytes(yys4070Slc, true, true)
		yys4070 := string(yys4070Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4070 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4071 := &x.Hard
				yyv4071.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4072 := &x.Used
				yyv4072.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4070)
		} // end switch yys4070
	} // end for yyj4070
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4073 int
	var yyb4073 bool
	var yyhl4073 bool = l >= 0
	yyj4073++
	if yyhl4073 {
		yyb4073 = yyj4073 > l
	} else {
		yyb4073 = r.CheckBreak()
	}
	if yyb4073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4074 := &x.Hard
		yyv4074.CodecDecodeSelf(d)
	}
	yyj4073++
	if yyhl4073 {
		yyb4073 = yyj4073 > l
	} else {
		yyb4073 = r.CheckBreak()
	}
	if yyb4073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4075 := &x.Used
		yyv4075.CodecDecodeSelf(d)
	}
	for {
		yyj4073++
		if yyhl4073 {
			yyb4073 = yyj4073 > l
		} else {
			yyb4073 = r.CheckBreak()
		}
		if yyb4073 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4073-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4076 := z.EncBinary()
		_ = yym4076
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4077 := !z.EncBinary()
			yy2arr4077 := z.EncBasicHandle().StructToArray
			var yyq4077 [5]bool
			_, _, _ = yysep4077, yyq4077, yy2arr4077
			const yyr4077 bool = false
			yyq4077[0] = x.Kind != ""
			yyq4077[1] = x.APIVersion != ""
			yyq4077[2] = true
			yyq4077[3] = true
			yyq4077[4] = true
			var yynn4077 int
			if yyr4077 || yy2arr4077 {
				r.EncodeArrayStart(5)
			} else {
				yynn4077 = 0
				for _, b := range yyq4077 {
					if b {
						yynn4077++
					}
				}
				r.EncodeMapStart(yynn4077)
				yynn4077 = 0
			}
			if yyr4077 || yy2arr4077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4077[0] {
					yym4079 := z.EncBinary()
					_ = yym4079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4077[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4080 := z.EncBinary()
					_ = yym4080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4077 || yy2arr4077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4077[1] {
					yym4082 := z.EncBinary()
					_ = yym4082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4077[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4083 := z.EncBinary()
					_ = yym4083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4077 || yy2arr4077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4077[2] {
					yy4085 := &x.ObjectMeta
					yy4085.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4077[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4086 := &x.ObjectMeta
					yy4086.CodecEncodeSelf(e)
				}
			}
			if yyr4077 || yy2arr4077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4077[3] {
					yy4088 := &x.Spec
					yy4088.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4077[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4089 := &x.Spec
					yy4089.CodecEncodeSelf(e)
				}
			}
			if yyr4077 || yy2arr4077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4077[4] {
					yy4091 := &x.Status
					yy4091.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4077[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4092 := &x.Status
					yy4092.CodecEncodeSelf(e)
				}
			}
			if yyr4077 || yy2arr4077 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4093 := z.DecBinary()
	_ = yym4093
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4094 := r.ContainerType()
		if yyct4094 == codecSelferValueTypeMap1234 {
			yyl4094 := r.ReadMapStart()
			if yyl4094 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4094, d)
			}
		} else if yyct4094 == codecSelferValueTypeArray1234 {
			yyl4094 := r.ReadArrayStart()
			if yyl4094 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4094, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4095Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4095Slc
	var yyhl4095 bool = l >= 0
	for yyj4095 := 0; ; yyj4095++ {
		if yyhl4095 {
			if yyj4095 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4095Slc = r.DecodeBytes(yys4095Slc, true, true)
		yys4095 := string(yys4095Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4095 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4098 := &x.ObjectMeta
				yyv4098.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4099 := &x.Spec
				yyv4099.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4100 := &x.Status
				yyv4100.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4095)
		} // end switch yys4095
	} // end for yyj4095
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4101 int
	var yyb4101 bool
	var yyhl4101 bool = l >= 0
	yyj4101++
	if yyhl4101 {
		yyb4101 = yyj4101 > l
	} else {
		yyb4101 = r.CheckBreak()
	}
	if yyb4101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4101++
	if yyhl4101 {
		yyb4101 = yyj4101 > l
	} else {
		yyb4101 = r.CheckBreak()
	}
	if yyb4101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4101++
	if yyhl4101 {
		yyb4101 = yyj4101 > l
	} else {
		yyb4101 = r.CheckBreak()
	}
	if yyb4101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4104 := &x.ObjectMeta
		yyv4104.CodecDecodeSelf(d)
	}
	yyj4101++
	if yyhl4101 {
		yyb4101 = yyj4101 > l
	} else {
		yyb4101 = r.CheckBreak()
	}
	if yyb4101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4105 := &x.Spec
		yyv4105.CodecDecodeSelf(d)
	}
	yyj4101++
	if yyhl4101 {
		yyb4101 = yyj4101 > l
	} else {
		yyb4101 = r.CheckBreak()
	}
	if yyb4101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4106 := &x.Status
		yyv4106.CodecDecodeSelf(d)
	}
	for {
		yyj4101++
		if yyhl4101 {
			yyb4101 = yyj4101 > l
		} else {
			yyb4101 = r.CheckBreak()
		}
		if yyb4101 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4101-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4107 := z.EncBinary()
		_ = yym4107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4108 := !z.EncBinary()
			yy2arr4108 := z.EncBasicHandle().StructToArray
			var yyq4108 [4]bool
			_, _, _ = yysep4108, yyq4108, yy2arr4108
			const yyr4108 bool = false
			yyq4108[0] = x.Kind != ""
			yyq4108[1] = x.APIVersion != ""
			yyq4108[2] = true
			var yynn4108 int
			if yyr4108 || yy2arr4108 {
				r.EncodeArrayStart(4)
			} else {
				yynn4108 = 1
				for _, b := range yyq4108 {
					if b {
						yynn4108++
					}
				}
				r.EncodeMapStart(yynn4108)
				yynn4108 = 0
			}
			if yyr4108 || yy2arr4108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4108[0] {
					yym4110 := z.EncBinary()
					_ = yym4110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4108[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4111 := z.EncBinary()
					_ = yym4111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4108 || yy2arr4108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4108[1] {
					yym4113 := z.EncBinary()
					_ = yym4113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4108[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4114 := z.EncBinary()
					_ = yym4114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4108 || yy2arr4108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4108[2] {
					yy4116 := &x.ListMeta
					yym4117 := z.EncBinary()
					_ = yym4117
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4116) {
					} else {
						z.EncFallback(yy4116)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4108[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4118 := &x.ListMeta
					yym4119 := z.EncBinary()
					_ = yym4119
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4118) {
					} else {
						z.EncFallback(yy4118)
					}
				}
			}
			if yyr4108 || yy2arr4108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4121 := z.EncBinary()
					_ = yym4121
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4122 := z.EncBinary()
					_ = yym4122
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4108 || yy2arr4108 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4123 := z.DecBinary()
	_ = yym4123
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4124 := r.ContainerType()
		if yyct4124 == codecSelferValueTypeMap1234 {
			yyl4124 := r.ReadMapStart()
			if yyl4124 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4124, d)
			}
		} else if yyct4124 == codecSelferValueTypeArray1234 {
			yyl4124 := r.ReadArrayStart()
			if yyl4124 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4124, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4125Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4125Slc
	var yyhl4125 bool = l >= 0
	for yyj4125 := 0; ; yyj4125++ {
		if yyhl4125 {
			if yyj4125 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4125Slc = r.DecodeBytes(yys4125Slc, true, true)
		yys4125 := string(yys4125Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4125 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4128 := &x.ListMeta
				yym4129 := z.DecBinary()
				_ = yym4129
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4128) {
				} else {
					z.DecFallback(yyv4128, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4130 := &x.Items
				yym4131 := z.DecBinary()
				_ = yym4131
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4130), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4125)
		} // end switch yys4125
	} // end for yyj4125
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4132 int
	var yyb4132 bool
	var yyhl4132 bool = l >= 0
	yyj4132++
	if yyhl4132 {
		yyb4132 = yyj4132 > l
	} else {
		yyb4132 = r.CheckBreak()
	}
	if yyb4132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4132++
	if yyhl4132 {
		yyb4132 = yyj4132 > l
	} else {
		yyb4132 = r.CheckBreak()
	}
	if yyb4132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4132++
	if yyhl4132 {
		yyb4132 = yyj4132 > l
	} else {
		yyb4132 = r.CheckBreak()
	}
	if yyb4132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4135 := &x.ListMeta
		yym4136 := z.DecBinary()
		_ = yym4136
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4135) {
		} else {
			z.DecFallback(yyv4135, false)
		}
	}
	yyj4132++
	if yyhl4132 {
		yyb4132 = yyj4132 > l
	} else {
		yyb4132 = r.CheckBreak()
	}
	if yyb4132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4137 := &x.Items
		yym4138 := z.DecBinary()
		_ = yym4138
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4137), d)
		}
	}
	for {
		yyj4132++
		if yyhl4132 {
			yyb4132 = yyj4132 > l
		} else {
			yyb4132 = r.CheckBreak()
		}
		if yyb4132 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4132-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4139 := z.EncBinary()
		_ = yym4139
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4140 := !z.EncBinary()
			yy2arr4140 := z.EncBasicHandle().StructToArray
			var yyq4140 [5]bool
			_, _, _ = yysep4140, yyq4140, yy2arr4140
			const yyr4140 bool = false
			yyq4140[0] = x.Kind != ""
			yyq4140[1] = x.APIVersion != ""
			yyq4140[2] = true
			yyq4140[3] = len(x.Data) != 0
			yyq4140[4] = x.Type != ""
			var yynn4140 int
			if yyr4140 || yy2arr4140 {
				r.EncodeArrayStart(5)
			} else {
				yynn4140 = 0
				for _, b := range yyq4140 {
					if b {
						yynn4140++
					}
				}
				r.EncodeMapStart(yynn4140)
				yynn4140 = 0
			}
			if yyr4140 || yy2arr4140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4140[0] {
					yym4142 := z.EncBinary()
					_ = yym4142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4140[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4143 := z.EncBinary()
					_ = yym4143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4140 || yy2arr4140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4140[1] {
					yym4145 := z.EncBinary()
					_ = yym4145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4140[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4146 := z.EncBinary()
					_ = yym4146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4140 || yy2arr4140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4140[2] {
					yy4148 := &x.ObjectMeta
					yy4148.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4140[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4149 := &x.ObjectMeta
					yy4149.CodecEncodeSelf(e)
				}
			}
			if yyr4140 || yy2arr4140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4140[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4151 := z.EncBinary()
						_ = yym4151
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4140[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4152 := z.EncBinary()
						_ = yym4152
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4140 || yy2arr4140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4140[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4140[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4140 || yy2arr4140 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4154 := z.DecBinary()
	_ = yym4154
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4155 := r.ContainerType()
		if yyct4155 == codecSelferValueTypeMap1234 {
			yyl4155 := r.ReadMapStart()
			if yyl4155 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4155, d)
			}
		} else if yyct4155 == codecSelferValueTypeArray1234 {
			yyl4155 := r.ReadArrayStart()
			if yyl4155 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4155, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4156Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4156Slc
	var yyhl4156 bool = l >= 0
	for yyj4156 := 0; ; yyj4156++ {
		if yyhl4156 {
			if yyj4156 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4156Slc = r.DecodeBytes(yys4156Slc, true, true)
		yys4156 := string(yys4156Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4156 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4159 := &x.ObjectMeta
				yyv4159.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4160 := &x.Data
				yym4161 := z.DecBinary()
				_ = yym4161
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4160), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4156)
		} // end switch yys4156
	} // end for yyj4156
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4163 int
	var yyb4163 bool
	var yyhl4163 bool = l >= 0
	yyj4163++
	if yyhl4163 {
		yyb4163 = yyj4163 > l
	} else {
		yyb4163 = r.CheckBreak()
	}
	if yyb4163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4163++
	if yyhl4163 {
		yyb4163 = yyj4163 > l
	} else {
		yyb4163 = r.CheckBreak()
	}
	if yyb4163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4163++
	if yyhl4163 {
		yyb4163 = yyj4163 > l
	} else {
		yyb4163 = r.CheckBreak()
	}
	if yyb4163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4166 := &x.ObjectMeta
		yyv4166.CodecDecodeSelf(d)
	}
	yyj4163++
	if yyhl4163 {
		yyb4163 = yyj4163 > l
	} else {
		yyb4163 = r.CheckBreak()
	}
	if yyb4163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4167 := &x.Data
		yym4168 := z.DecBinary()
		_ = yym4168
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4167), d)
		}
	}
	yyj4163++
	if yyhl4163 {
		yyb4163 = yyj4163 > l
	} else {
		yyb4163 = r.CheckBreak()
	}
	if yyb4163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4163++
		if yyhl4163 {
			yyb4163 = yyj4163 > l
		} else {
			yyb4163 = r.CheckBreak()
		}
		if yyb4163 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4163-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4170 := z.EncBinary()
	_ = yym4170
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4171 := z.DecBinary()
	_ = yym4171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4172 := z.EncBinary()
		_ = yym4172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4173 := !z.EncBinary()
			yy2arr4173 := z.EncBasicHandle().StructToArray
			var yyq4173 [4]bool
			_, _, _ = yysep4173, yyq4173, yy2arr4173
			const yyr4173 bool = false
			yyq4173[0] = x.Kind != ""
			yyq4173[1] = x.APIVersion != ""
			yyq4173[2] = true
			var yynn4173 int
			if yyr4173 || yy2arr4173 {
				r.EncodeArrayStart(4)
			} else {
				yynn4173 = 1
				for _, b := range yyq4173 {
					if b {
						yynn4173++
					}
				}
				r.EncodeMapStart(yynn4173)
				yynn4173 = 0
			}
			if yyr4173 || yy2arr4173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4173[0] {
					yym4175 := z.EncBinary()
					_ = yym4175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4173[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4176 := z.EncBinary()
					_ = yym4176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4173 || yy2arr4173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4173[1] {
					yym4178 := z.EncBinary()
					_ = yym4178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4173[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4179 := z.EncBinary()
					_ = yym4179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4173 || yy2arr4173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4173[2] {
					yy4181 := &x.ListMeta
					yym4182 := z.EncBinary()
					_ = yym4182
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4181) {
					} else {
						z.EncFallback(yy4181)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4173[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4183 := &x.ListMeta
					yym4184 := z.EncBinary()
					_ = yym4184
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4183) {
					} else {
						z.EncFallback(yy4183)
					}
				}
			}
			if yyr4173 || yy2arr4173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4186 := z.EncBinary()
					_ = yym4186
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4187 := z.EncBinary()
					_ = yym4187
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4173 || yy2arr4173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4188 := z.DecBinary()
	_ = yym4188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4189 := r.ContainerType()
		if yyct4189 == codecSelferValueTypeMap1234 {
			yyl4189 := r.ReadMapStart()
			if yyl4189 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4189, d)
			}
		} else if yyct4189 == codecSelferValueTypeArray1234 {
			yyl4189 := r.ReadArrayStart()
			if yyl4189 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4190Slc
	var yyhl4190 bool = l >= 0
	for yyj4190 := 0; ; yyj4190++ {
		if yyhl4190 {
			if yyj4190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4190Slc = r.DecodeBytes(yys4190Slc, true, true)
		yys4190 := string(yys4190Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4190 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4193 := &x.ListMeta
				yym4194 := z.DecBinary()
				_ = yym4194
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4193) {
				} else {
					z.DecFallback(yyv4193, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4195 := &x.Items
				yym4196 := z.DecBinary()
				_ = yym4196
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4195), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4190)
		} // end switch yys4190
	} // end for yyj4190
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4197 int
	var yyb4197 bool
	var yyhl4197 bool = l >= 0
	yyj4197++
	if yyhl4197 {
		yyb4197 = yyj4197 > l
	} else {
		yyb4197 = r.CheckBreak()
	}
	if yyb4197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4197++
	if yyhl4197 {
		yyb4197 = yyj4197 > l
	} else {
		yyb4197 = r.CheckBreak()
	}
	if yyb4197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4197++
	if yyhl4197 {
		yyb4197 = yyj4197 > l
	} else {
		yyb4197 = r.CheckBreak()
	}
	if yyb4197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4200 := &x.ListMeta
		yym4201 := z.DecBinary()
		_ = yym4201
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4200) {
		} else {
			z.DecFallback(yyv4200, false)
		}
	}
	yyj4197++
	if yyhl4197 {
		yyb4197 = yyj4197 > l
	} else {
		yyb4197 = r.CheckBreak()
	}
	if yyb4197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4202 := &x.Items
		yym4203 := z.DecBinary()
		_ = yym4203
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4202), d)
		}
	}
	for {
		yyj4197++
		if yyhl4197 {
			yyb4197 = yyj4197 > l
		} else {
			yyb4197 = r.CheckBreak()
		}
		if yyb4197 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4197-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4204 := z.EncBinary()
		_ = yym4204
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4205 := !z.EncBinary()
			yy2arr4205 := z.EncBasicHandle().StructToArray
			var yyq4205 [4]bool
			_, _, _ = yysep4205, yyq4205, yy2arr4205
			const yyr4205 bool = false
			yyq4205[0] = x.Kind != ""
			yyq4205[1] = x.APIVersion != ""
			yyq4205[2] = true
			yyq4205[3] = len(x.Data) != 0
			var yynn4205 int
			if yyr4205 || yy2arr4205 {
				r.EncodeArrayStart(4)
			} else {
				yynn4205 = 0
				for _, b := range yyq4205 {
					if b {
						yynn4205++
					}
				}
				r.EncodeMapStart(yynn4205)
				yynn4205 = 0
			}
			if yyr4205 || yy2arr4205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4205[0] {
					yym4207 := z.EncBinary()
					_ = yym4207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4205[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4208 := z.EncBinary()
					_ = yym4208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4205 || yy2arr4205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4205[1] {
					yym4210 := z.EncBinary()
					_ = yym4210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4205[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4211 := z.EncBinary()
					_ = yym4211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4205 || yy2arr4205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4205[2] {
					yy4213 := &x.ObjectMeta
					yy4213.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4205[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4214 := &x.ObjectMeta
					yy4214.CodecEncodeSelf(e)
				}
			}
			if yyr4205 || yy2arr4205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4205[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4216 := z.EncBinary()
						_ = yym4216
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4205[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4217 := z.EncBinary()
						_ = yym4217
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4205 || yy2arr4205 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4218 := z.DecBinary()
	_ = yym4218
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4219 := r.ContainerType()
		if yyct4219 == codecSelferValueTypeMap1234 {
			yyl4219 := r.ReadMapStart()
			if yyl4219 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4219, d)
			}
		} else if yyct4219 == codecSelferValueTypeArray1234 {
			yyl4219 := r.ReadArrayStart()
			if yyl4219 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4219, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4220Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4220Slc
	var yyhl4220 bool = l >= 0
	for yyj4220 := 0; ; yyj4220++ {
		if yyhl4220 {
			if yyj4220 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4220Slc = r.DecodeBytes(yys4220Slc, true, true)
		yys4220 := string(yys4220Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4220 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4223 := &x.ObjectMeta
				yyv4223.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4224 := &x.Data
				yym4225 := z.DecBinary()
				_ = yym4225
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4224, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4220)
		} // end switch yys4220
	} // end for yyj4220
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4226 int
	var yyb4226 bool
	var yyhl4226 bool = l >= 0
	yyj4226++
	if yyhl4226 {
		yyb4226 = yyj4226 > l
	} else {
		yyb4226 = r.CheckBreak()
	}
	if yyb4226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4226++
	if yyhl4226 {
		yyb4226 = yyj4226 > l
	} else {
		yyb4226 = r.CheckBreak()
	}
	if yyb4226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4226++
	if yyhl4226 {
		yyb4226 = yyj4226 > l
	} else {
		yyb4226 = r.CheckBreak()
	}
	if yyb4226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4229 := &x.ObjectMeta
		yyv4229.CodecDecodeSelf(d)
	}
	yyj4226++
	if yyhl4226 {
		yyb4226 = yyj4226 > l
	} else {
		yyb4226 = r.CheckBreak()
	}
	if yyb4226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4230 := &x.Data
		yym4231 := z.DecBinary()
		_ = yym4231
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4230, false, d)
		}
	}
	for {
		yyj4226++
		if yyhl4226 {
			yyb4226 = yyj4226 > l
		} else {
			yyb4226 = r.CheckBreak()
		}
		if yyb4226 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4226-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4232 := z.EncBinary()
		_ = yym4232
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4233 := !z.EncBinary()
			yy2arr4233 := z.EncBasicHandle().StructToArray
			var yyq4233 [4]bool
			_, _, _ = yysep4233, yyq4233, yy2arr4233
			const yyr4233 bool = false
			yyq4233[0] = x.Kind != ""
			yyq4233[1] = x.APIVersion != ""
			yyq4233[2] = true
			var yynn4233 int
			if yyr4233 || yy2arr4233 {
				r.EncodeArrayStart(4)
			} else {
				yynn4233 = 1
				for _, b := range yyq4233 {
					if b {
						yynn4233++
					}
				}
				r.EncodeMapStart(yynn4233)
				yynn4233 = 0
			}
			if yyr4233 || yy2arr4233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4233[0] {
					yym4235 := z.EncBinary()
					_ = yym4235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4233[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4236 := z.EncBinary()
					_ = yym4236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4233 || yy2arr4233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4233[1] {
					yym4238 := z.EncBinary()
					_ = yym4238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4233[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4239 := z.EncBinary()
					_ = yym4239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4233 || yy2arr4233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4233[2] {
					yy4241 := &x.ListMeta
					yym4242 := z.EncBinary()
					_ = yym4242
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4241) {
					} else {
						z.EncFallback(yy4241)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4233[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4243 := &x.ListMeta
					yym4244 := z.EncBinary()
					_ = yym4244
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4243) {
					} else {
						z.EncFallback(yy4243)
					}
				}
			}
			if yyr4233 || yy2arr4233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4246 := z.EncBinary()
					_ = yym4246
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4247 := z.EncBinary()
					_ = yym4247
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4233 || yy2arr4233 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4248 := z.DecBinary()
	_ = yym4248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4249 := r.ContainerType()
		if yyct4249 == codecSelferValueTypeMap1234 {
			yyl4249 := r.ReadMapStart()
			if yyl4249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4249, d)
			}
		} else if yyct4249 == codecSelferValueTypeArray1234 {
			yyl4249 := r.ReadArrayStart()
			if yyl4249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4250Slc
	var yyhl4250 bool = l >= 0
	for yyj4250 := 0; ; yyj4250++ {
		if yyhl4250 {
			if yyj4250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4250Slc = r.DecodeBytes(yys4250Slc, true, true)
		yys4250 := string(yys4250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4250 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4253 := &x.ListMeta
				yym4254 := z.DecBinary()
				_ = yym4254
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4253) {
				} else {
					z.DecFallback(yyv4253, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4255 := &x.Items
				yym4256 := z.DecBinary()
				_ = yym4256
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4255), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4250)
		} // end switch yys4250
	} // end for yyj4250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4257 int
	var yyb4257 bool
	var yyhl4257 bool = l >= 0
	yyj4257++
	if yyhl4257 {
		yyb4257 = yyj4257 > l
	} else {
		yyb4257 = r.CheckBreak()
	}
	if yyb4257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4257++
	if yyhl4257 {
		yyb4257 = yyj4257 > l
	} else {
		yyb4257 = r.CheckBreak()
	}
	if yyb4257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4257++
	if yyhl4257 {
		yyb4257 = yyj4257 > l
	} else {
		yyb4257 = r.CheckBreak()
	}
	if yyb4257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4260 := &x.ListMeta
		yym4261 := z.DecBinary()
		_ = yym4261
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4260) {
		} else {
			z.DecFallback(yyv4260, false)
		}
	}
	yyj4257++
	if yyhl4257 {
		yyb4257 = yyj4257 > l
	} else {
		yyb4257 = r.CheckBreak()
	}
	if yyb4257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4262 := &x.Items
		yym4263 := z.DecBinary()
		_ = yym4263
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4262), d)
		}
	}
	for {
		yyj4257++
		if yyhl4257 {
			yyb4257 = yyj4257 > l
		} else {
			yyb4257 = r.CheckBreak()
		}
		if yyb4257 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4257-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4264 := z.EncBinary()
	_ = yym4264
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4265 := z.DecBinary()
	_ = yym4265
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4266 := z.EncBinary()
	_ = yym4266
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4267 := z.DecBinary()
	_ = yym4267
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4268 := z.EncBinary()
		_ = yym4268
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4269 := !z.EncBinary()
			yy2arr4269 := z.EncBasicHandle().StructToArray
			var yyq4269 [4]bool
			_, _, _ = yysep4269, yyq4269, yy2arr4269
			const yyr4269 bool = false
			yyq4269[2] = x.Message != ""
			yyq4269[3] = x.Error != ""
			var yynn4269 int
			if yyr4269 || yy2arr4269 {
				r.EncodeArrayStart(4)
			} else {
				yynn4269 = 2
				for _, b := range yyq4269 {
					if b {
						yynn4269++
					}
				}
				r.EncodeMapStart(yynn4269)
				yynn4269 = 0
			}
			if yyr4269 || yy2arr4269 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4269 || yy2arr4269 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4269 || yy2arr4269 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4269[2] {
					yym4273 := z.EncBinary()
					_ = yym4273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4269[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4274 := z.EncBinary()
					_ = yym4274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4269 || yy2arr4269 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4269[3] {
					yym4276 := z.EncBinary()
					_ = yym4276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4269[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4277 := z.EncBinary()
					_ = yym4277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4269 || yy2arr4269 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4278 := z.DecBinary()
	_ = yym4278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4279 := r.ContainerType()
		if yyct4279 == codecSelferValueTypeMap1234 {
			yyl4279 := r.ReadMapStart()
			if yyl4279 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4279, d)
			}
		} else if yyct4279 == codecSelferValueTypeArray1234 {
			yyl4279 := r.ReadArrayStart()
			if yyl4279 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4279, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4280Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4280Slc
	var yyhl4280 bool = l >= 0
	for yyj4280 := 0; ; yyj4280++ {
		if yyhl4280 {
			if yyj4280 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4280Slc = r.DecodeBytes(yys4280Slc, true, true)
		yys4280 := string(yys4280Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4280 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4280)
		} // end switch yys4280
	} // end for yyj4280
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4285 int
	var yyb4285 bool
	var yyhl4285 bool = l >= 0
	yyj4285++
	if yyhl4285 {
		yyb4285 = yyj4285 > l
	} else {
		yyb4285 = r.CheckBreak()
	}
	if yyb4285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4285++
	if yyhl4285 {
		yyb4285 = yyj4285 > l
	} else {
		yyb4285 = r.CheckBreak()
	}
	if yyb4285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4285++
	if yyhl4285 {
		yyb4285 = yyj4285 > l
	} else {
		yyb4285 = r.CheckBreak()
	}
	if yyb4285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4285++
	if yyhl4285 {
		yyb4285 = yyj4285 > l
	} else {
		yyb4285 = r.CheckBreak()
	}
	if yyb4285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4285++
		if yyhl4285 {
			yyb4285 = yyj4285 > l
		} else {
			yyb4285 = r.CheckBreak()
		}
		if yyb4285 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4285-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4290 := z.EncBinary()
		_ = yym4290
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4291 := !z.EncBinary()
			yy2arr4291 := z.EncBasicHandle().StructToArray
			var yyq4291 [4]bool
			_, _, _ = yysep4291, yyq4291, yy2arr4291
			const yyr4291 bool = false
			yyq4291[0] = x.Kind != ""
			yyq4291[1] = x.APIVersion != ""
			yyq4291[2] = true
			yyq4291[3] = len(x.Conditions) != 0
			var yynn4291 int
			if yyr4291 || yy2arr4291 {
				r.EncodeArrayStart(4)
			} else {
				yynn4291 = 0
				for _, b := range yyq4291 {
					if b {
						yynn4291++
					}
				}
				r.EncodeMapStart(yynn4291)
				yynn4291 = 0
			}
			if yyr4291 || yy2arr4291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4291[0] {
					yym4293 := z.EncBinary()
					_ = yym4293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4291[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4294 := z.EncBinary()
					_ = yym4294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4291 || yy2arr4291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4291[1] {
					yym4296 := z.EncBinary()
					_ = yym4296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4291[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4297 := z.EncBinary()
					_ = yym4297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4291 || yy2arr4291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4291[2] {
					yy4299 := &x.ObjectMeta
					yy4299.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4291[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4300 := &x.ObjectMeta
					yy4300.CodecEncodeSelf(e)
				}
			}
			if yyr4291 || yy2arr4291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4291[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4302 := z.EncBinary()
						_ = yym4302
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4291[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4303 := z.EncBinary()
						_ = yym4303
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4291 || yy2arr4291 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4304 := z.DecBinary()
	_ = yym4304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4305 := r.ContainerType()
		if yyct4305 == codecSelferValueTypeMap1234 {
			yyl4305 := r.ReadMapStart()
			if yyl4305 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4305, d)
			}
		} else if yyct4305 == codecSelferValueTypeArray1234 {
			yyl4305 := r.ReadArrayStart()
			if yyl4305 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4306Slc
	var yyhl4306 bool = l >= 0
	for yyj4306 := 0; ; yyj4306++ {
		if yyhl4306 {
			if yyj4306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4306Slc = r.DecodeBytes(yys4306Slc, true, true)
		yys4306 := string(yys4306Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4306 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4309 := &x.ObjectMeta
				yyv4309.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4310 := &x.Conditions
				yym4311 := z.DecBinary()
				_ = yym4311
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4310), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4306)
		} // end switch yys4306
	} // end for yyj4306
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4312 int
	var yyb4312 bool
	var yyhl4312 bool = l >= 0
	yyj4312++
	if yyhl4312 {
		yyb4312 = yyj4312 > l
	} else {
		yyb4312 = r.CheckBreak()
	}
	if yyb4312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4312++
	if yyhl4312 {
		yyb4312 = yyj4312 > l
	} else {
		yyb4312 = r.CheckBreak()
	}
	if yyb4312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4312++
	if yyhl4312 {
		yyb4312 = yyj4312 > l
	} else {
		yyb4312 = r.CheckBreak()
	}
	if yyb4312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4315 := &x.ObjectMeta
		yyv4315.CodecDecodeSelf(d)
	}
	yyj4312++
	if yyhl4312 {
		yyb4312 = yyj4312 > l
	} else {
		yyb4312 = r.CheckBreak()
	}
	if yyb4312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4316 := &x.Conditions
		yym4317 := z.DecBinary()
		_ = yym4317
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4316), d)
		}
	}
	for {
		yyj4312++
		if yyhl4312 {
			yyb4312 = yyj4312 > l
		} else {
			yyb4312 = r.CheckBreak()
		}
		if yyb4312 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4312-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4318 := z.EncBinary()
		_ = yym4318
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4319 := !z.EncBinary()
			yy2arr4319 := z.EncBasicHandle().StructToArray
			var yyq4319 [4]bool
			_, _, _ = yysep4319, yyq4319, yy2arr4319
			const yyr4319 bool = false
			yyq4319[0] = x.Kind != ""
			yyq4319[1] = x.APIVersion != ""
			yyq4319[2] = true
			var yynn4319 int
			if yyr4319 || yy2arr4319 {
				r.EncodeArrayStart(4)
			} else {
				yynn4319 = 1
				for _, b := range yyq4319 {
					if b {
						yynn4319++
					}
				}
				r.EncodeMapStart(yynn4319)
				yynn4319 = 0
			}
			if yyr4319 || yy2arr4319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4319[0] {
					yym4321 := z.EncBinary()
					_ = yym4321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4319[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4322 := z.EncBinary()
					_ = yym4322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4319 || yy2arr4319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4319[1] {
					yym4324 := z.EncBinary()
					_ = yym4324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4319[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4325 := z.EncBinary()
					_ = yym4325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4319 || yy2arr4319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4319[2] {
					yy4327 := &x.ListMeta
					yym4328 := z.EncBinary()
					_ = yym4328
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4327) {
					} else {
						z.EncFallback(yy4327)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4319[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4329 := &x.ListMeta
					yym4330 := z.EncBinary()
					_ = yym4330
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4329) {
					} else {
						z.EncFallback(yy4329)
					}
				}
			}
			if yyr4319 || yy2arr4319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4332 := z.EncBinary()
					_ = yym4332
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4333 := z.EncBinary()
					_ = yym4333
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4319 || yy2arr4319 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4334 := z.DecBinary()
	_ = yym4334
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4335 := r.ContainerType()
		if yyct4335 == codecSelferValueTypeMap1234 {
			yyl4335 := r.ReadMapStart()
			if yyl4335 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4335, d)
			}
		} else if yyct4335 == codecSelferValueTypeArray1234 {
			yyl4335 := r.ReadArrayStart()
			if yyl4335 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4335, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4336Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4336Slc
	var yyhl4336 bool = l >= 0
	for yyj4336 := 0; ; yyj4336++ {
		if yyhl4336 {
			if yyj4336 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4336Slc = r.DecodeBytes(yys4336Slc, true, true)
		yys4336 := string(yys4336Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4336 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4339 := &x.ListMeta
				yym4340 := z.DecBinary()
				_ = yym4340
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4339) {
				} else {
					z.DecFallback(yyv4339, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4341 := &x.Items
				yym4342 := z.DecBinary()
				_ = yym4342
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4341), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4336)
		} // end switch yys4336
	} // end for yyj4336
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4343 int
	var yyb4343 bool
	var yyhl4343 bool = l >= 0
	yyj4343++
	if yyhl4343 {
		yyb4343 = yyj4343 > l
	} else {
		yyb4343 = r.CheckBreak()
	}
	if yyb4343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4343++
	if yyhl4343 {
		yyb4343 = yyj4343 > l
	} else {
		yyb4343 = r.CheckBreak()
	}
	if yyb4343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4343++
	if yyhl4343 {
		yyb4343 = yyj4343 > l
	} else {
		yyb4343 = r.CheckBreak()
	}
	if yyb4343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4346 := &x.ListMeta
		yym4347 := z.DecBinary()
		_ = yym4347
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4346) {
		} else {
			z.DecFallback(yyv4346, false)
		}
	}
	yyj4343++
	if yyhl4343 {
		yyb4343 = yyj4343 > l
	} else {
		yyb4343 = r.CheckBreak()
	}
	if yyb4343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4348 := &x.Items
		yym4349 := z.DecBinary()
		_ = yym4349
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4348), d)
		}
	}
	for {
		yyj4343++
		if yyhl4343 {
			yyb4343 = yyj4343 > l
		} else {
			yyb4343 = r.CheckBreak()
		}
		if yyb4343 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4343-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4350 := z.EncBinary()
		_ = yym4350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4351 := !z.EncBinary()
			yy2arr4351 := z.EncBasicHandle().StructToArray
			var yyq4351 [6]bool
			_, _, _ = yysep4351, yyq4351, yy2arr4351
			const yyr4351 bool = false
			yyq4351[0] = x.Capabilities != nil
			yyq4351[1] = x.Privileged != nil
			yyq4351[2] = x.SELinuxOptions != nil
			yyq4351[3] = x.RunAsUser != nil
			yyq4351[4] = x.RunAsNonRoot != nil
			yyq4351[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4351 int
			if yyr4351 || yy2arr4351 {
				r.EncodeArrayStart(6)
			} else {
				yynn4351 = 0
				for _, b := range yyq4351 {
					if b {
						yynn4351++
					}
				}
				r.EncodeMapStart(yynn4351)
				yynn4351 = 0
			}
			if yyr4351 || yy2arr4351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4351[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4351[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4351 || yy2arr4351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4351[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4354 := *x.Privileged
						yym4355 := z.EncBinary()
						_ = yym4355
						if false {
						} else {
							r.EncodeBool(bool(yy4354))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4351[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4356 := *x.Privileged
						yym4357 := z.EncBinary()
						_ = yym4357
						if false {
						} else {
							r.EncodeBool(bool(yy4356))
						}
					}
				}
			}
			if yyr4351 || yy2arr4351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4351[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4351[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4351 || yy2arr4351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4351[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4360 := *x.RunAsUser
						yym4361 := z.EncBinary()
						_ = yym4361
						if false {
						} else {
							r.EncodeInt(int64(yy4360))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4351[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4362 := *x.RunAsUser
						yym4363 := z.EncBinary()
						_ = yym4363
						if false {
						} else {
							r.EncodeInt(int64(yy4362))
						}
					}
				}
			}
			if yyr4351 || yy2arr4351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4351[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4365 := *x.RunAsNonRoot
						yym4366 := z.EncBinary()
						_ = yym4366
						if false {
						} else {
							r.EncodeBool(bool(yy4365))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4351[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4367 := *x.RunAsNonRoot
						yym4368 := z.EncBinary()
						_ = yym4368
						if false {
						} else {
							r.EncodeBool(bool(yy4367))
						}
					}
				}
			}
			if yyr4351 || yy2arr4351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4351[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4370 := *x.ReadOnlyRootFilesystem
						yym4371 := z.EncBinary()
						_ = yym4371
						if false {
						} else {
							r.EncodeBool(bool(yy4370))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4351[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4372 := *x.ReadOnlyRootFilesystem
						yym4373 := z.EncBinary()
						_ = yym4373
						if false {
						} else {
							r.EncodeBool(bool(yy4372))
						}
					}
				}
			}
			if yyr4351 || yy2arr4351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4374 := z.DecBinary()
	_ = yym4374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4375 := r.ContainerType()
		if yyct4375 == codecSelferValueTypeMap1234 {
			yyl4375 := r.ReadMapStart()
			if yyl4375 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4375, d)
			}
		} else if yyct4375 == codecSelferValueTypeArray1234 {
			yyl4375 := r.ReadArrayStart()
			if yyl4375 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4376Slc
	var yyhl4376 bool = l >= 0
	for yyj4376 := 0; ; yyj4376++ {
		if yyhl4376 {
			if yyj4376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4376Slc = r.DecodeBytes(yys4376Slc, true, true)
		yys4376 := string(yys4376Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4376 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4379 := z.DecBinary()
				_ = yym4379
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4382 := z.DecBinary()
				_ = yym4382
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4384 := z.DecBinary()
				_ = yym4384
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4386 := z.DecBinary()
				_ = yym4386
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4376)
		} // end switch yys4376
	} // end for yyj4376
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4387 int
	var yyb4387 bool
	var yyhl4387 bool = l >= 0
	yyj4387++
	if yyhl4387 {
		yyb4387 = yyj4387 > l
	} else {
		yyb4387 = r.CheckBreak()
	}
	if yyb4387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4387++
	if yyhl4387 {
		yyb4387 = yyj4387 > l
	} else {
		yyb4387 = r.CheckBreak()
	}
	if yyb4387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4390 := z.DecBinary()
		_ = yym4390
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4387++
	if yyhl4387 {
		yyb4387 = yyj4387 > l
	} else {
		yyb4387 = r.CheckBreak()
	}
	if yyb4387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4387++
	if yyhl4387 {
		yyb4387 = yyj4387 > l
	} else {
		yyb4387 = r.CheckBreak()
	}
	if yyb4387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4393 := z.DecBinary()
		_ = yym4393
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4387++
	if yyhl4387 {
		yyb4387 = yyj4387 > l
	} else {
		yyb4387 = r.CheckBreak()
	}
	if yyb4387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4395 := z.DecBinary()
		_ = yym4395
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4387++
	if yyhl4387 {
		yyb4387 = yyj4387 > l
	} else {
		yyb4387 = r.CheckBreak()
	}
	if yyb4387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4397 := z.DecBinary()
		_ = yym4397
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4387++
		if yyhl4387 {
			yyb4387 = yyj4387 > l
		} else {
			yyb4387 = r.CheckBreak()
		}
		if yyb4387 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4387-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4398 := z.EncBinary()
		_ = yym4398
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4399 := !z.EncBinary()
			yy2arr4399 := z.EncBasicHandle().StructToArray
			var yyq4399 [4]bool
			_, _, _ = yysep4399, yyq4399, yy2arr4399
			const yyr4399 bool = false
			yyq4399[0] = x.User != ""
			yyq4399[1] = x.Role != ""
			yyq4399[2] = x.Type != ""
			yyq4399[3] = x.Level != ""
			var yynn4399 int
			if yyr4399 || yy2arr4399 {
				r.EncodeArrayStart(4)
			} else {
				yynn4399 = 0
				for _, b := range yyq4399 {
					if b {
						yynn4399++
					}
				}
				r.EncodeMapStart(yynn4399)
				yynn4399 = 0
			}
			if yyr4399 || yy2arr4399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4399[0] {
					yym4401 := z.EncBinary()
					_ = yym4401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4399[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4402 := z.EncBinary()
					_ = yym4402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4399 || yy2arr4399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4399[1] {
					yym4404 := z.EncBinary()
					_ = yym4404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4399[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4405 := z.EncBinary()
					_ = yym4405
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4399 || yy2arr4399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4399[2] {
					yym4407 := z.EncBinary()
					_ = yym4407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4399[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4408 := z.EncBinary()
					_ = yym4408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4399 || yy2arr4399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4399[3] {
					yym4410 := z.EncBinary()
					_ = yym4410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4399[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4411 := z.EncBinary()
					_ = yym4411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4399 || yy2arr4399 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4412 := z.DecBinary()
	_ = yym4412
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4413 := r.ContainerType()
		if yyct4413 == codecSelferValueTypeMap1234 {
			yyl4413 := r.ReadMapStart()
			if yyl4413 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4413, d)
			}
		} else if yyct4413 == codecSelferValueTypeArray1234 {
			yyl4413 := r.ReadArrayStart()
			if yyl4413 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4413, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4414Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4414Slc
	var yyhl4414 bool = l >= 0
	for yyj4414 := 0; ; yyj4414++ {
		if yyhl4414 {
			if yyj4414 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4414Slc = r.DecodeBytes(yys4414Slc, true, true)
		yys4414 := string(yys4414Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4414 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4414)
		} // end switch yys4414
	} // end for yyj4414
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4419 int
	var yyb4419 bool
	var yyhl4419 bool = l >= 0
	yyj4419++
	if yyhl4419 {
		yyb4419 = yyj4419 > l
	} else {
		yyb4419 = r.CheckBreak()
	}
	if yyb4419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4419++
	if yyhl4419 {
		yyb4419 = yyj4419 > l
	} else {
		yyb4419 = r.CheckBreak()
	}
	if yyb4419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4419++
	if yyhl4419 {
		yyb4419 = yyj4419 > l
	} else {
		yyb4419 = r.CheckBreak()
	}
	if yyb4419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4419++
	if yyhl4419 {
		yyb4419 = yyj4419 > l
	} else {
		yyb4419 = r.CheckBreak()
	}
	if yyb4419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4419++
		if yyhl4419 {
			yyb4419 = yyj4419 > l
		} else {
			yyb4419 = r.CheckBreak()
		}
		if yyb4419 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4419-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4424 := z.EncBinary()
		_ = yym4424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4425 := !z.EncBinary()
			yy2arr4425 := z.EncBasicHandle().StructToArray
			var yyq4425 [5]bool
			_, _, _ = yysep4425, yyq4425, yy2arr4425
			const yyr4425 bool = false
			yyq4425[0] = x.Kind != ""
			yyq4425[1] = x.APIVersion != ""
			yyq4425[2] = true
			var yynn4425 int
			if yyr4425 || yy2arr4425 {
				r.EncodeArrayStart(5)
			} else {
				yynn4425 = 2
				for _, b := range yyq4425 {
					if b {
						yynn4425++
					}
				}
				r.EncodeMapStart(yynn4425)
				yynn4425 = 0
			}
			if yyr4425 || yy2arr4425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4425[0] {
					yym4427 := z.EncBinary()
					_ = yym4427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4425[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4428 := z.EncBinary()
					_ = yym4428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4425 || yy2arr4425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4425[1] {
					yym4430 := z.EncBinary()
					_ = yym4430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4425[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4431 := z.EncBinary()
					_ = yym4431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4425 || yy2arr4425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4425[2] {
					yy4433 := &x.ObjectMeta
					yy4433.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4425[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4434 := &x.ObjectMeta
					yy4434.CodecEncodeSelf(e)
				}
			}
			if yyr4425 || yy2arr4425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4436 := z.EncBinary()
				_ = yym4436
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4437 := z.EncBinary()
				_ = yym4437
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4425 || yy2arr4425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4439 := z.EncBinary()
					_ = yym4439
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4440 := z.EncBinary()
					_ = yym4440
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4425 || yy2arr4425 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4441 := z.DecBinary()
	_ = yym4441
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4442 := r.ContainerType()
		if yyct4442 == codecSelferValueTypeMap1234 {
			yyl4442 := r.ReadMapStart()
			if yyl4442 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4442, d)
			}
		} else if yyct4442 == codecSelferValueTypeArray1234 {
			yyl4442 := r.ReadArrayStart()
			if yyl4442 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4442, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4443Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4443Slc
	var yyhl4443 bool = l >= 0
	for yyj4443 := 0; ; yyj4443++ {
		if yyhl4443 {
			if yyj4443 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4443Slc = r.DecodeBytes(yys4443Slc, true, true)
		yys4443 := string(yys4443Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4443 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4446 := &x.ObjectMeta
				yyv4446.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4448 := &x.Data
				yym4449 := z.DecBinary()
				_ = yym4449
				if false {
				} else {
					*yyv4448 = r.DecodeBytes(*(*[]byte)(yyv4448), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4443)
		} // end switch yys4443
	} // end for yyj4443
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4450 int
	var yyb4450 bool
	var yyhl4450 bool = l >= 0
	yyj4450++
	if yyhl4450 {
		yyb4450 = yyj4450 > l
	} else {
		yyb4450 = r.CheckBreak()
	}
	if yyb4450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4450++
	if yyhl4450 {
		yyb4450 = yyj4450 > l
	} else {
		yyb4450 = r.CheckBreak()
	}
	if yyb4450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4450++
	if yyhl4450 {
		yyb4450 = yyj4450 > l
	} else {
		yyb4450 = r.CheckBreak()
	}
	if yyb4450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4453 := &x.ObjectMeta
		yyv4453.CodecDecodeSelf(d)
	}
	yyj4450++
	if yyhl4450 {
		yyb4450 = yyj4450 > l
	} else {
		yyb4450 = r.CheckBreak()
	}
	if yyb4450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4450++
	if yyhl4450 {
		yyb4450 = yyj4450 > l
	} else {
		yyb4450 = r.CheckBreak()
	}
	if yyb4450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4455 := &x.Data
		yym4456 := z.DecBinary()
		_ = yym4456
		if false {
		} else {
			*yyv4455 = r.DecodeBytes(*(*[]byte)(yyv4455), false, false)
		}
	}
	for {
		yyj4450++
		if yyhl4450 {
			yyb4450 = yyj4450 > l
		} else {
			yyb4450 = r.CheckBreak()
		}
		if yyb4450 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4450-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4457 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4458 := &yyv4457
		yy4458.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4459 := *v
	yyh4459, yyl4459 := z.DecSliceHelperStart()
	var yyc4459 bool
	if yyl4459 == 0 {
		if yyv4459 == nil {
			yyv4459 = []OwnerReference{}
			yyc4459 = true
		} else if len(yyv4459) != 0 {
			yyv4459 = yyv4459[:0]
			yyc4459 = true
		}
	} else if yyl4459 > 0 {
		var yyrr4459, yyrl4459 int
		var yyrt4459 bool
		if yyl4459 > cap(yyv4459) {

			yyrg4459 := len(yyv4459) > 0
			yyv24459 := yyv4459
			yyrl4459, yyrt4459 = z.DecInferLen(yyl4459, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4459 {
				if yyrl4459 <= cap(yyv4459) {
					yyv4459 = yyv4459[:yyrl4459]
				} else {
					yyv4459 = make([]OwnerReference, yyrl4459)
				}
			} else {
				yyv4459 = make([]OwnerReference, yyrl4459)
			}
			yyc4459 = true
			yyrr4459 = len(yyv4459)
			if yyrg4459 {
				copy(yyv4459, yyv24459)
			}
		} else if yyl4459 != len(yyv4459) {
			yyv4459 = yyv4459[:yyl4459]
			yyc4459 = true
		}
		yyj4459 := 0
		for ; yyj4459 < yyrr4459; yyj4459++ {
			yyh4459.ElemContainerState(yyj4459)
			if r.TryDecodeAsNil() {
				yyv4459[yyj4459] = OwnerReference{}
			} else {
				yyv4460 := &yyv4459[yyj4459]
				yyv4460.CodecDecodeSelf(d)
			}

		}
		if yyrt4459 {
			for ; yyj4459 < yyl4459; yyj4459++ {
				yyv4459 = append(yyv4459, OwnerReference{})
				yyh4459.ElemContainerState(yyj4459)
				if r.TryDecodeAsNil() {
					yyv4459[yyj4459] = OwnerReference{}
				} else {
					yyv4461 := &yyv4459[yyj4459]
					yyv4461.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4459 := 0
		for ; !r.CheckBreak(); yyj4459++ {

			if yyj4459 >= len(yyv4459) {
				yyv4459 = append(yyv4459, OwnerReference{}) // var yyz4459 OwnerReference
				yyc4459 = true
			}
			yyh4459.ElemContainerState(yyj4459)
			if yyj4459 < len(yyv4459) {
				if r.TryDecodeAsNil() {
					yyv4459[yyj4459] = OwnerReference{}
				} else {
					yyv4462 := &yyv4459[yyj4459]
					yyv4462.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4459 < len(yyv4459) {
			yyv4459 = yyv4459[:yyj4459]
			yyc4459 = true
		} else if yyj4459 == 0 && yyv4459 == nil {
			yyv4459 = []OwnerReference{}
			yyc4459 = true
		}
	}
	yyh4459.End()
	if yyc4459 {
		*v = yyv4459
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4463 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4463.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4464 := *v
	yyh4464, yyl4464 := z.DecSliceHelperStart()
	var yyc4464 bool
	if yyl4464 == 0 {
		if yyv4464 == nil {
			yyv4464 = []PersistentVolumeAccessMode{}
			yyc4464 = true
		} else if len(yyv4464) != 0 {
			yyv4464 = yyv4464[:0]
			yyc4464 = true
		}
	} else if yyl4464 > 0 {
		var yyrr4464, yyrl4464 int
		var yyrt4464 bool
		if yyl4464 > cap(yyv4464) {

			yyrl4464, yyrt4464 = z.DecInferLen(yyl4464, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4464 {
				if yyrl4464 <= cap(yyv4464) {
					yyv4464 = yyv4464[:yyrl4464]
				} else {
					yyv4464 = make([]PersistentVolumeAccessMode, yyrl4464)
				}
			} else {
				yyv4464 = make([]PersistentVolumeAccessMode, yyrl4464)
			}
			yyc4464 = true
			yyrr4464 = len(yyv4464)
		} else if yyl4464 != len(yyv4464) {
			yyv4464 = yyv4464[:yyl4464]
			yyc4464 = true
		}
		yyj4464 := 0
		for ; yyj4464 < yyrr4464; yyj4464++ {
			yyh4464.ElemContainerState(yyj4464)
			if r.TryDecodeAsNil() {
				yyv4464[yyj4464] = ""
			} else {
				yyv4464[yyj4464] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4464 {
			for ; yyj4464 < yyl4464; yyj4464++ {
				yyv4464 = append(yyv4464, "")
				yyh4464.ElemContainerState(yyj4464)
				if r.TryDecodeAsNil() {
					yyv4464[yyj4464] = ""
				} else {
					yyv4464[yyj4464] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4464 := 0
		for ; !r.CheckBreak(); yyj4464++ {

			if yyj4464 >= len(yyv4464) {
				yyv4464 = append(yyv4464, "") // var yyz4464 PersistentVolumeAccessMode
				yyc4464 = true
			}
			yyh4464.ElemContainerState(yyj4464)
			if yyj4464 < len(yyv4464) {
				if r.TryDecodeAsNil() {
					yyv4464[yyj4464] = ""
				} else {
					yyv4464[yyj4464] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4464 < len(yyv4464) {
			yyv4464 = yyv4464[:yyj4464]
			yyc4464 = true
		} else if yyj4464 == 0 && yyv4464 == nil {
			yyv4464 = []PersistentVolumeAccessMode{}
			yyc4464 = true
		}
	}
	yyh4464.End()
	if yyc4464 {
		*v = yyv4464
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4468 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4469 := &yyv4468
		yy4469.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4470 := *v
	yyh4470, yyl4470 := z.DecSliceHelperStart()
	var yyc4470 bool
	if yyl4470 == 0 {
		if yyv4470 == nil {
			yyv4470 = []PersistentVolume{}
			yyc4470 = true
		} else if len(yyv4470) != 0 {
			yyv4470 = yyv4470[:0]
			yyc4470 = true
		}
	} else if yyl4470 > 0 {
		var yyrr4470, yyrl4470 int
		var yyrt4470 bool
		if yyl4470 > cap(yyv4470) {

			yyrg4470 := len(yyv4470) > 0
			yyv24470 := yyv4470
			yyrl4470, yyrt4470 = z.DecInferLen(yyl4470, z.DecBasicHandle().MaxInitLen, 480)
			if yyrt4470 {
				if yyrl4470 <= cap(yyv4470) {
					yyv4470 = yyv4470[:yyrl4470]
				} else {
					yyv4470 = make([]PersistentVolume, yyrl4470)
				}
			} else {
				yyv4470 = make([]PersistentVolume, yyrl4470)
			}
			yyc4470 = true
			yyrr4470 = len(yyv4470)
			if yyrg4470 {
				copy(yyv4470, yyv24470)
			}
		} else if yyl4470 != len(yyv4470) {
			yyv4470 = yyv4470[:yyl4470]
			yyc4470 = true
		}
		yyj4470 := 0
		for ; yyj4470 < yyrr4470; yyj4470++ {
			yyh4470.ElemContainerState(yyj4470)
			if r.TryDecodeAsNil() {
				yyv4470[yyj4470] = PersistentVolume{}
			} else {
				yyv4471 := &yyv4470[yyj4470]
				yyv4471.CodecDecodeSelf(d)
			}

		}
		if yyrt4470 {
			for ; yyj4470 < yyl4470; yyj4470++ {
				yyv4470 = append(yyv4470, PersistentVolume{})
				yyh4470.ElemContainerState(yyj4470)
				if r.TryDecodeAsNil() {
					yyv4470[yyj4470] = PersistentVolume{}
				} else {
					yyv4472 := &yyv4470[yyj4470]
					yyv4472.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4470 := 0
		for ; !r.CheckBreak(); yyj4470++ {

			if yyj4470 >= len(yyv4470) {
				yyv4470 = append(yyv4470, PersistentVolume{}) // var yyz4470 PersistentVolume
				yyc4470 = true
			}
			yyh4470.ElemContainerState(yyj4470)
			if yyj4470 < len(yyv4470) {
				if r.TryDecodeAsNil() {
					yyv4470[yyj4470] = PersistentVolume{}
				} else {
					yyv4473 := &yyv4470[yyj4470]
					yyv4473.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4470 < len(yyv4470) {
			yyv4470 = yyv4470[:yyj4470]
			yyc4470 = true
		} else if yyj4470 == 0 && yyv4470 == nil {
			yyv4470 = []PersistentVolume{}
			yyc4470 = true
		}
	}
	yyh4470.End()
	if yyc4470 {
		*v = yyv4470
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4474 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4475 := &yyv4474
		yy4475.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4476 := *v
	yyh4476, yyl4476 := z.DecSliceHelperStart()
	var yyc4476 bool
	if yyl4476 == 0 {
		if yyv4476 == nil {
			yyv4476 = []PersistentVolumeClaim{}
			yyc4476 = true
		} else if len(yyv4476) != 0 {
			yyv4476 = yyv4476[:0]
			yyc4476 = true
		}
	} else if yyl4476 > 0 {
		var yyrr4476, yyrl4476 int
		var yyrt4476 bool
		if yyl4476 > cap(yyv4476) {

			yyrg4476 := len(yyv4476) > 0
			yyv24476 := yyv4476
			yyrl4476, yyrt4476 = z.DecInferLen(yyl4476, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4476 {
				if yyrl4476 <= cap(yyv4476) {
					yyv4476 = yyv4476[:yyrl4476]
				} else {
					yyv4476 = make([]PersistentVolumeClaim, yyrl4476)
				}
			} else {
				yyv4476 = make([]PersistentVolumeClaim, yyrl4476)
			}
			yyc4476 = true
			yyrr4476 = len(yyv4476)
			if yyrg4476 {
				copy(yyv4476, yyv24476)
			}
		} else if yyl4476 != len(yyv4476) {
			yyv4476 = yyv4476[:yyl4476]
			yyc4476 = true
		}
		yyj4476 := 0
		for ; yyj4476 < yyrr4476; yyj4476++ {
			yyh4476.ElemContainerState(yyj4476)
			if r.TryDecodeAsNil() {
				yyv4476[yyj4476] = PersistentVolumeClaim{}
			} else {
				yyv4477 := &yyv4476[yyj4476]
				yyv4477.CodecDecodeSelf(d)
			}

		}
		if yyrt4476 {
			for ; yyj4476 < yyl4476; yyj4476++ {
				yyv4476 = append(yyv4476, PersistentVolumeClaim{})
				yyh4476.ElemContainerState(yyj4476)
				if r.TryDecodeAsNil() {
					yyv4476[yyj4476] = PersistentVolumeClaim{}
				} else {
					yyv4478 := &yyv4476[yyj4476]
					yyv4478.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4476 := 0
		for ; !r.CheckBreak(); yyj4476++ {

			if yyj4476 >= len(yyv4476) {
				yyv4476 = append(yyv4476, PersistentVolumeClaim{}) // var yyz4476 PersistentVolumeClaim
				yyc4476 = true
			}
			yyh4476.ElemContainerState(yyj4476)
			if yyj4476 < len(yyv4476) {
				if r.TryDecodeAsNil() {
					yyv4476[yyj4476] = PersistentVolumeClaim{}
				} else {
					yyv4479 := &yyv4476[yyj4476]
					yyv4479.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4476 < len(yyv4476) {
			yyv4476 = yyv4476[:yyj4476]
			yyc4476 = true
		} else if yyj4476 == 0 && yyv4476 == nil {
			yyv4476 = []PersistentVolumeClaim{}
			yyc4476 = true
		}
	}
	yyh4476.End()
	if yyc4476 {
		*v = yyv4476
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4480 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4481 := &yyv4480
		yy4481.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4482 := *v
	yyh4482, yyl4482 := z.DecSliceHelperStart()
	var yyc4482 bool
	if yyl4482 == 0 {
		if yyv4482 == nil {
			yyv4482 = []KeyToPath{}
			yyc4482 = true
		} else if len(yyv4482) != 0 {
			yyv4482 = yyv4482[:0]
			yyc4482 = true
		}
	} else if yyl4482 > 0 {
		var yyrr4482, yyrl4482 int
		var yyrt4482 bool
		if yyl4482 > cap(yyv4482) {

			yyrg4482 := len(yyv4482) > 0
			yyv24482 := yyv4482
			yyrl4482, yyrt4482 = z.DecInferLen(yyl4482, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4482 {
				if yyrl4482 <= cap(yyv4482) {
					yyv4482 = yyv4482[:yyrl4482]
				} else {
					yyv4482 = make([]KeyToPath, yyrl4482)
				}
			} else {
				yyv4482 = make([]KeyToPath, yyrl4482)
			}
			yyc4482 = true
			yyrr4482 = len(yyv4482)
			if yyrg4482 {
				copy(yyv4482, yyv24482)
			}
		} else if yyl4482 != len(yyv4482) {
			yyv4482 = yyv4482[:yyl4482]
			yyc4482 = true
		}
		yyj4482 := 0
		for ; yyj4482 < yyrr4482; yyj4482++ {
			yyh4482.ElemContainerState(yyj4482)
			if r.TryDecodeAsNil() {
				yyv4482[yyj4482] = KeyToPath{}
			} else {
				yyv4483 := &yyv4482[yyj4482]
				yyv4483.CodecDecodeSelf(d)
			}

		}
		if yyrt4482 {
			for ; yyj4482 < yyl4482; yyj4482++ {
				yyv4482 = append(yyv4482, KeyToPath{})
				yyh4482.ElemContainerState(yyj4482)
				if r.TryDecodeAsNil() {
					yyv4482[yyj4482] = KeyToPath{}
				} else {
					yyv4484 := &yyv4482[yyj4482]
					yyv4484.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4482 := 0
		for ; !r.CheckBreak(); yyj4482++ {

			if yyj4482 >= len(yyv4482) {
				yyv4482 = append(yyv4482, KeyToPath{}) // var yyz4482 KeyToPath
				yyc4482 = true
			}
			yyh4482.ElemContainerState(yyj4482)
			if yyj4482 < len(yyv4482) {
				if r.TryDecodeAsNil() {
					yyv4482[yyj4482] = KeyToPath{}
				} else {
					yyv4485 := &yyv4482[yyj4482]
					yyv4485.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4482 < len(yyv4482) {
			yyv4482 = yyv4482[:yyj4482]
			yyc4482 = true
		} else if yyj4482 == 0 && yyv4482 == nil {
			yyv4482 = []KeyToPath{}
			yyc4482 = true
		}
	}
	yyh4482.End()
	if yyc4482 {
		*v = yyv4482
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4486 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4487 := &yyv4486
		yy4487.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4488 := *v
	yyh4488, yyl4488 := z.DecSliceHelperStart()
	var yyc4488 bool
	if yyl4488 == 0 {
		if yyv4488 == nil {
			yyv4488 = []DownwardAPIVolumeFile{}
			yyc4488 = true
		} else if len(yyv4488) != 0 {
			yyv4488 = yyv4488[:0]
			yyc4488 = true
		}
	} else if yyl4488 > 0 {
		var yyrr4488, yyrl4488 int
		var yyrt4488 bool
		if yyl4488 > cap(yyv4488) {

			yyrg4488 := len(yyv4488) > 0
			yyv24488 := yyv4488
			yyrl4488, yyrt4488 = z.DecInferLen(yyl4488, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4488 {
				if yyrl4488 <= cap(yyv4488) {
					yyv4488 = yyv4488[:yyrl4488]
				} else {
					yyv4488 = make([]DownwardAPIVolumeFile, yyrl4488)
				}
			} else {
				yyv4488 = make([]DownwardAPIVolumeFile, yyrl4488)
			}
			yyc4488 = true
			yyrr4488 = len(yyv4488)
			if yyrg4488 {
				copy(yyv4488, yyv24488)
			}
		} else if yyl4488 != len(yyv4488) {
			yyv4488 = yyv4488[:yyl4488]
			yyc4488 = true
		}
		yyj4488 := 0
		for ; yyj4488 < yyrr4488; yyj4488++ {
			yyh4488.ElemContainerState(yyj4488)
			if r.TryDecodeAsNil() {
				yyv4488[yyj4488] = DownwardAPIVolumeFile{}
			} else {
				yyv4489 := &yyv4488[yyj4488]
				yyv4489.CodecDecodeSelf(d)
			}

		}
		if yyrt4488 {
			for ; yyj4488 < yyl4488; yyj4488++ {
				yyv4488 = append(yyv4488, DownwardAPIVolumeFile{})
				yyh4488.ElemContainerState(yyj4488)
				if r.TryDecodeAsNil() {
					yyv4488[yyj4488] = DownwardAPIVolumeFile{}
				} else {
					yyv4490 := &yyv4488[yyj4488]
					yyv4490.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4488 := 0
		for ; !r.CheckBreak(); yyj4488++ {

			if yyj4488 >= len(yyv4488) {
				yyv4488 = append(yyv4488, DownwardAPIVolumeFile{}) // var yyz4488 DownwardAPIVolumeFile
				yyc4488 = true
			}
			yyh4488.ElemContainerState(yyj4488)
			if yyj4488 < len(yyv4488) {
				if r.TryDecodeAsNil() {
					yyv4488[yyj4488] = DownwardAPIVolumeFile{}
				} else {
					yyv4491 := &yyv4488[yyj4488]
					yyv4491.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4488 < len(yyv4488) {
			yyv4488 = yyv4488[:yyj4488]
			yyc4488 = true
		} else if yyj4488 == 0 && yyv4488 == nil {
			yyv4488 = []DownwardAPIVolumeFile{}
			yyc4488 = true
		}
	}
	yyh4488.End()
	if yyc4488 {
		*v = yyv4488
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4492 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4493 := &yyv4492
		yy4493.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4494 := *v
	yyh4494, yyl4494 := z.DecSliceHelperStart()
	var yyc4494 bool
	if yyl4494 == 0 {
		if yyv4494 == nil {
			yyv4494 = []HTTPHeader{}
			yyc4494 = true
		} else if len(yyv4494) != 0 {
			yyv4494 = yyv4494[:0]
			yyc4494 = true
		}
	} else if yyl4494 > 0 {
		var yyrr4494, yyrl4494 int
		var yyrt4494 bool
		if yyl4494 > cap(yyv4494) {

			yyrg4494 := len(yyv4494) > 0
			yyv24494 := yyv4494
			yyrl4494, yyrt4494 = z.DecInferLen(yyl4494, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4494 {
				if yyrl4494 <= cap(yyv4494) {
					yyv4494 = yyv4494[:yyrl4494]
				} else {
					yyv4494 = make([]HTTPHeader, yyrl4494)
				}
			} else {
				yyv4494 = make([]HTTPHeader, yyrl4494)
			}
			yyc4494 = true
			yyrr4494 = len(yyv4494)
			if yyrg4494 {
				copy(yyv4494, yyv24494)
			}
		} else if yyl4494 != len(yyv4494) {
			yyv4494 = yyv4494[:yyl4494]
			yyc4494 = true
		}
		yyj4494 := 0
		for ; yyj4494 < yyrr4494; yyj4494++ {
			yyh4494.ElemContainerState(yyj4494)
			if r.TryDecodeAsNil() {
				yyv4494[yyj4494] = HTTPHeader{}
			} else {
				yyv4495 := &yyv4494[yyj4494]
				yyv4495.CodecDecodeSelf(d)
			}

		}
		if yyrt4494 {
			for ; yyj4494 < yyl4494; yyj4494++ {
				yyv4494 = append(yyv4494, HTTPHeader{})
				yyh4494.ElemContainerState(yyj4494)
				if r.TryDecodeAsNil() {
					yyv4494[yyj4494] = HTTPHeader{}
				} else {
					yyv4496 := &yyv4494[yyj4494]
					yyv4496.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4494 := 0
		for ; !r.CheckBreak(); yyj4494++ {

			if yyj4494 >= len(yyv4494) {
				yyv4494 = append(yyv4494, HTTPHeader{}) // var yyz4494 HTTPHeader
				yyc4494 = true
			}
			yyh4494.ElemContainerState(yyj4494)
			if yyj4494 < len(yyv4494) {
				if r.TryDecodeAsNil() {
					yyv4494[yyj4494] = HTTPHeader{}
				} else {
					yyv4497 := &yyv4494[yyj4494]
					yyv4497.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4494 < len(yyv4494) {
			yyv4494 = yyv4494[:yyj4494]
			yyc4494 = true
		} else if yyj4494 == 0 && yyv4494 == nil {
			yyv4494 = []HTTPHeader{}
			yyc4494 = true
		}
	}
	yyh4494.End()
	if yyc4494 {
		*v = yyv4494
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4498 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4498.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4499 := *v
	yyh4499, yyl4499 := z.DecSliceHelperStart()
	var yyc4499 bool
	if yyl4499 == 0 {
		if yyv4499 == nil {
			yyv4499 = []Capability{}
			yyc4499 = true
		} else if len(yyv4499) != 0 {
			yyv4499 = yyv4499[:0]
			yyc4499 = true
		}
	} else if yyl4499 > 0 {
		var yyrr4499, yyrl4499 int
		var yyrt4499 bool
		if yyl4499 > cap(yyv4499) {

			yyrl4499, yyrt4499 = z.DecInferLen(yyl4499, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4499 {
				if yyrl4499 <= cap(yyv4499) {
					yyv4499 = yyv4499[:yyrl4499]
				} else {
					yyv4499 = make([]Capability, yyrl4499)
				}
			} else {
				yyv4499 = make([]Capability, yyrl4499)
			}
			yyc4499 = true
			yyrr4499 = len(yyv4499)
		} else if yyl4499 != len(yyv4499) {
			yyv4499 = yyv4499[:yyl4499]
			yyc4499 = true
		}
		yyj4499 := 0
		for ; yyj4499 < yyrr4499; yyj4499++ {
			yyh4499.ElemContainerState(yyj4499)
			if r.TryDecodeAsNil() {
				yyv4499[yyj4499] = ""
			} else {
				yyv4499[yyj4499] = Capability(r.DecodeString())
			}

		}
		if yyrt4499 {
			for ; yyj4499 < yyl4499; yyj4499++ {
				yyv4499 = append(yyv4499, "")
				yyh4499.ElemContainerState(yyj4499)
				if r.TryDecodeAsNil() {
					yyv4499[yyj4499] = ""
				} else {
					yyv4499[yyj4499] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4499 := 0
		for ; !r.CheckBreak(); yyj4499++ {

			if yyj4499 >= len(yyv4499) {
				yyv4499 = append(yyv4499, "") // var yyz4499 Capability
				yyc4499 = true
			}
			yyh4499.ElemContainerState(yyj4499)
			if yyj4499 < len(yyv4499) {
				if r.TryDecodeAsNil() {
					yyv4499[yyj4499] = ""
				} else {
					yyv4499[yyj4499] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4499 < len(yyv4499) {
			yyv4499 = yyv4499[:yyj4499]
			yyc4499 = true
		} else if yyj4499 == 0 && yyv4499 == nil {
			yyv4499 = []Capability{}
			yyc4499 = true
		}
	}
	yyh4499.End()
	if yyc4499 {
		*v = yyv4499
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4503 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4504 := &yyv4503
		yy4504.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4505 := *v
	yyh4505, yyl4505 := z.DecSliceHelperStart()
	var yyc4505 bool
	if yyl4505 == 0 {
		if yyv4505 == nil {
			yyv4505 = []ContainerPort{}
			yyc4505 = true
		} else if len(yyv4505) != 0 {
			yyv4505 = yyv4505[:0]
			yyc4505 = true
		}
	} else if yyl4505 > 0 {
		var yyrr4505, yyrl4505 int
		var yyrt4505 bool
		if yyl4505 > cap(yyv4505) {

			yyrg4505 := len(yyv4505) > 0
			yyv24505 := yyv4505
			yyrl4505, yyrt4505 = z.DecInferLen(yyl4505, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4505 {
				if yyrl4505 <= cap(yyv4505) {
					yyv4505 = yyv4505[:yyrl4505]
				} else {
					yyv4505 = make([]ContainerPort, yyrl4505)
				}
			} else {
				yyv4505 = make([]ContainerPort, yyrl4505)
			}
			yyc4505 = true
			yyrr4505 = len(yyv4505)
			if yyrg4505 {
				copy(yyv4505, yyv24505)
			}
		} else if yyl4505 != len(yyv4505) {
			yyv4505 = yyv4505[:yyl4505]
			yyc4505 = true
		}
		yyj4505 := 0
		for ; yyj4505 < yyrr4505; yyj4505++ {
			yyh4505.ElemContainerState(yyj4505)
			if r.TryDecodeAsNil() {
				yyv4505[yyj4505] = ContainerPort{}
			} else {
				yyv4506 := &yyv4505[yyj4505]
				yyv4506.CodecDecodeSelf(d)
			}

		}
		if yyrt4505 {
			for ; yyj4505 < yyl4505; yyj4505++ {
				yyv4505 = append(yyv4505, ContainerPort{})
				yyh4505.ElemContainerState(yyj4505)
				if r.TryDecodeAsNil() {
					yyv4505[yyj4505] = ContainerPort{}
				} else {
					yyv4507 := &yyv4505[yyj4505]
					yyv4507.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4505 := 0
		for ; !r.CheckBreak(); yyj4505++ {

			if yyj4505 >= len(yyv4505) {
				yyv4505 = append(yyv4505, ContainerPort{}) // var yyz4505 ContainerPort
				yyc4505 = true
			}
			yyh4505.ElemContainerState(yyj4505)
			if yyj4505 < len(yyv4505) {
				if r.TryDecodeAsNil() {
					yyv4505[yyj4505] = ContainerPort{}
				} else {
					yyv4508 := &yyv4505[yyj4505]
					yyv4508.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4505 < len(yyv4505) {
			yyv4505 = yyv4505[:yyj4505]
			yyc4505 = true
		} else if yyj4505 == 0 && yyv4505 == nil {
			yyv4505 = []ContainerPort{}
			yyc4505 = true
		}
	}
	yyh4505.End()
	if yyc4505 {
		*v = yyv4505
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4509 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4510 := &yyv4509
		yy4510.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4511 := *v
	yyh4511, yyl4511 := z.DecSliceHelperStart()
	var yyc4511 bool
	if yyl4511 == 0 {
		if yyv4511 == nil {
			yyv4511 = []EnvVar{}
			yyc4511 = true
		} else if len(yyv4511) != 0 {
			yyv4511 = yyv4511[:0]
			yyc4511 = true
		}
	} else if yyl4511 > 0 {
		var yyrr4511, yyrl4511 int
		var yyrt4511 bool
		if yyl4511 > cap(yyv4511) {

			yyrg4511 := len(yyv4511) > 0
			yyv24511 := yyv4511
			yyrl4511, yyrt4511 = z.DecInferLen(yyl4511, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4511 {
				if yyrl4511 <= cap(yyv4511) {
					yyv4511 = yyv4511[:yyrl4511]
				} else {
					yyv4511 = make([]EnvVar, yyrl4511)
				}
			} else {
				yyv4511 = make([]EnvVar, yyrl4511)
			}
			yyc4511 = true
			yyrr4511 = len(yyv4511)
			if yyrg4511 {
				copy(yyv4511, yyv24511)
			}
		} else if yyl4511 != len(yyv4511) {
			yyv4511 = yyv4511[:yyl4511]
			yyc4511 = true
		}
		yyj4511 := 0
		for ; yyj4511 < yyrr4511; yyj4511++ {
			yyh4511.ElemContainerState(yyj4511)
			if r.TryDecodeAsNil() {
				yyv4511[yyj4511] = EnvVar{}
			} else {
				yyv4512 := &yyv4511[yyj4511]
				yyv4512.CodecDecodeSelf(d)
			}

		}
		if yyrt4511 {
			for ; yyj4511 < yyl4511; yyj4511++ {
				yyv4511 = append(yyv4511, EnvVar{})
				yyh4511.ElemContainerState(yyj4511)
				if r.TryDecodeAsNil() {
					yyv4511[yyj4511] = EnvVar{}
				} else {
					yyv4513 := &yyv4511[yyj4511]
					yyv4513.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4511 := 0
		for ; !r.CheckBreak(); yyj4511++ {

			if yyj4511 >= len(yyv4511) {
				yyv4511 = append(yyv4511, EnvVar{}) // var yyz4511 EnvVar
				yyc4511 = true
			}
			yyh4511.ElemContainerState(yyj4511)
			if yyj4511 < len(yyv4511) {
				if r.TryDecodeAsNil() {
					yyv4511[yyj4511] = EnvVar{}
				} else {
					yyv4514 := &yyv4511[yyj4511]
					yyv4514.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4511 < len(yyv4511) {
			yyv4511 = yyv4511[:yyj4511]
			yyc4511 = true
		} else if yyj4511 == 0 && yyv4511 == nil {
			yyv4511 = []EnvVar{}
			yyc4511 = true
		}
	}
	yyh4511.End()
	if yyc4511 {
		*v = yyv4511
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4515 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4516 := &yyv4515
		yy4516.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4517 := *v
	yyh4517, yyl4517 := z.DecSliceHelperStart()
	var yyc4517 bool
	if yyl4517 == 0 {
		if yyv4517 == nil {
			yyv4517 = []VolumeMount{}
			yyc4517 = true
		} else if len(yyv4517) != 0 {
			yyv4517 = yyv4517[:0]
			yyc4517 = true
		}
	} else if yyl4517 > 0 {
		var yyrr4517, yyrl4517 int
		var yyrt4517 bool
		if yyl4517 > cap(yyv4517) {

			yyrg4517 := len(yyv4517) > 0
			yyv24517 := yyv4517
			yyrl4517, yyrt4517 = z.DecInferLen(yyl4517, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4517 {
				if yyrl4517 <= cap(yyv4517) {
					yyv4517 = yyv4517[:yyrl4517]
				} else {
					yyv4517 = make([]VolumeMount, yyrl4517)
				}
			} else {
				yyv4517 = make([]VolumeMount, yyrl4517)
			}
			yyc4517 = true
			yyrr4517 = len(yyv4517)
			if yyrg4517 {
				copy(yyv4517, yyv24517)
			}
		} else if yyl4517 != len(yyv4517) {
			yyv4517 = yyv4517[:yyl4517]
			yyc4517 = true
		}
		yyj4517 := 0
		for ; yyj4517 < yyrr4517; yyj4517++ {
			yyh4517.ElemContainerState(yyj4517)
			if r.TryDecodeAsNil() {
				yyv4517[yyj4517] = VolumeMount{}
			} else {
				yyv4518 := &yyv4517[yyj4517]
				yyv4518.CodecDecodeSelf(d)
			}

		}
		if yyrt4517 {
			for ; yyj4517 < yyl4517; yyj4517++ {
				yyv4517 = append(yyv4517, VolumeMount{})
				yyh4517.ElemContainerState(yyj4517)
				if r.TryDecodeAsNil() {
					yyv4517[yyj4517] = VolumeMount{}
				} else {
					yyv4519 := &yyv4517[yyj4517]
					yyv4519.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4517 := 0
		for ; !r.CheckBreak(); yyj4517++ {

			if yyj4517 >= len(yyv4517) {
				yyv4517 = append(yyv4517, VolumeMount{}) // var yyz4517 VolumeMount
				yyc4517 = true
			}
			yyh4517.ElemContainerState(yyj4517)
			if yyj4517 < len(yyv4517) {
				if r.TryDecodeAsNil() {
					yyv4517[yyj4517] = VolumeMount{}
				} else {
					yyv4520 := &yyv4517[yyj4517]
					yyv4520.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4517 < len(yyv4517) {
			yyv4517 = yyv4517[:yyj4517]
			yyc4517 = true
		} else if yyj4517 == 0 && yyv4517 == nil {
			yyv4517 = []VolumeMount{}
			yyc4517 = true
		}
	}
	yyh4517.End()
	if yyc4517 {
		*v = yyv4517
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4521 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4522 := &yyv4521
		yy4522.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4523 := *v
	yyh4523, yyl4523 := z.DecSliceHelperStart()
	var yyc4523 bool
	if yyl4523 == 0 {
		if yyv4523 == nil {
			yyv4523 = []Pod{}
			yyc4523 = true
		} else if len(yyv4523) != 0 {
			yyv4523 = yyv4523[:0]
			yyc4523 = true
		}
	} else if yyl4523 > 0 {
		var yyrr4523, yyrl4523 int
		var yyrt4523 bool
		if yyl4523 > cap(yyv4523) {

			yyrg4523 := len(yyv4523) > 0
			yyv24523 := yyv4523
			yyrl4523, yyrt4523 = z.DecInferLen(yyl4523, z.DecBasicHandle().MaxInitLen, 640)
			if yyrt4523 {
				if yyrl4523 <= cap(yyv4523) {
					yyv4523 = yyv4523[:yyrl4523]
				} else {
					yyv4523 = make([]Pod, yyrl4523)
				}
			} else {
				yyv4523 = make([]Pod, yyrl4523)
			}
			yyc4523 = true
			yyrr4523 = len(yyv4523)
			if yyrg4523 {
				copy(yyv4523, yyv24523)
			}
		} else if yyl4523 != len(yyv4523) {
			yyv4523 = yyv4523[:yyl4523]
			yyc4523 = true
		}
		yyj4523 := 0
		for ; yyj4523 < yyrr4523; yyj4523++ {
			yyh4523.ElemContainerState(yyj4523)
			if r.TryDecodeAsNil() {
				yyv4523[yyj4523] = Pod{}
			} else {
				yyv4524 := &yyv4523[yyj4523]
				yyv4524.CodecDecodeSelf(d)
			}

		}
		if yyrt4523 {
			for ; yyj4523 < yyl4523; yyj4523++ {
				yyv4523 = append(yyv4523, Pod{})
				yyh4523.ElemContainerState(yyj4523)
				if r.TryDecodeAsNil() {
					yyv4523[yyj4523] = Pod{}
				} else {
					yyv4525 := &yyv4523[yyj4523]
					yyv4525.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4523 := 0
		for ; !r.CheckBreak(); yyj4523++ {

			if yyj4523 >= len(yyv4523) {
				yyv4523 = append(yyv4523, Pod{}) // var yyz4523 Pod
				yyc4523 = true
			}
			yyh4523.ElemContainerState(yyj4523)
			if yyj4523 < len(yyv4523) {
				if r.TryDecodeAsNil() {
					yyv4523[yyj4523] = Pod{}
				} else {
					yyv4526 := &yyv4523[yyj4523]
					yyv4526.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4523 < len(yyv4523) {
			yyv4523 = yyv4523[:yyj4523]
			yyc4523 = true
		} else if yyj4523 == 0 && yyv4523 == nil {
			yyv4523 = []Pod{}
			yyc4523 = true
		}
	}
	yyh4523.End()
	if yyc4523 {
		*v = yyv4523
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4527 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4528 := &yyv4527
		yy4528.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4529 := *v
	yyh4529, yyl4529 := z.DecSliceHelperStart()
	var yyc4529 bool
	if yyl4529 == 0 {
		if yyv4529 == nil {
			yyv4529 = []NodeSelectorTerm{}
			yyc4529 = true
		} else if len(yyv4529) != 0 {
			yyv4529 = yyv4529[:0]
			yyc4529 = true
		}
	} else if yyl4529 > 0 {
		var yyrr4529, yyrl4529 int
		var yyrt4529 bool
		if yyl4529 > cap(yyv4529) {

			yyrg4529 := len(yyv4529) > 0
			yyv24529 := yyv4529
			yyrl4529, yyrt4529 = z.DecInferLen(yyl4529, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4529 {
				if yyrl4529 <= cap(yyv4529) {
					yyv4529 = yyv4529[:yyrl4529]
				} else {
					yyv4529 = make([]NodeSelectorTerm, yyrl4529)
				}
			} else {
				yyv4529 = make([]NodeSelectorTerm, yyrl4529)
			}
			yyc4529 = true
			yyrr4529 = len(yyv4529)
			if yyrg4529 {
				copy(yyv4529, yyv24529)
			}
		} else if yyl4529 != len(yyv4529) {
			yyv4529 = yyv4529[:yyl4529]
			yyc4529 = true
		}
		yyj4529 := 0
		for ; yyj4529 < yyrr4529; yyj4529++ {
			yyh4529.ElemContainerState(yyj4529)
			if r.TryDecodeAsNil() {
				yyv4529[yyj4529] = NodeSelectorTerm{}
			} else {
				yyv4530 := &yyv4529[yyj4529]
				yyv4530.CodecDecodeSelf(d)
			}

		}
		if yyrt4529 {
			for ; yyj4529 < yyl4529; yyj4529++ {
				yyv4529 = append(yyv4529, NodeSelectorTerm{})
				yyh4529.ElemContainerState(yyj4529)
				if r.TryDecodeAsNil() {
					yyv4529[yyj4529] = NodeSelectorTerm{}
				} else {
					yyv4531 := &yyv4529[yyj4529]
					yyv4531.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4529 := 0
		for ; !r.CheckBreak(); yyj4529++ {

			if yyj4529 >= len(yyv4529) {
				yyv4529 = append(yyv4529, NodeSelectorTerm{}) // var yyz4529 NodeSelectorTerm
				yyc4529 = true
			}
			yyh4529.ElemContainerState(yyj4529)
			if yyj4529 < len(yyv4529) {
				if r.TryDecodeAsNil() {
					yyv4529[yyj4529] = NodeSelectorTerm{}
				} else {
					yyv4532 := &yyv4529[yyj4529]
					yyv4532.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4529 < len(yyv4529) {
			yyv4529 = yyv4529[:yyj4529]
			yyc4529 = true
		} else if yyj4529 == 0 && yyv4529 == nil {
			yyv4529 = []NodeSelectorTerm{}
			yyc4529 = true
		}
	}
	yyh4529.End()
	if yyc4529 {
		*v = yyv4529
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4533 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4534 := &yyv4533
		yy4534.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4535 := *v
	yyh4535, yyl4535 := z.DecSliceHelperStart()
	var yyc4535 bool
	if yyl4535 == 0 {
		if yyv4535 == nil {
			yyv4535 = []NodeSelectorRequirement{}
			yyc4535 = true
		} else if len(yyv4535) != 0 {
			yyv4535 = yyv4535[:0]
			yyc4535 = true
		}
	} else if yyl4535 > 0 {
		var yyrr4535, yyrl4535 int
		var yyrt4535 bool
		if yyl4535 > cap(yyv4535) {

			yyrg4535 := len(yyv4535) > 0
			yyv24535 := yyv4535
			yyrl4535, yyrt4535 = z.DecInferLen(yyl4535, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4535 {
				if yyrl4535 <= cap(yyv4535) {
					yyv4535 = yyv4535[:yyrl4535]
				} else {
					yyv4535 = make([]NodeSelectorRequirement, yyrl4535)
				}
			} else {
				yyv4535 = make([]NodeSelectorRequirement, yyrl4535)
			}
			yyc4535 = true
			yyrr4535 = len(yyv4535)
			if yyrg4535 {
				copy(yyv4535, yyv24535)
			}
		} else if yyl4535 != len(yyv4535) {
			yyv4535 = yyv4535[:yyl4535]
			yyc4535 = true
		}
		yyj4535 := 0
		for ; yyj4535 < yyrr4535; yyj4535++ {
			yyh4535.ElemContainerState(yyj4535)
			if r.TryDecodeAsNil() {
				yyv4535[yyj4535] = NodeSelectorRequirement{}
			} else {
				yyv4536 := &yyv4535[yyj4535]
				yyv4536.CodecDecodeSelf(d)
			}

		}
		if yyrt4535 {
			for ; yyj4535 < yyl4535; yyj4535++ {
				yyv4535 = append(yyv4535, NodeSelectorRequirement{})
				yyh4535.ElemContainerState(yyj4535)
				if r.TryDecodeAsNil() {
					yyv4535[yyj4535] = NodeSelectorRequirement{}
				} else {
					yyv4537 := &yyv4535[yyj4535]
					yyv4537.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4535 := 0
		for ; !r.CheckBreak(); yyj4535++ {

			if yyj4535 >= len(yyv4535) {
				yyv4535 = append(yyv4535, NodeSelectorRequirement{}) // var yyz4535 NodeSelectorRequirement
				yyc4535 = true
			}
			yyh4535.ElemContainerState(yyj4535)
			if yyj4535 < len(yyv4535) {
				if r.TryDecodeAsNil() {
					yyv4535[yyj4535] = NodeSelectorRequirement{}
				} else {
					yyv4538 := &yyv4535[yyj4535]
					yyv4538.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4535 < len(yyv4535) {
			yyv4535 = yyv4535[:yyj4535]
			yyc4535 = true
		} else if yyj4535 == 0 && yyv4535 == nil {
			yyv4535 = []NodeSelectorRequirement{}
			yyc4535 = true
		}
	}
	yyh4535.End()
	if yyc4535 {
		*v = yyv4535
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4539 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4540 := &yyv4539
		yy4540.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4541 := *v
	yyh4541, yyl4541 := z.DecSliceHelperStart()
	var yyc4541 bool
	if yyl4541 == 0 {
		if yyv4541 == nil {
			yyv4541 = []PodAffinityTerm{}
			yyc4541 = true
		} else if len(yyv4541) != 0 {
			yyv4541 = yyv4541[:0]
			yyc4541 = true
		}
	} else if yyl4541 > 0 {
		var yyrr4541, yyrl4541 int
		var yyrt4541 bool
		if yyl4541 > cap(yyv4541) {

			yyrg4541 := len(yyv4541) > 0
			yyv24541 := yyv4541
			yyrl4541, yyrt4541 = z.DecInferLen(yyl4541, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4541 {
				if yyrl4541 <= cap(yyv4541) {
					yyv4541 = yyv4541[:yyrl4541]
				} else {
					yyv4541 = make([]PodAffinityTerm, yyrl4541)
				}
			} else {
				yyv4541 = make([]PodAffinityTerm, yyrl4541)
			}
			yyc4541 = true
			yyrr4541 = len(yyv4541)
			if yyrg4541 {
				copy(yyv4541, yyv24541)
			}
		} else if yyl4541 != len(yyv4541) {
			yyv4541 = yyv4541[:yyl4541]
			yyc4541 = true
		}
		yyj4541 := 0
		for ; yyj4541 < yyrr4541; yyj4541++ {
			yyh4541.ElemContainerState(yyj4541)
			if r.TryDecodeAsNil() {
				yyv4541[yyj4541] = PodAffinityTerm{}
			} else {
				yyv4542 := &yyv4541[yyj4541]
				yyv4542.CodecDecodeSelf(d)
			}

		}
		if yyrt4541 {
			for ; yyj4541 < yyl4541; yyj4541++ {
				yyv4541 = append(yyv4541, PodAffinityTerm{})
				yyh4541.ElemContainerState(yyj4541)
				if r.TryDecodeAsNil() {
					yyv4541[yyj4541] = PodAffinityTerm{}
				} else {
					yyv4543 := &yyv4541[yyj4541]
					yyv4543.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4541 := 0
		for ; !r.CheckBreak(); yyj4541++ {

			if yyj4541 >= len(yyv4541) {
				yyv4541 = append(yyv4541, PodAffinityTerm{}) // var yyz4541 PodAffinityTerm
				yyc4541 = true
			}
			yyh4541.ElemContainerState(yyj4541)
			if yyj4541 < len(yyv4541) {
				if r.TryDecodeAsNil() {
					yyv4541[yyj4541] = PodAffinityTerm{}
				} else {
					yyv4544 := &yyv4541[yyj4541]
					yyv4544.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4541 < len(yyv4541) {
			yyv4541 = yyv4541[:yyj4541]
			yyc4541 = true
		} else if yyj4541 == 0 && yyv4541 == nil {
			yyv4541 = []PodAffinityTerm{}
			yyc4541 = true
		}
	}
	yyh4541.End()
	if yyc4541 {
		*v = yyv4541
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4545 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4546 := &yyv4545
		yy4546.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4547 := *v
	yyh4547, yyl4547 := z.DecSliceHelperStart()
	var yyc4547 bool
	if yyl4547 == 0 {
		if yyv4547 == nil {
			yyv4547 = []WeightedPodAffinityTerm{}
			yyc4547 = true
		} else if len(yyv4547) != 0 {
			yyv4547 = yyv4547[:0]
			yyc4547 = true
		}
	} else if yyl4547 > 0 {
		var yyrr4547, yyrl4547 int
		var yyrt4547 bool
		if yyl4547 > cap(yyv4547) {

			yyrg4547 := len(yyv4547) > 0
			yyv24547 := yyv4547
			yyrl4547, yyrt4547 = z.DecInferLen(yyl4547, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4547 {
				if yyrl4547 <= cap(yyv4547) {
					yyv4547 = yyv4547[:yyrl4547]
				} else {
					yyv4547 = make([]WeightedPodAffinityTerm, yyrl4547)
				}
			} else {
				yyv4547 = make([]WeightedPodAffinityTerm, yyrl4547)
			}
			yyc4547 = true
			yyrr4547 = len(yyv4547)
			if yyrg4547 {
				copy(yyv4547, yyv24547)
			}
		} else if yyl4547 != len(yyv4547) {
			yyv4547 = yyv4547[:yyl4547]
			yyc4547 = true
		}
		yyj4547 := 0
		for ; yyj4547 < yyrr4547; yyj4547++ {
			yyh4547.ElemContainerState(yyj4547)
			if r.TryDecodeAsNil() {
				yyv4547[yyj4547] = WeightedPodAffinityTerm{}
			} else {
				yyv4548 := &yyv4547[yyj4547]
				yyv4548.CodecDecodeSelf(d)
			}

		}
		if yyrt4547 {
			for ; yyj4547 < yyl4547; yyj4547++ {
				yyv4547 = append(yyv4547, WeightedPodAffinityTerm{})
				yyh4547.ElemContainerState(yyj4547)
				if r.TryDecodeAsNil() {
					yyv4547[yyj4547] = WeightedPodAffinityTerm{}
				} else {
					yyv4549 := &yyv4547[yyj4547]
					yyv4549.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4547 := 0
		for ; !r.CheckBreak(); yyj4547++ {

			if yyj4547 >= len(yyv4547) {
				yyv4547 = append(yyv4547, WeightedPodAffinityTerm{}) // var yyz4547 WeightedPodAffinityTerm
				yyc4547 = true
			}
			yyh4547.ElemContainerState(yyj4547)
			if yyj4547 < len(yyv4547) {
				if r.TryDecodeAsNil() {
					yyv4547[yyj4547] = WeightedPodAffinityTerm{}
				} else {
					yyv4550 := &yyv4547[yyj4547]
					yyv4550.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4547 < len(yyv4547) {
			yyv4547 = yyv4547[:yyj4547]
			yyc4547 = true
		} else if yyj4547 == 0 && yyv4547 == nil {
			yyv4547 = []WeightedPodAffinityTerm{}
			yyc4547 = true
		}
	}
	yyh4547.End()
	if yyc4547 {
		*v = yyv4547
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4551 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4552 := &yyv4551
		yy4552.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4553 := *v
	yyh4553, yyl4553 := z.DecSliceHelperStart()
	var yyc4553 bool
	if yyl4553 == 0 {
		if yyv4553 == nil {
			yyv4553 = []PreferredSchedulingTerm{}
			yyc4553 = true
		} else if len(yyv4553) != 0 {
			yyv4553 = yyv4553[:0]
			yyc4553 = true
		}
	} else if yyl4553 > 0 {
		var yyrr4553, yyrl4553 int
		var yyrt4553 bool
		if yyl4553 > cap(yyv4553) {

			yyrg4553 := len(yyv4553) > 0
			yyv24553 := yyv4553
			yyrl4553, yyrt4553 = z.DecInferLen(yyl4553, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4553 {
				if yyrl4553 <= cap(yyv4553) {
					yyv4553 = yyv4553[:yyrl4553]
				} else {
					yyv4553 = make([]PreferredSchedulingTerm, yyrl4553)
				}
			} else {
				yyv4553 = make([]PreferredSchedulingTerm, yyrl4553)
			}
			yyc4553 = true
			yyrr4553 = len(yyv4553)
			if yyrg4553 {
				copy(yyv4553, yyv24553)
			}
		} else if yyl4553 != len(yyv4553) {
			yyv4553 = yyv4553[:yyl4553]
			yyc4553 = true
		}
		yyj4553 := 0
		for ; yyj4553 < yyrr4553; yyj4553++ {
			yyh4553.ElemContainerState(yyj4553)
			if r.TryDecodeAsNil() {
				yyv4553[yyj4553] = PreferredSchedulingTerm{}
			} else {
				yyv4554 := &yyv4553[yyj4553]
				yyv4554.CodecDecodeSelf(d)
			}

		}
		if yyrt4553 {
			for ; yyj4553 < yyl4553; yyj4553++ {
				yyv4553 = append(yyv4553, PreferredSchedulingTerm{})
				yyh4553.ElemContainerState(yyj4553)
				if r.TryDecodeAsNil() {
					yyv4553[yyj4553] = PreferredSchedulingTerm{}
				} else {
					yyv4555 := &yyv4553[yyj4553]
					yyv4555.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4553 := 0
		for ; !r.CheckBreak(); yyj4553++ {

			if yyj4553 >= len(yyv4553) {
				yyv4553 = append(yyv4553, PreferredSchedulingTerm{}) // var yyz4553 PreferredSchedulingTerm
				yyc4553 = true
			}
			yyh4553.ElemContainerState(yyj4553)
			if yyj4553 < len(yyv4553) {
				if r.TryDecodeAsNil() {
					yyv4553[yyj4553] = PreferredSchedulingTerm{}
				} else {
					yyv4556 := &yyv4553[yyj4553]
					yyv4556.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4553 < len(yyv4553) {
			yyv4553 = yyv4553[:yyj4553]
			yyc4553 = true
		} else if yyj4553 == 0 && yyv4553 == nil {
			yyv4553 = []PreferredSchedulingTerm{}
			yyc4553 = true
		}
	}
	yyh4553.End()
	if yyc4553 {
		*v = yyv4553
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4557 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4558 := &yyv4557
		yy4558.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4559 := *v
	yyh4559, yyl4559 := z.DecSliceHelperStart()
	var yyc4559 bool
	if yyl4559 == 0 {
		if yyv4559 == nil {
			yyv4559 = []Volume{}
			yyc4559 = true
		} else if len(yyv4559) != 0 {
			yyv4559 = yyv4559[:0]
			yyc4559 = true
		}
	} else if yyl4559 > 0 {
		var yyrr4559, yyrl4559 int
		var yyrt4559 bool
		if yyl4559 > cap(yyv4559) {

			yyrg4559 := len(yyv4559) > 0
			yyv24559 := yyv4559
			yyrl4559, yyrt4559 = z.DecInferLen(yyl4559, z.DecBasicHandle().MaxInitLen, 184)
			if yyrt4559 {
				if yyrl4559 <= cap(yyv4559) {
					yyv4559 = yyv4559[:yyrl4559]
				} else {
					yyv4559 = make([]Volume, yyrl4559)
				}
			} else {
				yyv4559 = make([]Volume, yyrl4559)
			}
			yyc4559 = true
			yyrr4559 = len(yyv4559)
			if yyrg4559 {
				copy(yyv4559, yyv24559)
			}
		} else if yyl4559 != len(yyv4559) {
			yyv4559 = yyv4559[:yyl4559]
			yyc4559 = true
		}
		yyj4559 := 0
		for ; yyj4559 < yyrr4559; yyj4559++ {
			yyh4559.ElemContainerState(yyj4559)
			if r.TryDecodeAsNil() {
				yyv4559[yyj4559] = Volume{}
			} else {
				yyv4560 := &yyv4559[yyj4559]
				yyv4560.CodecDecodeSelf(d)
			}

		}
		if yyrt4559 {
			for ; yyj4559 < yyl4559; yyj4559++ {
				yyv4559 = append(yyv4559, Volume{})
				yyh4559.ElemContainerState(yyj4559)
				if r.TryDecodeAsNil() {
					yyv4559[yyj4559] = Volume{}
				} else {
					yyv4561 := &yyv4559[yyj4559]
					yyv4561.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4559 := 0
		for ; !r.CheckBreak(); yyj4559++ {

			if yyj4559 >= len(yyv4559) {
				yyv4559 = append(yyv4559, Volume{}) // var yyz4559 Volume
				yyc4559 = true
			}
			yyh4559.ElemContainerState(yyj4559)
			if yyj4559 < len(yyv4559) {
				if r.TryDecodeAsNil() {
					yyv4559[yyj4559] = Volume{}
				} else {
					yyv4562 := &yyv4559[yyj4559]
					yyv4562.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4559 < len(yyv4559) {
			yyv4559 = yyv4559[:yyj4559]
			yyc4559 = true
		} else if yyj4559 == 0 && yyv4559 == nil {
			yyv4559 = []Volume{}
			yyc4559 = true
		}
	}
	yyh4559.End()
	if yyc4559 {
		*v = yyv4559
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4563 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4564 := &yyv4563
		yy4564.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4565 := *v
	yyh4565, yyl4565 := z.DecSliceHelperStart()
	var yyc4565 bool
	if yyl4565 == 0 {
		if yyv4565 == nil {
			yyv4565 = []Container{}
			yyc4565 = true
		} else if len(yyv4565) != 0 {
			yyv4565 = yyv4565[:0]
			yyc4565 = true
		}
	} else if yyl4565 > 0 {
		var yyrr4565, yyrl4565 int
		var yyrt4565 bool
		if yyl4565 > cap(yyv4565) {

			yyrg4565 := len(yyv4565) > 0
			yyv24565 := yyv4565
			yyrl4565, yyrt4565 = z.DecInferLen(yyl4565, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4565 {
				if yyrl4565 <= cap(yyv4565) {
					yyv4565 = yyv4565[:yyrl4565]
				} else {
					yyv4565 = make([]Container, yyrl4565)
				}
			} else {
				yyv4565 = make([]Container, yyrl4565)
			}
			yyc4565 = true
			yyrr4565 = len(yyv4565)
			if yyrg4565 {
				copy(yyv4565, yyv24565)
			}
		} else if yyl4565 != len(yyv4565) {
			yyv4565 = yyv4565[:yyl4565]
			yyc4565 = true
		}
		yyj4565 := 0
		for ; yyj4565 < yyrr4565; yyj4565++ {
			yyh4565.ElemContainerState(yyj4565)
			if r.TryDecodeAsNil() {
				yyv4565[yyj4565] = Container{}
			} else {
				yyv4566 := &yyv4565[yyj4565]
				yyv4566.CodecDecodeSelf(d)
			}

		}
		if yyrt4565 {
			for ; yyj4565 < yyl4565; yyj4565++ {
				yyv4565 = append(yyv4565, Container{})
				yyh4565.ElemContainerState(yyj4565)
				if r.TryDecodeAsNil() {
					yyv4565[yyj4565] = Container{}
				} else {
					yyv4567 := &yyv4565[yyj4565]
					yyv4567.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4565 := 0
		for ; !r.CheckBreak(); yyj4565++ {

			if yyj4565 >= len(yyv4565) {
				yyv4565 = append(yyv4565, Container{}) // var yyz4565 Container
				yyc4565 = true
			}
			yyh4565.ElemContainerState(yyj4565)
			if yyj4565 < len(yyv4565) {
				if r.TryDecodeAsNil() {
					yyv4565[yyj4565] = Container{}
				} else {
					yyv4568 := &yyv4565[yyj4565]
					yyv4568.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4565 < len(yyv4565) {
			yyv4565 = yyv4565[:yyj4565]
			yyc4565 = true
		} else if yyj4565 == 0 && yyv4565 == nil {
			yyv4565 = []Container{}
			yyc4565 = true
		}
	}
	yyh4565.End()
	if yyc4565 {
		*v = yyv4565
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4569 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4570 := &yyv4569
		yy4570.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4571 := *v
	yyh4571, yyl4571 := z.DecSliceHelperStart()
	var yyc4571 bool
	if yyl4571 == 0 {
		if yyv4571 == nil {
			yyv4571 = []LocalObjectReference{}
			yyc4571 = true
		} else if len(yyv4571) != 0 {
			yyv4571 = yyv4571[:0]
			yyc4571 = true
		}
	} else if yyl4571 > 0 {
		var yyrr4571, yyrl4571 int
		var yyrt4571 bool
		if yyl4571 > cap(yyv4571) {

			yyrg4571 := len(yyv4571) > 0
			yyv24571 := yyv4571
			yyrl4571, yyrt4571 = z.DecInferLen(yyl4571, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4571 {
				if yyrl4571 <= cap(yyv4571) {
					yyv4571 = yyv4571[:yyrl4571]
				} else {
					yyv4571 = make([]LocalObjectReference, yyrl4571)
				}
			} else {
				yyv4571 = make([]LocalObjectReference, yyrl4571)
			}
			yyc4571 = true
			yyrr4571 = len(yyv4571)
			if yyrg4571 {
				copy(yyv4571, yyv24571)
			}
		} else if yyl4571 != len(yyv4571) {
			yyv4571 = yyv4571[:yyl4571]
			yyc4571 = true
		}
		yyj4571 := 0
		for ; yyj4571 < yyrr4571; yyj4571++ {
			yyh4571.ElemContainerState(yyj4571)
			if r.TryDecodeAsNil() {
				yyv4571[yyj4571] = LocalObjectReference{}
			} else {
				yyv4572 := &yyv4571[yyj4571]
				yyv4572.CodecDecodeSelf(d)
			}

		}
		if yyrt4571 {
			for ; yyj4571 < yyl4571; yyj4571++ {
				yyv4571 = append(yyv4571, LocalObjectReference{})
				yyh4571.ElemContainerState(yyj4571)
				if r.TryDecodeAsNil() {
					yyv4571[yyj4571] = LocalObjectReference{}
				} else {
					yyv4573 := &yyv4571[yyj4571]
					yyv4573.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4571 := 0
		for ; !r.CheckBreak(); yyj4571++ {

			if yyj4571 >= len(yyv4571) {
				yyv4571 = append(yyv4571, LocalObjectReference{}) // var yyz4571 LocalObjectReference
				yyc4571 = true
			}
			yyh4571.ElemContainerState(yyj4571)
			if yyj4571 < len(yyv4571) {
				if r.TryDecodeAsNil() {
					yyv4571[yyj4571] = LocalObjectReference{}
				} else {
					yyv4574 := &yyv4571[yyj4571]
					yyv4574.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4571 < len(yyv4571) {
			yyv4571 = yyv4571[:yyj4571]
			yyc4571 = true
		} else if yyj4571 == 0 && yyv4571 == nil {
			yyv4571 = []LocalObjectReference{}
			yyc4571 = true
		}
	}
	yyh4571.End()
	if yyc4571 {
		*v = yyv4571
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4575 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4576 := &yyv4575
		yy4576.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4577 := *v
	yyh4577, yyl4577 := z.DecSliceHelperStart()
	var yyc4577 bool
	if yyl4577 == 0 {
		if yyv4577 == nil {
			yyv4577 = []PodCondition{}
			yyc4577 = true
		} else if len(yyv4577) != 0 {
			yyv4577 = yyv4577[:0]
			yyc4577 = true
		}
	} else if yyl4577 > 0 {
		var yyrr4577, yyrl4577 int
		var yyrt4577 bool
		if yyl4577 > cap(yyv4577) {

			yyrg4577 := len(yyv4577) > 0
			yyv24577 := yyv4577
			yyrl4577, yyrt4577 = z.DecInferLen(yyl4577, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4577 {
				if yyrl4577 <= cap(yyv4577) {
					yyv4577 = yyv4577[:yyrl4577]
				} else {
					yyv4577 = make([]PodCondition, yyrl4577)
				}
			} else {
				yyv4577 = make([]PodCondition, yyrl4577)
			}
			yyc4577 = true
			yyrr4577 = len(yyv4577)
			if yyrg4577 {
				copy(yyv4577, yyv24577)
			}
		} else if yyl4577 != len(yyv4577) {
			yyv4577 = yyv4577[:yyl4577]
			yyc4577 = true
		}
		yyj4577 := 0
		for ; yyj4577 < yyrr4577; yyj4577++ {
			yyh4577.ElemContainerState(yyj4577)
			if r.TryDecodeAsNil() {
				yyv4577[yyj4577] = PodCondition{}
			} else {
				yyv4578 := &yyv4577[yyj4577]
				yyv4578.CodecDecodeSelf(d)
			}

		}
		if yyrt4577 {
			for ; yyj4577 < yyl4577; yyj4577++ {
				yyv4577 = append(yyv4577, PodCondition{})
				yyh4577.ElemContainerState(yyj4577)
				if r.TryDecodeAsNil() {
					yyv4577[yyj4577] = PodCondition{}
				} else {
					yyv4579 := &yyv4577[yyj4577]
					yyv4579.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4577 := 0
		for ; !r.CheckBreak(); yyj4577++ {

			if yyj4577 >= len(yyv4577) {
				yyv4577 = append(yyv4577, PodCondition{}) // var yyz4577 PodCondition
				yyc4577 = true
			}
			yyh4577.ElemContainerState(yyj4577)
			if yyj4577 < len(yyv4577) {
				if r.TryDecodeAsNil() {
					yyv4577[yyj4577] = PodCondition{}
				} else {
					yyv4580 := &yyv4577[yyj4577]
					yyv4580.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4577 < len(yyv4577) {
			yyv4577 = yyv4577[:yyj4577]
			yyc4577 = true
		} else if yyj4577 == 0 && yyv4577 == nil {
			yyv4577 = []PodCondition{}
			yyc4577 = true
		}
	}
	yyh4577.End()
	if yyc4577 {
		*v = yyv4577
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4581 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4582 := &yyv4581
		yy4582.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4583 := *v
	yyh4583, yyl4583 := z.DecSliceHelperStart()
	var yyc4583 bool
	if yyl4583 == 0 {
		if yyv4583 == nil {
			yyv4583 = []ContainerStatus{}
			yyc4583 = true
		} else if len(yyv4583) != 0 {
			yyv4583 = yyv4583[:0]
			yyc4583 = true
		}
	} else if yyl4583 > 0 {
		var yyrr4583, yyrl4583 int
		var yyrt4583 bool
		if yyl4583 > cap(yyv4583) {

			yyrg4583 := len(yyv4583) > 0
			yyv24583 := yyv4583
			yyrl4583, yyrt4583 = z.DecInferLen(yyl4583, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4583 {
				if yyrl4583 <= cap(yyv4583) {
					yyv4583 = yyv4583[:yyrl4583]
				} else {
					yyv4583 = make([]ContainerStatus, yyrl4583)
				}
			} else {
				yyv4583 = make([]ContainerStatus, yyrl4583)
			}
			yyc4583 = true
			yyrr4583 = len(yyv4583)
			if yyrg4583 {
				copy(yyv4583, yyv24583)
			}
		} else if yyl4583 != len(yyv4583) {
			yyv4583 = yyv4583[:yyl4583]
			yyc4583 = true
		}
		yyj4583 := 0
		for ; yyj4583 < yyrr4583; yyj4583++ {
			yyh4583.ElemContainerState(yyj4583)
			if r.TryDecodeAsNil() {
				yyv4583[yyj4583] = ContainerStatus{}
			} else {
				yyv4584 := &yyv4583[yyj4583]
				yyv4584.CodecDecodeSelf(d)
			}

		}
		if yyrt4583 {
			for ; yyj4583 < yyl4583; yyj4583++ {
				yyv4583 = append(yyv4583, ContainerStatus{})
				yyh4583.ElemContainerState(yyj4583)
				if r.TryDecodeAsNil() {
					yyv4583[yyj4583] = ContainerStatus{}
				} else {
					yyv4585 := &yyv4583[yyj4583]
					yyv4585.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4583 := 0
		for ; !r.CheckBreak(); yyj4583++ {

			if yyj4583 >= len(yyv4583) {
				yyv4583 = append(yyv4583, ContainerStatus{}) // var yyz4583 ContainerStatus
				yyc4583 = true
			}
			yyh4583.ElemContainerState(yyj4583)
			if yyj4583 < len(yyv4583) {
				if r.TryDecodeAsNil() {
					yyv4583[yyj4583] = ContainerStatus{}
				} else {
					yyv4586 := &yyv4583[yyj4583]
					yyv4586.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4583 < len(yyv4583) {
			yyv4583 = yyv4583[:yyj4583]
			yyc4583 = true
		} else if yyj4583 == 0 && yyv4583 == nil {
			yyv4583 = []ContainerStatus{}
			yyc4583 = true
		}
	}
	yyh4583.End()
	if yyc4583 {
		*v = yyv4583
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4587 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4588 := &yyv4587
		yy4588.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4589 := *v
	yyh4589, yyl4589 := z.DecSliceHelperStart()
	var yyc4589 bool
	if yyl4589 == 0 {
		if yyv4589 == nil {
			yyv4589 = []PodTemplate{}
			yyc4589 = true
		} else if len(yyv4589) != 0 {
			yyv4589 = yyv4589[:0]
			yyc4589 = true
		}
	} else if yyl4589 > 0 {
		var yyrr4589, yyrl4589 int
		var yyrt4589 bool
		if yyl4589 > cap(yyv4589) {

			yyrg4589 := len(yyv4589) > 0
			yyv24589 := yyv4589
			yyrl4589, yyrt4589 = z.DecInferLen(yyl4589, z.DecBasicHandle().MaxInitLen, 704)
			if yyrt4589 {
				if yyrl4589 <= cap(yyv4589) {
					yyv4589 = yyv4589[:yyrl4589]
				} else {
					yyv4589 = make([]PodTemplate, yyrl4589)
				}
			} else {
				yyv4589 = make([]PodTemplate, yyrl4589)
			}
			yyc4589 = true
			yyrr4589 = len(yyv4589)
			if yyrg4589 {
				copy(yyv4589, yyv24589)
			}
		} else if yyl4589 != len(yyv4589) {
			yyv4589 = yyv4589[:yyl4589]
			yyc4589 = true
		}
		yyj4589 := 0
		for ; yyj4589 < yyrr4589; yyj4589++ {
			yyh4589.ElemContainerState(yyj4589)
			if r.TryDecodeAsNil() {
				yyv4589[yyj4589] = PodTemplate{}
			} else {
				yyv4590 := &yyv4589[yyj4589]
				yyv4590.CodecDecodeSelf(d)
			}

		}
		if yyrt4589 {
			for ; yyj4589 < yyl4589; yyj4589++ {
				yyv4589 = append(yyv4589, PodTemplate{})
				yyh4589.ElemContainerState(yyj4589)
				if r.TryDecodeAsNil() {
					yyv4589[yyj4589] = PodTemplate{}
				} else {
					yyv4591 := &yyv4589[yyj4589]
					yyv4591.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4589 := 0
		for ; !r.CheckBreak(); yyj4589++ {

			if yyj4589 >= len(yyv4589) {
				yyv4589 = append(yyv4589, PodTemplate{}) // var yyz4589 PodTemplate
				yyc4589 = true
			}
			yyh4589.ElemContainerState(yyj4589)
			if yyj4589 < len(yyv4589) {
				if r.TryDecodeAsNil() {
					yyv4589[yyj4589] = PodTemplate{}
				} else {
					yyv4592 := &yyv4589[yyj4589]
					yyv4592.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4589 < len(yyv4589) {
			yyv4589 = yyv4589[:yyj4589]
			yyc4589 = true
		} else if yyj4589 == 0 && yyv4589 == nil {
			yyv4589 = []PodTemplate{}
			yyc4589 = true
		}
	}
	yyh4589.End()
	if yyc4589 {
		*v = yyv4589
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4593 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4594 := &yyv4593
		yy4594.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4595 := *v
	yyh4595, yyl4595 := z.DecSliceHelperStart()
	var yyc4595 bool
	if yyl4595 == 0 {
		if yyv4595 == nil {
			yyv4595 = []ReplicationController{}
			yyc4595 = true
		} else if len(yyv4595) != 0 {
			yyv4595 = yyv4595[:0]
			yyc4595 = true
		}
	} else if yyl4595 > 0 {
		var yyrr4595, yyrl4595 int
		var yyrt4595 bool
		if yyl4595 > cap(yyv4595) {

			yyrg4595 := len(yyv4595) > 0
			yyv24595 := yyv4595
			yyrl4595, yyrt4595 = z.DecInferLen(yyl4595, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4595 {
				if yyrl4595 <= cap(yyv4595) {
					yyv4595 = yyv4595[:yyrl4595]
				} else {
					yyv4595 = make([]ReplicationController, yyrl4595)
				}
			} else {
				yyv4595 = make([]ReplicationController, yyrl4595)
			}
			yyc4595 = true
			yyrr4595 = len(yyv4595)
			if yyrg4595 {
				copy(yyv4595, yyv24595)
			}
		} else if yyl4595 != len(yyv4595) {
			yyv4595 = yyv4595[:yyl4595]
			yyc4595 = true
		}
		yyj4595 := 0
		for ; yyj4595 < yyrr4595; yyj4595++ {
			yyh4595.ElemContainerState(yyj4595)
			if r.TryDecodeAsNil() {
				yyv4595[yyj4595] = ReplicationController{}
			} else {
				yyv4596 := &yyv4595[yyj4595]
				yyv4596.CodecDecodeSelf(d)
			}

		}
		if yyrt4595 {
			for ; yyj4595 < yyl4595; yyj4595++ {
				yyv4595 = append(yyv4595, ReplicationController{})
				yyh4595.ElemContainerState(yyj4595)
				if r.TryDecodeAsNil() {
					yyv4595[yyj4595] = ReplicationController{}
				} else {
					yyv4597 := &yyv4595[yyj4595]
					yyv4597.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4595 := 0
		for ; !r.CheckBreak(); yyj4595++ {

			if yyj4595 >= len(yyv4595) {
				yyv4595 = append(yyv4595, ReplicationController{}) // var yyz4595 ReplicationController
				yyc4595 = true
			}
			yyh4595.ElemContainerState(yyj4595)
			if yyj4595 < len(yyv4595) {
				if r.TryDecodeAsNil() {
					yyv4595[yyj4595] = ReplicationController{}
				} else {
					yyv4598 := &yyv4595[yyj4595]
					yyv4598.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4595 < len(yyv4595) {
			yyv4595 = yyv4595[:yyj4595]
			yyc4595 = true
		} else if yyj4595 == 0 && yyv4595 == nil {
			yyv4595 = []ReplicationController{}
			yyc4595 = true
		}
	}
	yyh4595.End()
	if yyc4595 {
		*v = yyv4595
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4599 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4600 := &yyv4599
		yy4600.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4601 := *v
	yyh4601, yyl4601 := z.DecSliceHelperStart()
	var yyc4601 bool
	if yyl4601 == 0 {
		if yyv4601 == nil {
			yyv4601 = []Service{}
			yyc4601 = true
		} else if len(yyv4601) != 0 {
			yyv4601 = yyv4601[:0]
			yyc4601 = true
		}
	} else if yyl4601 > 0 {
		var yyrr4601, yyrl4601 int
		var yyrt4601 bool
		if yyl4601 > cap(yyv4601) {

			yyrg4601 := len(yyv4601) > 0
			yyv24601 := yyv4601
			yyrl4601, yyrt4601 = z.DecInferLen(yyl4601, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt4601 {
				if yyrl4601 <= cap(yyv4601) {
					yyv4601 = yyv4601[:yyrl4601]
				} else {
					yyv4601 = make([]Service, yyrl4601)
				}
			} else {
				yyv4601 = make([]Service, yyrl4601)
			}
			yyc4601 = true
			yyrr4601 = len(yyv4601)
			if yyrg4601 {
				copy(yyv4601, yyv24601)
			}
		} else if yyl4601 != len(yyv4601) {
			yyv4601 = yyv4601[:yyl4601]
			yyc4601 = true
		}
		yyj4601 := 0
		for ; yyj4601 < yyrr4601; yyj4601++ {
			yyh4601.ElemContainerState(yyj4601)
			if r.TryDecodeAsNil() {
				yyv4601[yyj4601] = Service{}
			} else {
				yyv4602 := &yyv4601[yyj4601]
				yyv4602.CodecDecodeSelf(d)
			}

		}
		if yyrt4601 {
			for ; yyj4601 < yyl4601; yyj4601++ {
				yyv4601 = append(yyv4601, Service{})
				yyh4601.ElemContainerState(yyj4601)
				if r.TryDecodeAsNil() {
					yyv4601[yyj4601] = Service{}
				} else {
					yyv4603 := &yyv4601[yyj4601]
					yyv4603.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4601 := 0
		for ; !r.CheckBreak(); yyj4601++ {

			if yyj4601 >= len(yyv4601) {
				yyv4601 = append(yyv4601, Service{}) // var yyz4601 Service
				yyc4601 = true
			}
			yyh4601.ElemContainerState(yyj4601)
			if yyj4601 < len(yyv4601) {
				if r.TryDecodeAsNil() {
					yyv4601[yyj4601] = Service{}
				} else {
					yyv4604 := &yyv4601[yyj4601]
					yyv4604.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4601 < len(yyv4601) {
			yyv4601 = yyv4601[:yyj4601]
			yyc4601 = true
		} else if yyj4601 == 0 && yyv4601 == nil {
			yyv4601 = []Service{}
			yyc4601 = true
		}
	}
	yyh4601.End()
	if yyc4601 {
		*v = yyv4601
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4605 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4606 := &yyv4605
		yy4606.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4607 := *v
	yyh4607, yyl4607 := z.DecSliceHelperStart()
	var yyc4607 bool
	if yyl4607 == 0 {
		if yyv4607 == nil {
			yyv4607 = []LoadBalancerIngress{}
			yyc4607 = true
		} else if len(yyv4607) != 0 {
			yyv4607 = yyv4607[:0]
			yyc4607 = true
		}
	} else if yyl4607 > 0 {
		var yyrr4607, yyrl4607 int
		var yyrt4607 bool
		if yyl4607 > cap(yyv4607) {

			yyrg4607 := len(yyv4607) > 0
			yyv24607 := yyv4607
			yyrl4607, yyrt4607 = z.DecInferLen(yyl4607, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4607 {
				if yyrl4607 <= cap(yyv4607) {
					yyv4607 = yyv4607[:yyrl4607]
				} else {
					yyv4607 = make([]LoadBalancerIngress, yyrl4607)
				}
			} else {
				yyv4607 = make([]LoadBalancerIngress, yyrl4607)
			}
			yyc4607 = true
			yyrr4607 = len(yyv4607)
			if yyrg4607 {
				copy(yyv4607, yyv24607)
			}
		} else if yyl4607 != len(yyv4607) {
			yyv4607 = yyv4607[:yyl4607]
			yyc4607 = true
		}
		yyj4607 := 0
		for ; yyj4607 < yyrr4607; yyj4607++ {
			yyh4607.ElemContainerState(yyj4607)
			if r.TryDecodeAsNil() {
				yyv4607[yyj4607] = LoadBalancerIngress{}
			} else {
				yyv4608 := &yyv4607[yyj4607]
				yyv4608.CodecDecodeSelf(d)
			}

		}
		if yyrt4607 {
			for ; yyj4607 < yyl4607; yyj4607++ {
				yyv4607 = append(yyv4607, LoadBalancerIngress{})
				yyh4607.ElemContainerState(yyj4607)
				if r.TryDecodeAsNil() {
					yyv4607[yyj4607] = LoadBalancerIngress{}
				} else {
					yyv4609 := &yyv4607[yyj4607]
					yyv4609.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4607 := 0
		for ; !r.CheckBreak(); yyj4607++ {

			if yyj4607 >= len(yyv4607) {
				yyv4607 = append(yyv4607, LoadBalancerIngress{}) // var yyz4607 LoadBalancerIngress
				yyc4607 = true
			}
			yyh4607.ElemContainerState(yyj4607)
			if yyj4607 < len(yyv4607) {
				if r.TryDecodeAsNil() {
					yyv4607[yyj4607] = LoadBalancerIngress{}
				} else {
					yyv4610 := &yyv4607[yyj4607]
					yyv4610.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4607 < len(yyv4607) {
			yyv4607 = yyv4607[:yyj4607]
			yyc4607 = true
		} else if yyj4607 == 0 && yyv4607 == nil {
			yyv4607 = []LoadBalancerIngress{}
			yyc4607 = true
		}
	}
	yyh4607.End()
	if yyc4607 {
		*v = yyv4607
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4611 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4612 := &yyv4611
		yy4612.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4613 := *v
	yyh4613, yyl4613 := z.DecSliceHelperStart()
	var yyc4613 bool
	if yyl4613 == 0 {
		if yyv4613 == nil {
			yyv4613 = []ServicePort{}
			yyc4613 = true
		} else if len(yyv4613) != 0 {
			yyv4613 = yyv4613[:0]
			yyc4613 = true
		}
	} else if yyl4613 > 0 {
		var yyrr4613, yyrl4613 int
		var yyrt4613 bool
		if yyl4613 > cap(yyv4613) {

			yyrg4613 := len(yyv4613) > 0
			yyv24613 := yyv4613
			yyrl4613, yyrt4613 = z.DecInferLen(yyl4613, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4613 {
				if yyrl4613 <= cap(yyv4613) {
					yyv4613 = yyv4613[:yyrl4613]
				} else {
					yyv4613 = make([]ServicePort, yyrl4613)
				}
			} else {
				yyv4613 = make([]ServicePort, yyrl4613)
			}
			yyc4613 = true
			yyrr4613 = len(yyv4613)
			if yyrg4613 {
				copy(yyv4613, yyv24613)
			}
		} else if yyl4613 != len(yyv4613) {
			yyv4613 = yyv4613[:yyl4613]
			yyc4613 = true
		}
		yyj4613 := 0
		for ; yyj4613 < yyrr4613; yyj4613++ {
			yyh4613.ElemContainerState(yyj4613)
			if r.TryDecodeAsNil() {
				yyv4613[yyj4613] = ServicePort{}
			} else {
				yyv4614 := &yyv4613[yyj4613]
				yyv4614.CodecDecodeSelf(d)
			}

		}
		if yyrt4613 {
			for ; yyj4613 < yyl4613; yyj4613++ {
				yyv4613 = append(yyv4613, ServicePort{})
				yyh4613.ElemContainerState(yyj4613)
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = ServicePort{}
				} else {
					yyv4615 := &yyv4613[yyj4613]
					yyv4615.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4613 := 0
		for ; !r.CheckBreak(); yyj4613++ {

			if yyj4613 >= len(yyv4613) {
				yyv4613 = append(yyv4613, ServicePort{}) // var yyz4613 ServicePort
				yyc4613 = true
			}
			yyh4613.ElemContainerState(yyj4613)
			if yyj4613 < len(yyv4613) {
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = ServicePort{}
				} else {
					yyv4616 := &yyv4613[yyj4613]
					yyv4616.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4613 < len(yyv4613) {
			yyv4613 = yyv4613[:yyj4613]
			yyc4613 = true
		} else if yyj4613 == 0 && yyv4613 == nil {
			yyv4613 = []ServicePort{}
			yyc4613 = true
		}
	}
	yyh4613.End()
	if yyc4613 {
		*v = yyv4613
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4617 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4618 := &yyv4617
		yy4618.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4619 := *v
	yyh4619, yyl4619 := z.DecSliceHelperStart()
	var yyc4619 bool
	if yyl4619 == 0 {
		if yyv4619 == nil {
			yyv4619 = []ObjectReference{}
			yyc4619 = true
		} else if len(yyv4619) != 0 {
			yyv4619 = yyv4619[:0]
			yyc4619 = true
		}
	} else if yyl4619 > 0 {
		var yyrr4619, yyrl4619 int
		var yyrt4619 bool
		if yyl4619 > cap(yyv4619) {

			yyrg4619 := len(yyv4619) > 0
			yyv24619 := yyv4619
			yyrl4619, yyrt4619 = z.DecInferLen(yyl4619, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4619 {
				if yyrl4619 <= cap(yyv4619) {
					yyv4619 = yyv4619[:yyrl4619]
				} else {
					yyv4619 = make([]ObjectReference, yyrl4619)
				}
			} else {
				yyv4619 = make([]ObjectReference, yyrl4619)
			}
			yyc4619 = true
			yyrr4619 = len(yyv4619)
			if yyrg4619 {
				copy(yyv4619, yyv24619)
			}
		} else if yyl4619 != len(yyv4619) {
			yyv4619 = yyv4619[:yyl4619]
			yyc4619 = true
		}
		yyj4619 := 0
		for ; yyj4619 < yyrr4619; yyj4619++ {
			yyh4619.ElemContainerState(yyj4619)
			if r.TryDecodeAsNil() {
				yyv4619[yyj4619] = ObjectReference{}
			} else {
				yyv4620 := &yyv4619[yyj4619]
				yyv4620.CodecDecodeSelf(d)
			}

		}
		if yyrt4619 {
			for ; yyj4619 < yyl4619; yyj4619++ {
				yyv4619 = append(yyv4619, ObjectReference{})
				yyh4619.ElemContainerState(yyj4619)
				if r.TryDecodeAsNil() {
					yyv4619[yyj4619] = ObjectReference{}
				} else {
					yyv4621 := &yyv4619[yyj4619]
					yyv4621.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4619 := 0
		for ; !r.CheckBreak(); yyj4619++ {

			if yyj4619 >= len(yyv4619) {
				yyv4619 = append(yyv4619, ObjectReference{}) // var yyz4619 ObjectReference
				yyc4619 = true
			}
			yyh4619.ElemContainerState(yyj4619)
			if yyj4619 < len(yyv4619) {
				if r.TryDecodeAsNil() {
					yyv4619[yyj4619] = ObjectReference{}
				} else {
					yyv4622 := &yyv4619[yyj4619]
					yyv4622.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4619 < len(yyv4619) {
			yyv4619 = yyv4619[:yyj4619]
			yyc4619 = true
		} else if yyj4619 == 0 && yyv4619 == nil {
			yyv4619 = []ObjectReference{}
			yyc4619 = true
		}
	}
	yyh4619.End()
	if yyc4619 {
		*v = yyv4619
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4623 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4624 := &yyv4623
		yy4624.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4625 := *v
	yyh4625, yyl4625 := z.DecSliceHelperStart()
	var yyc4625 bool
	if yyl4625 == 0 {
		if yyv4625 == nil {
			yyv4625 = []ServiceAccount{}
			yyc4625 = true
		} else if len(yyv4625) != 0 {
			yyv4625 = yyv4625[:0]
			yyc4625 = true
		}
	} else if yyl4625 > 0 {
		var yyrr4625, yyrl4625 int
		var yyrt4625 bool
		if yyl4625 > cap(yyv4625) {

			yyrg4625 := len(yyv4625) > 0
			yyv24625 := yyv4625
			yyrl4625, yyrt4625 = z.DecInferLen(yyl4625, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4625 {
				if yyrl4625 <= cap(yyv4625) {
					yyv4625 = yyv4625[:yyrl4625]
				} else {
					yyv4625 = make([]ServiceAccount, yyrl4625)
				}
			} else {
				yyv4625 = make([]ServiceAccount, yyrl4625)
			}
			yyc4625 = true
			yyrr4625 = len(yyv4625)
			if yyrg4625 {
				copy(yyv4625, yyv24625)
			}
		} else if yyl4625 != len(yyv4625) {
			yyv4625 = yyv4625[:yyl4625]
			yyc4625 = true
		}
		yyj4625 := 0
		for ; yyj4625 < yyrr4625; yyj4625++ {
			yyh4625.ElemContainerState(yyj4625)
			if r.TryDecodeAsNil() {
				yyv4625[yyj4625] = ServiceAccount{}
			} else {
				yyv4626 := &yyv4625[yyj4625]
				yyv4626.CodecDecodeSelf(d)
			}

		}
		if yyrt4625 {
			for ; yyj4625 < yyl4625; yyj4625++ {
				yyv4625 = append(yyv4625, ServiceAccount{})
				yyh4625.ElemContainerState(yyj4625)
				if r.TryDecodeAsNil() {
					yyv4625[yyj4625] = ServiceAccount{}
				} else {
					yyv4627 := &yyv4625[yyj4625]
					yyv4627.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4625 := 0
		for ; !r.CheckBreak(); yyj4625++ {

			if yyj4625 >= len(yyv4625) {
				yyv4625 = append(yyv4625, ServiceAccount{}) // var yyz4625 ServiceAccount
				yyc4625 = true
			}
			yyh4625.ElemContainerState(yyj4625)
			if yyj4625 < len(yyv4625) {
				if r.TryDecodeAsNil() {
					yyv4625[yyj4625] = ServiceAccount{}
				} else {
					yyv4628 := &yyv4625[yyj4625]
					yyv4628.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4625 < len(yyv4625) {
			yyv4625 = yyv4625[:yyj4625]
			yyc4625 = true
		} else if yyj4625 == 0 && yyv4625 == nil {
			yyv4625 = []ServiceAccount{}
			yyc4625 = true
		}
	}
	yyh4625.End()
	if yyc4625 {
		*v = yyv4625
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4629 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4630 := &yyv4629
		yy4630.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4631 := *v
	yyh4631, yyl4631 := z.DecSliceHelperStart()
	var yyc4631 bool
	if yyl4631 == 0 {
		if yyv4631 == nil {
			yyv4631 = []EndpointSubset{}
			yyc4631 = true
		} else if len(yyv4631) != 0 {
			yyv4631 = yyv4631[:0]
			yyc4631 = true
		}
	} else if yyl4631 > 0 {
		var yyrr4631, yyrl4631 int
		var yyrt4631 bool
		if yyl4631 > cap(yyv4631) {

			yyrg4631 := len(yyv4631) > 0
			yyv24631 := yyv4631
			yyrl4631, yyrt4631 = z.DecInferLen(yyl4631, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4631 {
				if yyrl4631 <= cap(yyv4631) {
					yyv4631 = yyv4631[:yyrl4631]
				} else {
					yyv4631 = make([]EndpointSubset, yyrl4631)
				}
			} else {
				yyv4631 = make([]EndpointSubset, yyrl4631)
			}
			yyc4631 = true
			yyrr4631 = len(yyv4631)
			if yyrg4631 {
				copy(yyv4631, yyv24631)
			}
		} else if yyl4631 != len(yyv4631) {
			yyv4631 = yyv4631[:yyl4631]
			yyc4631 = true
		}
		yyj4631 := 0
		for ; yyj4631 < yyrr4631; yyj4631++ {
			yyh4631.ElemContainerState(yyj4631)
			if r.TryDecodeAsNil() {
				yyv4631[yyj4631] = EndpointSubset{}
			} else {
				yyv4632 := &yyv4631[yyj4631]
				yyv4632.CodecDecodeSelf(d)
			}

		}
		if yyrt4631 {
			for ; yyj4631 < yyl4631; yyj4631++ {
				yyv4631 = append(yyv4631, EndpointSubset{})
				yyh4631.ElemContainerState(yyj4631)
				if r.TryDecodeAsNil() {
					yyv4631[yyj4631] = EndpointSubset{}
				} else {
					yyv4633 := &yyv4631[yyj4631]
					yyv4633.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4631 := 0
		for ; !r.CheckBreak(); yyj4631++ {

			if yyj4631 >= len(yyv4631) {
				yyv4631 = append(yyv4631, EndpointSubset{}) // var yyz4631 EndpointSubset
				yyc4631 = true
			}
			yyh4631.ElemContainerState(yyj4631)
			if yyj4631 < len(yyv4631) {
				if r.TryDecodeAsNil() {
					yyv4631[yyj4631] = EndpointSubset{}
				} else {
					yyv4634 := &yyv4631[yyj4631]
					yyv4634.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4631 < len(yyv4631) {
			yyv4631 = yyv4631[:yyj4631]
			yyc4631 = true
		} else if yyj4631 == 0 && yyv4631 == nil {
			yyv4631 = []EndpointSubset{}
			yyc4631 = true
		}
	}
	yyh4631.End()
	if yyc4631 {
		*v = yyv4631
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4635 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4636 := &yyv4635
		yy4636.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4637 := *v
	yyh4637, yyl4637 := z.DecSliceHelperStart()
	var yyc4637 bool
	if yyl4637 == 0 {
		if yyv4637 == nil {
			yyv4637 = []EndpointAddress{}
			yyc4637 = true
		} else if len(yyv4637) != 0 {
			yyv4637 = yyv4637[:0]
			yyc4637 = true
		}
	} else if yyl4637 > 0 {
		var yyrr4637, yyrl4637 int
		var yyrt4637 bool
		if yyl4637 > cap(yyv4637) {

			yyrg4637 := len(yyv4637) > 0
			yyv24637 := yyv4637
			yyrl4637, yyrt4637 = z.DecInferLen(yyl4637, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4637 {
				if yyrl4637 <= cap(yyv4637) {
					yyv4637 = yyv4637[:yyrl4637]
				} else {
					yyv4637 = make([]EndpointAddress, yyrl4637)
				}
			} else {
				yyv4637 = make([]EndpointAddress, yyrl4637)
			}
			yyc4637 = true
			yyrr4637 = len(yyv4637)
			if yyrg4637 {
				copy(yyv4637, yyv24637)
			}
		} else if yyl4637 != len(yyv4637) {
			yyv4637 = yyv4637[:yyl4637]
			yyc4637 = true
		}
		yyj4637 := 0
		for ; yyj4637 < yyrr4637; yyj4637++ {
			yyh4637.ElemContainerState(yyj4637)
			if r.TryDecodeAsNil() {
				yyv4637[yyj4637] = EndpointAddress{}
			} else {
				yyv4638 := &yyv4637[yyj4637]
				yyv4638.CodecDecodeSelf(d)
			}

		}
		if yyrt4637 {
			for ; yyj4637 < yyl4637; yyj4637++ {
				yyv4637 = append(yyv4637, EndpointAddress{})
				yyh4637.ElemContainerState(yyj4637)
				if r.TryDecodeAsNil() {
					yyv4637[yyj4637] = EndpointAddress{}
				} else {
					yyv4639 := &yyv4637[yyj4637]
					yyv4639.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4637 := 0
		for ; !r.CheckBreak(); yyj4637++ {

			if yyj4637 >= len(yyv4637) {
				yyv4637 = append(yyv4637, EndpointAddress{}) // var yyz4637 EndpointAddress
				yyc4637 = true
			}
			yyh4637.ElemContainerState(yyj4637)
			if yyj4637 < len(yyv4637) {
				if r.TryDecodeAsNil() {
					yyv4637[yyj4637] = EndpointAddress{}
				} else {
					yyv4640 := &yyv4637[yyj4637]
					yyv4640.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4637 < len(yyv4637) {
			yyv4637 = yyv4637[:yyj4637]
			yyc4637 = true
		} else if yyj4637 == 0 && yyv4637 == nil {
			yyv4637 = []EndpointAddress{}
			yyc4637 = true
		}
	}
	yyh4637.End()
	if yyc4637 {
		*v = yyv4637
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4641 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4642 := &yyv4641
		yy4642.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4643 := *v
	yyh4643, yyl4643 := z.DecSliceHelperStart()
	var yyc4643 bool
	if yyl4643 == 0 {
		if yyv4643 == nil {
			yyv4643 = []EndpointPort{}
			yyc4643 = true
		} else if len(yyv4643) != 0 {
			yyv4643 = yyv4643[:0]
			yyc4643 = true
		}
	} else if yyl4643 > 0 {
		var yyrr4643, yyrl4643 int
		var yyrt4643 bool
		if yyl4643 > cap(yyv4643) {

			yyrg4643 := len(yyv4643) > 0
			yyv24643 := yyv4643
			yyrl4643, yyrt4643 = z.DecInferLen(yyl4643, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4643 {
				if yyrl4643 <= cap(yyv4643) {
					yyv4643 = yyv4643[:yyrl4643]
				} else {
					yyv4643 = make([]EndpointPort, yyrl4643)
				}
			} else {
				yyv4643 = make([]EndpointPort, yyrl4643)
			}
			yyc4643 = true
			yyrr4643 = len(yyv4643)
			if yyrg4643 {
				copy(yyv4643, yyv24643)
			}
		} else if yyl4643 != len(yyv4643) {
			yyv4643 = yyv4643[:yyl4643]
			yyc4643 = true
		}
		yyj4643 := 0
		for ; yyj4643 < yyrr4643; yyj4643++ {
			yyh4643.ElemContainerState(yyj4643)
			if r.TryDecodeAsNil() {
				yyv4643[yyj4643] = EndpointPort{}
			} else {
				yyv4644 := &yyv4643[yyj4643]
				yyv4644.CodecDecodeSelf(d)
			}

		}
		if yyrt4643 {
			for ; yyj4643 < yyl4643; yyj4643++ {
				yyv4643 = append(yyv4643, EndpointPort{})
				yyh4643.ElemContainerState(yyj4643)
				if r.TryDecodeAsNil() {
					yyv4643[yyj4643] = EndpointPort{}
				} else {
					yyv4645 := &yyv4643[yyj4643]
					yyv4645.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4643 := 0
		for ; !r.CheckBreak(); yyj4643++ {

			if yyj4643 >= len(yyv4643) {
				yyv4643 = append(yyv4643, EndpointPort{}) // var yyz4643 EndpointPort
				yyc4643 = true
			}
			yyh4643.ElemContainerState(yyj4643)
			if yyj4643 < len(yyv4643) {
				if r.TryDecodeAsNil() {
					yyv4643[yyj4643] = EndpointPort{}
				} else {
					yyv4646 := &yyv4643[yyj4643]
					yyv4646.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4643 < len(yyv4643) {
			yyv4643 = yyv4643[:yyj4643]
			yyc4643 = true
		} else if yyj4643 == 0 && yyv4643 == nil {
			yyv4643 = []EndpointPort{}
			yyc4643 = true
		}
	}
	yyh4643.End()
	if yyc4643 {
		*v = yyv4643
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4647 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4648 := &yyv4647
		yy4648.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4649 := *v
	yyh4649, yyl4649 := z.DecSliceHelperStart()
	var yyc4649 bool
	if yyl4649 == 0 {
		if yyv4649 == nil {
			yyv4649 = []Endpoints{}
			yyc4649 = true
		} else if len(yyv4649) != 0 {
			yyv4649 = yyv4649[:0]
			yyc4649 = true
		}
	} else if yyl4649 > 0 {
		var yyrr4649, yyrl4649 int
		var yyrt4649 bool
		if yyl4649 > cap(yyv4649) {

			yyrg4649 := len(yyv4649) > 0
			yyv24649 := yyv4649
			yyrl4649, yyrt4649 = z.DecInferLen(yyl4649, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4649 {
				if yyrl4649 <= cap(yyv4649) {
					yyv4649 = yyv4649[:yyrl4649]
				} else {
					yyv4649 = make([]Endpoints, yyrl4649)
				}
			} else {
				yyv4649 = make([]Endpoints, yyrl4649)
			}
			yyc4649 = true
			yyrr4649 = len(yyv4649)
			if yyrg4649 {
				copy(yyv4649, yyv24649)
			}
		} else if yyl4649 != len(yyv4649) {
			yyv4649 = yyv4649[:yyl4649]
			yyc4649 = true
		}
		yyj4649 := 0
		for ; yyj4649 < yyrr4649; yyj4649++ {
			yyh4649.ElemContainerState(yyj4649)
			if r.TryDecodeAsNil() {
				yyv4649[yyj4649] = Endpoints{}
			} else {
				yyv4650 := &yyv4649[yyj4649]
				yyv4650.CodecDecodeSelf(d)
			}

		}
		if yyrt4649 {
			for ; yyj4649 < yyl4649; yyj4649++ {
				yyv4649 = append(yyv4649, Endpoints{})
				yyh4649.ElemContainerState(yyj4649)
				if r.TryDecodeAsNil() {
					yyv4649[yyj4649] = Endpoints{}
				} else {
					yyv4651 := &yyv4649[yyj4649]
					yyv4651.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4649 := 0
		for ; !r.CheckBreak(); yyj4649++ {

			if yyj4649 >= len(yyv4649) {
				yyv4649 = append(yyv4649, Endpoints{}) // var yyz4649 Endpoints
				yyc4649 = true
			}
			yyh4649.ElemContainerState(yyj4649)
			if yyj4649 < len(yyv4649) {
				if r.TryDecodeAsNil() {
					yyv4649[yyj4649] = Endpoints{}
				} else {
					yyv4652 := &yyv4649[yyj4649]
					yyv4652.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4649 < len(yyv4649) {
			yyv4649 = yyv4649[:yyj4649]
			yyc4649 = true
		} else if yyj4649 == 0 && yyv4649 == nil {
			yyv4649 = []Endpoints{}
			yyc4649 = true
		}
	}
	yyh4649.End()
	if yyc4649 {
		*v = yyv4649
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4653 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4654 := &yyv4653
		yy4654.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4655 := *v
	yyh4655, yyl4655 := z.DecSliceHelperStart()
	var yyc4655 bool
	if yyl4655 == 0 {
		if yyv4655 == nil {
			yyv4655 = []NodeCondition{}
			yyc4655 = true
		} else if len(yyv4655) != 0 {
			yyv4655 = yyv4655[:0]
			yyc4655 = true
		}
	} else if yyl4655 > 0 {
		var yyrr4655, yyrl4655 int
		var yyrt4655 bool
		if yyl4655 > cap(yyv4655) {

			yyrg4655 := len(yyv4655) > 0
			yyv24655 := yyv4655
			yyrl4655, yyrt4655 = z.DecInferLen(yyl4655, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4655 {
				if yyrl4655 <= cap(yyv4655) {
					yyv4655 = yyv4655[:yyrl4655]
				} else {
					yyv4655 = make([]NodeCondition, yyrl4655)
				}
			} else {
				yyv4655 = make([]NodeCondition, yyrl4655)
			}
			yyc4655 = true
			yyrr4655 = len(yyv4655)
			if yyrg4655 {
				copy(yyv4655, yyv24655)
			}
		} else if yyl4655 != len(yyv4655) {
			yyv4655 = yyv4655[:yyl4655]
			yyc4655 = true
		}
		yyj4655 := 0
		for ; yyj4655 < yyrr4655; yyj4655++ {
			yyh4655.ElemContainerState(yyj4655)
			if r.TryDecodeAsNil() {
				yyv4655[yyj4655] = NodeCondition{}
			} else {
				yyv4656 := &yyv4655[yyj4655]
				yyv4656.CodecDecodeSelf(d)
			}

		}
		if yyrt4655 {
			for ; yyj4655 < yyl4655; yyj4655++ {
				yyv4655 = append(yyv4655, NodeCondition{})
				yyh4655.ElemContainerState(yyj4655)
				if r.TryDecodeAsNil() {
					yyv4655[yyj4655] = NodeCondition{}
				} else {
					yyv4657 := &yyv4655[yyj4655]
					yyv4657.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4655 := 0
		for ; !r.CheckBreak(); yyj4655++ {

			if yyj4655 >= len(yyv4655) {
				yyv4655 = append(yyv4655, NodeCondition{}) // var yyz4655 NodeCondition
				yyc4655 = true
			}
			yyh4655.ElemContainerState(yyj4655)
			if yyj4655 < len(yyv4655) {
				if r.TryDecodeAsNil() {
					yyv4655[yyj4655] = NodeCondition{}
				} else {
					yyv4658 := &yyv4655[yyj4655]
					yyv4658.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4655 < len(yyv4655) {
			yyv4655 = yyv4655[:yyj4655]
			yyc4655 = true
		} else if yyj4655 == 0 && yyv4655 == nil {
			yyv4655 = []NodeCondition{}
			yyc4655 = true
		}
	}
	yyh4655.End()
	if yyc4655 {
		*v = yyv4655
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4659 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4660 := &yyv4659
		yy4660.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4661 := *v
	yyh4661, yyl4661 := z.DecSliceHelperStart()
	var yyc4661 bool
	if yyl4661 == 0 {
		if yyv4661 == nil {
			yyv4661 = []NodeAddress{}
			yyc4661 = true
		} else if len(yyv4661) != 0 {
			yyv4661 = yyv4661[:0]
			yyc4661 = true
		}
	} else if yyl4661 > 0 {
		var yyrr4661, yyrl4661 int
		var yyrt4661 bool
		if yyl4661 > cap(yyv4661) {

			yyrg4661 := len(yyv4661) > 0
			yyv24661 := yyv4661
			yyrl4661, yyrt4661 = z.DecInferLen(yyl4661, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4661 {
				if yyrl4661 <= cap(yyv4661) {
					yyv4661 = yyv4661[:yyrl4661]
				} else {
					yyv4661 = make([]NodeAddress, yyrl4661)
				}
			} else {
				yyv4661 = make([]NodeAddress, yyrl4661)
			}
			yyc4661 = true
			yyrr4661 = len(yyv4661)
			if yyrg4661 {
				copy(yyv4661, yyv24661)
			}
		} else if yyl4661 != len(yyv4661) {
			yyv4661 = yyv4661[:yyl4661]
			yyc4661 = true
		}
		yyj4661 := 0
		for ; yyj4661 < yyrr4661; yyj4661++ {
			yyh4661.ElemContainerState(yyj4661)
			if r.TryDecodeAsNil() {
				yyv4661[yyj4661] = NodeAddress{}
			} else {
				yyv4662 := &yyv4661[yyj4661]
				yyv4662.CodecDecodeSelf(d)
			}

		}
		if yyrt4661 {
			for ; yyj4661 < yyl4661; yyj4661++ {
				yyv4661 = append(yyv4661, NodeAddress{})
				yyh4661.ElemContainerState(yyj4661)
				if r.TryDecodeAsNil() {
					yyv4661[yyj4661] = NodeAddress{}
				} else {
					yyv4663 := &yyv4661[yyj4661]
					yyv4663.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4661 := 0
		for ; !r.CheckBreak(); yyj4661++ {

			if yyj4661 >= len(yyv4661) {
				yyv4661 = append(yyv4661, NodeAddress{}) // var yyz4661 NodeAddress
				yyc4661 = true
			}
			yyh4661.ElemContainerState(yyj4661)
			if yyj4661 < len(yyv4661) {
				if r.TryDecodeAsNil() {
					yyv4661[yyj4661] = NodeAddress{}
				} else {
					yyv4664 := &yyv4661[yyj4661]
					yyv4664.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4661 < len(yyv4661) {
			yyv4661 = yyv4661[:yyj4661]
			yyc4661 = true
		} else if yyj4661 == 0 && yyv4661 == nil {
			yyv4661 = []NodeAddress{}
			yyc4661 = true
		}
	}
	yyh4661.End()
	if yyc4661 {
		*v = yyv4661
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4665 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4666 := &yyv4665
		yy4666.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4667 := *v
	yyh4667, yyl4667 := z.DecSliceHelperStart()
	var yyc4667 bool
	if yyl4667 == 0 {
		if yyv4667 == nil {
			yyv4667 = []ContainerImage{}
			yyc4667 = true
		} else if len(yyv4667) != 0 {
			yyv4667 = yyv4667[:0]
			yyc4667 = true
		}
	} else if yyl4667 > 0 {
		var yyrr4667, yyrl4667 int
		var yyrt4667 bool
		if yyl4667 > cap(yyv4667) {

			yyrg4667 := len(yyv4667) > 0
			yyv24667 := yyv4667
			yyrl4667, yyrt4667 = z.DecInferLen(yyl4667, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4667 {
				if yyrl4667 <= cap(yyv4667) {
					yyv4667 = yyv4667[:yyrl4667]
				} else {
					yyv4667 = make([]ContainerImage, yyrl4667)
				}
			} else {
				yyv4667 = make([]ContainerImage, yyrl4667)
			}
			yyc4667 = true
			yyrr4667 = len(yyv4667)
			if yyrg4667 {
				copy(yyv4667, yyv24667)
			}
		} else if yyl4667 != len(yyv4667) {
			yyv4667 = yyv4667[:yyl4667]
			yyc4667 = true
		}
		yyj4667 := 0
		for ; yyj4667 < yyrr4667; yyj4667++ {
			yyh4667.ElemContainerState(yyj4667)
			if r.TryDecodeAsNil() {
				yyv4667[yyj4667] = ContainerImage{}
			} else {
				yyv4668 := &yyv4667[yyj4667]
				yyv4668.CodecDecodeSelf(d)
			}

		}
		if yyrt4667 {
			for ; yyj4667 < yyl4667; yyj4667++ {
				yyv4667 = append(yyv4667, ContainerImage{})
				yyh4667.ElemContainerState(yyj4667)
				if r.TryDecodeAsNil() {
					yyv4667[yyj4667] = ContainerImage{}
				} else {
					yyv4669 := &yyv4667[yyj4667]
					yyv4669.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4667 := 0
		for ; !r.CheckBreak(); yyj4667++ {

			if yyj4667 >= len(yyv4667) {
				yyv4667 = append(yyv4667, ContainerImage{}) // var yyz4667 ContainerImage
				yyc4667 = true
			}
			yyh4667.ElemContainerState(yyj4667)
			if yyj4667 < len(yyv4667) {
				if r.TryDecodeAsNil() {
					yyv4667[yyj4667] = ContainerImage{}
				} else {
					yyv4670 := &yyv4667[yyj4667]
					yyv4670.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4667 < len(yyv4667) {
			yyv4667 = yyv4667[:yyj4667]
			yyc4667 = true
		} else if yyj4667 == 0 && yyv4667 == nil {
			yyv4667 = []ContainerImage{}
			yyc4667 = true
		}
	}
	yyh4667.End()
	if yyc4667 {
		*v = yyv4667
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4671 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4671.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4672 := *v
	yyh4672, yyl4672 := z.DecSliceHelperStart()
	var yyc4672 bool
	if yyl4672 == 0 {
		if yyv4672 == nil {
			yyv4672 = []UniqueVolumeName{}
			yyc4672 = true
		} else if len(yyv4672) != 0 {
			yyv4672 = yyv4672[:0]
			yyc4672 = true
		}
	} else if yyl4672 > 0 {
		var yyrr4672, yyrl4672 int
		var yyrt4672 bool
		if yyl4672 > cap(yyv4672) {

			yyrl4672, yyrt4672 = z.DecInferLen(yyl4672, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4672 {
				if yyrl4672 <= cap(yyv4672) {
					yyv4672 = yyv4672[:yyrl4672]
				} else {
					yyv4672 = make([]UniqueVolumeName, yyrl4672)
				}
			} else {
				yyv4672 = make([]UniqueVolumeName, yyrl4672)
			}
			yyc4672 = true
			yyrr4672 = len(yyv4672)
		} else if yyl4672 != len(yyv4672) {
			yyv4672 = yyv4672[:yyl4672]
			yyc4672 = true
		}
		yyj4672 := 0
		for ; yyj4672 < yyrr4672; yyj4672++ {
			yyh4672.ElemContainerState(yyj4672)
			if r.TryDecodeAsNil() {
				yyv4672[yyj4672] = ""
			} else {
				yyv4672[yyj4672] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4672 {
			for ; yyj4672 < yyl4672; yyj4672++ {
				yyv4672 = append(yyv4672, "")
				yyh4672.ElemContainerState(yyj4672)
				if r.TryDecodeAsNil() {
					yyv4672[yyj4672] = ""
				} else {
					yyv4672[yyj4672] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4672 := 0
		for ; !r.CheckBreak(); yyj4672++ {

			if yyj4672 >= len(yyv4672) {
				yyv4672 = append(yyv4672, "") // var yyz4672 UniqueVolumeName
				yyc4672 = true
			}
			yyh4672.ElemContainerState(yyj4672)
			if yyj4672 < len(yyv4672) {
				if r.TryDecodeAsNil() {
					yyv4672[yyj4672] = ""
				} else {
					yyv4672[yyj4672] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4672 < len(yyv4672) {
			yyv4672 = yyv4672[:yyj4672]
			yyc4672 = true
		} else if yyj4672 == 0 && yyv4672 == nil {
			yyv4672 = []UniqueVolumeName{}
			yyc4672 = true
		}
	}
	yyh4672.End()
	if yyc4672 {
		*v = yyv4672
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4676 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4677 := &yyv4676
		yy4677.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4678 := *v
	yyh4678, yyl4678 := z.DecSliceHelperStart()
	var yyc4678 bool
	if yyl4678 == 0 {
		if yyv4678 == nil {
			yyv4678 = []AttachedVolume{}
			yyc4678 = true
		} else if len(yyv4678) != 0 {
			yyv4678 = yyv4678[:0]
			yyc4678 = true
		}
	} else if yyl4678 > 0 {
		var yyrr4678, yyrl4678 int
		var yyrt4678 bool
		if yyl4678 > cap(yyv4678) {

			yyrg4678 := len(yyv4678) > 0
			yyv24678 := yyv4678
			yyrl4678, yyrt4678 = z.DecInferLen(yyl4678, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4678 {
				if yyrl4678 <= cap(yyv4678) {
					yyv4678 = yyv4678[:yyrl4678]
				} else {
					yyv4678 = make([]AttachedVolume, yyrl4678)
				}
			} else {
				yyv4678 = make([]AttachedVolume, yyrl4678)
			}
			yyc4678 = true
			yyrr4678 = len(yyv4678)
			if yyrg4678 {
				copy(yyv4678, yyv24678)
			}
		} else if yyl4678 != len(yyv4678) {
			yyv4678 = yyv4678[:yyl4678]
			yyc4678 = true
		}
		yyj4678 := 0
		for ; yyj4678 < yyrr4678; yyj4678++ {
			yyh4678.ElemContainerState(yyj4678)
			if r.TryDecodeAsNil() {
				yyv4678[yyj4678] = AttachedVolume{}
			} else {
				yyv4679 := &yyv4678[yyj4678]
				yyv4679.CodecDecodeSelf(d)
			}

		}
		if yyrt4678 {
			for ; yyj4678 < yyl4678; yyj4678++ {
				yyv4678 = append(yyv4678, AttachedVolume{})
				yyh4678.ElemContainerState(yyj4678)
				if r.TryDecodeAsNil() {
					yyv4678[yyj4678] = AttachedVolume{}
				} else {
					yyv4680 := &yyv4678[yyj4678]
					yyv4680.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4678 := 0
		for ; !r.CheckBreak(); yyj4678++ {

			if yyj4678 >= len(yyv4678) {
				yyv4678 = append(yyv4678, AttachedVolume{}) // var yyz4678 AttachedVolume
				yyc4678 = true
			}
			yyh4678.ElemContainerState(yyj4678)
			if yyj4678 < len(yyv4678) {
				if r.TryDecodeAsNil() {
					yyv4678[yyj4678] = AttachedVolume{}
				} else {
					yyv4681 := &yyv4678[yyj4678]
					yyv4681.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4678 < len(yyv4678) {
			yyv4678 = yyv4678[:yyj4678]
			yyc4678 = true
		} else if yyj4678 == 0 && yyv4678 == nil {
			yyv4678 = []AttachedVolume{}
			yyc4678 = true
		}
	}
	yyh4678.End()
	if yyc4678 {
		*v = yyv4678
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4682 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4683 := &yyv4682
		yy4683.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4684 := *v
	yyh4684, yyl4684 := z.DecSliceHelperStart()
	var yyc4684 bool
	if yyl4684 == 0 {
		if yyv4684 == nil {
			yyv4684 = []PreferAvoidPodsEntry{}
			yyc4684 = true
		} else if len(yyv4684) != 0 {
			yyv4684 = yyv4684[:0]
			yyc4684 = true
		}
	} else if yyl4684 > 0 {
		var yyrr4684, yyrl4684 int
		var yyrt4684 bool
		if yyl4684 > cap(yyv4684) {

			yyrg4684 := len(yyv4684) > 0
			yyv24684 := yyv4684
			yyrl4684, yyrt4684 = z.DecInferLen(yyl4684, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4684 {
				if yyrl4684 <= cap(yyv4684) {
					yyv4684 = yyv4684[:yyrl4684]
				} else {
					yyv4684 = make([]PreferAvoidPodsEntry, yyrl4684)
				}
			} else {
				yyv4684 = make([]PreferAvoidPodsEntry, yyrl4684)
			}
			yyc4684 = true
			yyrr4684 = len(yyv4684)
			if yyrg4684 {
				copy(yyv4684, yyv24684)
			}
		} else if yyl4684 != len(yyv4684) {
			yyv4684 = yyv4684[:yyl4684]
			yyc4684 = true
		}
		yyj4684 := 0
		for ; yyj4684 < yyrr4684; yyj4684++ {
			yyh4684.ElemContainerState(yyj4684)
			if r.TryDecodeAsNil() {
				yyv4684[yyj4684] = PreferAvoidPodsEntry{}
			} else {
				yyv4685 := &yyv4684[yyj4684]
				yyv4685.CodecDecodeSelf(d)
			}

		}
		if yyrt4684 {
			for ; yyj4684 < yyl4684; yyj4684++ {
				yyv4684 = append(yyv4684, PreferAvoidPodsEntry{})
				yyh4684.ElemContainerState(yyj4684)
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = PreferAvoidPodsEntry{}
				} else {
					yyv4686 := &yyv4684[yyj4684]
					yyv4686.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4684 := 0
		for ; !r.CheckBreak(); yyj4684++ {

			if yyj4684 >= len(yyv4684) {
				yyv4684 = append(yyv4684, PreferAvoidPodsEntry{}) // var yyz4684 PreferAvoidPodsEntry
				yyc4684 = true
			}
			yyh4684.ElemContainerState(yyj4684)
			if yyj4684 < len(yyv4684) {
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = PreferAvoidPodsEntry{}
				} else {
					yyv4687 := &yyv4684[yyj4684]
					yyv4687.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4684 < len(yyv4684) {
			yyv4684 = yyv4684[:yyj4684]
			yyc4684 = true
		} else if yyj4684 == 0 && yyv4684 == nil {
			yyv4684 = []PreferAvoidPodsEntry{}
			yyc4684 = true
		}
	}
	yyh4684.End()
	if yyc4684 {
		*v = yyv4684
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4688, yyv4688 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4688.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4689 := &yyv4688
		yym4690 := z.EncBinary()
		_ = yym4690
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4689) {
		} else if !yym4690 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4689)
		} else {
			z.EncFallback(yy4689)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4691 := *v
	yyl4691 := r.ReadMapStart()
	yybh4691 := z.DecBasicHandle()
	if yyv4691 == nil {
		yyrl4691, _ := z.DecInferLen(yyl4691, yybh4691.MaxInitLen, 72)
		yyv4691 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4691)
		*v = yyv4691
	}
	var yymk4691 ResourceName
	var yymv4691 pkg3_resource.Quantity
	var yymg4691 bool
	if yybh4691.MapValueReset {
		yymg4691 = true
	}
	if yyl4691 > 0 {
		for yyj4691 := 0; yyj4691 < yyl4691; yyj4691++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4691 = ""
			} else {
				yymk4691 = ResourceName(r.DecodeString())
			}

			if yymg4691 {
				yymv4691 = yyv4691[yymk4691]
			} else {
				yymv4691 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4691 = pkg3_resource.Quantity{}
			} else {
				yyv4693 := &yymv4691
				yym4694 := z.DecBinary()
				_ = yym4694
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4693) {
				} else if !yym4694 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4693)
				} else {
					z.DecFallback(yyv4693, false)
				}
			}

			if yyv4691 != nil {
				yyv4691[yymk4691] = yymv4691
			}
		}
	} else if yyl4691 < 0 {
		for yyj4691 := 0; !r.CheckBreak(); yyj4691++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4691 = ""
			} else {
				yymk4691 = ResourceName(r.DecodeString())
			}

			if yymg4691 {
				yymv4691 = yyv4691[yymk4691]
			} else {
				yymv4691 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4691 = pkg3_resource.Quantity{}
			} else {
				yyv4696 := &yymv4691
				yym4697 := z.DecBinary()
				_ = yym4697
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4696) {
				} else if !yym4697 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4696)
				} else {
					z.DecFallback(yyv4696, false)
				}
			}

			if yyv4691 != nil {
				yyv4691[yymk4691] = yymv4691
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4698 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4699 := &yyv4698
		yy4699.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4700 := *v
	yyh4700, yyl4700 := z.DecSliceHelperStart()
	var yyc4700 bool
	if yyl4700 == 0 {
		if yyv4700 == nil {
			yyv4700 = []Node{}
			yyc4700 = true
		} else if len(yyv4700) != 0 {
			yyv4700 = yyv4700[:0]
			yyc4700 = true
		}
	} else if yyl4700 > 0 {
		var yyrr4700, yyrl4700 int
		var yyrt4700 bool
		if yyl4700 > cap(yyv4700) {

			yyrg4700 := len(yyv4700) > 0
			yyv24700 := yyv4700
			yyrl4700, yyrt4700 = z.DecInferLen(yyl4700, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4700 {
				if yyrl4700 <= cap(yyv4700) {
					yyv4700 = yyv4700[:yyrl4700]
				} else {
					yyv4700 = make([]Node, yyrl4700)
				}
			} else {
				yyv4700 = make([]Node, yyrl4700)
			}
			yyc4700 = true
			yyrr4700 = len(yyv4700)
			if yyrg4700 {
				copy(yyv4700, yyv24700)
			}
		} else if yyl4700 != len(yyv4700) {
			yyv4700 = yyv4700[:yyl4700]
			yyc4700 = true
		}
		yyj4700 := 0
		for ; yyj4700 < yyrr4700; yyj4700++ {
			yyh4700.ElemContainerState(yyj4700)
			if r.TryDecodeAsNil() {
				yyv4700[yyj4700] = Node{}
			} else {
				yyv4701 := &yyv4700[yyj4700]
				yyv4701.CodecDecodeSelf(d)
			}

		}
		if yyrt4700 {
			for ; yyj4700 < yyl4700; yyj4700++ {
				yyv4700 = append(yyv4700, Node{})
				yyh4700.ElemContainerState(yyj4700)
				if r.TryDecodeAsNil() {
					yyv4700[yyj4700] = Node{}
				} else {
					yyv4702 := &yyv4700[yyj4700]
					yyv4702.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4700 := 0
		for ; !r.CheckBreak(); yyj4700++ {

			if yyj4700 >= len(yyv4700) {
				yyv4700 = append(yyv4700, Node{}) // var yyz4700 Node
				yyc4700 = true
			}
			yyh4700.ElemContainerState(yyj4700)
			if yyj4700 < len(yyv4700) {
				if r.TryDecodeAsNil() {
					yyv4700[yyj4700] = Node{}
				} else {
					yyv4703 := &yyv4700[yyj4700]
					yyv4703.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4700 < len(yyv4700) {
			yyv4700 = yyv4700[:yyj4700]
			yyc4700 = true
		} else if yyj4700 == 0 && yyv4700 == nil {
			yyv4700 = []Node{}
			yyc4700 = true
		}
	}
	yyh4700.End()
	if yyc4700 {
		*v = yyv4700
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4704 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4704.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4705 := *v
	yyh4705, yyl4705 := z.DecSliceHelperStart()
	var yyc4705 bool
	if yyl4705 == 0 {
		if yyv4705 == nil {
			yyv4705 = []FinalizerName{}
			yyc4705 = true
		} else if len(yyv4705) != 0 {
			yyv4705 = yyv4705[:0]
			yyc4705 = true
		}
	} else if yyl4705 > 0 {
		var yyrr4705, yyrl4705 int
		var yyrt4705 bool
		if yyl4705 > cap(yyv4705) {

			yyrl4705, yyrt4705 = z.DecInferLen(yyl4705, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4705 {
				if yyrl4705 <= cap(yyv4705) {
					yyv4705 = yyv4705[:yyrl4705]
				} else {
					yyv4705 = make([]FinalizerName, yyrl4705)
				}
			} else {
				yyv4705 = make([]FinalizerName, yyrl4705)
			}
			yyc4705 = true
			yyrr4705 = len(yyv4705)
		} else if yyl4705 != len(yyv4705) {
			yyv4705 = yyv4705[:yyl4705]
			yyc4705 = true
		}
		yyj4705 := 0
		for ; yyj4705 < yyrr4705; yyj4705++ {
			yyh4705.ElemContainerState(yyj4705)
			if r.TryDecodeAsNil() {
				yyv4705[yyj4705] = ""
			} else {
				yyv4705[yyj4705] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4705 {
			for ; yyj4705 < yyl4705; yyj4705++ {
				yyv4705 = append(yyv4705, "")
				yyh4705.ElemContainerState(yyj4705)
				if r.TryDecodeAsNil() {
					yyv4705[yyj4705] = ""
				} else {
					yyv4705[yyj4705] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4705 := 0
		for ; !r.CheckBreak(); yyj4705++ {

			if yyj4705 >= len(yyv4705) {
				yyv4705 = append(yyv4705, "") // var yyz4705 FinalizerName
				yyc4705 = true
			}
			yyh4705.ElemContainerState(yyj4705)
			if yyj4705 < len(yyv4705) {
				if r.TryDecodeAsNil() {
					yyv4705[yyj4705] = ""
				} else {
					yyv4705[yyj4705] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4705 < len(yyv4705) {
			yyv4705 = yyv4705[:yyj4705]
			yyc4705 = true
		} else if yyj4705 == 0 && yyv4705 == nil {
			yyv4705 = []FinalizerName{}
			yyc4705 = true
		}
	}
	yyh4705.End()
	if yyc4705 {
		*v = yyv4705
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4709 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4710 := &yyv4709
		yy4710.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4711 := *v
	yyh4711, yyl4711 := z.DecSliceHelperStart()
	var yyc4711 bool
	if yyl4711 == 0 {
		if yyv4711 == nil {
			yyv4711 = []Namespace{}
			yyc4711 = true
		} else if len(yyv4711) != 0 {
			yyv4711 = yyv4711[:0]
			yyc4711 = true
		}
	} else if yyl4711 > 0 {
		var yyrr4711, yyrl4711 int
		var yyrt4711 bool
		if yyl4711 > cap(yyv4711) {

			yyrg4711 := len(yyv4711) > 0
			yyv24711 := yyv4711
			yyrl4711, yyrt4711 = z.DecInferLen(yyl4711, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4711 {
				if yyrl4711 <= cap(yyv4711) {
					yyv4711 = yyv4711[:yyrl4711]
				} else {
					yyv4711 = make([]Namespace, yyrl4711)
				}
			} else {
				yyv4711 = make([]Namespace, yyrl4711)
			}
			yyc4711 = true
			yyrr4711 = len(yyv4711)
			if yyrg4711 {
				copy(yyv4711, yyv24711)
			}
		} else if yyl4711 != len(yyv4711) {
			yyv4711 = yyv4711[:yyl4711]
			yyc4711 = true
		}
		yyj4711 := 0
		for ; yyj4711 < yyrr4711; yyj4711++ {
			yyh4711.ElemContainerState(yyj4711)
			if r.TryDecodeAsNil() {
				yyv4711[yyj4711] = Namespace{}
			} else {
				yyv4712 := &yyv4711[yyj4711]
				yyv4712.CodecDecodeSelf(d)
			}

		}
		if yyrt4711 {
			for ; yyj4711 < yyl4711; yyj4711++ {
				yyv4711 = append(yyv4711, Namespace{})
				yyh4711.ElemContainerState(yyj4711)
				if r.TryDecodeAsNil() {
					yyv4711[yyj4711] = Namespace{}
				} else {
					yyv4713 := &yyv4711[yyj4711]
					yyv4713.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4711 := 0
		for ; !r.CheckBreak(); yyj4711++ {

			if yyj4711 >= len(yyv4711) {
				yyv4711 = append(yyv4711, Namespace{}) // var yyz4711 Namespace
				yyc4711 = true
			}
			yyh4711.ElemContainerState(yyj4711)
			if yyj4711 < len(yyv4711) {
				if r.TryDecodeAsNil() {
					yyv4711[yyj4711] = Namespace{}
				} else {
					yyv4714 := &yyv4711[yyj4711]
					yyv4714.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4711 < len(yyv4711) {
			yyv4711 = yyv4711[:yyj4711]
			yyc4711 = true
		} else if yyj4711 == 0 && yyv4711 == nil {
			yyv4711 = []Namespace{}
			yyc4711 = true
		}
	}
	yyh4711.End()
	if yyc4711 {
		*v = yyv4711
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4715 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4716 := &yyv4715
		yy4716.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4717 := *v
	yyh4717, yyl4717 := z.DecSliceHelperStart()
	var yyc4717 bool
	if yyl4717 == 0 {
		if yyv4717 == nil {
			yyv4717 = []Event{}
			yyc4717 = true
		} else if len(yyv4717) != 0 {
			yyv4717 = yyv4717[:0]
			yyc4717 = true
		}
	} else if yyl4717 > 0 {
		var yyrr4717, yyrl4717 int
		var yyrt4717 bool
		if yyl4717 > cap(yyv4717) {

			yyrg4717 := len(yyv4717) > 0
			yyv24717 := yyv4717
			yyrl4717, yyrt4717 = z.DecInferLen(yyl4717, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4717 {
				if yyrl4717 <= cap(yyv4717) {
					yyv4717 = yyv4717[:yyrl4717]
				} else {
					yyv4717 = make([]Event, yyrl4717)
				}
			} else {
				yyv4717 = make([]Event, yyrl4717)
			}
			yyc4717 = true
			yyrr4717 = len(yyv4717)
			if yyrg4717 {
				copy(yyv4717, yyv24717)
			}
		} else if yyl4717 != len(yyv4717) {
			yyv4717 = yyv4717[:yyl4717]
			yyc4717 = true
		}
		yyj4717 := 0
		for ; yyj4717 < yyrr4717; yyj4717++ {
			yyh4717.ElemContainerState(yyj4717)
			if r.TryDecodeAsNil() {
				yyv4717[yyj4717] = Event{}
			} else {
				yyv4718 := &yyv4717[yyj4717]
				yyv4718.CodecDecodeSelf(d)
			}

		}
		if yyrt4717 {
			for ; yyj4717 < yyl4717; yyj4717++ {
				yyv4717 = append(yyv4717, Event{})
				yyh4717.ElemContainerState(yyj4717)
				if r.TryDecodeAsNil() {
					yyv4717[yyj4717] = Event{}
				} else {
					yyv4719 := &yyv4717[yyj4717]
					yyv4719.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4717 := 0
		for ; !r.CheckBreak(); yyj4717++ {

			if yyj4717 >= len(yyv4717) {
				yyv4717 = append(yyv4717, Event{}) // var yyz4717 Event
				yyc4717 = true
			}
			yyh4717.ElemContainerState(yyj4717)
			if yyj4717 < len(yyv4717) {
				if r.TryDecodeAsNil() {
					yyv4717[yyj4717] = Event{}
				} else {
					yyv4720 := &yyv4717[yyj4717]
					yyv4720.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4717 < len(yyv4717) {
			yyv4717 = yyv4717[:yyj4717]
			yyc4717 = true
		} else if yyj4717 == 0 && yyv4717 == nil {
			yyv4717 = []Event{}
			yyc4717 = true
		}
	}
	yyh4717.End()
	if yyc4717 {
		*v = yyv4717
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4721 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4721 == nil {
			r.EncodeNil()
		} else {
			yym4722 := z.EncBinary()
			_ = yym4722
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4721) {
			} else {
				z.EncFallback(yyv4721)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4723 := *v
	yyh4723, yyl4723 := z.DecSliceHelperStart()
	var yyc4723 bool
	if yyl4723 == 0 {
		if yyv4723 == nil {
			yyv4723 = []pkg7_runtime.Object{}
			yyc4723 = true
		} else if len(yyv4723) != 0 {
			yyv4723 = yyv4723[:0]
			yyc4723 = true
		}
	} else if yyl4723 > 0 {
		var yyrr4723, yyrl4723 int
		var yyrt4723 bool
		if yyl4723 > cap(yyv4723) {

			yyrg4723 := len(yyv4723) > 0
			yyv24723 := yyv4723
			yyrl4723, yyrt4723 = z.DecInferLen(yyl4723, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4723 {
				if yyrl4723 <= cap(yyv4723) {
					yyv4723 = yyv4723[:yyrl4723]
				} else {
					yyv4723 = make([]pkg7_runtime.Object, yyrl4723)
				}
			} else {
				yyv4723 = make([]pkg7_runtime.Object, yyrl4723)
			}
			yyc4723 = true
			yyrr4723 = len(yyv4723)
			if yyrg4723 {
				copy(yyv4723, yyv24723)
			}
		} else if yyl4723 != len(yyv4723) {
			yyv4723 = yyv4723[:yyl4723]
			yyc4723 = true
		}
		yyj4723 := 0
		for ; yyj4723 < yyrr4723; yyj4723++ {
			yyh4723.ElemContainerState(yyj4723)
			if r.TryDecodeAsNil() {
				yyv4723[yyj4723] = nil
			} else {
				yyv4724 := &yyv4723[yyj4723]
				yym4725 := z.DecBinary()
				_ = yym4725
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4724) {
				} else {
					z.DecFallback(yyv4724, true)
				}
			}

		}
		if yyrt4723 {
			for ; yyj4723 < yyl4723; yyj4723++ {
				yyv4723 = append(yyv4723, nil)
				yyh4723.ElemContainerState(yyj4723)
				if r.TryDecodeAsNil() {
					yyv4723[yyj4723] = nil
				} else {
					yyv4726 := &yyv4723[yyj4723]
					yym4727 := z.DecBinary()
					_ = yym4727
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4726) {
					} else {
						z.DecFallback(yyv4726, true)
					}
				}

			}
		}

	} else {
		yyj4723 := 0
		for ; !r.CheckBreak(); yyj4723++ {

			if yyj4723 >= len(yyv4723) {
				yyv4723 = append(yyv4723, nil) // var yyz4723 pkg7_runtime.Object
				yyc4723 = true
			}
			yyh4723.ElemContainerState(yyj4723)
			if yyj4723 < len(yyv4723) {
				if r.TryDecodeAsNil() {
					yyv4723[yyj4723] = nil
				} else {
					yyv4728 := &yyv4723[yyj4723]
					yym4729 := z.DecBinary()
					_ = yym4729
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4728) {
					} else {
						z.DecFallback(yyv4728, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4723 < len(yyv4723) {
			yyv4723 = yyv4723[:yyj4723]
			yyc4723 = true
		} else if yyj4723 == 0 && yyv4723 == nil {
			yyv4723 = []pkg7_runtime.Object{}
			yyc4723 = true
		}
	}
	yyh4723.End()
	if yyc4723 {
		*v = yyv4723
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4730 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4731 := &yyv4730
		yy4731.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4732 := *v
	yyh4732, yyl4732 := z.DecSliceHelperStart()
	var yyc4732 bool
	if yyl4732 == 0 {
		if yyv4732 == nil {
			yyv4732 = []LimitRangeItem{}
			yyc4732 = true
		} else if len(yyv4732) != 0 {
			yyv4732 = yyv4732[:0]
			yyc4732 = true
		}
	} else if yyl4732 > 0 {
		var yyrr4732, yyrl4732 int
		var yyrt4732 bool
		if yyl4732 > cap(yyv4732) {

			yyrg4732 := len(yyv4732) > 0
			yyv24732 := yyv4732
			yyrl4732, yyrt4732 = z.DecInferLen(yyl4732, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4732 {
				if yyrl4732 <= cap(yyv4732) {
					yyv4732 = yyv4732[:yyrl4732]
				} else {
					yyv4732 = make([]LimitRangeItem, yyrl4732)
				}
			} else {
				yyv4732 = make([]LimitRangeItem, yyrl4732)
			}
			yyc4732 = true
			yyrr4732 = len(yyv4732)
			if yyrg4732 {
				copy(yyv4732, yyv24732)
			}
		} else if yyl4732 != len(yyv4732) {
			yyv4732 = yyv4732[:yyl4732]
			yyc4732 = true
		}
		yyj4732 := 0
		for ; yyj4732 < yyrr4732; yyj4732++ {
			yyh4732.ElemContainerState(yyj4732)
			if r.TryDecodeAsNil() {
				yyv4732[yyj4732] = LimitRangeItem{}
			} else {
				yyv4733 := &yyv4732[yyj4732]
				yyv4733.CodecDecodeSelf(d)
			}

		}
		if yyrt4732 {
			for ; yyj4732 < yyl4732; yyj4732++ {
				yyv4732 = append(yyv4732, LimitRangeItem{})
				yyh4732.ElemContainerState(yyj4732)
				if r.TryDecodeAsNil() {
					yyv4732[yyj4732] = LimitRangeItem{}
				} else {
					yyv4734 := &yyv4732[yyj4732]
					yyv4734.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4732 := 0
		for ; !r.CheckBreak(); yyj4732++ {

			if yyj4732 >= len(yyv4732) {
				yyv4732 = append(yyv4732, LimitRangeItem{}) // var yyz4732 LimitRangeItem
				yyc4732 = true
			}
			yyh4732.ElemContainerState(yyj4732)
			if yyj4732 < len(yyv4732) {
				if r.TryDecodeAsNil() {
					yyv4732[yyj4732] = LimitRangeItem{}
				} else {
					yyv4735 := &yyv4732[yyj4732]
					yyv4735.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4732 < len(yyv4732) {
			yyv4732 = yyv4732[:yyj4732]
			yyc4732 = true
		} else if yyj4732 == 0 && yyv4732 == nil {
			yyv4732 = []LimitRangeItem{}
			yyc4732 = true
		}
	}
	yyh4732.End()
	if yyc4732 {
		*v = yyv4732
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4736 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4737 := &yyv4736
		yy4737.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4738 := *v
	yyh4738, yyl4738 := z.DecSliceHelperStart()
	var yyc4738 bool
	if yyl4738 == 0 {
		if yyv4738 == nil {
			yyv4738 = []LimitRange{}
			yyc4738 = true
		} else if len(yyv4738) != 0 {
			yyv4738 = yyv4738[:0]
			yyc4738 = true
		}
	} else if yyl4738 > 0 {
		var yyrr4738, yyrl4738 int
		var yyrt4738 bool
		if yyl4738 > cap(yyv4738) {

			yyrg4738 := len(yyv4738) > 0
			yyv24738 := yyv4738
			yyrl4738, yyrt4738 = z.DecInferLen(yyl4738, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4738 {
				if yyrl4738 <= cap(yyv4738) {
					yyv4738 = yyv4738[:yyrl4738]
				} else {
					yyv4738 = make([]LimitRange, yyrl4738)
				}
			} else {
				yyv4738 = make([]LimitRange, yyrl4738)
			}
			yyc4738 = true
			yyrr4738 = len(yyv4738)
			if yyrg4738 {
				copy(yyv4738, yyv24738)
			}
		} else if yyl4738 != len(yyv4738) {
			yyv4738 = yyv4738[:yyl4738]
			yyc4738 = true
		}
		yyj4738 := 0
		for ; yyj4738 < yyrr4738; yyj4738++ {
			yyh4738.ElemContainerState(yyj4738)
			if r.TryDecodeAsNil() {
				yyv4738[yyj4738] = LimitRange{}
			} else {
				yyv4739 := &yyv4738[yyj4738]
				yyv4739.CodecDecodeSelf(d)
			}

		}
		if yyrt4738 {
			for ; yyj4738 < yyl4738; yyj4738++ {
				yyv4738 = append(yyv4738, LimitRange{})
				yyh4738.ElemContainerState(yyj4738)
				if r.TryDecodeAsNil() {
					yyv4738[yyj4738] = LimitRange{}
				} else {
					yyv4740 := &yyv4738[yyj4738]
					yyv4740.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4738 := 0
		for ; !r.CheckBreak(); yyj4738++ {

			if yyj4738 >= len(yyv4738) {
				yyv4738 = append(yyv4738, LimitRange{}) // var yyz4738 LimitRange
				yyc4738 = true
			}
			yyh4738.ElemContainerState(yyj4738)
			if yyj4738 < len(yyv4738) {
				if r.TryDecodeAsNil() {
					yyv4738[yyj4738] = LimitRange{}
				} else {
					yyv4741 := &yyv4738[yyj4738]
					yyv4741.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4738 < len(yyv4738) {
			yyv4738 = yyv4738[:yyj4738]
			yyc4738 = true
		} else if yyj4738 == 0 && yyv4738 == nil {
			yyv4738 = []LimitRange{}
			yyc4738 = true
		}
	}
	yyh4738.End()
	if yyc4738 {
		*v = yyv4738
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4742 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4742.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4743 := *v
	yyh4743, yyl4743 := z.DecSliceHelperStart()
	var yyc4743 bool
	if yyl4743 == 0 {
		if yyv4743 == nil {
			yyv4743 = []ResourceQuotaScope{}
			yyc4743 = true
		} else if len(yyv4743) != 0 {
			yyv4743 = yyv4743[:0]
			yyc4743 = true
		}
	} else if yyl4743 > 0 {
		var yyrr4743, yyrl4743 int
		var yyrt4743 bool
		if yyl4743 > cap(yyv4743) {

			yyrl4743, yyrt4743 = z.DecInferLen(yyl4743, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4743 {
				if yyrl4743 <= cap(yyv4743) {
					yyv4743 = yyv4743[:yyrl4743]
				} else {
					yyv4743 = make([]ResourceQuotaScope, yyrl4743)
				}
			} else {
				yyv4743 = make([]ResourceQuotaScope, yyrl4743)
			}
			yyc4743 = true
			yyrr4743 = len(yyv4743)
		} else if yyl4743 != len(yyv4743) {
			yyv4743 = yyv4743[:yyl4743]
			yyc4743 = true
		}
		yyj4743 := 0
		for ; yyj4743 < yyrr4743; yyj4743++ {
			yyh4743.ElemContainerState(yyj4743)
			if r.TryDecodeAsNil() {
				yyv4743[yyj4743] = ""
			} else {
				yyv4743[yyj4743] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4743 {
			for ; yyj4743 < yyl4743; yyj4743++ {
				yyv4743 = append(yyv4743, "")
				yyh4743.ElemContainerState(yyj4743)
				if r.TryDecodeAsNil() {
					yyv4743[yyj4743] = ""
				} else {
					yyv4743[yyj4743] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4743 := 0
		for ; !r.CheckBreak(); yyj4743++ {

			if yyj4743 >= len(yyv4743) {
				yyv4743 = append(yyv4743, "") // var yyz4743 ResourceQuotaScope
				yyc4743 = true
			}
			yyh4743.ElemContainerState(yyj4743)
			if yyj4743 < len(yyv4743) {
				if r.TryDecodeAsNil() {
					yyv4743[yyj4743] = ""
				} else {
					yyv4743[yyj4743] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4743 < len(yyv4743) {
			yyv4743 = yyv4743[:yyj4743]
			yyc4743 = true
		} else if yyj4743 == 0 && yyv4743 == nil {
			yyv4743 = []ResourceQuotaScope{}
			yyc4743 = true
		}
	}
	yyh4743.End()
	if yyc4743 {
		*v = yyv4743
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4747 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4748 := &yyv4747
		yy4748.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4749 := *v
	yyh4749, yyl4749 := z.DecSliceHelperStart()
	var yyc4749 bool
	if yyl4749 == 0 {
		if yyv4749 == nil {
			yyv4749 = []ResourceQuota{}
			yyc4749 = true
		} else if len(yyv4749) != 0 {
			yyv4749 = yyv4749[:0]
			yyc4749 = true
		}
	} else if yyl4749 > 0 {
		var yyrr4749, yyrl4749 int
		var yyrt4749 bool
		if yyl4749 > cap(yyv4749) {

			yyrg4749 := len(yyv4749) > 0
			yyv24749 := yyv4749
			yyrl4749, yyrt4749 = z.DecInferLen(yyl4749, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4749 {
				if yyrl4749 <= cap(yyv4749) {
					yyv4749 = yyv4749[:yyrl4749]
				} else {
					yyv4749 = make([]ResourceQuota, yyrl4749)
				}
			} else {
				yyv4749 = make([]ResourceQuota, yyrl4749)
			}
			yyc4749 = true
			yyrr4749 = len(yyv4749)
			if yyrg4749 {
				copy(yyv4749, yyv24749)
			}
		} else if yyl4749 != len(yyv4749) {
			yyv4749 = yyv4749[:yyl4749]
			yyc4749 = true
		}
		yyj4749 := 0
		for ; yyj4749 < yyrr4749; yyj4749++ {
			yyh4749.ElemContainerState(yyj4749)
			if r.TryDecodeAsNil() {
				yyv4749[yyj4749] = ResourceQuota{}
			} else {
				yyv4750 := &yyv4749[yyj4749]
				yyv4750.CodecDecodeSelf(d)
			}

		}
		if yyrt4749 {
			for ; yyj4749 < yyl4749; yyj4749++ {
				yyv4749 = append(yyv4749, ResourceQuota{})
				yyh4749.ElemContainerState(yyj4749)
				if r.TryDecodeAsNil() {
					yyv4749[yyj4749] = ResourceQuota{}
				} else {
					yyv4751 := &yyv4749[yyj4749]
					yyv4751.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4749 := 0
		for ; !r.CheckBreak(); yyj4749++ {

			if yyj4749 >= len(yyv4749) {
				yyv4749 = append(yyv4749, ResourceQuota{}) // var yyz4749 ResourceQuota
				yyc4749 = true
			}
			yyh4749.ElemContainerState(yyj4749)
			if yyj4749 < len(yyv4749) {
				if r.TryDecodeAsNil() {
					yyv4749[yyj4749] = ResourceQuota{}
				} else {
					yyv4752 := &yyv4749[yyj4749]
					yyv4752.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4749 < len(yyv4749) {
			yyv4749 = yyv4749[:yyj4749]
			yyc4749 = true
		} else if yyj4749 == 0 && yyv4749 == nil {
			yyv4749 = []ResourceQuota{}
			yyc4749 = true
		}
	}
	yyh4749.End()
	if yyc4749 {
		*v = yyv4749
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4753, yyv4753 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4754 := z.EncBinary()
		_ = yym4754
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4753))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4753 == nil {
			r.EncodeNil()
		} else {
			yym4755 := z.EncBinary()
			_ = yym4755
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4753))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4756 := *v
	yyl4756 := r.ReadMapStart()
	yybh4756 := z.DecBasicHandle()
	if yyv4756 == nil {
		yyrl4756, _ := z.DecInferLen(yyl4756, yybh4756.MaxInitLen, 40)
		yyv4756 = make(map[string][]uint8, yyrl4756)
		*v = yyv4756
	}
	var yymk4756 string
	var yymv4756 []uint8
	var yymg4756 bool
	if yybh4756.MapValueReset {
		yymg4756 = true
	}
	if yyl4756 > 0 {
		for yyj4756 := 0; yyj4756 < yyl4756; yyj4756++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4756 = ""
			} else {
				yymk4756 = string(r.DecodeString())
			}

			if yymg4756 {
				yymv4756 = yyv4756[yymk4756]
			} else {
				yymv4756 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4756 = nil
			} else {
				yyv4758 := &yymv4756
				yym4759 := z.DecBinary()
				_ = yym4759
				if false {
				} else {
					*yyv4758 = r.DecodeBytes(*(*[]byte)(yyv4758), false, false)
				}
			}

			if yyv4756 != nil {
				yyv4756[yymk4756] = yymv4756
			}
		}
	} else if yyl4756 < 0 {
		for yyj4756 := 0; !r.CheckBreak(); yyj4756++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4756 = ""
			} else {
				yymk4756 = string(r.DecodeString())
			}

			if yymg4756 {
				yymv4756 = yyv4756[yymk4756]
			} else {
				yymv4756 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4756 = nil
			} else {
				yyv4761 := &yymv4756
				yym4762 := z.DecBinary()
				_ = yym4762
				if false {
				} else {
					*yyv4761 = r.DecodeBytes(*(*[]byte)(yyv4761), false, false)
				}
			}

			if yyv4756 != nil {
				yyv4756[yymk4756] = yymv4756
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4763 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4764 := &yyv4763
		yy4764.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4765 := *v
	yyh4765, yyl4765 := z.DecSliceHelperStart()
	var yyc4765 bool
	if yyl4765 == 0 {
		if yyv4765 == nil {
			yyv4765 = []Secret{}
			yyc4765 = true
		} else if len(yyv4765) != 0 {
			yyv4765 = yyv4765[:0]
			yyc4765 = true
		}
	} else if yyl4765 > 0 {
		var yyrr4765, yyrl4765 int
		var yyrt4765 bool
		if yyl4765 > cap(yyv4765) {

			yyrg4765 := len(yyv4765) > 0
			yyv24765 := yyv4765
			yyrl4765, yyrt4765 = z.DecInferLen(yyl4765, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4765 {
				if yyrl4765 <= cap(yyv4765) {
					yyv4765 = yyv4765[:yyrl4765]
				} else {
					yyv4765 = make([]Secret, yyrl4765)
				}
			} else {
				yyv4765 = make([]Secret, yyrl4765)
			}
			yyc4765 = true
			yyrr4765 = len(yyv4765)
			if yyrg4765 {
				copy(yyv4765, yyv24765)
			}
		} else if yyl4765 != len(yyv4765) {
			yyv4765 = yyv4765[:yyl4765]
			yyc4765 = true
		}
		yyj4765 := 0
		for ; yyj4765 < yyrr4765; yyj4765++ {
			yyh4765.ElemContainerState(yyj4765)
			if r.TryDecodeAsNil() {
				yyv4765[yyj4765] = Secret{}
			} else {
				yyv4766 := &yyv4765[yyj4765]
				yyv4766.CodecDecodeSelf(d)
			}

		}
		if yyrt4765 {
			for ; yyj4765 < yyl4765; yyj4765++ {
				yyv4765 = append(yyv4765, Secret{})
				yyh4765.ElemContainerState(yyj4765)
				if r.TryDecodeAsNil() {
					yyv4765[yyj4765] = Secret{}
				} else {
					yyv4767 := &yyv4765[yyj4765]
					yyv4767.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4765 := 0
		for ; !r.CheckBreak(); yyj4765++ {

			if yyj4765 >= len(yyv4765) {
				yyv4765 = append(yyv4765, Secret{}) // var yyz4765 Secret
				yyc4765 = true
			}
			yyh4765.ElemContainerState(yyj4765)
			if yyj4765 < len(yyv4765) {
				if r.TryDecodeAsNil() {
					yyv4765[yyj4765] = Secret{}
				} else {
					yyv4768 := &yyv4765[yyj4765]
					yyv4768.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4765 < len(yyv4765) {
			yyv4765 = yyv4765[:yyj4765]
			yyc4765 = true
		} else if yyj4765 == 0 && yyv4765 == nil {
			yyv4765 = []Secret{}
			yyc4765 = true
		}
	}
	yyh4765.End()
	if yyc4765 {
		*v = yyv4765
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4769 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4770 := &yyv4769
		yy4770.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4771 := *v
	yyh4771, yyl4771 := z.DecSliceHelperStart()
	var yyc4771 bool
	if yyl4771 == 0 {
		if yyv4771 == nil {
			yyv4771 = []ConfigMap{}
			yyc4771 = true
		} else if len(yyv4771) != 0 {
			yyv4771 = yyv4771[:0]
			yyc4771 = true
		}
	} else if yyl4771 > 0 {
		var yyrr4771, yyrl4771 int
		var yyrt4771 bool
		if yyl4771 > cap(yyv4771) {

			yyrg4771 := len(yyv4771) > 0
			yyv24771 := yyv4771
			yyrl4771, yyrt4771 = z.DecInferLen(yyl4771, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4771 {
				if yyrl4771 <= cap(yyv4771) {
					yyv4771 = yyv4771[:yyrl4771]
				} else {
					yyv4771 = make([]ConfigMap, yyrl4771)
				}
			} else {
				yyv4771 = make([]ConfigMap, yyrl4771)
			}
			yyc4771 = true
			yyrr4771 = len(yyv4771)
			if yyrg4771 {
				copy(yyv4771, yyv24771)
			}
		} else if yyl4771 != len(yyv4771) {
			yyv4771 = yyv4771[:yyl4771]
			yyc4771 = true
		}
		yyj4771 := 0
		for ; yyj4771 < yyrr4771; yyj4771++ {
			yyh4771.ElemContainerState(yyj4771)
			if r.TryDecodeAsNil() {
				yyv4771[yyj4771] = ConfigMap{}
			} else {
				yyv4772 := &yyv4771[yyj4771]
				yyv4772.CodecDecodeSelf(d)
			}

		}
		if yyrt4771 {
			for ; yyj4771 < yyl4771; yyj4771++ {
				yyv4771 = append(yyv4771, ConfigMap{})
				yyh4771.ElemContainerState(yyj4771)
				if r.TryDecodeAsNil() {
					yyv4771[yyj4771] = ConfigMap{}
				} else {
					yyv4773 := &yyv4771[yyj4771]
					yyv4773.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4771 := 0
		for ; !r.CheckBreak(); yyj4771++ {

			if yyj4771 >= len(yyv4771) {
				yyv4771 = append(yyv4771, ConfigMap{}) // var yyz4771 ConfigMap
				yyc4771 = true
			}
			yyh4771.ElemContainerState(yyj4771)
			if yyj4771 < len(yyv4771) {
				if r.TryDecodeAsNil() {
					yyv4771[yyj4771] = ConfigMap{}
				} else {
					yyv4774 := &yyv4771[yyj4771]
					yyv4774.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4771 < len(yyv4771) {
			yyv4771 = yyv4771[:yyj4771]
			yyc4771 = true
		} else if yyj4771 == 0 && yyv4771 == nil {
			yyv4771 = []ConfigMap{}
			yyc4771 = true
		}
	}
	yyh4771.End()
	if yyc4771 {
		*v = yyv4771
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4775 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4776 := &yyv4775
		yy4776.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4777 := *v
	yyh4777, yyl4777 := z.DecSliceHelperStart()
	var yyc4777 bool
	if yyl4777 == 0 {
		if yyv4777 == nil {
			yyv4777 = []ComponentCondition{}
			yyc4777 = true
		} else if len(yyv4777) != 0 {
			yyv4777 = yyv4777[:0]
			yyc4777 = true
		}
	} else if yyl4777 > 0 {
		var yyrr4777, yyrl4777 int
		var yyrt4777 bool
		if yyl4777 > cap(yyv4777) {

			yyrg4777 := len(yyv4777) > 0
			yyv24777 := yyv4777
			yyrl4777, yyrt4777 = z.DecInferLen(yyl4777, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4777 {
				if yyrl4777 <= cap(yyv4777) {
					yyv4777 = yyv4777[:yyrl4777]
				} else {
					yyv4777 = make([]ComponentCondition, yyrl4777)
				}
			} else {
				yyv4777 = make([]ComponentCondition, yyrl4777)
			}
			yyc4777 = true
			yyrr4777 = len(yyv4777)
			if yyrg4777 {
				copy(yyv4777, yyv24777)
			}
		} else if yyl4777 != len(yyv4777) {
			yyv4777 = yyv4777[:yyl4777]
			yyc4777 = true
		}
		yyj4777 := 0
		for ; yyj4777 < yyrr4777; yyj4777++ {
			yyh4777.ElemContainerState(yyj4777)
			if r.TryDecodeAsNil() {
				yyv4777[yyj4777] = ComponentCondition{}
			} else {
				yyv4778 := &yyv4777[yyj4777]
				yyv4778.CodecDecodeSelf(d)
			}

		}
		if yyrt4777 {
			for ; yyj4777 < yyl4777; yyj4777++ {
				yyv4777 = append(yyv4777, ComponentCondition{})
				yyh4777.ElemContainerState(yyj4777)
				if r.TryDecodeAsNil() {
					yyv4777[yyj4777] = ComponentCondition{}
				} else {
					yyv4779 := &yyv4777[yyj4777]
					yyv4779.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4777 := 0
		for ; !r.CheckBreak(); yyj4777++ {

			if yyj4777 >= len(yyv4777) {
				yyv4777 = append(yyv4777, ComponentCondition{}) // var yyz4777 ComponentCondition
				yyc4777 = true
			}
			yyh4777.ElemContainerState(yyj4777)
			if yyj4777 < len(yyv4777) {
				if r.TryDecodeAsNil() {
					yyv4777[yyj4777] = ComponentCondition{}
				} else {
					yyv4780 := &yyv4777[yyj4777]
					yyv4780.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4777 < len(yyv4777) {
			yyv4777 = yyv4777[:yyj4777]
			yyc4777 = true
		} else if yyj4777 == 0 && yyv4777 == nil {
			yyv4777 = []ComponentCondition{}
			yyc4777 = true
		}
	}
	yyh4777.End()
	if yyc4777 {
		*v = yyv4777
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4781 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4782 := &yyv4781
		yy4782.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4783 := *v
	yyh4783, yyl4783 := z.DecSliceHelperStart()
	var yyc4783 bool
	if yyl4783 == 0 {
		if yyv4783 == nil {
			yyv4783 = []ComponentStatus{}
			yyc4783 = true
		} else if len(yyv4783) != 0 {
			yyv4783 = yyv4783[:0]
			yyc4783 = true
		}
	} else if yyl4783 > 0 {
		var yyrr4783, yyrl4783 int
		var yyrt4783 bool
		if yyl4783 > cap(yyv4783) {

			yyrg4783 := len(yyv4783) > 0
			yyv24783 := yyv4783
			yyrl4783, yyrt4783 = z.DecInferLen(yyl4783, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4783 {
				if yyrl4783 <= cap(yyv4783) {
					yyv4783 = yyv4783[:yyrl4783]
				} else {
					yyv4783 = make([]ComponentStatus, yyrl4783)
				}
			} else {
				yyv4783 = make([]ComponentStatus, yyrl4783)
			}
			yyc4783 = true
			yyrr4783 = len(yyv4783)
			if yyrg4783 {
				copy(yyv4783, yyv24783)
			}
		} else if yyl4783 != len(yyv4783) {
			yyv4783 = yyv4783[:yyl4783]
			yyc4783 = true
		}
		yyj4783 := 0
		for ; yyj4783 < yyrr4783; yyj4783++ {
			yyh4783.ElemContainerState(yyj4783)
			if r.TryDecodeAsNil() {
				yyv4783[yyj4783] = ComponentStatus{}
			} else {
				yyv4784 := &yyv4783[yyj4783]
				yyv4784.CodecDecodeSelf(d)
			}

		}
		if yyrt4783 {
			for ; yyj4783 < yyl4783; yyj4783++ {
				yyv4783 = append(yyv4783, ComponentStatus{})
				yyh4783.ElemContainerState(yyj4783)
				if r.TryDecodeAsNil() {
					yyv4783[yyj4783] = ComponentStatus{}
				} else {
					yyv4785 := &yyv4783[yyj4783]
					yyv4785.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4783 := 0
		for ; !r.CheckBreak(); yyj4783++ {

			if yyj4783 >= len(yyv4783) {
				yyv4783 = append(yyv4783, ComponentStatus{}) // var yyz4783 ComponentStatus
				yyc4783 = true
			}
			yyh4783.ElemContainerState(yyj4783)
			if yyj4783 < len(yyv4783) {
				if r.TryDecodeAsNil() {
					yyv4783[yyj4783] = ComponentStatus{}
				} else {
					yyv4786 := &yyv4783[yyj4783]
					yyv4786.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4783 < len(yyv4783) {
			yyv4783 = yyv4783[:yyj4783]
			yyc4783 = true
		} else if yyj4783 == 0 && yyv4783 == nil {
			yyv4783 = []ComponentStatus{}
			yyc4783 = true
		}
	}
	yyh4783.End()
	if yyc4783 {
		*v = yyv4783
	}
}
