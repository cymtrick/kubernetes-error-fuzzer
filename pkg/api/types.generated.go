/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg7_fields "k8s.io/kubernetes/pkg/fields"
	pkg6_labels "k8s.io/kubernetes/pkg/labels"
	pkg8_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg7_fields.Selector
		var v3 pkg6_labels.Selector
		var v4 pkg8_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg5_util.IntOrString
		var v7 pkg4_inf.Dec
		var v8 time.Time
		_, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	if !yyhl45 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				var yynn82 int = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	if !yyhl104 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				var yynn141 int = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
			}
			if yyr141 || yy2arr141 {
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [11]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[0] = x.GCEPersistentDisk != nil
			yyq195[1] = x.AWSElasticBlockStore != nil
			yyq195[2] = x.HostPath != nil
			yyq195[3] = x.Glusterfs != nil
			yyq195[4] = x.NFS != nil
			yyq195[5] = x.RBD != nil
			yyq195[6] = x.ISCSI != nil
			yyq195[7] = x.Cinder != nil
			yyq195[8] = x.CephFS != nil
			yyq195[9] = x.FC != nil
			yyq195[10] = x.Flocker != nil
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(11)
			} else {
				var yynn195 int = 0
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
			}
			if yyr195 || yy2arr195 {
				if yyq195[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep195 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym207 := z.DecBinary()
	_ = yym207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl208 := r.ReadMapStart()
			if yyl208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl208, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl208 := r.ReadArrayStart()
			if yyl208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys209Slc
	var yyhl209 bool = l >= 0
	for yyj209 := 0; ; yyj209++ {
		if yyhl209 {
			if yyj209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys209Slc = r.DecodeBytes(yys209Slc, true, true)
		yys209 := string(yys209Slc)
		switch yys209 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys209)
		} // end switch yys209
	} // end for yyj209
	if !yyhl209 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym233 := z.EncBinary()
		_ = yym233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep234 := !z.EncBinary()
			yy2arr234 := z.EncBasicHandle().StructToArray
			var yyq234 [2]bool
			_, _, _ = yysep234, yyq234, yy2arr234
			const yyr234 bool = false
			yyq234[1] = x.ReadOnly != false
			if yyr234 || yy2arr234 {
				r.EncodeArrayStart(2)
			} else {
				var yynn234 int = 1
				for _, b := range yyq234 {
					if b {
						yynn234++
					}
				}
				r.EncodeMapStart(yynn234)
			}
			if yyr234 || yy2arr234 {
				yym236 := z.EncBinary()
				_ = yym236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym237 := z.EncBinary()
				_ = yym237
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr234 || yy2arr234 {
				if yyq234[1] {
					yym239 := z.EncBinary()
					_ = yym239
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq234[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym240 := z.EncBinary()
					_ = yym240
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep234 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym241 := z.DecBinary()
	_ = yym241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl242 := r.ReadMapStart()
			if yyl242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl242, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl242 := r.ReadArrayStart()
			if yyl242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys243Slc
	var yyhl243 bool = l >= 0
	for yyj243 := 0; ; yyj243++ {
		if yyhl243 {
			if yyj243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys243Slc = r.DecodeBytes(yys243Slc, true, true)
		yys243 := string(yys243Slc)
		switch yys243 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys243)
		} // end switch yys243
	} // end for yyj243
	if !yyhl243 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj246 int
	var yyb246 bool
	var yyhl246 bool = l >= 0
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj246++
		if yyhl246 {
			yyb246 = yyj246 > l
		} else {
			yyb246 = r.CheckBreak()
		}
		if yyb246 {
			break
		}
		z.DecStructFieldNotFound(yyj246-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				var yynn250 int = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
			}
			if yyr250 || yy2arr250 {
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yysep250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	if !yyhl268 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				var yynn281 int = 1
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
			}
			if yyr281 || yy2arr281 {
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep281 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	if !yyhl301 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				var yynn338 int = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
			}
			if yyr338 || yy2arr338 {
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep338 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	if !yyhl348 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				var yynn357 int = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
			}
			if yyr357 || yy2arr357 {
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep357 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	if !yyhl374 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				var yynn389 int = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
			}
			if yyr389 || yy2arr389 {
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yysep389 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	if !yyhl407 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				var yynn420 int = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
			}
			if yyr420 || yy2arr420 {
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep420 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	if !yyhl437 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				var yynn452 int = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep452 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	if !yyhl464 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				var yynn475 int = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
			}
			if yyr475 || yy2arr475 {
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep475 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	if !yyhl483 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				var yynn500 int = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
			}
			if yyr500 || yy2arr500 {
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep500 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	if !yyhl506 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				var yynn511 int = 1
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
			}
			if yyr511 || yy2arr511 {
				x.Medium.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("medium"))
				x.Medium.CodecEncodeSelf(e)
			}
			if yysep511 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	if !yyhl515 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym519 := z.EncBinary()
	_ = yym519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym521 := z.EncBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym522 := z.DecBinary()
	_ = yym522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym523 := z.EncBinary()
		_ = yym523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep524 := !z.EncBinary()
			yy2arr524 := z.EncBasicHandle().StructToArray
			var yyq524 [4]bool
			_, _, _ = yysep524, yyq524, yy2arr524
			const yyr524 bool = false
			yyq524[1] = x.FSType != ""
			yyq524[2] = x.Partition != 0
			yyq524[3] = x.ReadOnly != false
			if yyr524 || yy2arr524 {
				r.EncodeArrayStart(4)
			} else {
				var yynn524 int = 1
				for _, b := range yyq524 {
					if b {
						yynn524++
					}
				}
				r.EncodeMapStart(yynn524)
			}
			if yyr524 || yy2arr524 {
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym527 := z.EncBinary()
				_ = yym527
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr524 || yy2arr524 {
				if yyq524[1] {
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq524[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr524 || yy2arr524 {
				if yyq524[2] {
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq524[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr524 || yy2arr524 {
				if yyq524[3] {
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq524[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym536 := z.EncBinary()
					_ = yym536
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep524 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym537 := z.DecBinary()
	_ = yym537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl538 := r.ReadMapStart()
			if yyl538 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl538, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl538 := r.ReadArrayStart()
			if yyl538 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys539Slc
	var yyhl539 bool = l >= 0
	for yyj539 := 0; ; yyj539++ {
		if yyhl539 {
			if yyj539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys539Slc = r.DecodeBytes(yys539Slc, true, true)
		yys539 := string(yys539Slc)
		switch yys539 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys539)
		} // end switch yys539
	} // end for yyj539
	if !yyhl539 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj544 int
	var yyb544 bool
	var yyhl544 bool = l >= 0
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj544++
		if yyhl544 {
			yyb544 = yyj544 > l
		} else {
			yyb544 = r.CheckBreak()
		}
		if yyb544 {
			break
		}
		z.DecStructFieldNotFound(yyj544-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym549 := z.EncBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep550 := !z.EncBinary()
			yy2arr550 := z.EncBasicHandle().StructToArray
			var yyq550 [5]bool
			_, _, _ = yysep550, yyq550, yy2arr550
			const yyr550 bool = false
			yyq550[0] = x.TargetPortal != ""
			yyq550[1] = x.IQN != ""
			yyq550[2] = x.Lun != 0
			yyq550[3] = x.FSType != ""
			yyq550[4] = x.ReadOnly != false
			if yyr550 || yy2arr550 {
				r.EncodeArrayStart(5)
			} else {
				var yynn550 int = 0
				for _, b := range yyq550 {
					if b {
						yynn550++
					}
				}
				r.EncodeMapStart(yynn550)
			}
			if yyr550 || yy2arr550 {
				if yyq550[0] {
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[0] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					yym553 := z.EncBinary()
					_ = yym553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[1] {
					yym555 := z.EncBinary()
					_ = yym555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[1] {
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[2] {
					yym558 := z.EncBinary()
					_ = yym558
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq550[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					yym559 := z.EncBinary()
					_ = yym559
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[3] {
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[4] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq550[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep550 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		switch yys568 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	if !yyhl568 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj574 int
	var yyb574 bool
	var yyhl574 bool = l >= 0
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj574++
		if yyhl574 {
			yyb574 = yyj574 > l
		} else {
			yyb574 = r.CheckBreak()
		}
		if yyb574 {
			break
		}
		z.DecStructFieldNotFound(yyj574-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym580 := z.EncBinary()
		_ = yym580
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep581 := !z.EncBinary()
			yy2arr581 := z.EncBasicHandle().StructToArray
			var yyq581 [4]bool
			_, _, _ = yysep581, yyq581, yy2arr581
			const yyr581 bool = false
			yyq581[3] = x.ReadOnly != false
			if yyr581 || yy2arr581 {
				r.EncodeArrayStart(4)
			} else {
				var yynn581 int = 3
				for _, b := range yyq581 {
					if b {
						yynn581++
					}
				}
				r.EncodeMapStart(yynn581)
			}
			if yyr581 || yy2arr581 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym583 := z.EncBinary()
					_ = yym583
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym584 := z.EncBinary()
					_ = yym584
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr581 || yy2arr581 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy586 := *x.Lun
					yym587 := z.EncBinary()
					_ = yym587
					if false {
					} else {
						r.EncodeInt(int64(yy586))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy588 := *x.Lun
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else {
						r.EncodeInt(int64(yy588))
					}
				}
			}
			if yyr581 || yy2arr581 {
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr581 || yy2arr581 {
				if yyq581[3] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq581[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep581 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym596 := z.DecBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl597 := r.ReadMapStart()
			if yyl597 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl597, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl597 := r.ReadArrayStart()
			if yyl597 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys598Slc
	var yyhl598 bool = l >= 0
	for yyj598 := 0; ; yyj598++ {
		if yyhl598 {
			if yyj598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys598Slc = r.DecodeBytes(yys598Slc, true, true)
		yys598 := string(yys598Slc)
		switch yys598 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv599 := &x.TargetWWNs
				yym600 := z.DecBinary()
				_ = yym600
				if false {
				} else {
					z.F.DecSliceStringX(yyv599, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym602 := z.DecBinary()
				_ = yym602
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys598)
		} // end switch yys598
	} // end for yyj598
	if !yyhl598 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv606 := &x.TargetWWNs
		yym607 := z.DecBinary()
		_ = yym607
		if false {
		} else {
			z.F.DecSliceStringX(yyv606, false, d)
		}
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym609 := z.DecBinary()
		_ = yym609
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym612 := z.EncBinary()
		_ = yym612
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep613 := !z.EncBinary()
			yy2arr613 := z.EncBasicHandle().StructToArray
			var yyq613 [4]bool
			_, _, _ = yysep613, yyq613, yy2arr613
			const yyr613 bool = false
			yyq613[1] = x.FSType != ""
			yyq613[2] = x.Partition != 0
			yyq613[3] = x.ReadOnly != false
			if yyr613 || yy2arr613 {
				r.EncodeArrayStart(4)
			} else {
				var yynn613 int = 1
				for _, b := range yyq613 {
					if b {
						yynn613++
					}
				}
				r.EncodeMapStart(yynn613)
			}
			if yyr613 || yy2arr613 {
				yym615 := z.EncBinary()
				_ = yym615
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym616 := z.EncBinary()
				_ = yym616
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr613 || yy2arr613 {
				if yyq613[1] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr613 || yy2arr613 {
				if yyq613[2] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq613[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr613 || yy2arr613 {
				if yyq613[3] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq613[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep613 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym626 := z.DecBinary()
	_ = yym626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl627 := r.ReadMapStart()
			if yyl627 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl627, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl627 := r.ReadArrayStart()
			if yyl627 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys628Slc
	var yyhl628 bool = l >= 0
	for yyj628 := 0; ; yyj628++ {
		if yyhl628 {
			if yyj628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys628Slc = r.DecodeBytes(yys628Slc, true, true)
		yys628 := string(yys628Slc)
		switch yys628 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys628)
		} // end switch yys628
	} // end for yyj628
	if !yyhl628 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym638 := z.EncBinary()
		_ = yym638
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep639 := !z.EncBinary()
			yy2arr639 := z.EncBasicHandle().StructToArray
			var yyq639 [2]bool
			_, _, _ = yysep639, yyq639, yy2arr639
			const yyr639 bool = false
			if yyr639 || yy2arr639 {
				r.EncodeArrayStart(2)
			} else {
				var yynn639 int = 2
				for _, b := range yyq639 {
					if b {
						yynn639++
					}
				}
				r.EncodeMapStart(yynn639)
			}
			if yyr639 || yy2arr639 {
				yym641 := z.EncBinary()
				_ = yym641
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym642 := z.EncBinary()
				_ = yym642
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr639 || yy2arr639 {
				yym644 := z.EncBinary()
				_ = yym644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym645 := z.EncBinary()
				_ = yym645
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep639 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym646 := z.DecBinary()
	_ = yym646
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl647 := r.ReadMapStart()
			if yyl647 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl647, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl647 := r.ReadArrayStart()
			if yyl647 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl647, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys648Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys648Slc
	var yyhl648 bool = l >= 0
	for yyj648 := 0; ; yyj648++ {
		if yyhl648 {
			if yyj648 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys648Slc = r.DecodeBytes(yys648Slc, true, true)
		yys648 := string(yys648Slc)
		switch yys648 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys648)
		} // end switch yys648
	} // end for yyj648
	if !yyhl648 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj651 int
	var yyb651 bool
	var yyhl651 bool = l >= 0
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj651++
		if yyhl651 {
			yyb651 = yyj651 > l
		} else {
			yyb651 = r.CheckBreak()
		}
		if yyb651 {
			break
		}
		z.DecStructFieldNotFound(yyj651-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym654 := z.EncBinary()
		_ = yym654
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep655 := !z.EncBinary()
			yy2arr655 := z.EncBasicHandle().StructToArray
			var yyq655 [1]bool
			_, _, _ = yysep655, yyq655, yy2arr655
			const yyr655 bool = false
			if yyr655 || yy2arr655 {
				r.EncodeArrayStart(1)
			} else {
				var yynn655 int = 1
				for _, b := range yyq655 {
					if b {
						yynn655++
					}
				}
				r.EncodeMapStart(yynn655)
			}
			if yyr655 || yy2arr655 {
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym658 := z.EncBinary()
				_ = yym658
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep655 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym659 := z.DecBinary()
	_ = yym659
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl660 := r.ReadMapStart()
			if yyl660 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl660, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl660 := r.ReadArrayStart()
			if yyl660 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl660, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys661Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys661Slc
	var yyhl661 bool = l >= 0
	for yyj661 := 0; ; yyj661++ {
		if yyhl661 {
			if yyj661 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys661Slc = r.DecodeBytes(yys661Slc, true, true)
		yys661 := string(yys661Slc)
		switch yys661 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys661)
		} // end switch yys661
	} // end for yyj661
	if !yyhl661 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj663 int
	var yyb663 bool
	var yyhl663 bool = l >= 0
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj663++
		if yyhl663 {
			yyb663 = yyj663 > l
		} else {
			yyb663 = r.CheckBreak()
		}
		if yyb663 {
			break
		}
		z.DecStructFieldNotFound(yyj663-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym665 := z.EncBinary()
		_ = yym665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep666 := !z.EncBinary()
			yy2arr666 := z.EncBasicHandle().StructToArray
			var yyq666 [3]bool
			_, _, _ = yysep666, yyq666, yy2arr666
			const yyr666 bool = false
			yyq666[2] = x.ReadOnly != false
			if yyr666 || yy2arr666 {
				r.EncodeArrayStart(3)
			} else {
				var yynn666 int = 2
				for _, b := range yyq666 {
					if b {
						yynn666++
					}
				}
				r.EncodeMapStart(yynn666)
			}
			if yyr666 || yy2arr666 {
				yym668 := z.EncBinary()
				_ = yym668
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym669 := z.EncBinary()
				_ = yym669
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr666 || yy2arr666 {
				yym671 := z.EncBinary()
				_ = yym671
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym672 := z.EncBinary()
				_ = yym672
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr666 || yy2arr666 {
				if yyq666[2] {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq666[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep666 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym676 := z.DecBinary()
	_ = yym676
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl677 := r.ReadMapStart()
			if yyl677 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl677, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl677 := r.ReadArrayStart()
			if yyl677 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl677, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys678Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys678Slc
	var yyhl678 bool = l >= 0
	for yyj678 := 0; ; yyj678++ {
		if yyhl678 {
			if yyj678 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys678Slc = r.DecodeBytes(yys678Slc, true, true)
		yys678 := string(yys678Slc)
		switch yys678 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys678)
		} // end switch yys678
	} // end for yyj678
	if !yyhl678 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj682 int
	var yyb682 bool
	var yyhl682 bool = l >= 0
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj682++
		if yyhl682 {
			yyb682 = yyj682 > l
		} else {
			yyb682 = r.CheckBreak()
		}
		if yyb682 {
			break
		}
		z.DecStructFieldNotFound(yyj682-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym686 := z.EncBinary()
		_ = yym686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep687 := !z.EncBinary()
			yy2arr687 := z.EncBasicHandle().StructToArray
			var yyq687 [3]bool
			_, _, _ = yysep687, yyq687, yy2arr687
			const yyr687 bool = false
			yyq687[2] = x.ReadOnly != false
			if yyr687 || yy2arr687 {
				r.EncodeArrayStart(3)
			} else {
				var yynn687 int = 2
				for _, b := range yyq687 {
					if b {
						yynn687++
					}
				}
				r.EncodeMapStart(yynn687)
			}
			if yyr687 || yy2arr687 {
				yym689 := z.EncBinary()
				_ = yym689
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym690 := z.EncBinary()
				_ = yym690
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr687 || yy2arr687 {
				yym692 := z.EncBinary()
				_ = yym692
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym693 := z.EncBinary()
				_ = yym693
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr687 || yy2arr687 {
				if yyq687[2] {
					yym695 := z.EncBinary()
					_ = yym695
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq687[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep687 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym697 := z.DecBinary()
	_ = yym697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl698 := r.ReadMapStart()
			if yyl698 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl698, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl698 := r.ReadArrayStart()
			if yyl698 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys699Slc
	var yyhl699 bool = l >= 0
	for yyj699 := 0; ; yyj699++ {
		if yyhl699 {
			if yyj699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys699Slc = r.DecodeBytes(yys699Slc, true, true)
		yys699 := string(yys699Slc)
		switch yys699 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys699)
		} // end switch yys699
	} // end for yyj699
	if !yyhl699 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj703 int
	var yyb703 bool
	var yyhl703 bool = l >= 0
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj703++
		if yyhl703 {
			yyb703 = yyj703 > l
		} else {
			yyb703 = r.CheckBreak()
		}
		if yyb703 {
			break
		}
		z.DecStructFieldNotFound(yyj703-1, "")
	}
	r.ReadEnd()
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym707 := z.EncBinary()
		_ = yym707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep708 := !z.EncBinary()
			yy2arr708 := z.EncBasicHandle().StructToArray
			var yyq708 [8]bool
			_, _, _ = yysep708, yyq708, yy2arr708
			const yyr708 bool = false
			yyq708[2] = x.FSType != ""
			yyq708[7] = x.ReadOnly != false
			if yyr708 || yy2arr708 {
				r.EncodeArrayStart(8)
			} else {
				var yynn708 int = 6
				for _, b := range yyq708 {
					if b {
						yynn708++
					}
				}
				r.EncodeMapStart(yynn708)
			}
			if yyr708 || yy2arr708 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym710 := z.EncBinary()
					_ = yym710
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr708 || yy2arr708 {
				yym713 := z.EncBinary()
				_ = yym713
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym714 := z.EncBinary()
				_ = yym714
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr708 || yy2arr708 {
				if yyq708[2] {
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq708[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr708 || yy2arr708 {
				yym719 := z.EncBinary()
				_ = yym719
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym720 := z.EncBinary()
				_ = yym720
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr708 || yy2arr708 {
				yym722 := z.EncBinary()
				_ = yym722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym723 := z.EncBinary()
				_ = yym723
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr708 || yy2arr708 {
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym726 := z.EncBinary()
				_ = yym726
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr708 || yy2arr708 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr708 || yy2arr708 {
				if yyq708[7] {
					yym729 := z.EncBinary()
					_ = yym729
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq708[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep708 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym731 := z.DecBinary()
	_ = yym731
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl732 := r.ReadMapStart()
			if yyl732 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl732, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl732 := r.ReadArrayStart()
			if yyl732 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl732, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys733Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys733Slc
	var yyhl733 bool = l >= 0
	for yyj733 := 0; ; yyj733++ {
		if yyhl733 {
			if yyj733 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys733Slc = r.DecodeBytes(yys733Slc, true, true)
		yys733 := string(yys733Slc)
		switch yys733 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv734 := &x.CephMonitors
				yym735 := z.DecBinary()
				_ = yym735
				if false {
				} else {
					z.F.DecSliceStringX(yyv734, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys733)
		} // end switch yys733
	} // end for yyj733
	if !yyhl733 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj743 int
	var yyb743 bool
	var yyhl743 bool = l >= 0
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv744 := &x.CephMonitors
		yym745 := z.DecBinary()
		_ = yym745
		if false {
		} else {
			z.F.DecSliceStringX(yyv744, false, d)
		}
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj743++
		if yyhl743 {
			yyb743 = yyj743 > l
		} else {
			yyb743 = r.CheckBreak()
		}
		if yyb743 {
			break
		}
		z.DecStructFieldNotFound(yyj743-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym753 := z.EncBinary()
		_ = yym753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep754 := !z.EncBinary()
			yy2arr754 := z.EncBasicHandle().StructToArray
			var yyq754 [3]bool
			_, _, _ = yysep754, yyq754, yy2arr754
			const yyr754 bool = false
			yyq754[1] = x.FSType != ""
			yyq754[2] = x.ReadOnly != false
			if yyr754 || yy2arr754 {
				r.EncodeArrayStart(3)
			} else {
				var yynn754 int = 1
				for _, b := range yyq754 {
					if b {
						yynn754++
					}
				}
				r.EncodeMapStart(yynn754)
			}
			if yyr754 || yy2arr754 {
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[1] {
					yym759 := z.EncBinary()
					_ = yym759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq754[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym760 := z.EncBinary()
					_ = yym760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[2] {
					yym762 := z.EncBinary()
					_ = yym762
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq754[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym763 := z.EncBinary()
					_ = yym763
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep754 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym764 := z.DecBinary()
	_ = yym764
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl765 := r.ReadMapStart()
			if yyl765 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl765, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl765 := r.ReadArrayStart()
			if yyl765 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl765, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys766Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys766Slc
	var yyhl766 bool = l >= 0
	for yyj766 := 0; ; yyj766++ {
		if yyhl766 {
			if yyj766 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys766Slc = r.DecodeBytes(yys766Slc, true, true)
		yys766 := string(yys766Slc)
		switch yys766 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys766)
		} // end switch yys766
	} // end for yyj766
	if !yyhl766 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj770 int
	var yyb770 bool
	var yyhl770 bool = l >= 0
	yyj770++
	if yyhl770 {
		yyb770 = yyj770 > l
	} else {
		yyb770 = r.CheckBreak()
	}
	if yyb770 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj770++
	if yyhl770 {
		yyb770 = yyj770 > l
	} else {
		yyb770 = r.CheckBreak()
	}
	if yyb770 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj770++
	if yyhl770 {
		yyb770 = yyj770 > l
	} else {
		yyb770 = r.CheckBreak()
	}
	if yyb770 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj770++
		if yyhl770 {
			yyb770 = yyj770 > l
		} else {
			yyb770 = r.CheckBreak()
		}
		if yyb770 {
			break
		}
		z.DecStructFieldNotFound(yyj770-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym774 := z.EncBinary()
		_ = yym774
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep775 := !z.EncBinary()
			yy2arr775 := z.EncBasicHandle().StructToArray
			var yyq775 [5]bool
			_, _, _ = yysep775, yyq775, yy2arr775
			const yyr775 bool = false
			yyq775[1] = x.User != ""
			yyq775[2] = x.SecretFile != ""
			yyq775[3] = x.SecretRef != nil
			yyq775[4] = x.ReadOnly != false
			if yyr775 || yy2arr775 {
				r.EncodeArrayStart(5)
			} else {
				var yynn775 int = 1
				for _, b := range yyq775 {
					if b {
						yynn775++
					}
				}
				r.EncodeMapStart(yynn775)
			}
			if yyr775 || yy2arr775 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym778 := z.EncBinary()
					_ = yym778
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[1] {
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq775[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym781 := z.EncBinary()
					_ = yym781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[2] {
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq775[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq775[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[4] {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq775[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep775 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym789 := z.DecBinary()
	_ = yym789
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl790 := r.ReadMapStart()
			if yyl790 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl790, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl790 := r.ReadArrayStart()
			if yyl790 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl790, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys791Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys791Slc
	var yyhl791 bool = l >= 0
	for yyj791 := 0; ; yyj791++ {
		if yyhl791 {
			if yyj791 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys791Slc = r.DecodeBytes(yys791Slc, true, true)
		yys791 := string(yys791Slc)
		switch yys791 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv792 := &x.Monitors
				yym793 := z.DecBinary()
				_ = yym793
				if false {
				} else {
					z.F.DecSliceStringX(yyv792, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys791)
		} // end switch yys791
	} // end for yyj791
	if !yyhl791 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj798 int
	var yyb798 bool
	var yyhl798 bool = l >= 0
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv799 := &x.Monitors
		yym800 := z.DecBinary()
		_ = yym800
		if false {
		} else {
			z.F.DecSliceStringX(yyv799, false, d)
		}
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj798++
		if yyhl798 {
			yyb798 = yyj798 > l
		} else {
			yyb798 = r.CheckBreak()
		}
		if yyb798 {
			break
		}
		z.DecStructFieldNotFound(yyj798-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym805 := z.EncBinary()
		_ = yym805
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep806 := !z.EncBinary()
			yy2arr806 := z.EncBasicHandle().StructToArray
			var yyq806 [1]bool
			_, _, _ = yysep806, yyq806, yy2arr806
			const yyr806 bool = false
			if yyr806 || yy2arr806 {
				r.EncodeArrayStart(1)
			} else {
				var yynn806 int = 1
				for _, b := range yyq806 {
					if b {
						yynn806++
					}
				}
				r.EncodeMapStart(yynn806)
			}
			if yyr806 || yy2arr806 {
				yym808 := z.EncBinary()
				_ = yym808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym809 := z.EncBinary()
				_ = yym809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep806 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym810 := z.DecBinary()
	_ = yym810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl811 := r.ReadMapStart()
			if yyl811 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl811, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl811 := r.ReadArrayStart()
			if yyl811 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys812Slc
	var yyhl812 bool = l >= 0
	for yyj812 := 0; ; yyj812++ {
		if yyhl812 {
			if yyj812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys812Slc = r.DecodeBytes(yys812Slc, true, true)
		yys812 := string(yys812Slc)
		switch yys812 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys812)
		} // end switch yys812
	} // end for yyj812
	if !yyhl812 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj814 int
	var yyb814 bool
	var yyhl814 bool = l >= 0
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj814++
		if yyhl814 {
			yyb814 = yyj814 > l
		} else {
			yyb814 = r.CheckBreak()
		}
		if yyb814 {
			break
		}
		z.DecStructFieldNotFound(yyj814-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym816 := z.EncBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep817 := !z.EncBinary()
			yy2arr817 := z.EncBasicHandle().StructToArray
			var yyq817 [1]bool
			_, _, _ = yysep817, yyq817, yy2arr817
			const yyr817 bool = false
			yyq817[0] = len(x.Items) != 0
			if yyr817 || yy2arr817 {
				r.EncodeArrayStart(1)
			} else {
				var yynn817 int = 0
				for _, b := range yyq817 {
					if b {
						yynn817++
					}
				}
				r.EncodeMapStart(yynn817)
			}
			if yyr817 || yy2arr817 {
				if yyq817[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym819 := z.EncBinary()
						_ = yym819
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq817[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym820 := z.EncBinary()
						_ = yym820
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep817 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym821 := z.DecBinary()
	_ = yym821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl822 := r.ReadMapStart()
			if yyl822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl822, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl822 := r.ReadArrayStart()
			if yyl822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys823Slc
	var yyhl823 bool = l >= 0
	for yyj823 := 0; ; yyj823++ {
		if yyhl823 {
			if yyj823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys823Slc = r.DecodeBytes(yys823Slc, true, true)
		yys823 := string(yys823Slc)
		switch yys823 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv824 := &x.Items
				yym825 := z.DecBinary()
				_ = yym825
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv824), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys823)
		} // end switch yys823
	} // end for yyj823
	if !yyhl823 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj826 int
	var yyb826 bool
	var yyhl826 bool = l >= 0
	yyj826++
	if yyhl826 {
		yyb826 = yyj826 > l
	} else {
		yyb826 = r.CheckBreak()
	}
	if yyb826 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv827 := &x.Items
		yym828 := z.DecBinary()
		_ = yym828
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv827), d)
		}
	}
	for {
		yyj826++
		if yyhl826 {
			yyb826 = yyj826 > l
		} else {
			yyb826 = r.CheckBreak()
		}
		if yyb826 {
			break
		}
		z.DecStructFieldNotFound(yyj826-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym829 := z.EncBinary()
		_ = yym829
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep830 := !z.EncBinary()
			yy2arr830 := z.EncBasicHandle().StructToArray
			var yyq830 [2]bool
			_, _, _ = yysep830, yyq830, yy2arr830
			const yyr830 bool = false
			if yyr830 || yy2arr830 {
				r.EncodeArrayStart(2)
			} else {
				var yynn830 int = 2
				for _, b := range yyq830 {
					if b {
						yynn830++
					}
				}
				r.EncodeMapStart(yynn830)
			}
			if yyr830 || yy2arr830 {
				yym832 := z.EncBinary()
				_ = yym832
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym833 := z.EncBinary()
				_ = yym833
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr830 || yy2arr830 {
				yy835 := &x.FieldRef
				yy835.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy836 := &x.FieldRef
				yy836.CodecEncodeSelf(e)
			}
			if yysep830 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym837 := z.DecBinary()
	_ = yym837
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl838 := r.ReadMapStart()
			if yyl838 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl838, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl838 := r.ReadArrayStart()
			if yyl838 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl838, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys839Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys839Slc
	var yyhl839 bool = l >= 0
	for yyj839 := 0; ; yyj839++ {
		if yyhl839 {
			if yyj839 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys839Slc = r.DecodeBytes(yys839Slc, true, true)
		yys839 := string(yys839Slc)
		switch yys839 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv841 := &x.FieldRef
				yyv841.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys839)
		} // end switch yys839
	} // end for yyj839
	if !yyhl839 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj842 int
	var yyb842 bool
	var yyhl842 bool = l >= 0
	yyj842++
	if yyhl842 {
		yyb842 = yyj842 > l
	} else {
		yyb842 = r.CheckBreak()
	}
	if yyb842 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj842++
	if yyhl842 {
		yyb842 = yyj842 > l
	} else {
		yyb842 = r.CheckBreak()
	}
	if yyb842 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv844 := &x.FieldRef
		yyv844.CodecDecodeSelf(d)
	}
	for {
		yyj842++
		if yyhl842 {
			yyb842 = yyj842 > l
		} else {
			yyb842 = r.CheckBreak()
		}
		if yyb842 {
			break
		}
		z.DecStructFieldNotFound(yyj842-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [5]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[0] = x.Name != ""
			yyq846[1] = x.HostPort != 0
			yyq846[3] = x.Protocol != ""
			yyq846[4] = x.HostIP != ""
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(5)
			} else {
				var yynn846 int = 1
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
			}
			if yyr846 || yy2arr846 {
				if yyq846[0] {
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq846[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr846 || yy2arr846 {
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[4] {
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep846 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym860 := z.DecBinary()
	_ = yym860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl861 := r.ReadMapStart()
			if yyl861 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl861, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl861 := r.ReadArrayStart()
			if yyl861 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl861, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys862Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys862Slc
	var yyhl862 bool = l >= 0
	for yyj862 := 0; ; yyj862++ {
		if yyhl862 {
			if yyj862 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys862Slc = r.DecodeBytes(yys862Slc, true, true)
		yys862 := string(yys862Slc)
		switch yys862 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys862)
		} // end switch yys862
	} // end for yyj862
	if !yyhl862 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj868 int
	var yyb868 bool
	var yyhl868 bool = l >= 0
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj868++
		if yyhl868 {
			yyb868 = yyj868 > l
		} else {
			yyb868 = r.CheckBreak()
		}
		if yyb868 {
			break
		}
		z.DecStructFieldNotFound(yyj868-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym874 := z.EncBinary()
		_ = yym874
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep875 := !z.EncBinary()
			yy2arr875 := z.EncBasicHandle().StructToArray
			var yyq875 [3]bool
			_, _, _ = yysep875, yyq875, yy2arr875
			const yyr875 bool = false
			yyq875[1] = x.ReadOnly != false
			if yyr875 || yy2arr875 {
				r.EncodeArrayStart(3)
			} else {
				var yynn875 int = 2
				for _, b := range yyq875 {
					if b {
						yynn875++
					}
				}
				r.EncodeMapStart(yynn875)
			}
			if yyr875 || yy2arr875 {
				yym877 := z.EncBinary()
				_ = yym877
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym878 := z.EncBinary()
				_ = yym878
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr875 || yy2arr875 {
				if yyq875[1] {
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq875[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym881 := z.EncBinary()
					_ = yym881
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr875 || yy2arr875 {
				yym883 := z.EncBinary()
				_ = yym883
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym884 := z.EncBinary()
				_ = yym884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep875 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym885 := z.DecBinary()
	_ = yym885
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl886 := r.ReadMapStart()
			if yyl886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl886, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl886 := r.ReadArrayStart()
			if yyl886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl886, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys887Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys887Slc
	var yyhl887 bool = l >= 0
	for yyj887 := 0; ; yyj887++ {
		if yyhl887 {
			if yyj887 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys887Slc = r.DecodeBytes(yys887Slc, true, true)
		yys887 := string(yys887Slc)
		switch yys887 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys887)
		} // end switch yys887
	} // end for yyj887
	if !yyhl887 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj891 int
	var yyb891 bool
	var yyhl891 bool = l >= 0
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj891++
		if yyhl891 {
			yyb891 = yyj891 > l
		} else {
			yyb891 = r.CheckBreak()
		}
		if yyb891 {
			break
		}
		z.DecStructFieldNotFound(yyj891-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym895 := z.EncBinary()
		_ = yym895
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep896 := !z.EncBinary()
			yy2arr896 := z.EncBasicHandle().StructToArray
			var yyq896 [3]bool
			_, _, _ = yysep896, yyq896, yy2arr896
			const yyr896 bool = false
			yyq896[1] = x.Value != ""
			yyq896[2] = x.ValueFrom != nil
			if yyr896 || yy2arr896 {
				r.EncodeArrayStart(3)
			} else {
				var yynn896 int = 1
				for _, b := range yyq896 {
					if b {
						yynn896++
					}
				}
				r.EncodeMapStart(yynn896)
			}
			if yyr896 || yy2arr896 {
				yym898 := z.EncBinary()
				_ = yym898
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym899 := z.EncBinary()
				_ = yym899
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr896 || yy2arr896 {
				if yyq896[1] {
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq896[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr896 || yy2arr896 {
				if yyq896[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq896[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep896 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym904 := z.DecBinary()
	_ = yym904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl905 := r.ReadMapStart()
			if yyl905 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl905, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl905 := r.ReadArrayStart()
			if yyl905 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl905, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys906Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys906Slc
	var yyhl906 bool = l >= 0
	for yyj906 := 0; ; yyj906++ {
		if yyhl906 {
			if yyj906 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys906Slc = r.DecodeBytes(yys906Slc, true, true)
		yys906 := string(yys906Slc)
		switch yys906 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys906)
		} // end switch yys906
	} // end for yyj906
	if !yyhl906 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj910 int
	var yyb910 bool
	var yyhl910 bool = l >= 0
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj910++
		if yyhl910 {
			yyb910 = yyj910 > l
		} else {
			yyb910 = r.CheckBreak()
		}
		if yyb910 {
			break
		}
		z.DecStructFieldNotFound(yyj910-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym914 := z.EncBinary()
		_ = yym914
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep915 := !z.EncBinary()
			yy2arr915 := z.EncBasicHandle().StructToArray
			var yyq915 [1]bool
			_, _, _ = yysep915, yyq915, yy2arr915
			const yyr915 bool = false
			if yyr915 || yy2arr915 {
				r.EncodeArrayStart(1)
			} else {
				var yynn915 int = 1
				for _, b := range yyq915 {
					if b {
						yynn915++
					}
				}
				r.EncodeMapStart(yynn915)
			}
			if yyr915 || yy2arr915 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep915 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym917 := z.DecBinary()
	_ = yym917
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl918 := r.ReadMapStart()
			if yyl918 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl918, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl918 := r.ReadArrayStart()
			if yyl918 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl918, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys919Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys919Slc
	var yyhl919 bool = l >= 0
	for yyj919 := 0; ; yyj919++ {
		if yyhl919 {
			if yyj919 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys919Slc = r.DecodeBytes(yys919Slc, true, true)
		yys919 := string(yys919Slc)
		switch yys919 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys919)
		} // end switch yys919
	} // end for yyj919
	if !yyhl919 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj921 int
	var yyb921 bool
	var yyhl921 bool = l >= 0
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj921++
		if yyhl921 {
			yyb921 = yyj921 > l
		} else {
			yyb921 = r.CheckBreak()
		}
		if yyb921 {
			break
		}
		z.DecStructFieldNotFound(yyj921-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym923 := z.EncBinary()
		_ = yym923
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep924 := !z.EncBinary()
			yy2arr924 := z.EncBasicHandle().StructToArray
			var yyq924 [2]bool
			_, _, _ = yysep924, yyq924, yy2arr924
			const yyr924 bool = false
			if yyr924 || yy2arr924 {
				r.EncodeArrayStart(2)
			} else {
				var yynn924 int = 2
				for _, b := range yyq924 {
					if b {
						yynn924++
					}
				}
				r.EncodeMapStart(yynn924)
			}
			if yyr924 || yy2arr924 {
				yym926 := z.EncBinary()
				_ = yym926
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				yym927 := z.EncBinary()
				_ = yym927
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr924 || yy2arr924 {
				yym929 := z.EncBinary()
				_ = yym929
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym930 := z.EncBinary()
				_ = yym930
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep924 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym931 := z.DecBinary()
	_ = yym931
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl932 := r.ReadMapStart()
			if yyl932 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl932, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl932 := r.ReadArrayStart()
			if yyl932 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl932, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys933Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys933Slc
	var yyhl933 bool = l >= 0
	for yyj933 := 0; ; yyj933++ {
		if yyhl933 {
			if yyj933 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys933Slc = r.DecodeBytes(yys933Slc, true, true)
		yys933 := string(yys933Slc)
		switch yys933 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys933)
		} // end switch yys933
	} // end for yyj933
	if !yyhl933 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj936 int
	var yyb936 bool
	var yyhl936 bool = l >= 0
	yyj936++
	if yyhl936 {
		yyb936 = yyj936 > l
	} else {
		yyb936 = r.CheckBreak()
	}
	if yyb936 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj936++
	if yyhl936 {
		yyb936 = yyj936 > l
	} else {
		yyb936 = r.CheckBreak()
	}
	if yyb936 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj936++
		if yyhl936 {
			yyb936 = yyj936 > l
		} else {
			yyb936 = r.CheckBreak()
		}
		if yyb936 {
			break
		}
		z.DecStructFieldNotFound(yyj936-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym939 := z.EncBinary()
		_ = yym939
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep940 := !z.EncBinary()
			yy2arr940 := z.EncBasicHandle().StructToArray
			var yyq940 [4]bool
			_, _, _ = yysep940, yyq940, yy2arr940
			const yyr940 bool = false
			yyq940[0] = x.Path != ""
			yyq940[1] = true
			yyq940[2] = x.Host != ""
			yyq940[3] = x.Scheme != ""
			if yyr940 || yy2arr940 {
				r.EncodeArrayStart(4)
			} else {
				var yynn940 int = 0
				for _, b := range yyq940 {
					if b {
						yynn940++
					}
				}
				r.EncodeMapStart(yynn940)
			}
			if yyr940 || yy2arr940 {
				if yyq940[0] {
					yym942 := z.EncBinary()
					_ = yym942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq940[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr940 || yy2arr940 {
				if yyq940[1] {
					yy945 := &x.Port
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else if z.HasExtensions() && z.EncExt(yy945) {
					} else if !yym946 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy945)
					} else {
						z.EncFallback(yy945)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq940[1] {
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					yy947 := &x.Port
					yym948 := z.EncBinary()
					_ = yym948
					if false {
					} else if z.HasExtensions() && z.EncExt(yy947) {
					} else if !yym948 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy947)
					} else {
						z.EncFallback(yy947)
					}
				}
			}
			if yyr940 || yy2arr940 {
				if yyq940[2] {
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq940[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr940 || yy2arr940 {
				if yyq940[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq940[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep940 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym953 := z.DecBinary()
	_ = yym953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl954 := r.ReadMapStart()
			if yyl954 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl954, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl954 := r.ReadArrayStart()
			if yyl954 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl954, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys955Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys955Slc
	var yyhl955 bool = l >= 0
	for yyj955 := 0; ; yyj955++ {
		if yyhl955 {
			if yyj955 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys955Slc = r.DecodeBytes(yys955Slc, true, true)
		yys955 := string(yys955Slc)
		switch yys955 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv957 := &x.Port
				yym958 := z.DecBinary()
				_ = yym958
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv957) {
				} else if !yym958 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv957)
				} else {
					z.DecFallback(yyv957, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys955)
		} // end switch yys955
	} // end for yyj955
	if !yyhl955 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj961 int
	var yyb961 bool
	var yyhl961 bool = l >= 0
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv963 := &x.Port
		yym964 := z.DecBinary()
		_ = yym964
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv963) {
		} else if !yym964 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv963)
		} else {
			z.DecFallback(yyv963, false)
		}
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj961++
		if yyhl961 {
			yyb961 = yyj961 > l
		} else {
			yyb961 = r.CheckBreak()
		}
		if yyb961 {
			break
		}
		z.DecStructFieldNotFound(yyj961-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym967 := z.EncBinary()
	_ = yym967
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym968 := z.DecBinary()
	_ = yym968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym969 := z.EncBinary()
		_ = yym969
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep970 := !z.EncBinary()
			yy2arr970 := z.EncBasicHandle().StructToArray
			var yyq970 [1]bool
			_, _, _ = yysep970, yyq970, yy2arr970
			const yyr970 bool = false
			yyq970[0] = true
			if yyr970 || yy2arr970 {
				r.EncodeArrayStart(1)
			} else {
				var yynn970 int = 0
				for _, b := range yyq970 {
					if b {
						yynn970++
					}
				}
				r.EncodeMapStart(yynn970)
			}
			if yyr970 || yy2arr970 {
				if yyq970[0] {
					yy972 := &x.Port
					yym973 := z.EncBinary()
					_ = yym973
					if false {
					} else if z.HasExtensions() && z.EncExt(yy972) {
					} else if !yym973 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy972)
					} else {
						z.EncFallback(yy972)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq970[0] {
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					yy974 := &x.Port
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else if z.HasExtensions() && z.EncExt(yy974) {
					} else if !yym975 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy974)
					} else {
						z.EncFallback(yy974)
					}
				}
			}
			if yysep970 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym976 := z.DecBinary()
	_ = yym976
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl977 := r.ReadMapStart()
			if yyl977 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl977, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl977 := r.ReadArrayStart()
			if yyl977 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl977, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys978Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys978Slc
	var yyhl978 bool = l >= 0
	for yyj978 := 0; ; yyj978++ {
		if yyhl978 {
			if yyj978 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys978Slc = r.DecodeBytes(yys978Slc, true, true)
		yys978 := string(yys978Slc)
		switch yys978 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv979 := &x.Port
				yym980 := z.DecBinary()
				_ = yym980
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv979) {
				} else if !yym980 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv979)
				} else {
					z.DecFallback(yyv979, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys978)
		} // end switch yys978
	} // end for yyj978
	if !yyhl978 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj981 int
	var yyb981 bool
	var yyhl981 bool = l >= 0
	yyj981++
	if yyhl981 {
		yyb981 = yyj981 > l
	} else {
		yyb981 = r.CheckBreak()
	}
	if yyb981 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv982 := &x.Port
		yym983 := z.DecBinary()
		_ = yym983
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv982) {
		} else if !yym983 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv982)
		} else {
			z.DecFallback(yyv982, false)
		}
	}
	for {
		yyj981++
		if yyhl981 {
			yyb981 = yyj981 > l
		} else {
			yyb981 = r.CheckBreak()
		}
		if yyb981 {
			break
		}
		z.DecStructFieldNotFound(yyj981-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym984 := z.EncBinary()
		_ = yym984
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep985 := !z.EncBinary()
			yy2arr985 := z.EncBasicHandle().StructToArray
			var yyq985 [1]bool
			_, _, _ = yysep985, yyq985, yy2arr985
			const yyr985 bool = false
			yyq985[0] = len(x.Command) != 0
			if yyr985 || yy2arr985 {
				r.EncodeArrayStart(1)
			} else {
				var yynn985 int = 0
				for _, b := range yyq985 {
					if b {
						yynn985++
					}
				}
				r.EncodeMapStart(yynn985)
			}
			if yyr985 || yy2arr985 {
				if yyq985[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym987 := z.EncBinary()
						_ = yym987
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq985[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym988 := z.EncBinary()
						_ = yym988
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep985 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym989 := z.DecBinary()
	_ = yym989
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl990 := r.ReadMapStart()
			if yyl990 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl990, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl990 := r.ReadArrayStart()
			if yyl990 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl990, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys991Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys991Slc
	var yyhl991 bool = l >= 0
	for yyj991 := 0; ; yyj991++ {
		if yyhl991 {
			if yyj991 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys991Slc = r.DecodeBytes(yys991Slc, true, true)
		yys991 := string(yys991Slc)
		switch yys991 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv992 := &x.Command
				yym993 := z.DecBinary()
				_ = yym993
				if false {
				} else {
					z.F.DecSliceStringX(yyv992, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys991)
		} // end switch yys991
	} // end for yyj991
	if !yyhl991 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj994 int
	var yyb994 bool
	var yyhl994 bool = l >= 0
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv995 := &x.Command
		yym996 := z.DecBinary()
		_ = yym996
		if false {
		} else {
			z.F.DecSliceStringX(yyv995, false, d)
		}
	}
	for {
		yyj994++
		if yyhl994 {
			yyb994 = yyj994 > l
		} else {
			yyb994 = r.CheckBreak()
		}
		if yyb994 {
			break
		}
		z.DecStructFieldNotFound(yyj994-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym997 := z.EncBinary()
		_ = yym997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep998 := !z.EncBinary()
			yy2arr998 := z.EncBasicHandle().StructToArray
			var yyq998 [5]bool
			_, _, _ = yysep998, yyq998, yy2arr998
			const yyr998 bool = false
			yyq998[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq998[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq998[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq998[3] = x.InitialDelaySeconds != 0
			yyq998[4] = x.TimeoutSeconds != 0
			if yyr998 || yy2arr998 {
				r.EncodeArrayStart(5)
			} else {
				var yynn998 int = 0
				for _, b := range yyq998 {
					if b {
						yynn998++
					}
				}
				r.EncodeMapStart(yynn998)
			}
			var yyn999 bool
			if x.Handler.Exec == nil {
				yyn999 = true
				goto LABEL999
			}
		LABEL999:
			if yyr998 || yy2arr998 {
				if yyn999 {
					r.EncodeNil()
				} else {
					if yyq998[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq998[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn999 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1000 bool
			if x.Handler.HTTPGet == nil {
				yyn1000 = true
				goto LABEL1000
			}
		LABEL1000:
			if yyr998 || yy2arr998 {
				if yyn1000 {
					r.EncodeNil()
				} else {
					if yyq998[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq998[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn1000 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1001 bool
			if x.Handler.TCPSocket == nil {
				yyn1001 = true
				goto LABEL1001
			}
		LABEL1001:
			if yyr998 || yy2arr998 {
				if yyn1001 {
					r.EncodeNil()
				} else {
					if yyq998[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq998[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn1001 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[3] {
					yym1003 := z.EncBinary()
					_ = yym1003
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq998[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym1004 := z.EncBinary()
					_ = yym1004
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[4] {
					yym1006 := z.EncBinary()
					_ = yym1006
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq998[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym1007 := z.EncBinary()
					_ = yym1007
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yysep998 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1008 := z.DecBinary()
	_ = yym1008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1009 := r.ReadMapStart()
			if yyl1009 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1009, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1009 := r.ReadArrayStart()
			if yyl1009 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1009, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1010Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1010Slc
	var yyhl1010 bool = l >= 0
	for yyj1010 := 0; ; yyj1010++ {
		if yyhl1010 {
			if yyj1010 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1010Slc = r.DecodeBytes(yys1010Slc, true, true)
		yys1010 := string(yys1010Slc)
		switch yys1010 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1010)
		} // end switch yys1010
	} // end for yyj1010
	if !yyhl1010 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1016 int
	var yyb1016 bool
	var yyhl1016 bool = l >= 0
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	for {
		yyj1016++
		if yyhl1016 {
			yyb1016 = yyj1016 > l
		} else {
			yyb1016 = r.CheckBreak()
		}
		if yyb1016 {
			break
		}
		z.DecStructFieldNotFound(yyj1016-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1022 := z.EncBinary()
	_ = yym1022
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1023 := z.DecBinary()
	_ = yym1023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1024 := z.EncBinary()
	_ = yym1024
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1025 := z.DecBinary()
	_ = yym1025
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1026 := z.EncBinary()
		_ = yym1026
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1027 := !z.EncBinary()
			yy2arr1027 := z.EncBasicHandle().StructToArray
			var yyq1027 [2]bool
			_, _, _ = yysep1027, yyq1027, yy2arr1027
			const yyr1027 bool = false
			yyq1027[0] = len(x.Add) != 0
			yyq1027[1] = len(x.Drop) != 0
			if yyr1027 || yy2arr1027 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1027 int = 0
				for _, b := range yyq1027 {
					if b {
						yynn1027++
					}
				}
				r.EncodeMapStart(yynn1027)
			}
			if yyr1027 || yy2arr1027 {
				if yyq1027[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1029 := z.EncBinary()
						_ = yym1029
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1027[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1030 := z.EncBinary()
						_ = yym1030
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1027 || yy2arr1027 {
				if yyq1027[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1032 := z.EncBinary()
						_ = yym1032
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1027[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1033 := z.EncBinary()
						_ = yym1033
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep1027 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1034 := z.DecBinary()
	_ = yym1034
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1035 := r.ReadMapStart()
			if yyl1035 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1035, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1035 := r.ReadArrayStart()
			if yyl1035 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1035, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1036Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1036Slc
	var yyhl1036 bool = l >= 0
	for yyj1036 := 0; ; yyj1036++ {
		if yyhl1036 {
			if yyj1036 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1036Slc = r.DecodeBytes(yys1036Slc, true, true)
		yys1036 := string(yys1036Slc)
		switch yys1036 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1037 := &x.Add
				yym1038 := z.DecBinary()
				_ = yym1038
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1037), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1039 := &x.Drop
				yym1040 := z.DecBinary()
				_ = yym1040
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1039), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1036)
		} // end switch yys1036
	} // end for yyj1036
	if !yyhl1036 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1041 int
	var yyb1041 bool
	var yyhl1041 bool = l >= 0
	yyj1041++
	if yyhl1041 {
		yyb1041 = yyj1041 > l
	} else {
		yyb1041 = r.CheckBreak()
	}
	if yyb1041 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1042 := &x.Add
		yym1043 := z.DecBinary()
		_ = yym1043
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1042), d)
		}
	}
	yyj1041++
	if yyhl1041 {
		yyb1041 = yyj1041 > l
	} else {
		yyb1041 = r.CheckBreak()
	}
	if yyb1041 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1044 := &x.Drop
		yym1045 := z.DecBinary()
		_ = yym1045
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1044), d)
		}
	}
	for {
		yyj1041++
		if yyhl1041 {
			yyb1041 = yyj1041 > l
		} else {
			yyb1041 = r.CheckBreak()
		}
		if yyb1041 {
			break
		}
		z.DecStructFieldNotFound(yyj1041-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1046 := z.EncBinary()
		_ = yym1046
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1047 := !z.EncBinary()
			yy2arr1047 := z.EncBasicHandle().StructToArray
			var yyq1047 [2]bool
			_, _, _ = yysep1047, yyq1047, yy2arr1047
			const yyr1047 bool = false
			yyq1047[0] = len(x.Limits) != 0
			yyq1047[1] = len(x.Requests) != 0
			if yyr1047 || yy2arr1047 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1047 int = 0
				for _, b := range yyq1047 {
					if b {
						yynn1047++
					}
				}
				r.EncodeMapStart(yynn1047)
			}
			if yyr1047 || yy2arr1047 {
				if yyq1047[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1047[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				if yyq1047[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1047[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1047 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1050 := z.DecBinary()
	_ = yym1050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1051 := r.ReadMapStart()
			if yyl1051 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1051, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1051 := r.ReadArrayStart()
			if yyl1051 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1051, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1052Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1052Slc
	var yyhl1052 bool = l >= 0
	for yyj1052 := 0; ; yyj1052++ {
		if yyhl1052 {
			if yyj1052 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1052Slc = r.DecodeBytes(yys1052Slc, true, true)
		yys1052 := string(yys1052Slc)
		switch yys1052 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1053 := &x.Limits
				yyv1053.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1054 := &x.Requests
				yyv1054.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1052)
		} // end switch yys1052
	} // end for yyj1052
	if !yyhl1052 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1055 int
	var yyb1055 bool
	var yyhl1055 bool = l >= 0
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1056 := &x.Limits
		yyv1056.CodecDecodeSelf(d)
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1057 := &x.Requests
		yyv1057.CodecDecodeSelf(d)
	}
	for {
		yyj1055++
		if yyhl1055 {
			yyb1055 = yyj1055 > l
		} else {
			yyb1055 = r.CheckBreak()
		}
		if yyb1055 {
			break
		}
		z.DecStructFieldNotFound(yyj1055-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1058 := z.EncBinary()
		_ = yym1058
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1059 := !z.EncBinary()
			yy2arr1059 := z.EncBasicHandle().StructToArray
			var yyq1059 [18]bool
			_, _, _ = yysep1059, yyq1059, yy2arr1059
			const yyr1059 bool = false
			yyq1059[2] = len(x.Command) != 0
			yyq1059[3] = len(x.Args) != 0
			yyq1059[4] = x.WorkingDir != ""
			yyq1059[5] = len(x.Ports) != 0
			yyq1059[6] = len(x.Env) != 0
			yyq1059[7] = true
			yyq1059[8] = len(x.VolumeMounts) != 0
			yyq1059[9] = x.LivenessProbe != nil
			yyq1059[10] = x.ReadinessProbe != nil
			yyq1059[11] = x.Lifecycle != nil
			yyq1059[12] = x.TerminationMessagePath != ""
			yyq1059[14] = x.SecurityContext != nil
			yyq1059[15] = x.Stdin != false
			yyq1059[16] = x.StdinOnce != false
			yyq1059[17] = x.TTY != false
			if yyr1059 || yy2arr1059 {
				r.EncodeArrayStart(18)
			} else {
				var yynn1059 int = 3
				for _, b := range yyq1059 {
					if b {
						yynn1059++
					}
				}
				r.EncodeMapStart(yynn1059)
			}
			if yyr1059 || yy2arr1059 {
				yym1061 := z.EncBinary()
				_ = yym1061
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1062 := z.EncBinary()
				_ = yym1062
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1059 || yy2arr1059 {
				yym1064 := z.EncBinary()
				_ = yym1064
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1065 := z.EncBinary()
				_ = yym1065
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1067 := z.EncBinary()
						_ = yym1067
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1068 := z.EncBinary()
						_ = yym1068
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1070 := z.EncBinary()
						_ = yym1070
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1071 := z.EncBinary()
						_ = yym1071
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[4] {
					yym1073 := z.EncBinary()
					_ = yym1073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1059[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1076 := z.EncBinary()
						_ = yym1076
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1077 := z.EncBinary()
						_ = yym1077
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1079 := z.EncBinary()
						_ = yym1079
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1080 := z.EncBinary()
						_ = yym1080
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[7] {
					yy1082 := &x.Resources
					yy1082.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1083 := &x.Resources
					yy1083.CodecEncodeSelf(e)
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1085 := z.EncBinary()
						_ = yym1085
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1086 := z.EncBinary()
						_ = yym1086
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[12] {
					yym1091 := z.EncBinary()
					_ = yym1091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1059[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[15] {
					yym1096 := z.EncBinary()
					_ = yym1096
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1059[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1097 := z.EncBinary()
					_ = yym1097
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[16] {
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1059[16] {
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					yym1100 := z.EncBinary()
					_ = yym1100
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[17] {
					yym1102 := z.EncBinary()
					_ = yym1102
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1059[17] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1103 := z.EncBinary()
					_ = yym1103
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1059 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1104 := z.DecBinary()
	_ = yym1104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1105 := r.ReadMapStart()
			if yyl1105 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1105, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1105 := r.ReadArrayStart()
			if yyl1105 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1105, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1106Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1106Slc
	var yyhl1106 bool = l >= 0
	for yyj1106 := 0; ; yyj1106++ {
		if yyhl1106 {
			if yyj1106 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1106Slc = r.DecodeBytes(yys1106Slc, true, true)
		yys1106 := string(yys1106Slc)
		switch yys1106 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1109 := &x.Command
				yym1110 := z.DecBinary()
				_ = yym1110
				if false {
				} else {
					z.F.DecSliceStringX(yyv1109, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1111 := &x.Args
				yym1112 := z.DecBinary()
				_ = yym1112
				if false {
				} else {
					z.F.DecSliceStringX(yyv1111, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1114 := &x.Ports
				yym1115 := z.DecBinary()
				_ = yym1115
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1114), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1116 := &x.Env
				yym1117 := z.DecBinary()
				_ = yym1117
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1116), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1118 := &x.Resources
				yyv1118.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1119 := &x.VolumeMounts
				yym1120 := z.DecBinary()
				_ = yym1120
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1119), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1106)
		} // end switch yys1106
	} // end for yyj1106
	if !yyhl1106 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1130 int
	var yyb1130 bool
	var yyhl1130 bool = l >= 0
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1133 := &x.Command
		yym1134 := z.DecBinary()
		_ = yym1134
		if false {
		} else {
			z.F.DecSliceStringX(yyv1133, false, d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1135 := &x.Args
		yym1136 := z.DecBinary()
		_ = yym1136
		if false {
		} else {
			z.F.DecSliceStringX(yyv1135, false, d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1138 := &x.Ports
		yym1139 := z.DecBinary()
		_ = yym1139
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1138), d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1140 := &x.Env
		yym1141 := z.DecBinary()
		_ = yym1141
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1140), d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1142 := &x.Resources
		yyv1142.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1143 := &x.VolumeMounts
		yym1144 := z.DecBinary()
		_ = yym1144
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1143), d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1130++
		if yyhl1130 {
			yyb1130 = yyj1130 > l
		} else {
			yyb1130 = r.CheckBreak()
		}
		if yyb1130 {
			break
		}
		z.DecStructFieldNotFound(yyj1130-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1154 := z.EncBinary()
		_ = yym1154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1155 := !z.EncBinary()
			yy2arr1155 := z.EncBasicHandle().StructToArray
			var yyq1155 [3]bool
			_, _, _ = yysep1155, yyq1155, yy2arr1155
			const yyr1155 bool = false
			yyq1155[0] = x.Exec != nil
			yyq1155[1] = x.HTTPGet != nil
			yyq1155[2] = x.TCPSocket != nil
			if yyr1155 || yy2arr1155 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1155 int = 0
				for _, b := range yyq1155 {
					if b {
						yynn1155++
					}
				}
				r.EncodeMapStart(yynn1155)
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1155 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1159 := z.DecBinary()
	_ = yym1159
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1160 := r.ReadMapStart()
			if yyl1160 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1160, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1160 := r.ReadArrayStart()
			if yyl1160 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1160, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1161Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1161Slc
	var yyhl1161 bool = l >= 0
	for yyj1161 := 0; ; yyj1161++ {
		if yyhl1161 {
			if yyj1161 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1161Slc = r.DecodeBytes(yys1161Slc, true, true)
		yys1161 := string(yys1161Slc)
		switch yys1161 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1161)
		} // end switch yys1161
	} // end for yyj1161
	if !yyhl1161 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1165 int
	var yyb1165 bool
	var yyhl1165 bool = l >= 0
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1165++
		if yyhl1165 {
			yyb1165 = yyj1165 > l
		} else {
			yyb1165 = r.CheckBreak()
		}
		if yyb1165 {
			break
		}
		z.DecStructFieldNotFound(yyj1165-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1169 := z.EncBinary()
		_ = yym1169
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1170 := !z.EncBinary()
			yy2arr1170 := z.EncBasicHandle().StructToArray
			var yyq1170 [2]bool
			_, _, _ = yysep1170, yyq1170, yy2arr1170
			const yyr1170 bool = false
			yyq1170[0] = x.PostStart != nil
			yyq1170[1] = x.PreStop != nil
			if yyr1170 || yy2arr1170 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1170 int = 0
				for _, b := range yyq1170 {
					if b {
						yynn1170++
					}
				}
				r.EncodeMapStart(yynn1170)
			}
			if yyr1170 || yy2arr1170 {
				if yyq1170[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1170[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1170 || yy2arr1170 {
				if yyq1170[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1170[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1170 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1173 := z.DecBinary()
	_ = yym1173
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1174 := r.ReadMapStart()
			if yyl1174 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1174, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1174 := r.ReadArrayStart()
			if yyl1174 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1174, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1175Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1175Slc
	var yyhl1175 bool = l >= 0
	for yyj1175 := 0; ; yyj1175++ {
		if yyhl1175 {
			if yyj1175 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1175Slc = r.DecodeBytes(yys1175Slc, true, true)
		yys1175 := string(yys1175Slc)
		switch yys1175 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1175)
		} // end switch yys1175
	} // end for yyj1175
	if !yyhl1175 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1178 int
	var yyb1178 bool
	var yyhl1178 bool = l >= 0
	yyj1178++
	if yyhl1178 {
		yyb1178 = yyj1178 > l
	} else {
		yyb1178 = r.CheckBreak()
	}
	if yyb1178 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1178++
	if yyhl1178 {
		yyb1178 = yyj1178 > l
	} else {
		yyb1178 = r.CheckBreak()
	}
	if yyb1178 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1178++
		if yyhl1178 {
			yyb1178 = yyj1178 > l
		} else {
			yyb1178 = r.CheckBreak()
		}
		if yyb1178 {
			break
		}
		z.DecStructFieldNotFound(yyj1178-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1181 := z.EncBinary()
	_ = yym1181
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1182 := z.DecBinary()
	_ = yym1182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1183 := z.EncBinary()
		_ = yym1183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1184 := !z.EncBinary()
			yy2arr1184 := z.EncBasicHandle().StructToArray
			var yyq1184 [2]bool
			_, _, _ = yysep1184, yyq1184, yy2arr1184
			const yyr1184 bool = false
			yyq1184[0] = x.Reason != ""
			yyq1184[1] = x.Message != ""
			if yyr1184 || yy2arr1184 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1184 int = 0
				for _, b := range yyq1184 {
					if b {
						yynn1184++
					}
				}
				r.EncodeMapStart(yynn1184)
			}
			if yyr1184 || yy2arr1184 {
				if yyq1184[0] {
					yym1186 := z.EncBinary()
					_ = yym1186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1184[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1184 || yy2arr1184 {
				if yyq1184[1] {
					yym1189 := z.EncBinary()
					_ = yym1189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1184[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1190 := z.EncBinary()
					_ = yym1190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1184 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1191 := z.DecBinary()
	_ = yym1191
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1192 := r.ReadMapStart()
			if yyl1192 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1192, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1192 := r.ReadArrayStart()
			if yyl1192 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1192, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1193Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1193Slc
	var yyhl1193 bool = l >= 0
	for yyj1193 := 0; ; yyj1193++ {
		if yyhl1193 {
			if yyj1193 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1193Slc = r.DecodeBytes(yys1193Slc, true, true)
		yys1193 := string(yys1193Slc)
		switch yys1193 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1193)
		} // end switch yys1193
	} // end for yyj1193
	if !yyhl1193 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1196 int
	var yyb1196 bool
	var yyhl1196 bool = l >= 0
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1196++
		if yyhl1196 {
			yyb1196 = yyj1196 > l
		} else {
			yyb1196 = r.CheckBreak()
		}
		if yyb1196 {
			break
		}
		z.DecStructFieldNotFound(yyj1196-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1199 := z.EncBinary()
		_ = yym1199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1200 := !z.EncBinary()
			yy2arr1200 := z.EncBasicHandle().StructToArray
			var yyq1200 [1]bool
			_, _, _ = yysep1200, yyq1200, yy2arr1200
			const yyr1200 bool = false
			yyq1200[0] = true
			if yyr1200 || yy2arr1200 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1200 int = 0
				for _, b := range yyq1200 {
					if b {
						yynn1200++
					}
				}
				r.EncodeMapStart(yynn1200)
			}
			if yyr1200 || yy2arr1200 {
				if yyq1200[0] {
					yy1202 := &x.StartedAt
					yym1203 := z.EncBinary()
					_ = yym1203
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1202) {
					} else if yym1203 {
						z.EncBinaryMarshal(yy1202)
					} else if !yym1203 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1202)
					} else {
						z.EncFallback(yy1202)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1200[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1204 := &x.StartedAt
					yym1205 := z.EncBinary()
					_ = yym1205
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1204) {
					} else if yym1205 {
						z.EncBinaryMarshal(yy1204)
					} else if !yym1205 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1204)
					} else {
						z.EncFallback(yy1204)
					}
				}
			}
			if yysep1200 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1206 := z.DecBinary()
	_ = yym1206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1207 := r.ReadMapStart()
			if yyl1207 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1207, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1207 := r.ReadArrayStart()
			if yyl1207 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1208Slc
	var yyhl1208 bool = l >= 0
	for yyj1208 := 0; ; yyj1208++ {
		if yyhl1208 {
			if yyj1208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1208Slc = r.DecodeBytes(yys1208Slc, true, true)
		yys1208 := string(yys1208Slc)
		switch yys1208 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1209 := &x.StartedAt
				yym1210 := z.DecBinary()
				_ = yym1210
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1209) {
				} else if yym1210 {
					z.DecBinaryUnmarshal(yyv1209)
				} else if !yym1210 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1209)
				} else {
					z.DecFallback(yyv1209, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1208)
		} // end switch yys1208
	} // end for yyj1208
	if !yyhl1208 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1211 int
	var yyb1211 bool
	var yyhl1211 bool = l >= 0
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1212 := &x.StartedAt
		yym1213 := z.DecBinary()
		_ = yym1213
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1212) {
		} else if yym1213 {
			z.DecBinaryUnmarshal(yyv1212)
		} else if !yym1213 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1212)
		} else {
			z.DecFallback(yyv1212, false)
		}
	}
	for {
		yyj1211++
		if yyhl1211 {
			yyb1211 = yyj1211 > l
		} else {
			yyb1211 = r.CheckBreak()
		}
		if yyb1211 {
			break
		}
		z.DecStructFieldNotFound(yyj1211-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1214 := z.EncBinary()
		_ = yym1214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1215 := !z.EncBinary()
			yy2arr1215 := z.EncBasicHandle().StructToArray
			var yyq1215 [7]bool
			_, _, _ = yysep1215, yyq1215, yy2arr1215
			const yyr1215 bool = false
			yyq1215[1] = x.Signal != 0
			yyq1215[2] = x.Reason != ""
			yyq1215[3] = x.Message != ""
			yyq1215[4] = true
			yyq1215[5] = true
			yyq1215[6] = x.ContainerID != ""
			if yyr1215 || yy2arr1215 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1215 int = 1
				for _, b := range yyq1215 {
					if b {
						yynn1215++
					}
				}
				r.EncodeMapStart(yynn1215)
			}
			if yyr1215 || yy2arr1215 {
				yym1217 := z.EncBinary()
				_ = yym1217
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1218 := z.EncBinary()
				_ = yym1218
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[1] {
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1215[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1221 := z.EncBinary()
					_ = yym1221
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[2] {
					yym1223 := z.EncBinary()
					_ = yym1223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1224 := z.EncBinary()
					_ = yym1224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[3] {
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1227 := z.EncBinary()
					_ = yym1227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[4] {
					yy1229 := &x.StartedAt
					yym1230 := z.EncBinary()
					_ = yym1230
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1229) {
					} else if yym1230 {
						z.EncBinaryMarshal(yy1229)
					} else if !yym1230 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1229)
					} else {
						z.EncFallback(yy1229)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1215[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1231 := &x.StartedAt
					yym1232 := z.EncBinary()
					_ = yym1232
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1231) {
					} else if yym1232 {
						z.EncBinaryMarshal(yy1231)
					} else if !yym1232 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1231)
					} else {
						z.EncFallback(yy1231)
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[5] {
					yy1234 := &x.FinishedAt
					yym1235 := z.EncBinary()
					_ = yym1235
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1234) {
					} else if yym1235 {
						z.EncBinaryMarshal(yy1234)
					} else if !yym1235 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1234)
					} else {
						z.EncFallback(yy1234)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1215[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1236 := &x.FinishedAt
					yym1237 := z.EncBinary()
					_ = yym1237
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1236) {
					} else if yym1237 {
						z.EncBinaryMarshal(yy1236)
					} else if !yym1237 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1236)
					} else {
						z.EncFallback(yy1236)
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[6] {
					yym1239 := z.EncBinary()
					_ = yym1239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1240 := z.EncBinary()
					_ = yym1240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1215 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1241 := z.DecBinary()
	_ = yym1241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1242 := r.ReadMapStart()
			if yyl1242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1242, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1242 := r.ReadArrayStart()
			if yyl1242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1243Slc
	var yyhl1243 bool = l >= 0
	for yyj1243 := 0; ; yyj1243++ {
		if yyhl1243 {
			if yyj1243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1243Slc = r.DecodeBytes(yys1243Slc, true, true)
		yys1243 := string(yys1243Slc)
		switch yys1243 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1248 := &x.StartedAt
				yym1249 := z.DecBinary()
				_ = yym1249
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1248) {
				} else if yym1249 {
					z.DecBinaryUnmarshal(yyv1248)
				} else if !yym1249 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1248)
				} else {
					z.DecFallback(yyv1248, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1250 := &x.FinishedAt
				yym1251 := z.DecBinary()
				_ = yym1251
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1250) {
				} else if yym1251 {
					z.DecBinaryUnmarshal(yyv1250)
				} else if !yym1251 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1250)
				} else {
					z.DecFallback(yyv1250, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1243)
		} // end switch yys1243
	} // end for yyj1243
	if !yyhl1243 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1253 int
	var yyb1253 bool
	var yyhl1253 bool = l >= 0
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1258 := &x.StartedAt
		yym1259 := z.DecBinary()
		_ = yym1259
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1258) {
		} else if yym1259 {
			z.DecBinaryUnmarshal(yyv1258)
		} else if !yym1259 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1258)
		} else {
			z.DecFallback(yyv1258, false)
		}
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1260 := &x.FinishedAt
		yym1261 := z.DecBinary()
		_ = yym1261
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1260) {
		} else if yym1261 {
			z.DecBinaryUnmarshal(yyv1260)
		} else if !yym1261 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1260)
		} else {
			z.DecFallback(yyv1260, false)
		}
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1253++
		if yyhl1253 {
			yyb1253 = yyj1253 > l
		} else {
			yyb1253 = r.CheckBreak()
		}
		if yyb1253 {
			break
		}
		z.DecStructFieldNotFound(yyj1253-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1263 := z.EncBinary()
		_ = yym1263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1264 := !z.EncBinary()
			yy2arr1264 := z.EncBasicHandle().StructToArray
			var yyq1264 [3]bool
			_, _, _ = yysep1264, yyq1264, yy2arr1264
			const yyr1264 bool = false
			yyq1264[0] = x.Waiting != nil
			yyq1264[1] = x.Running != nil
			yyq1264[2] = x.Terminated != nil
			if yyr1264 || yy2arr1264 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1264 int = 0
				for _, b := range yyq1264 {
					if b {
						yynn1264++
					}
				}
				r.EncodeMapStart(yynn1264)
			}
			if yyr1264 || yy2arr1264 {
				if yyq1264[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1264[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1264 || yy2arr1264 {
				if yyq1264[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1264[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1264 || yy2arr1264 {
				if yyq1264[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1264[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1264 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1268 := z.DecBinary()
	_ = yym1268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1269 := r.ReadMapStart()
			if yyl1269 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1269, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1269 := r.ReadArrayStart()
			if yyl1269 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1270Slc
	var yyhl1270 bool = l >= 0
	for yyj1270 := 0; ; yyj1270++ {
		if yyhl1270 {
			if yyj1270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1270Slc = r.DecodeBytes(yys1270Slc, true, true)
		yys1270 := string(yys1270Slc)
		switch yys1270 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1270)
		} // end switch yys1270
	} // end for yyj1270
	if !yyhl1270 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1274 int
	var yyb1274 bool
	var yyhl1274 bool = l >= 0
	yyj1274++
	if yyhl1274 {
		yyb1274 = yyj1274 > l
	} else {
		yyb1274 = r.CheckBreak()
	}
	if yyb1274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1274++
	if yyhl1274 {
		yyb1274 = yyj1274 > l
	} else {
		yyb1274 = r.CheckBreak()
	}
	if yyb1274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1274++
	if yyhl1274 {
		yyb1274 = yyj1274 > l
	} else {
		yyb1274 = r.CheckBreak()
	}
	if yyb1274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1274++
		if yyhl1274 {
			yyb1274 = yyj1274 > l
		} else {
			yyb1274 = r.CheckBreak()
		}
		if yyb1274 {
			break
		}
		z.DecStructFieldNotFound(yyj1274-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1278 := z.EncBinary()
		_ = yym1278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1279 := !z.EncBinary()
			yy2arr1279 := z.EncBasicHandle().StructToArray
			var yyq1279 [8]bool
			_, _, _ = yysep1279, yyq1279, yy2arr1279
			const yyr1279 bool = false
			yyq1279[1] = true
			yyq1279[2] = true
			yyq1279[7] = x.ContainerID != ""
			if yyr1279 || yy2arr1279 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1279 int = 5
				for _, b := range yyq1279 {
					if b {
						yynn1279++
					}
				}
				r.EncodeMapStart(yynn1279)
			}
			if yyr1279 || yy2arr1279 {
				yym1281 := z.EncBinary()
				_ = yym1281
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1282 := z.EncBinary()
				_ = yym1282
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1279 || yy2arr1279 {
				if yyq1279[1] {
					yy1284 := &x.State
					yy1284.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1279[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1285 := &x.State
					yy1285.CodecEncodeSelf(e)
				}
			}
			if yyr1279 || yy2arr1279 {
				if yyq1279[2] {
					yy1287 := &x.LastTerminationState
					yy1287.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1279[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1288 := &x.LastTerminationState
					yy1288.CodecEncodeSelf(e)
				}
			}
			if yyr1279 || yy2arr1279 {
				yym1290 := z.EncBinary()
				_ = yym1290
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1291 := z.EncBinary()
				_ = yym1291
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1279 || yy2arr1279 {
				yym1293 := z.EncBinary()
				_ = yym1293
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1294 := z.EncBinary()
				_ = yym1294
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1279 || yy2arr1279 {
				yym1296 := z.EncBinary()
				_ = yym1296
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1297 := z.EncBinary()
				_ = yym1297
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1279 || yy2arr1279 {
				yym1299 := z.EncBinary()
				_ = yym1299
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1300 := z.EncBinary()
				_ = yym1300
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1279 || yy2arr1279 {
				if yyq1279[7] {
					yym1302 := z.EncBinary()
					_ = yym1302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1279[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1303 := z.EncBinary()
					_ = yym1303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1279 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1304 := z.DecBinary()
	_ = yym1304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1305 := r.ReadMapStart()
			if yyl1305 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1305, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1305 := r.ReadArrayStart()
			if yyl1305 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1306Slc
	var yyhl1306 bool = l >= 0
	for yyj1306 := 0; ; yyj1306++ {
		if yyhl1306 {
			if yyj1306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1306Slc = r.DecodeBytes(yys1306Slc, true, true)
		yys1306 := string(yys1306Slc)
		switch yys1306 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1308 := &x.State
				yyv1308.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1309 := &x.LastTerminationState
				yyv1309.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1306)
		} // end switch yys1306
	} // end for yyj1306
	if !yyhl1306 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1315 int
	var yyb1315 bool
	var yyhl1315 bool = l >= 0
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1317 := &x.State
		yyv1317.CodecDecodeSelf(d)
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1318 := &x.LastTerminationState
		yyv1318.CodecDecodeSelf(d)
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1315++
		if yyhl1315 {
			yyb1315 = yyj1315 > l
		} else {
			yyb1315 = r.CheckBreak()
		}
		if yyb1315 {
			break
		}
		z.DecStructFieldNotFound(yyj1315-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1324 := z.EncBinary()
	_ = yym1324
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1325 := z.DecBinary()
	_ = yym1325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1326 := z.EncBinary()
	_ = yym1326
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1327 := z.DecBinary()
	_ = yym1327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1328 := z.EncBinary()
		_ = yym1328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1329 := !z.EncBinary()
			yy2arr1329 := z.EncBasicHandle().StructToArray
			var yyq1329 [6]bool
			_, _, _ = yysep1329, yyq1329, yy2arr1329
			const yyr1329 bool = false
			yyq1329[2] = true
			yyq1329[3] = true
			yyq1329[4] = x.Reason != ""
			yyq1329[5] = x.Message != ""
			if yyr1329 || yy2arr1329 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1329 int = 2
				for _, b := range yyq1329 {
					if b {
						yynn1329++
					}
				}
				r.EncodeMapStart(yynn1329)
			}
			if yyr1329 || yy2arr1329 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1329 || yy2arr1329 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1329 || yy2arr1329 {
				if yyq1329[2] {
					yy1333 := &x.LastProbeTime
					yym1334 := z.EncBinary()
					_ = yym1334
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1333) {
					} else if yym1334 {
						z.EncBinaryMarshal(yy1333)
					} else if !yym1334 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1333)
					} else {
						z.EncFallback(yy1333)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1329[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1335 := &x.LastProbeTime
					yym1336 := z.EncBinary()
					_ = yym1336
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1335) {
					} else if yym1336 {
						z.EncBinaryMarshal(yy1335)
					} else if !yym1336 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1335)
					} else {
						z.EncFallback(yy1335)
					}
				}
			}
			if yyr1329 || yy2arr1329 {
				if yyq1329[3] {
					yy1338 := &x.LastTransitionTime
					yym1339 := z.EncBinary()
					_ = yym1339
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1338) {
					} else if yym1339 {
						z.EncBinaryMarshal(yy1338)
					} else if !yym1339 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1338)
					} else {
						z.EncFallback(yy1338)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1329[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1340 := &x.LastTransitionTime
					yym1341 := z.EncBinary()
					_ = yym1341
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1340) {
					} else if yym1341 {
						z.EncBinaryMarshal(yy1340)
					} else if !yym1341 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1340)
					} else {
						z.EncFallback(yy1340)
					}
				}
			}
			if yyr1329 || yy2arr1329 {
				if yyq1329[4] {
					yym1343 := z.EncBinary()
					_ = yym1343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1329[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1344 := z.EncBinary()
					_ = yym1344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1329 || yy2arr1329 {
				if yyq1329[5] {
					yym1346 := z.EncBinary()
					_ = yym1346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1329[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1347 := z.EncBinary()
					_ = yym1347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1329 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1348 := z.DecBinary()
	_ = yym1348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1349 := r.ReadMapStart()
			if yyl1349 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1349, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1349 := r.ReadArrayStart()
			if yyl1349 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1349, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1350Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1350Slc
	var yyhl1350 bool = l >= 0
	for yyj1350 := 0; ; yyj1350++ {
		if yyhl1350 {
			if yyj1350 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1350Slc = r.DecodeBytes(yys1350Slc, true, true)
		yys1350 := string(yys1350Slc)
		switch yys1350 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1353 := &x.LastProbeTime
				yym1354 := z.DecBinary()
				_ = yym1354
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1353) {
				} else if yym1354 {
					z.DecBinaryUnmarshal(yyv1353)
				} else if !yym1354 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1353)
				} else {
					z.DecFallback(yyv1353, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1355 := &x.LastTransitionTime
				yym1356 := z.DecBinary()
				_ = yym1356
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1355) {
				} else if yym1356 {
					z.DecBinaryUnmarshal(yyv1355)
				} else if !yym1356 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1355)
				} else {
					z.DecFallback(yyv1355, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1350)
		} // end switch yys1350
	} // end for yyj1350
	if !yyhl1350 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1359 int
	var yyb1359 bool
	var yyhl1359 bool = l >= 0
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1362 := &x.LastProbeTime
		yym1363 := z.DecBinary()
		_ = yym1363
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1362) {
		} else if yym1363 {
			z.DecBinaryUnmarshal(yyv1362)
		} else if !yym1363 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1362)
		} else {
			z.DecFallback(yyv1362, false)
		}
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1364 := &x.LastTransitionTime
		yym1365 := z.DecBinary()
		_ = yym1365
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1364) {
		} else if yym1365 {
			z.DecBinaryUnmarshal(yyv1364)
		} else if !yym1365 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1364)
		} else {
			z.DecFallback(yyv1364, false)
		}
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1359++
		if yyhl1359 {
			yyb1359 = yyj1359 > l
		} else {
			yyb1359 = r.CheckBreak()
		}
		if yyb1359 {
			break
		}
		z.DecStructFieldNotFound(yyj1359-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1368 := z.EncBinary()
	_ = yym1368
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1369 := z.DecBinary()
	_ = yym1369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1370 := z.EncBinary()
		_ = yym1370
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1371 := !z.EncBinary()
			yy2arr1371 := z.EncBasicHandle().StructToArray
			var yyq1371 [4]bool
			_, _, _ = yysep1371, yyq1371, yy2arr1371
			const yyr1371 bool = false
			yyq1371[0] = x.Kind != ""
			yyq1371[1] = x.APIVersion != ""
			yyq1371[2] = true
			if yyr1371 || yy2arr1371 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1371 int = 1
				for _, b := range yyq1371 {
					if b {
						yynn1371++
					}
				}
				r.EncodeMapStart(yynn1371)
			}
			if yyr1371 || yy2arr1371 {
				if yyq1371[0] {
					yym1373 := z.EncBinary()
					_ = yym1373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1371[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1371 || yy2arr1371 {
				if yyq1371[1] {
					yym1376 := z.EncBinary()
					_ = yym1376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1371[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1371 || yy2arr1371 {
				if yyq1371[2] {
					yy1379 := &x.ListMeta
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1379) {
					} else {
						z.EncFallback(yy1379)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1371[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1381 := &x.ListMeta
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1381) {
					} else {
						z.EncFallback(yy1381)
					}
				}
			}
			if yyr1371 || yy2arr1371 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1384 := z.EncBinary()
					_ = yym1384
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1371 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1386 := z.DecBinary()
	_ = yym1386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1387 := r.ReadMapStart()
			if yyl1387 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1387, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1387 := r.ReadArrayStart()
			if yyl1387 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1387, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1388Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1388Slc
	var yyhl1388 bool = l >= 0
	for yyj1388 := 0; ; yyj1388++ {
		if yyhl1388 {
			if yyj1388 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1388Slc = r.DecodeBytes(yys1388Slc, true, true)
		yys1388 := string(yys1388Slc)
		switch yys1388 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1391 := &x.ListMeta
				yym1392 := z.DecBinary()
				_ = yym1392
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1391) {
				} else {
					z.DecFallback(yyv1391, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1393 := &x.Items
				yym1394 := z.DecBinary()
				_ = yym1394
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1393), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1388)
		} // end switch yys1388
	} // end for yyj1388
	if !yyhl1388 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1395 int
	var yyb1395 bool
	var yyhl1395 bool = l >= 0
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1398 := &x.ListMeta
		yym1399 := z.DecBinary()
		_ = yym1399
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1398) {
		} else {
			z.DecFallback(yyv1398, false)
		}
	}
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1400 := &x.Items
		yym1401 := z.DecBinary()
		_ = yym1401
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1400), d)
		}
	}
	for {
		yyj1395++
		if yyhl1395 {
			yyb1395 = yyj1395 > l
		} else {
			yyb1395 = r.CheckBreak()
		}
		if yyb1395 {
			break
		}
		z.DecStructFieldNotFound(yyj1395-1, "")
	}
	r.ReadEnd()
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1402 := z.EncBinary()
	_ = yym1402
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1403 := z.DecBinary()
	_ = yym1403
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1404 := z.EncBinary()
		_ = yym1404
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1405 := !z.EncBinary()
			yy2arr1405 := z.EncBasicHandle().StructToArray
			var yyq1405 [11]bool
			_, _, _ = yysep1405, yyq1405, yy2arr1405
			const yyr1405 bool = false
			yyq1405[2] = x.RestartPolicy != ""
			yyq1405[3] = x.TerminationGracePeriodSeconds != nil
			yyq1405[4] = x.ActiveDeadlineSeconds != nil
			yyq1405[5] = x.DNSPolicy != ""
			yyq1405[6] = len(x.NodeSelector) != 0
			yyq1405[8] = x.NodeName != ""
			yyq1405[9] = x.SecurityContext != nil
			yyq1405[10] = len(x.ImagePullSecrets) != 0
			if yyr1405 || yy2arr1405 {
				r.EncodeArrayStart(11)
			} else {
				var yynn1405 int = 3
				for _, b := range yyq1405 {
					if b {
						yynn1405++
					}
				}
				r.EncodeMapStart(yynn1405)
			}
			if yyr1405 || yy2arr1405 {
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1408 := z.EncBinary()
					_ = yym1408
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1411 := z.EncBinary()
					_ = yym1411
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1405[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1414 := *x.TerminationGracePeriodSeconds
						yym1415 := z.EncBinary()
						_ = yym1415
						if false {
						} else {
							r.EncodeInt(int64(yy1414))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1416 := *x.TerminationGracePeriodSeconds
						yym1417 := z.EncBinary()
						_ = yym1417
						if false {
						} else {
							r.EncodeInt(int64(yy1416))
						}
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1419 := *x.ActiveDeadlineSeconds
						yym1420 := z.EncBinary()
						_ = yym1420
						if false {
						} else {
							r.EncodeInt(int64(yy1419))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1421 := *x.ActiveDeadlineSeconds
						yym1422 := z.EncBinary()
						_ = yym1422
						if false {
						} else {
							r.EncodeInt(int64(yy1421))
						}
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1405[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1425 := z.EncBinary()
						_ = yym1425
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1426 := z.EncBinary()
						_ = yym1426
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				yym1428 := z.EncBinary()
				_ = yym1428
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				yym1429 := z.EncBinary()
				_ = yym1429
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[8] {
					yym1431 := z.EncBinary()
					_ = yym1431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1405[8] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1432 := z.EncBinary()
					_ = yym1432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[9] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1435 := z.EncBinary()
						_ = yym1435
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[10] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1436 := z.EncBinary()
						_ = yym1436
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1405 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1437 := z.DecBinary()
	_ = yym1437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1438 := r.ReadMapStart()
			if yyl1438 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1438, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1438 := r.ReadArrayStart()
			if yyl1438 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1438, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1439Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1439Slc
	var yyhl1439 bool = l >= 0
	for yyj1439 := 0; ; yyj1439++ {
		if yyhl1439 {
			if yyj1439 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1439Slc = r.DecodeBytes(yys1439Slc, true, true)
		yys1439 := string(yys1439Slc)
		switch yys1439 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1440 := &x.Volumes
				yym1441 := z.DecBinary()
				_ = yym1441
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1440), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1442 := &x.Containers
				yym1443 := z.DecBinary()
				_ = yym1443
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1442), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1446 := z.DecBinary()
				_ = yym1446
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1448 := z.DecBinary()
				_ = yym1448
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1450 := &x.NodeSelector
				yym1451 := z.DecBinary()
				_ = yym1451
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1450, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1455 := &x.ImagePullSecrets
				yym1456 := z.DecBinary()
				_ = yym1456
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1455), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1439)
		} // end switch yys1439
	} // end for yyj1439
	if !yyhl1439 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1457 int
	var yyb1457 bool
	var yyhl1457 bool = l >= 0
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1458 := &x.Volumes
		yym1459 := z.DecBinary()
		_ = yym1459
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1458), d)
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1460 := &x.Containers
		yym1461 := z.DecBinary()
		_ = yym1461
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1460), d)
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1464 := z.DecBinary()
		_ = yym1464
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1466 := z.DecBinary()
		_ = yym1466
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1468 := &x.NodeSelector
		yym1469 := z.DecBinary()
		_ = yym1469
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1468, false, d)
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1473 := &x.ImagePullSecrets
		yym1474 := z.DecBinary()
		_ = yym1474
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1473), d)
		}
	}
	for {
		yyj1457++
		if yyhl1457 {
			yyb1457 = yyj1457 > l
		} else {
			yyb1457 = r.CheckBreak()
		}
		if yyb1457 {
			break
		}
		z.DecStructFieldNotFound(yyj1457-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1475 := z.EncBinary()
		_ = yym1475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1476 := !z.EncBinary()
			yy2arr1476 := z.EncBasicHandle().StructToArray
			var yyq1476 [4]bool
			_, _, _ = yysep1476, yyq1476, yy2arr1476
			const yyr1476 bool = false
			yyq1476[0] = x.HostNetwork != false
			yyq1476[1] = x.HostPID != false
			yyq1476[2] = x.HostIPC != false
			yyq1476[3] = len(x.SupplementalGroups) != 0
			if yyr1476 || yy2arr1476 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1476 int = 0
				for _, b := range yyq1476 {
					if b {
						yynn1476++
					}
				}
				r.EncodeMapStart(yynn1476)
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[0] {
					yym1478 := z.EncBinary()
					_ = yym1478
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1476[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1479 := z.EncBinary()
					_ = yym1479
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[1] {
					yym1481 := z.EncBinary()
					_ = yym1481
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1476[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[2] {
					yym1484 := z.EncBinary()
					_ = yym1484
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1476[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1485 := z.EncBinary()
					_ = yym1485
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1487 := z.EncBinary()
						_ = yym1487
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1476[3] {
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1488 := z.EncBinary()
						_ = yym1488
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yysep1476 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1489 := z.DecBinary()
	_ = yym1489
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1490 := r.ReadMapStart()
			if yyl1490 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1490, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1490 := r.ReadArrayStart()
			if yyl1490 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1490, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1491Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1491Slc
	var yyhl1491 bool = l >= 0
	for yyj1491 := 0; ; yyj1491++ {
		if yyhl1491 {
			if yyj1491 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1491Slc = r.DecodeBytes(yys1491Slc, true, true)
		yys1491 := string(yys1491Slc)
		switch yys1491 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1495 := &x.SupplementalGroups
				yym1496 := z.DecBinary()
				_ = yym1496
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1495, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1491)
		} // end switch yys1491
	} // end for yyj1491
	if !yyhl1491 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1497 int
	var yyb1497 bool
	var yyhl1497 bool = l >= 0
	yyj1497++
	if yyhl1497 {
		yyb1497 = yyj1497 > l
	} else {
		yyb1497 = r.CheckBreak()
	}
	if yyb1497 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1497++
	if yyhl1497 {
		yyb1497 = yyj1497 > l
	} else {
		yyb1497 = r.CheckBreak()
	}
	if yyb1497 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1497++
	if yyhl1497 {
		yyb1497 = yyj1497 > l
	} else {
		yyb1497 = r.CheckBreak()
	}
	if yyb1497 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1497++
	if yyhl1497 {
		yyb1497 = yyj1497 > l
	} else {
		yyb1497 = r.CheckBreak()
	}
	if yyb1497 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1501 := &x.SupplementalGroups
		yym1502 := z.DecBinary()
		_ = yym1502
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1501, false, d)
		}
	}
	for {
		yyj1497++
		if yyhl1497 {
			yyb1497 = yyj1497 > l
		} else {
			yyb1497 = r.CheckBreak()
		}
		if yyb1497 {
			break
		}
		z.DecStructFieldNotFound(yyj1497-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1503 := z.EncBinary()
		_ = yym1503
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1504 := !z.EncBinary()
			yy2arr1504 := z.EncBasicHandle().StructToArray
			var yyq1504 [8]bool
			_, _, _ = yysep1504, yyq1504, yy2arr1504
			const yyr1504 bool = false
			yyq1504[0] = x.Phase != ""
			yyq1504[1] = len(x.Conditions) != 0
			yyq1504[2] = x.Message != ""
			yyq1504[3] = x.Reason != ""
			yyq1504[4] = x.HostIP != ""
			yyq1504[5] = x.PodIP != ""
			yyq1504[6] = x.StartTime != nil
			yyq1504[7] = len(x.ContainerStatuses) != 0
			if yyr1504 || yy2arr1504 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1504 int = 0
				for _, b := range yyq1504 {
					if b {
						yynn1504++
					}
				}
				r.EncodeMapStart(yynn1504)
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1504[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1507 := z.EncBinary()
						_ = yym1507
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1504[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1508 := z.EncBinary()
						_ = yym1508
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[2] {
					yym1510 := z.EncBinary()
					_ = yym1510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1504[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1511 := z.EncBinary()
					_ = yym1511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[3] {
					yym1513 := z.EncBinary()
					_ = yym1513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1504[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1514 := z.EncBinary()
					_ = yym1514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[4] {
					yym1516 := z.EncBinary()
					_ = yym1516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1504[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1517 := z.EncBinary()
					_ = yym1517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[5] {
					yym1519 := z.EncBinary()
					_ = yym1519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1504[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1520 := z.EncBinary()
					_ = yym1520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1522 := z.EncBinary()
						_ = yym1522
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1522 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1522 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1504[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1523 := z.EncBinary()
						_ = yym1523
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1523 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1523 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1525 := z.EncBinary()
						_ = yym1525
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1504[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1526 := z.EncBinary()
						_ = yym1526
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1504 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1527 := z.DecBinary()
	_ = yym1527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1528 := r.ReadMapStart()
			if yyl1528 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1528, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1528 := r.ReadArrayStart()
			if yyl1528 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1528, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1529Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1529Slc
	var yyhl1529 bool = l >= 0
	for yyj1529 := 0; ; yyj1529++ {
		if yyhl1529 {
			if yyj1529 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1529Slc = r.DecodeBytes(yys1529Slc, true, true)
		yys1529 := string(yys1529Slc)
		switch yys1529 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1531 := &x.Conditions
				yym1532 := z.DecBinary()
				_ = yym1532
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1531), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1538 := z.DecBinary()
				_ = yym1538
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1538 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1538 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1539 := &x.ContainerStatuses
				yym1540 := z.DecBinary()
				_ = yym1540
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1539), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1529)
		} // end switch yys1529
	} // end for yyj1529
	if !yyhl1529 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1541 int
	var yyb1541 bool
	var yyhl1541 bool = l >= 0
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1543 := &x.Conditions
		yym1544 := z.DecBinary()
		_ = yym1544
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1543), d)
		}
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1550 := z.DecBinary()
		_ = yym1550
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1550 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1550 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1551 := &x.ContainerStatuses
		yym1552 := z.DecBinary()
		_ = yym1552
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1551), d)
		}
	}
	for {
		yyj1541++
		if yyhl1541 {
			yyb1541 = yyj1541 > l
		} else {
			yyb1541 = r.CheckBreak()
		}
		if yyb1541 {
			break
		}
		z.DecStructFieldNotFound(yyj1541-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1553 := z.EncBinary()
		_ = yym1553
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1554 := !z.EncBinary()
			yy2arr1554 := z.EncBasicHandle().StructToArray
			var yyq1554 [4]bool
			_, _, _ = yysep1554, yyq1554, yy2arr1554
			const yyr1554 bool = false
			yyq1554[0] = x.Kind != ""
			yyq1554[1] = x.APIVersion != ""
			yyq1554[2] = true
			yyq1554[3] = true
			if yyr1554 || yy2arr1554 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1554 int = 0
				for _, b := range yyq1554 {
					if b {
						yynn1554++
					}
				}
				r.EncodeMapStart(yynn1554)
			}
			if yyr1554 || yy2arr1554 {
				if yyq1554[0] {
					yym1556 := z.EncBinary()
					_ = yym1556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1554[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1557 := z.EncBinary()
					_ = yym1557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1554 || yy2arr1554 {
				if yyq1554[1] {
					yym1559 := z.EncBinary()
					_ = yym1559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1554[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1560 := z.EncBinary()
					_ = yym1560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1554 || yy2arr1554 {
				if yyq1554[2] {
					yy1562 := &x.ObjectMeta
					yy1562.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1554[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1563 := &x.ObjectMeta
					yy1563.CodecEncodeSelf(e)
				}
			}
			if yyr1554 || yy2arr1554 {
				if yyq1554[3] {
					yy1565 := &x.Status
					yy1565.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1554[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1566 := &x.Status
					yy1566.CodecEncodeSelf(e)
				}
			}
			if yysep1554 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1567 := z.DecBinary()
	_ = yym1567
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1568 := r.ReadMapStart()
			if yyl1568 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1568, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1568 := r.ReadArrayStart()
			if yyl1568 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1568, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1569Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1569Slc
	var yyhl1569 bool = l >= 0
	for yyj1569 := 0; ; yyj1569++ {
		if yyhl1569 {
			if yyj1569 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1569Slc = r.DecodeBytes(yys1569Slc, true, true)
		yys1569 := string(yys1569Slc)
		switch yys1569 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1572 := &x.ObjectMeta
				yyv1572.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1573 := &x.Status
				yyv1573.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1569)
		} // end switch yys1569
	} // end for yyj1569
	if !yyhl1569 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1574 int
	var yyb1574 bool
	var yyhl1574 bool = l >= 0
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1577 := &x.ObjectMeta
		yyv1577.CodecDecodeSelf(d)
	}
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1578 := &x.Status
		yyv1578.CodecDecodeSelf(d)
	}
	for {
		yyj1574++
		if yyhl1574 {
			yyb1574 = yyj1574 > l
		} else {
			yyb1574 = r.CheckBreak()
		}
		if yyb1574 {
			break
		}
		z.DecStructFieldNotFound(yyj1574-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1579 := z.EncBinary()
		_ = yym1579
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1580 := !z.EncBinary()
			yy2arr1580 := z.EncBasicHandle().StructToArray
			var yyq1580 [5]bool
			_, _, _ = yysep1580, yyq1580, yy2arr1580
			const yyr1580 bool = false
			yyq1580[0] = x.Kind != ""
			yyq1580[1] = x.APIVersion != ""
			yyq1580[2] = true
			yyq1580[3] = true
			yyq1580[4] = true
			if yyr1580 || yy2arr1580 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1580 int = 0
				for _, b := range yyq1580 {
					if b {
						yynn1580++
					}
				}
				r.EncodeMapStart(yynn1580)
			}
			if yyr1580 || yy2arr1580 {
				if yyq1580[0] {
					yym1582 := z.EncBinary()
					_ = yym1582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1580[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1583 := z.EncBinary()
					_ = yym1583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1580 || yy2arr1580 {
				if yyq1580[1] {
					yym1585 := z.EncBinary()
					_ = yym1585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1580[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1586 := z.EncBinary()
					_ = yym1586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1580 || yy2arr1580 {
				if yyq1580[2] {
					yy1588 := &x.ObjectMeta
					yy1588.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1580[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1589 := &x.ObjectMeta
					yy1589.CodecEncodeSelf(e)
				}
			}
			if yyr1580 || yy2arr1580 {
				if yyq1580[3] {
					yy1591 := &x.Spec
					yy1591.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1580[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1592 := &x.Spec
					yy1592.CodecEncodeSelf(e)
				}
			}
			if yyr1580 || yy2arr1580 {
				if yyq1580[4] {
					yy1594 := &x.Status
					yy1594.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1580[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1595 := &x.Status
					yy1595.CodecEncodeSelf(e)
				}
			}
			if yysep1580 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1596 := z.DecBinary()
	_ = yym1596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1597 := r.ReadMapStart()
			if yyl1597 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1597, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1597 := r.ReadArrayStart()
			if yyl1597 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1598Slc
	var yyhl1598 bool = l >= 0
	for yyj1598 := 0; ; yyj1598++ {
		if yyhl1598 {
			if yyj1598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1598Slc = r.DecodeBytes(yys1598Slc, true, true)
		yys1598 := string(yys1598Slc)
		switch yys1598 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1601 := &x.ObjectMeta
				yyv1601.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1602 := &x.Spec
				yyv1602.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1603 := &x.Status
				yyv1603.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1598)
		} // end switch yys1598
	} // end for yyj1598
	if !yyhl1598 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1604 int
	var yyb1604 bool
	var yyhl1604 bool = l >= 0
	yyj1604++
	if yyhl1604 {
		yyb1604 = yyj1604 > l
	} else {
		yyb1604 = r.CheckBreak()
	}
	if yyb1604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1604++
	if yyhl1604 {
		yyb1604 = yyj1604 > l
	} else {
		yyb1604 = r.CheckBreak()
	}
	if yyb1604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1604++
	if yyhl1604 {
		yyb1604 = yyj1604 > l
	} else {
		yyb1604 = r.CheckBreak()
	}
	if yyb1604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1607 := &x.ObjectMeta
		yyv1607.CodecDecodeSelf(d)
	}
	yyj1604++
	if yyhl1604 {
		yyb1604 = yyj1604 > l
	} else {
		yyb1604 = r.CheckBreak()
	}
	if yyb1604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1608 := &x.Spec
		yyv1608.CodecDecodeSelf(d)
	}
	yyj1604++
	if yyhl1604 {
		yyb1604 = yyj1604 > l
	} else {
		yyb1604 = r.CheckBreak()
	}
	if yyb1604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1609 := &x.Status
		yyv1609.CodecDecodeSelf(d)
	}
	for {
		yyj1604++
		if yyhl1604 {
			yyb1604 = yyj1604 > l
		} else {
			yyb1604 = r.CheckBreak()
		}
		if yyb1604 {
			break
		}
		z.DecStructFieldNotFound(yyj1604-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1610 := z.EncBinary()
		_ = yym1610
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1611 := !z.EncBinary()
			yy2arr1611 := z.EncBasicHandle().StructToArray
			var yyq1611 [2]bool
			_, _, _ = yysep1611, yyq1611, yy2arr1611
			const yyr1611 bool = false
			yyq1611[0] = true
			yyq1611[1] = true
			if yyr1611 || yy2arr1611 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1611 int = 0
				for _, b := range yyq1611 {
					if b {
						yynn1611++
					}
				}
				r.EncodeMapStart(yynn1611)
			}
			if yyr1611 || yy2arr1611 {
				if yyq1611[0] {
					yy1613 := &x.ObjectMeta
					yy1613.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1611[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1614 := &x.ObjectMeta
					yy1614.CodecEncodeSelf(e)
				}
			}
			if yyr1611 || yy2arr1611 {
				if yyq1611[1] {
					yy1616 := &x.Spec
					yy1616.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1611[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1617 := &x.Spec
					yy1617.CodecEncodeSelf(e)
				}
			}
			if yysep1611 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1618 := z.DecBinary()
	_ = yym1618
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1619 := r.ReadMapStart()
			if yyl1619 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1619, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1619 := r.ReadArrayStart()
			if yyl1619 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1619, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1620Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1620Slc
	var yyhl1620 bool = l >= 0
	for yyj1620 := 0; ; yyj1620++ {
		if yyhl1620 {
			if yyj1620 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1620Slc = r.DecodeBytes(yys1620Slc, true, true)
		yys1620 := string(yys1620Slc)
		switch yys1620 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1621 := &x.ObjectMeta
				yyv1621.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1622 := &x.Spec
				yyv1622.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1620)
		} // end switch yys1620
	} // end for yyj1620
	if !yyhl1620 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1623 int
	var yyb1623 bool
	var yyhl1623 bool = l >= 0
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1624 := &x.ObjectMeta
		yyv1624.CodecDecodeSelf(d)
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1625 := &x.Spec
		yyv1625.CodecDecodeSelf(d)
	}
	for {
		yyj1623++
		if yyhl1623 {
			yyb1623 = yyj1623 > l
		} else {
			yyb1623 = r.CheckBreak()
		}
		if yyb1623 {
			break
		}
		z.DecStructFieldNotFound(yyj1623-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1626 := z.EncBinary()
		_ = yym1626
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1627 := !z.EncBinary()
			yy2arr1627 := z.EncBasicHandle().StructToArray
			var yyq1627 [4]bool
			_, _, _ = yysep1627, yyq1627, yy2arr1627
			const yyr1627 bool = false
			yyq1627[0] = x.Kind != ""
			yyq1627[1] = x.APIVersion != ""
			yyq1627[2] = true
			yyq1627[3] = true
			if yyr1627 || yy2arr1627 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1627 int = 0
				for _, b := range yyq1627 {
					if b {
						yynn1627++
					}
				}
				r.EncodeMapStart(yynn1627)
			}
			if yyr1627 || yy2arr1627 {
				if yyq1627[0] {
					yym1629 := z.EncBinary()
					_ = yym1629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1627[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1630 := z.EncBinary()
					_ = yym1630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1627 || yy2arr1627 {
				if yyq1627[1] {
					yym1632 := z.EncBinary()
					_ = yym1632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1627[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1633 := z.EncBinary()
					_ = yym1633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1627 || yy2arr1627 {
				if yyq1627[2] {
					yy1635 := &x.ObjectMeta
					yy1635.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1627[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1636 := &x.ObjectMeta
					yy1636.CodecEncodeSelf(e)
				}
			}
			if yyr1627 || yy2arr1627 {
				if yyq1627[3] {
					yy1638 := &x.Template
					yy1638.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1627[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1639 := &x.Template
					yy1639.CodecEncodeSelf(e)
				}
			}
			if yysep1627 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1640 := z.DecBinary()
	_ = yym1640
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1641 := r.ReadMapStart()
			if yyl1641 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1641, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1641 := r.ReadArrayStart()
			if yyl1641 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1641, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1642Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1642Slc
	var yyhl1642 bool = l >= 0
	for yyj1642 := 0; ; yyj1642++ {
		if yyhl1642 {
			if yyj1642 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1642Slc = r.DecodeBytes(yys1642Slc, true, true)
		yys1642 := string(yys1642Slc)
		switch yys1642 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1645 := &x.ObjectMeta
				yyv1645.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1646 := &x.Template
				yyv1646.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1642)
		} // end switch yys1642
	} // end for yyj1642
	if !yyhl1642 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1647 int
	var yyb1647 bool
	var yyhl1647 bool = l >= 0
	yyj1647++
	if yyhl1647 {
		yyb1647 = yyj1647 > l
	} else {
		yyb1647 = r.CheckBreak()
	}
	if yyb1647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1647++
	if yyhl1647 {
		yyb1647 = yyj1647 > l
	} else {
		yyb1647 = r.CheckBreak()
	}
	if yyb1647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1647++
	if yyhl1647 {
		yyb1647 = yyj1647 > l
	} else {
		yyb1647 = r.CheckBreak()
	}
	if yyb1647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1650 := &x.ObjectMeta
		yyv1650.CodecDecodeSelf(d)
	}
	yyj1647++
	if yyhl1647 {
		yyb1647 = yyj1647 > l
	} else {
		yyb1647 = r.CheckBreak()
	}
	if yyb1647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1651 := &x.Template
		yyv1651.CodecDecodeSelf(d)
	}
	for {
		yyj1647++
		if yyhl1647 {
			yyb1647 = yyj1647 > l
		} else {
			yyb1647 = r.CheckBreak()
		}
		if yyb1647 {
			break
		}
		z.DecStructFieldNotFound(yyj1647-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1652 := z.EncBinary()
		_ = yym1652
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1653 := !z.EncBinary()
			yy2arr1653 := z.EncBasicHandle().StructToArray
			var yyq1653 [4]bool
			_, _, _ = yysep1653, yyq1653, yy2arr1653
			const yyr1653 bool = false
			yyq1653[0] = x.Kind != ""
			yyq1653[1] = x.APIVersion != ""
			yyq1653[2] = true
			if yyr1653 || yy2arr1653 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1653 int = 1
				for _, b := range yyq1653 {
					if b {
						yynn1653++
					}
				}
				r.EncodeMapStart(yynn1653)
			}
			if yyr1653 || yy2arr1653 {
				if yyq1653[0] {
					yym1655 := z.EncBinary()
					_ = yym1655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1653[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1656 := z.EncBinary()
					_ = yym1656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				if yyq1653[1] {
					yym1658 := z.EncBinary()
					_ = yym1658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1653[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1659 := z.EncBinary()
					_ = yym1659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				if yyq1653[2] {
					yy1661 := &x.ListMeta
					yym1662 := z.EncBinary()
					_ = yym1662
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1661) {
					} else {
						z.EncFallback(yy1661)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1653[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1663 := &x.ListMeta
					yym1664 := z.EncBinary()
					_ = yym1664
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1663) {
					} else {
						z.EncFallback(yy1663)
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1666 := z.EncBinary()
					_ = yym1666
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1667 := z.EncBinary()
					_ = yym1667
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1653 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1668 := z.DecBinary()
	_ = yym1668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1669 := r.ReadMapStart()
			if yyl1669 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1669, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1669 := r.ReadArrayStart()
			if yyl1669 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1670Slc
	var yyhl1670 bool = l >= 0
	for yyj1670 := 0; ; yyj1670++ {
		if yyhl1670 {
			if yyj1670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1670Slc = r.DecodeBytes(yys1670Slc, true, true)
		yys1670 := string(yys1670Slc)
		switch yys1670 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1673 := &x.ListMeta
				yym1674 := z.DecBinary()
				_ = yym1674
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1673) {
				} else {
					z.DecFallback(yyv1673, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1675 := &x.Items
				yym1676 := z.DecBinary()
				_ = yym1676
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1675), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1670)
		} // end switch yys1670
	} // end for yyj1670
	if !yyhl1670 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1677 int
	var yyb1677 bool
	var yyhl1677 bool = l >= 0
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1680 := &x.ListMeta
		yym1681 := z.DecBinary()
		_ = yym1681
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1680) {
		} else {
			z.DecFallback(yyv1680, false)
		}
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1682 := &x.Items
		yym1683 := z.DecBinary()
		_ = yym1683
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1682), d)
		}
	}
	for {
		yyj1677++
		if yyhl1677 {
			yyb1677 = yyj1677 > l
		} else {
			yyb1677 = r.CheckBreak()
		}
		if yyb1677 {
			break
		}
		z.DecStructFieldNotFound(yyj1677-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1684 := z.EncBinary()
		_ = yym1684
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1685 := !z.EncBinary()
			yy2arr1685 := z.EncBasicHandle().StructToArray
			var yyq1685 [3]bool
			_, _, _ = yysep1685, yyq1685, yy2arr1685
			const yyr1685 bool = false
			yyq1685[2] = x.Template != nil
			if yyr1685 || yy2arr1685 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1685 int = 2
				for _, b := range yyq1685 {
					if b {
						yynn1685++
					}
				}
				r.EncodeMapStart(yynn1685)
			}
			if yyr1685 || yy2arr1685 {
				yym1687 := z.EncBinary()
				_ = yym1687
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1688 := z.EncBinary()
				_ = yym1688
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1685 || yy2arr1685 {
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1690 := z.EncBinary()
					_ = yym1690
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1691 := z.EncBinary()
					_ = yym1691
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1685 || yy2arr1685 {
				if yyq1685[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1685[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1685 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1693 := z.DecBinary()
	_ = yym1693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1694 := r.ReadMapStart()
			if yyl1694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1694, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1694 := r.ReadArrayStart()
			if yyl1694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1695Slc
	var yyhl1695 bool = l >= 0
	for yyj1695 := 0; ; yyj1695++ {
		if yyhl1695 {
			if yyj1695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1695Slc = r.DecodeBytes(yys1695Slc, true, true)
		yys1695 := string(yys1695Slc)
		switch yys1695 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1697 := &x.Selector
				yym1698 := z.DecBinary()
				_ = yym1698
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1697, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1695)
		} // end switch yys1695
	} // end for yyj1695
	if !yyhl1695 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1700 int
	var yyb1700 bool
	var yyhl1700 bool = l >= 0
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1702 := &x.Selector
		yym1703 := z.DecBinary()
		_ = yym1703
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1702, false, d)
		}
	}
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1700++
		if yyhl1700 {
			yyb1700 = yyj1700 > l
		} else {
			yyb1700 = r.CheckBreak()
		}
		if yyb1700 {
			break
		}
		z.DecStructFieldNotFound(yyj1700-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1705 := z.EncBinary()
		_ = yym1705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1706 := !z.EncBinary()
			yy2arr1706 := z.EncBasicHandle().StructToArray
			var yyq1706 [2]bool
			_, _, _ = yysep1706, yyq1706, yy2arr1706
			const yyr1706 bool = false
			yyq1706[1] = x.ObservedGeneration != 0
			if yyr1706 || yy2arr1706 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1706 int = 1
				for _, b := range yyq1706 {
					if b {
						yynn1706++
					}
				}
				r.EncodeMapStart(yynn1706)
			}
			if yyr1706 || yy2arr1706 {
				yym1708 := z.EncBinary()
				_ = yym1708
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1709 := z.EncBinary()
				_ = yym1709
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1706 || yy2arr1706 {
				if yyq1706[1] {
					yym1711 := z.EncBinary()
					_ = yym1711
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1706[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1712 := z.EncBinary()
					_ = yym1712
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1706 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1713 := z.DecBinary()
	_ = yym1713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1714 := r.ReadMapStart()
			if yyl1714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1714, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1714 := r.ReadArrayStart()
			if yyl1714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1715Slc
	var yyhl1715 bool = l >= 0
	for yyj1715 := 0; ; yyj1715++ {
		if yyhl1715 {
			if yyj1715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1715Slc = r.DecodeBytes(yys1715Slc, true, true)
		yys1715 := string(yys1715Slc)
		switch yys1715 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1715)
		} // end switch yys1715
	} // end for yyj1715
	if !yyhl1715 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1718 int
	var yyb1718 bool
	var yyhl1718 bool = l >= 0
	yyj1718++
	if yyhl1718 {
		yyb1718 = yyj1718 > l
	} else {
		yyb1718 = r.CheckBreak()
	}
	if yyb1718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1718++
	if yyhl1718 {
		yyb1718 = yyj1718 > l
	} else {
		yyb1718 = r.CheckBreak()
	}
	if yyb1718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1718++
		if yyhl1718 {
			yyb1718 = yyj1718 > l
		} else {
			yyb1718 = r.CheckBreak()
		}
		if yyb1718 {
			break
		}
		z.DecStructFieldNotFound(yyj1718-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1721 := z.EncBinary()
		_ = yym1721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1722 := !z.EncBinary()
			yy2arr1722 := z.EncBasicHandle().StructToArray
			var yyq1722 [5]bool
			_, _, _ = yysep1722, yyq1722, yy2arr1722
			const yyr1722 bool = false
			yyq1722[0] = x.Kind != ""
			yyq1722[1] = x.APIVersion != ""
			yyq1722[2] = true
			yyq1722[3] = true
			yyq1722[4] = true
			if yyr1722 || yy2arr1722 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1722 int = 0
				for _, b := range yyq1722 {
					if b {
						yynn1722++
					}
				}
				r.EncodeMapStart(yynn1722)
			}
			if yyr1722 || yy2arr1722 {
				if yyq1722[0] {
					yym1724 := z.EncBinary()
					_ = yym1724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1722[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1725 := z.EncBinary()
					_ = yym1725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1722 || yy2arr1722 {
				if yyq1722[1] {
					yym1727 := z.EncBinary()
					_ = yym1727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1722[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1728 := z.EncBinary()
					_ = yym1728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1722 || yy2arr1722 {
				if yyq1722[2] {
					yy1730 := &x.ObjectMeta
					yy1730.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1722[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1731 := &x.ObjectMeta
					yy1731.CodecEncodeSelf(e)
				}
			}
			if yyr1722 || yy2arr1722 {
				if yyq1722[3] {
					yy1733 := &x.Spec
					yy1733.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1722[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1734 := &x.Spec
					yy1734.CodecEncodeSelf(e)
				}
			}
			if yyr1722 || yy2arr1722 {
				if yyq1722[4] {
					yy1736 := &x.Status
					yy1736.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1722[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1737 := &x.Status
					yy1737.CodecEncodeSelf(e)
				}
			}
			if yysep1722 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1738 := z.DecBinary()
	_ = yym1738
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1739 := r.ReadMapStart()
			if yyl1739 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1739, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1739 := r.ReadArrayStart()
			if yyl1739 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1739, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1740Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1740Slc
	var yyhl1740 bool = l >= 0
	for yyj1740 := 0; ; yyj1740++ {
		if yyhl1740 {
			if yyj1740 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1740Slc = r.DecodeBytes(yys1740Slc, true, true)
		yys1740 := string(yys1740Slc)
		switch yys1740 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1743 := &x.ObjectMeta
				yyv1743.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1744 := &x.Spec
				yyv1744.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1745 := &x.Status
				yyv1745.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1740)
		} // end switch yys1740
	} // end for yyj1740
	if !yyhl1740 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1746 int
	var yyb1746 bool
	var yyhl1746 bool = l >= 0
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1749 := &x.ObjectMeta
		yyv1749.CodecDecodeSelf(d)
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1750 := &x.Spec
		yyv1750.CodecDecodeSelf(d)
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1751 := &x.Status
		yyv1751.CodecDecodeSelf(d)
	}
	for {
		yyj1746++
		if yyhl1746 {
			yyb1746 = yyj1746 > l
		} else {
			yyb1746 = r.CheckBreak()
		}
		if yyb1746 {
			break
		}
		z.DecStructFieldNotFound(yyj1746-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1752 := z.EncBinary()
		_ = yym1752
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1753 := !z.EncBinary()
			yy2arr1753 := z.EncBasicHandle().StructToArray
			var yyq1753 [4]bool
			_, _, _ = yysep1753, yyq1753, yy2arr1753
			const yyr1753 bool = false
			yyq1753[0] = x.Kind != ""
			yyq1753[1] = x.APIVersion != ""
			yyq1753[2] = true
			if yyr1753 || yy2arr1753 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1753 int = 1
				for _, b := range yyq1753 {
					if b {
						yynn1753++
					}
				}
				r.EncodeMapStart(yynn1753)
			}
			if yyr1753 || yy2arr1753 {
				if yyq1753[0] {
					yym1755 := z.EncBinary()
					_ = yym1755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1753[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1756 := z.EncBinary()
					_ = yym1756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1753 || yy2arr1753 {
				if yyq1753[1] {
					yym1758 := z.EncBinary()
					_ = yym1758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1753[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1759 := z.EncBinary()
					_ = yym1759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1753 || yy2arr1753 {
				if yyq1753[2] {
					yy1761 := &x.ListMeta
					yym1762 := z.EncBinary()
					_ = yym1762
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1761) {
					} else {
						z.EncFallback(yy1761)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1753[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1763 := &x.ListMeta
					yym1764 := z.EncBinary()
					_ = yym1764
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1763) {
					} else {
						z.EncFallback(yy1763)
					}
				}
			}
			if yyr1753 || yy2arr1753 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1766 := z.EncBinary()
					_ = yym1766
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1767 := z.EncBinary()
					_ = yym1767
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1753 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1768 := z.DecBinary()
	_ = yym1768
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1769 := r.ReadMapStart()
			if yyl1769 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1769, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1769 := r.ReadArrayStart()
			if yyl1769 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1769, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1770Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1770Slc
	var yyhl1770 bool = l >= 0
	for yyj1770 := 0; ; yyj1770++ {
		if yyhl1770 {
			if yyj1770 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1770Slc = r.DecodeBytes(yys1770Slc, true, true)
		yys1770 := string(yys1770Slc)
		switch yys1770 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1773 := &x.ListMeta
				yym1774 := z.DecBinary()
				_ = yym1774
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1773) {
				} else {
					z.DecFallback(yyv1773, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1775 := &x.Items
				yym1776 := z.DecBinary()
				_ = yym1776
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1775), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1770)
		} // end switch yys1770
	} // end for yyj1770
	if !yyhl1770 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1777 int
	var yyb1777 bool
	var yyhl1777 bool = l >= 0
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1780 := &x.ListMeta
		yym1781 := z.DecBinary()
		_ = yym1781
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1780) {
		} else {
			z.DecFallback(yyv1780, false)
		}
	}
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1782 := &x.Items
		yym1783 := z.DecBinary()
		_ = yym1783
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1782), d)
		}
	}
	for {
		yyj1777++
		if yyhl1777 {
			yyb1777 = yyj1777 > l
		} else {
			yyb1777 = r.CheckBreak()
		}
		if yyb1777 {
			break
		}
		z.DecStructFieldNotFound(yyj1777-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1784 := z.EncBinary()
		_ = yym1784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1785 := !z.EncBinary()
			yy2arr1785 := z.EncBasicHandle().StructToArray
			var yyq1785 [4]bool
			_, _, _ = yysep1785, yyq1785, yy2arr1785
			const yyr1785 bool = false
			yyq1785[0] = x.Kind != ""
			yyq1785[1] = x.APIVersion != ""
			yyq1785[2] = true
			if yyr1785 || yy2arr1785 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1785 int = 1
				for _, b := range yyq1785 {
					if b {
						yynn1785++
					}
				}
				r.EncodeMapStart(yynn1785)
			}
			if yyr1785 || yy2arr1785 {
				if yyq1785[0] {
					yym1787 := z.EncBinary()
					_ = yym1787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1785[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1788 := z.EncBinary()
					_ = yym1788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1785 || yy2arr1785 {
				if yyq1785[1] {
					yym1790 := z.EncBinary()
					_ = yym1790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1785[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1791 := z.EncBinary()
					_ = yym1791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1785 || yy2arr1785 {
				if yyq1785[2] {
					yy1793 := &x.ListMeta
					yym1794 := z.EncBinary()
					_ = yym1794
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1793) {
					} else {
						z.EncFallback(yy1793)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1785[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1795 := &x.ListMeta
					yym1796 := z.EncBinary()
					_ = yym1796
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1795) {
					} else {
						z.EncFallback(yy1795)
					}
				}
			}
			if yyr1785 || yy2arr1785 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1798 := z.EncBinary()
					_ = yym1798
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1799 := z.EncBinary()
					_ = yym1799
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1785 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1800 := z.DecBinary()
	_ = yym1800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1801 := r.ReadMapStart()
			if yyl1801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1801, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1801 := r.ReadArrayStart()
			if yyl1801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1802Slc
	var yyhl1802 bool = l >= 0
	for yyj1802 := 0; ; yyj1802++ {
		if yyhl1802 {
			if yyj1802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1802Slc = r.DecodeBytes(yys1802Slc, true, true)
		yys1802 := string(yys1802Slc)
		switch yys1802 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1805 := &x.ListMeta
				yym1806 := z.DecBinary()
				_ = yym1806
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1805) {
				} else {
					z.DecFallback(yyv1805, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1807 := &x.Items
				yym1808 := z.DecBinary()
				_ = yym1808
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1807), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1802)
		} // end switch yys1802
	} // end for yyj1802
	if !yyhl1802 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1809 int
	var yyb1809 bool
	var yyhl1809 bool = l >= 0
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1812 := &x.ListMeta
		yym1813 := z.DecBinary()
		_ = yym1813
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1812) {
		} else {
			z.DecFallback(yyv1812, false)
		}
	}
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1814 := &x.Items
		yym1815 := z.DecBinary()
		_ = yym1815
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1814), d)
		}
	}
	for {
		yyj1809++
		if yyhl1809 {
			yyb1809 = yyj1809 > l
		} else {
			yyb1809 = r.CheckBreak()
		}
		if yyb1809 {
			break
		}
		z.DecStructFieldNotFound(yyj1809-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1816 := z.EncBinary()
	_ = yym1816
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1817 := z.DecBinary()
	_ = yym1817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1818 := z.EncBinary()
	_ = yym1818
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1819 := z.DecBinary()
	_ = yym1819
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1820 := z.EncBinary()
		_ = yym1820
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1821 := !z.EncBinary()
			yy2arr1821 := z.EncBasicHandle().StructToArray
			var yyq1821 [1]bool
			_, _, _ = yysep1821, yyq1821, yy2arr1821
			const yyr1821 bool = false
			yyq1821[0] = true
			if yyr1821 || yy2arr1821 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1821 int = 0
				for _, b := range yyq1821 {
					if b {
						yynn1821++
					}
				}
				r.EncodeMapStart(yynn1821)
			}
			if yyr1821 || yy2arr1821 {
				if yyq1821[0] {
					yy1823 := &x.LoadBalancer
					yy1823.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1821[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1824 := &x.LoadBalancer
					yy1824.CodecEncodeSelf(e)
				}
			}
			if yysep1821 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1825 := z.DecBinary()
	_ = yym1825
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1826 := r.ReadMapStart()
			if yyl1826 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1826, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1826 := r.ReadArrayStart()
			if yyl1826 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1826, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1827Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1827Slc
	var yyhl1827 bool = l >= 0
	for yyj1827 := 0; ; yyj1827++ {
		if yyhl1827 {
			if yyj1827 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1827Slc = r.DecodeBytes(yys1827Slc, true, true)
		yys1827 := string(yys1827Slc)
		switch yys1827 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1828 := &x.LoadBalancer
				yyv1828.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1827)
		} // end switch yys1827
	} // end for yyj1827
	if !yyhl1827 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1829 int
	var yyb1829 bool
	var yyhl1829 bool = l >= 0
	yyj1829++
	if yyhl1829 {
		yyb1829 = yyj1829 > l
	} else {
		yyb1829 = r.CheckBreak()
	}
	if yyb1829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1830 := &x.LoadBalancer
		yyv1830.CodecDecodeSelf(d)
	}
	for {
		yyj1829++
		if yyhl1829 {
			yyb1829 = yyj1829 > l
		} else {
			yyb1829 = r.CheckBreak()
		}
		if yyb1829 {
			break
		}
		z.DecStructFieldNotFound(yyj1829-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1831 := z.EncBinary()
		_ = yym1831
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1832 := !z.EncBinary()
			yy2arr1832 := z.EncBasicHandle().StructToArray
			var yyq1832 [1]bool
			_, _, _ = yysep1832, yyq1832, yy2arr1832
			const yyr1832 bool = false
			yyq1832[0] = len(x.Ingress) != 0
			if yyr1832 || yy2arr1832 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1832 int = 0
				for _, b := range yyq1832 {
					if b {
						yynn1832++
					}
				}
				r.EncodeMapStart(yynn1832)
			}
			if yyr1832 || yy2arr1832 {
				if yyq1832[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1834 := z.EncBinary()
						_ = yym1834
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1832[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1835 := z.EncBinary()
						_ = yym1835
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1832 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1836 := z.DecBinary()
	_ = yym1836
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1837 := r.ReadMapStart()
			if yyl1837 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1837, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1837 := r.ReadArrayStart()
			if yyl1837 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1837, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1838Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1838Slc
	var yyhl1838 bool = l >= 0
	for yyj1838 := 0; ; yyj1838++ {
		if yyhl1838 {
			if yyj1838 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1838Slc = r.DecodeBytes(yys1838Slc, true, true)
		yys1838 := string(yys1838Slc)
		switch yys1838 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1839 := &x.Ingress
				yym1840 := z.DecBinary()
				_ = yym1840
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1839), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1838)
		} // end switch yys1838
	} // end for yyj1838
	if !yyhl1838 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1841 int
	var yyb1841 bool
	var yyhl1841 bool = l >= 0
	yyj1841++
	if yyhl1841 {
		yyb1841 = yyj1841 > l
	} else {
		yyb1841 = r.CheckBreak()
	}
	if yyb1841 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1842 := &x.Ingress
		yym1843 := z.DecBinary()
		_ = yym1843
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1842), d)
		}
	}
	for {
		yyj1841++
		if yyhl1841 {
			yyb1841 = yyj1841 > l
		} else {
			yyb1841 = r.CheckBreak()
		}
		if yyb1841 {
			break
		}
		z.DecStructFieldNotFound(yyj1841-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1844 := z.EncBinary()
		_ = yym1844
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1845 := !z.EncBinary()
			yy2arr1845 := z.EncBasicHandle().StructToArray
			var yyq1845 [2]bool
			_, _, _ = yysep1845, yyq1845, yy2arr1845
			const yyr1845 bool = false
			yyq1845[0] = x.IP != ""
			yyq1845[1] = x.Hostname != ""
			if yyr1845 || yy2arr1845 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1845 int = 0
				for _, b := range yyq1845 {
					if b {
						yynn1845++
					}
				}
				r.EncodeMapStart(yynn1845)
			}
			if yyr1845 || yy2arr1845 {
				if yyq1845[0] {
					yym1847 := z.EncBinary()
					_ = yym1847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1845[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1845 || yy2arr1845 {
				if yyq1845[1] {
					yym1850 := z.EncBinary()
					_ = yym1850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1845[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1845 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1852 := z.DecBinary()
	_ = yym1852
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1853 := r.ReadMapStart()
			if yyl1853 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1853, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1853 := r.ReadArrayStart()
			if yyl1853 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1853, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1854Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1854Slc
	var yyhl1854 bool = l >= 0
	for yyj1854 := 0; ; yyj1854++ {
		if yyhl1854 {
			if yyj1854 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1854Slc = r.DecodeBytes(yys1854Slc, true, true)
		yys1854 := string(yys1854Slc)
		switch yys1854 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1854)
		} // end switch yys1854
	} // end for yyj1854
	if !yyhl1854 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1857 int
	var yyb1857 bool
	var yyhl1857 bool = l >= 0
	yyj1857++
	if yyhl1857 {
		yyb1857 = yyj1857 > l
	} else {
		yyb1857 = r.CheckBreak()
	}
	if yyb1857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1857++
	if yyhl1857 {
		yyb1857 = yyj1857 > l
	} else {
		yyb1857 = r.CheckBreak()
	}
	if yyb1857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1857++
		if yyhl1857 {
			yyb1857 = yyj1857 > l
		} else {
			yyb1857 = r.CheckBreak()
		}
		if yyb1857 {
			break
		}
		z.DecStructFieldNotFound(yyj1857-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1860 := z.EncBinary()
		_ = yym1860
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1861 := !z.EncBinary()
			yy2arr1861 := z.EncBasicHandle().StructToArray
			var yyq1861 [7]bool
			_, _, _ = yysep1861, yyq1861, yy2arr1861
			const yyr1861 bool = false
			yyq1861[0] = x.Type != ""
			yyq1861[3] = x.ClusterIP != ""
			yyq1861[4] = len(x.ExternalIPs) != 0
			yyq1861[5] = x.LoadBalancerIP != ""
			yyq1861[6] = x.SessionAffinity != ""
			if yyr1861 || yy2arr1861 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1861 int = 2
				for _, b := range yyq1861 {
					if b {
						yynn1861++
					}
				}
				r.EncodeMapStart(yynn1861)
			}
			if yyr1861 || yy2arr1861 {
				if yyq1861[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1861[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1861 || yy2arr1861 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1864 := z.EncBinary()
					_ = yym1864
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1865 := z.EncBinary()
					_ = yym1865
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1861 || yy2arr1861 {
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1867 := z.EncBinary()
					_ = yym1867
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1868 := z.EncBinary()
					_ = yym1868
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1861 || yy2arr1861 {
				if yyq1861[3] {
					yym1870 := z.EncBinary()
					_ = yym1870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1861[3] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1871 := z.EncBinary()
					_ = yym1871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1861 || yy2arr1861 {
				if yyq1861[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1873 := z.EncBinary()
						_ = yym1873
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1861[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1874 := z.EncBinary()
						_ = yym1874
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1861 || yy2arr1861 {
				if yyq1861[5] {
					yym1876 := z.EncBinary()
					_ = yym1876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1861[5] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1877 := z.EncBinary()
					_ = yym1877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr1861 || yy2arr1861 {
				if yyq1861[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1861[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yysep1861 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1879 := z.DecBinary()
	_ = yym1879
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1880 := r.ReadMapStart()
			if yyl1880 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1880, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1880 := r.ReadArrayStart()
			if yyl1880 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1880, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1881Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1881Slc
	var yyhl1881 bool = l >= 0
	for yyj1881 := 0; ; yyj1881++ {
		if yyhl1881 {
			if yyj1881 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1881Slc = r.DecodeBytes(yys1881Slc, true, true)
		yys1881 := string(yys1881Slc)
		switch yys1881 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1883 := &x.Ports
				yym1884 := z.DecBinary()
				_ = yym1884
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1883), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1885 := &x.Selector
				yym1886 := z.DecBinary()
				_ = yym1886
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1885, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1888 := &x.ExternalIPs
				yym1889 := z.DecBinary()
				_ = yym1889
				if false {
				} else {
					z.F.DecSliceStringX(yyv1888, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1881)
		} // end switch yys1881
	} // end for yyj1881
	if !yyhl1881 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1892 int
	var yyb1892 bool
	var yyhl1892 bool = l >= 0
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1894 := &x.Ports
		yym1895 := z.DecBinary()
		_ = yym1895
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1894), d)
		}
	}
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1896 := &x.Selector
		yym1897 := z.DecBinary()
		_ = yym1897
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1896, false, d)
		}
	}
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1899 := &x.ExternalIPs
		yym1900 := z.DecBinary()
		_ = yym1900
		if false {
		} else {
			z.F.DecSliceStringX(yyv1899, false, d)
		}
	}
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj1892++
		if yyhl1892 {
			yyb1892 = yyj1892 > l
		} else {
			yyb1892 = r.CheckBreak()
		}
		if yyb1892 {
			break
		}
		z.DecStructFieldNotFound(yyj1892-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1903 := z.EncBinary()
		_ = yym1903
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1904 := !z.EncBinary()
			yy2arr1904 := z.EncBasicHandle().StructToArray
			var yyq1904 [5]bool
			_, _, _ = yysep1904, yyq1904, yy2arr1904
			const yyr1904 bool = false
			if yyr1904 || yy2arr1904 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1904 int = 5
				for _, b := range yyq1904 {
					if b {
						yynn1904++
					}
				}
				r.EncodeMapStart(yynn1904)
			}
			if yyr1904 || yy2arr1904 {
				yym1906 := z.EncBinary()
				_ = yym1906
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1907 := z.EncBinary()
				_ = yym1907
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1904 || yy2arr1904 {
				x.Protocol.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr1904 || yy2arr1904 {
				yym1910 := z.EncBinary()
				_ = yym1910
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym1911 := z.EncBinary()
				_ = yym1911
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1904 || yy2arr1904 {
				yy1913 := &x.TargetPort
				yym1914 := z.EncBinary()
				_ = yym1914
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1913) {
				} else if !yym1914 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1913)
				} else {
					z.EncFallback(yy1913)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				yy1915 := &x.TargetPort
				yym1916 := z.EncBinary()
				_ = yym1916
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1915) {
				} else if !yym1916 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1915)
				} else {
					z.EncFallback(yy1915)
				}
			}
			if yyr1904 || yy2arr1904 {
				yym1918 := z.EncBinary()
				_ = yym1918
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				yym1919 := z.EncBinary()
				_ = yym1919
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yysep1904 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1920 := z.DecBinary()
	_ = yym1920
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1921 := r.ReadMapStart()
			if yyl1921 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1921, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1921 := r.ReadArrayStart()
			if yyl1921 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1921, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1922Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1922Slc
	var yyhl1922 bool = l >= 0
	for yyj1922 := 0; ; yyj1922++ {
		if yyhl1922 {
			if yyj1922 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1922Slc = r.DecodeBytes(yys1922Slc, true, true)
		yys1922 := string(yys1922Slc)
		switch yys1922 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_util.IntOrString{}
			} else {
				yyv1926 := &x.TargetPort
				yym1927 := z.DecBinary()
				_ = yym1927
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1926) {
				} else if !yym1927 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1926)
				} else {
					z.DecFallback(yyv1926, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1922)
		} // end switch yys1922
	} // end for yyj1922
	if !yyhl1922 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1929 int
	var yyb1929 bool
	var yyhl1929 bool = l >= 0
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_util.IntOrString{}
	} else {
		yyv1933 := &x.TargetPort
		yym1934 := z.DecBinary()
		_ = yym1934
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1933) {
		} else if !yym1934 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1933)
		} else {
			z.DecFallback(yyv1933, false)
		}
	}
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1929++
		if yyhl1929 {
			yyb1929 = yyj1929 > l
		} else {
			yyb1929 = r.CheckBreak()
		}
		if yyb1929 {
			break
		}
		z.DecStructFieldNotFound(yyj1929-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1936 := z.EncBinary()
		_ = yym1936
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1937 := !z.EncBinary()
			yy2arr1937 := z.EncBasicHandle().StructToArray
			var yyq1937 [5]bool
			_, _, _ = yysep1937, yyq1937, yy2arr1937
			const yyr1937 bool = false
			yyq1937[0] = x.Kind != ""
			yyq1937[1] = x.APIVersion != ""
			yyq1937[2] = true
			yyq1937[3] = true
			yyq1937[4] = true
			if yyr1937 || yy2arr1937 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1937 int = 0
				for _, b := range yyq1937 {
					if b {
						yynn1937++
					}
				}
				r.EncodeMapStart(yynn1937)
			}
			if yyr1937 || yy2arr1937 {
				if yyq1937[0] {
					yym1939 := z.EncBinary()
					_ = yym1939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1937[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1940 := z.EncBinary()
					_ = yym1940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				if yyq1937[1] {
					yym1942 := z.EncBinary()
					_ = yym1942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1937[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1943 := z.EncBinary()
					_ = yym1943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				if yyq1937[2] {
					yy1945 := &x.ObjectMeta
					yy1945.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1937[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1946 := &x.ObjectMeta
					yy1946.CodecEncodeSelf(e)
				}
			}
			if yyr1937 || yy2arr1937 {
				if yyq1937[3] {
					yy1948 := &x.Spec
					yy1948.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1937[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1949 := &x.Spec
					yy1949.CodecEncodeSelf(e)
				}
			}
			if yyr1937 || yy2arr1937 {
				if yyq1937[4] {
					yy1951 := &x.Status
					yy1951.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1937[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1952 := &x.Status
					yy1952.CodecEncodeSelf(e)
				}
			}
			if yysep1937 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1953 := z.DecBinary()
	_ = yym1953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1954 := r.ReadMapStart()
			if yyl1954 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1954, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1954 := r.ReadArrayStart()
			if yyl1954 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1954, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1955Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1955Slc
	var yyhl1955 bool = l >= 0
	for yyj1955 := 0; ; yyj1955++ {
		if yyhl1955 {
			if yyj1955 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1955Slc = r.DecodeBytes(yys1955Slc, true, true)
		yys1955 := string(yys1955Slc)
		switch yys1955 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1958 := &x.ObjectMeta
				yyv1958.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv1959 := &x.Spec
				yyv1959.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv1960 := &x.Status
				yyv1960.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1955)
		} // end switch yys1955
	} // end for yyj1955
	if !yyhl1955 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1961 int
	var yyb1961 bool
	var yyhl1961 bool = l >= 0
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1964 := &x.ObjectMeta
		yyv1964.CodecDecodeSelf(d)
	}
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv1965 := &x.Spec
		yyv1965.CodecDecodeSelf(d)
	}
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv1966 := &x.Status
		yyv1966.CodecDecodeSelf(d)
	}
	for {
		yyj1961++
		if yyhl1961 {
			yyb1961 = yyj1961 > l
		} else {
			yyb1961 = r.CheckBreak()
		}
		if yyb1961 {
			break
		}
		z.DecStructFieldNotFound(yyj1961-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1967 := z.EncBinary()
		_ = yym1967
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1968 := !z.EncBinary()
			yy2arr1968 := z.EncBasicHandle().StructToArray
			var yyq1968 [5]bool
			_, _, _ = yysep1968, yyq1968, yy2arr1968
			const yyr1968 bool = false
			yyq1968[0] = x.Kind != ""
			yyq1968[1] = x.APIVersion != ""
			yyq1968[2] = true
			yyq1968[4] = len(x.ImagePullSecrets) != 0
			if yyr1968 || yy2arr1968 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1968 int = 1
				for _, b := range yyq1968 {
					if b {
						yynn1968++
					}
				}
				r.EncodeMapStart(yynn1968)
			}
			if yyr1968 || yy2arr1968 {
				if yyq1968[0] {
					yym1970 := z.EncBinary()
					_ = yym1970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1968[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1971 := z.EncBinary()
					_ = yym1971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1968 || yy2arr1968 {
				if yyq1968[1] {
					yym1973 := z.EncBinary()
					_ = yym1973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1968[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1974 := z.EncBinary()
					_ = yym1974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1968 || yy2arr1968 {
				if yyq1968[2] {
					yy1976 := &x.ObjectMeta
					yy1976.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1968[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1977 := &x.ObjectMeta
					yy1977.CodecEncodeSelf(e)
				}
			}
			if yyr1968 || yy2arr1968 {
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym1979 := z.EncBinary()
					_ = yym1979
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym1980 := z.EncBinary()
					_ = yym1980
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr1968 || yy2arr1968 {
				if yyq1968[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1982 := z.EncBinary()
						_ = yym1982
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1968[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1983 := z.EncBinary()
						_ = yym1983
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1968 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1984 := z.DecBinary()
	_ = yym1984
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1985 := r.ReadMapStart()
			if yyl1985 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1985, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1985 := r.ReadArrayStart()
			if yyl1985 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1985, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1986Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1986Slc
	var yyhl1986 bool = l >= 0
	for yyj1986 := 0; ; yyj1986++ {
		if yyhl1986 {
			if yyj1986 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1986Slc = r.DecodeBytes(yys1986Slc, true, true)
		yys1986 := string(yys1986Slc)
		switch yys1986 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1989 := &x.ObjectMeta
				yyv1989.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv1990 := &x.Secrets
				yym1991 := z.DecBinary()
				_ = yym1991
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv1990), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1992 := &x.ImagePullSecrets
				yym1993 := z.DecBinary()
				_ = yym1993
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1992), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1986)
		} // end switch yys1986
	} // end for yyj1986
	if !yyhl1986 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1994 int
	var yyb1994 bool
	var yyhl1994 bool = l >= 0
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1997 := &x.ObjectMeta
		yyv1997.CodecDecodeSelf(d)
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv1998 := &x.Secrets
		yym1999 := z.DecBinary()
		_ = yym1999
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv1998), d)
		}
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2000 := &x.ImagePullSecrets
		yym2001 := z.DecBinary()
		_ = yym2001
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2000), d)
		}
	}
	for {
		yyj1994++
		if yyhl1994 {
			yyb1994 = yyj1994 > l
		} else {
			yyb1994 = r.CheckBreak()
		}
		if yyb1994 {
			break
		}
		z.DecStructFieldNotFound(yyj1994-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2002 := z.EncBinary()
		_ = yym2002
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2003 := !z.EncBinary()
			yy2arr2003 := z.EncBasicHandle().StructToArray
			var yyq2003 [4]bool
			_, _, _ = yysep2003, yyq2003, yy2arr2003
			const yyr2003 bool = false
			yyq2003[0] = x.Kind != ""
			yyq2003[1] = x.APIVersion != ""
			yyq2003[2] = true
			if yyr2003 || yy2arr2003 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2003 int = 1
				for _, b := range yyq2003 {
					if b {
						yynn2003++
					}
				}
				r.EncodeMapStart(yynn2003)
			}
			if yyr2003 || yy2arr2003 {
				if yyq2003[0] {
					yym2005 := z.EncBinary()
					_ = yym2005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2003[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2006 := z.EncBinary()
					_ = yym2006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2003 || yy2arr2003 {
				if yyq2003[1] {
					yym2008 := z.EncBinary()
					_ = yym2008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2003[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2009 := z.EncBinary()
					_ = yym2009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2003 || yy2arr2003 {
				if yyq2003[2] {
					yy2011 := &x.ListMeta
					yym2012 := z.EncBinary()
					_ = yym2012
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2011) {
					} else {
						z.EncFallback(yy2011)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2003[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2013 := &x.ListMeta
					yym2014 := z.EncBinary()
					_ = yym2014
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2013) {
					} else {
						z.EncFallback(yy2013)
					}
				}
			}
			if yyr2003 || yy2arr2003 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2016 := z.EncBinary()
					_ = yym2016
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2017 := z.EncBinary()
					_ = yym2017
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep2003 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2018 := z.DecBinary()
	_ = yym2018
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2019 := r.ReadMapStart()
			if yyl2019 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2019, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2019 := r.ReadArrayStart()
			if yyl2019 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2019, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2020Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2020Slc
	var yyhl2020 bool = l >= 0
	for yyj2020 := 0; ; yyj2020++ {
		if yyhl2020 {
			if yyj2020 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2020Slc = r.DecodeBytes(yys2020Slc, true, true)
		yys2020 := string(yys2020Slc)
		switch yys2020 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2023 := &x.ListMeta
				yym2024 := z.DecBinary()
				_ = yym2024
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2023) {
				} else {
					z.DecFallback(yyv2023, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2025 := &x.Items
				yym2026 := z.DecBinary()
				_ = yym2026
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2025), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2020)
		} // end switch yys2020
	} // end for yyj2020
	if !yyhl2020 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2027 int
	var yyb2027 bool
	var yyhl2027 bool = l >= 0
	yyj2027++
	if yyhl2027 {
		yyb2027 = yyj2027 > l
	} else {
		yyb2027 = r.CheckBreak()
	}
	if yyb2027 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2027++
	if yyhl2027 {
		yyb2027 = yyj2027 > l
	} else {
		yyb2027 = r.CheckBreak()
	}
	if yyb2027 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2027++
	if yyhl2027 {
		yyb2027 = yyj2027 > l
	} else {
		yyb2027 = r.CheckBreak()
	}
	if yyb2027 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2030 := &x.ListMeta
		yym2031 := z.DecBinary()
		_ = yym2031
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2030) {
		} else {
			z.DecFallback(yyv2030, false)
		}
	}
	yyj2027++
	if yyhl2027 {
		yyb2027 = yyj2027 > l
	} else {
		yyb2027 = r.CheckBreak()
	}
	if yyb2027 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2032 := &x.Items
		yym2033 := z.DecBinary()
		_ = yym2033
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2032), d)
		}
	}
	for {
		yyj2027++
		if yyhl2027 {
			yyb2027 = yyj2027 > l
		} else {
			yyb2027 = r.CheckBreak()
		}
		if yyb2027 {
			break
		}
		z.DecStructFieldNotFound(yyj2027-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2034 := z.EncBinary()
		_ = yym2034
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2035 := !z.EncBinary()
			yy2arr2035 := z.EncBasicHandle().StructToArray
			var yyq2035 [4]bool
			_, _, _ = yysep2035, yyq2035, yy2arr2035
			const yyr2035 bool = false
			yyq2035[0] = x.Kind != ""
			yyq2035[1] = x.APIVersion != ""
			yyq2035[2] = true
			if yyr2035 || yy2arr2035 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2035 int = 1
				for _, b := range yyq2035 {
					if b {
						yynn2035++
					}
				}
				r.EncodeMapStart(yynn2035)
			}
			if yyr2035 || yy2arr2035 {
				if yyq2035[0] {
					yym2037 := z.EncBinary()
					_ = yym2037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2035[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2038 := z.EncBinary()
					_ = yym2038
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2035 || yy2arr2035 {
				if yyq2035[1] {
					yym2040 := z.EncBinary()
					_ = yym2040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2035[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2041 := z.EncBinary()
					_ = yym2041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2035 || yy2arr2035 {
				if yyq2035[2] {
					yy2043 := &x.ObjectMeta
					yy2043.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2035[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2044 := &x.ObjectMeta
					yy2044.CodecEncodeSelf(e)
				}
			}
			if yyr2035 || yy2arr2035 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2046 := z.EncBinary()
					_ = yym2046
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2047 := z.EncBinary()
					_ = yym2047
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2035 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2048 := z.DecBinary()
	_ = yym2048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2049 := r.ReadMapStart()
			if yyl2049 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2049, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2049 := r.ReadArrayStart()
			if yyl2049 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2050Slc
	var yyhl2050 bool = l >= 0
	for yyj2050 := 0; ; yyj2050++ {
		if yyhl2050 {
			if yyj2050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2050Slc = r.DecodeBytes(yys2050Slc, true, true)
		yys2050 := string(yys2050Slc)
		switch yys2050 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2053 := &x.ObjectMeta
				yyv2053.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2054 := &x.Subsets
				yym2055 := z.DecBinary()
				_ = yym2055
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2054), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2050)
		} // end switch yys2050
	} // end for yyj2050
	if !yyhl2050 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2056 int
	var yyb2056 bool
	var yyhl2056 bool = l >= 0
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2059 := &x.ObjectMeta
		yyv2059.CodecDecodeSelf(d)
	}
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2060 := &x.Subsets
		yym2061 := z.DecBinary()
		_ = yym2061
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2060), d)
		}
	}
	for {
		yyj2056++
		if yyhl2056 {
			yyb2056 = yyj2056 > l
		} else {
			yyb2056 = r.CheckBreak()
		}
		if yyb2056 {
			break
		}
		z.DecStructFieldNotFound(yyj2056-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2062 := z.EncBinary()
		_ = yym2062
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2063 := !z.EncBinary()
			yy2arr2063 := z.EncBasicHandle().StructToArray
			var yyq2063 [3]bool
			_, _, _ = yysep2063, yyq2063, yy2arr2063
			const yyr2063 bool = false
			if yyr2063 || yy2arr2063 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2063 int = 3
				for _, b := range yyq2063 {
					if b {
						yynn2063++
					}
				}
				r.EncodeMapStart(yynn2063)
			}
			if yyr2063 || yy2arr2063 {
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2065 := z.EncBinary()
					_ = yym2065
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2066 := z.EncBinary()
					_ = yym2066
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2068 := z.EncBinary()
					_ = yym2068
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2069 := z.EncBinary()
					_ = yym2069
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2071 := z.EncBinary()
					_ = yym2071
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2072 := z.EncBinary()
					_ = yym2072
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yysep2063 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2073 := z.DecBinary()
	_ = yym2073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2074 := r.ReadMapStart()
			if yyl2074 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2074, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2074 := r.ReadArrayStart()
			if yyl2074 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2074, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2075Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2075Slc
	var yyhl2075 bool = l >= 0
	for yyj2075 := 0; ; yyj2075++ {
		if yyhl2075 {
			if yyj2075 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2075Slc = r.DecodeBytes(yys2075Slc, true, true)
		yys2075 := string(yys2075Slc)
		switch yys2075 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2076 := &x.Addresses
				yym2077 := z.DecBinary()
				_ = yym2077
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2076), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2078 := &x.NotReadyAddresses
				yym2079 := z.DecBinary()
				_ = yym2079
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2078), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2080 := &x.Ports
				yym2081 := z.DecBinary()
				_ = yym2081
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2080), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2075)
		} // end switch yys2075
	} // end for yyj2075
	if !yyhl2075 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2082 int
	var yyb2082 bool
	var yyhl2082 bool = l >= 0
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2083 := &x.Addresses
		yym2084 := z.DecBinary()
		_ = yym2084
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2083), d)
		}
	}
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2085 := &x.NotReadyAddresses
		yym2086 := z.DecBinary()
		_ = yym2086
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2085), d)
		}
	}
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2087 := &x.Ports
		yym2088 := z.DecBinary()
		_ = yym2088
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2087), d)
		}
	}
	for {
		yyj2082++
		if yyhl2082 {
			yyb2082 = yyj2082 > l
		} else {
			yyb2082 = r.CheckBreak()
		}
		if yyb2082 {
			break
		}
		z.DecStructFieldNotFound(yyj2082-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2089 := z.EncBinary()
		_ = yym2089
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2090 := !z.EncBinary()
			yy2arr2090 := z.EncBasicHandle().StructToArray
			var yyq2090 [2]bool
			_, _, _ = yysep2090, yyq2090, yy2arr2090
			const yyr2090 bool = false
			if yyr2090 || yy2arr2090 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2090 int = 2
				for _, b := range yyq2090 {
					if b {
						yynn2090++
					}
				}
				r.EncodeMapStart(yynn2090)
			}
			if yyr2090 || yy2arr2090 {
				yym2092 := z.EncBinary()
				_ = yym2092
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				yym2093 := z.EncBinary()
				_ = yym2093
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2090 || yy2arr2090 {
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yysep2090 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2095 := z.DecBinary()
	_ = yym2095
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2096 := r.ReadMapStart()
			if yyl2096 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2096, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2096 := r.ReadArrayStart()
			if yyl2096 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2096, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2097Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2097Slc
	var yyhl2097 bool = l >= 0
	for yyj2097 := 0; ; yyj2097++ {
		if yyhl2097 {
			if yyj2097 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2097Slc = r.DecodeBytes(yys2097Slc, true, true)
		yys2097 := string(yys2097Slc)
		switch yys2097 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2097)
		} // end switch yys2097
	} // end for yyj2097
	if !yyhl2097 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2100 int
	var yyb2100 bool
	var yyhl2100 bool = l >= 0
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2100++
		if yyhl2100 {
			yyb2100 = yyj2100 > l
		} else {
			yyb2100 = r.CheckBreak()
		}
		if yyb2100 {
			break
		}
		z.DecStructFieldNotFound(yyj2100-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2103 := z.EncBinary()
		_ = yym2103
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2104 := !z.EncBinary()
			yy2arr2104 := z.EncBasicHandle().StructToArray
			var yyq2104 [3]bool
			_, _, _ = yysep2104, yyq2104, yy2arr2104
			const yyr2104 bool = false
			if yyr2104 || yy2arr2104 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2104 int = 3
				for _, b := range yyq2104 {
					if b {
						yynn2104++
					}
				}
				r.EncodeMapStart(yynn2104)
			}
			if yyr2104 || yy2arr2104 {
				yym2106 := z.EncBinary()
				_ = yym2106
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				yym2107 := z.EncBinary()
				_ = yym2107
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2104 || yy2arr2104 {
				yym2109 := z.EncBinary()
				_ = yym2109
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2110 := z.EncBinary()
				_ = yym2110
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2104 || yy2arr2104 {
				x.Protocol.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				x.Protocol.CodecEncodeSelf(e)
			}
			if yysep2104 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2112 := z.DecBinary()
	_ = yym2112
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2113 := r.ReadMapStart()
			if yyl2113 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2113, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2113 := r.ReadArrayStart()
			if yyl2113 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2113, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2114Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2114Slc
	var yyhl2114 bool = l >= 0
	for yyj2114 := 0; ; yyj2114++ {
		if yyhl2114 {
			if yyj2114 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2114Slc = r.DecodeBytes(yys2114Slc, true, true)
		yys2114 := string(yys2114Slc)
		switch yys2114 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2114)
		} // end switch yys2114
	} // end for yyj2114
	if !yyhl2114 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2118 int
	var yyb2118 bool
	var yyhl2118 bool = l >= 0
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2118++
		if yyhl2118 {
			yyb2118 = yyj2118 > l
		} else {
			yyb2118 = r.CheckBreak()
		}
		if yyb2118 {
			break
		}
		z.DecStructFieldNotFound(yyj2118-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2122 := z.EncBinary()
		_ = yym2122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2123 := !z.EncBinary()
			yy2arr2123 := z.EncBasicHandle().StructToArray
			var yyq2123 [4]bool
			_, _, _ = yysep2123, yyq2123, yy2arr2123
			const yyr2123 bool = false
			yyq2123[0] = x.Kind != ""
			yyq2123[1] = x.APIVersion != ""
			yyq2123[2] = true
			if yyr2123 || yy2arr2123 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2123 int = 1
				for _, b := range yyq2123 {
					if b {
						yynn2123++
					}
				}
				r.EncodeMapStart(yynn2123)
			}
			if yyr2123 || yy2arr2123 {
				if yyq2123[0] {
					yym2125 := z.EncBinary()
					_ = yym2125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2123[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2126 := z.EncBinary()
					_ = yym2126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2123 || yy2arr2123 {
				if yyq2123[1] {
					yym2128 := z.EncBinary()
					_ = yym2128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2123[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2129 := z.EncBinary()
					_ = yym2129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2123 || yy2arr2123 {
				if yyq2123[2] {
					yy2131 := &x.ListMeta
					yym2132 := z.EncBinary()
					_ = yym2132
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2131) {
					} else {
						z.EncFallback(yy2131)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2123[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2133 := &x.ListMeta
					yym2134 := z.EncBinary()
					_ = yym2134
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2133) {
					} else {
						z.EncFallback(yy2133)
					}
				}
			}
			if yyr2123 || yy2arr2123 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2136 := z.EncBinary()
					_ = yym2136
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2137 := z.EncBinary()
					_ = yym2137
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2123 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2138 := z.DecBinary()
	_ = yym2138
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2139 := r.ReadMapStart()
			if yyl2139 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2139, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2139 := r.ReadArrayStart()
			if yyl2139 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2139, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2140Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2140Slc
	var yyhl2140 bool = l >= 0
	for yyj2140 := 0; ; yyj2140++ {
		if yyhl2140 {
			if yyj2140 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2140Slc = r.DecodeBytes(yys2140Slc, true, true)
		yys2140 := string(yys2140Slc)
		switch yys2140 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2143 := &x.ListMeta
				yym2144 := z.DecBinary()
				_ = yym2144
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2143) {
				} else {
					z.DecFallback(yyv2143, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2145 := &x.Items
				yym2146 := z.DecBinary()
				_ = yym2146
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2145), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2140)
		} // end switch yys2140
	} // end for yyj2140
	if !yyhl2140 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2147 int
	var yyb2147 bool
	var yyhl2147 bool = l >= 0
	yyj2147++
	if yyhl2147 {
		yyb2147 = yyj2147 > l
	} else {
		yyb2147 = r.CheckBreak()
	}
	if yyb2147 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2147++
	if yyhl2147 {
		yyb2147 = yyj2147 > l
	} else {
		yyb2147 = r.CheckBreak()
	}
	if yyb2147 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2147++
	if yyhl2147 {
		yyb2147 = yyj2147 > l
	} else {
		yyb2147 = r.CheckBreak()
	}
	if yyb2147 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2150 := &x.ListMeta
		yym2151 := z.DecBinary()
		_ = yym2151
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2150) {
		} else {
			z.DecFallback(yyv2150, false)
		}
	}
	yyj2147++
	if yyhl2147 {
		yyb2147 = yyj2147 > l
	} else {
		yyb2147 = r.CheckBreak()
	}
	if yyb2147 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2152 := &x.Items
		yym2153 := z.DecBinary()
		_ = yym2153
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2152), d)
		}
	}
	for {
		yyj2147++
		if yyhl2147 {
			yyb2147 = yyj2147 > l
		} else {
			yyb2147 = r.CheckBreak()
		}
		if yyb2147 {
			break
		}
		z.DecStructFieldNotFound(yyj2147-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2154 := z.EncBinary()
		_ = yym2154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2155 := !z.EncBinary()
			yy2arr2155 := z.EncBasicHandle().StructToArray
			var yyq2155 [4]bool
			_, _, _ = yysep2155, yyq2155, yy2arr2155
			const yyr2155 bool = false
			yyq2155[0] = x.PodCIDR != ""
			yyq2155[1] = x.ExternalID != ""
			yyq2155[2] = x.ProviderID != ""
			yyq2155[3] = x.Unschedulable != false
			if yyr2155 || yy2arr2155 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2155 int = 0
				for _, b := range yyq2155 {
					if b {
						yynn2155++
					}
				}
				r.EncodeMapStart(yynn2155)
			}
			if yyr2155 || yy2arr2155 {
				if yyq2155[0] {
					yym2157 := z.EncBinary()
					_ = yym2157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2155[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2158 := z.EncBinary()
					_ = yym2158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2155 || yy2arr2155 {
				if yyq2155[1] {
					yym2160 := z.EncBinary()
					_ = yym2160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2155[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2161 := z.EncBinary()
					_ = yym2161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2155 || yy2arr2155 {
				if yyq2155[2] {
					yym2163 := z.EncBinary()
					_ = yym2163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2155[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2164 := z.EncBinary()
					_ = yym2164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2155 || yy2arr2155 {
				if yyq2155[3] {
					yym2166 := z.EncBinary()
					_ = yym2166
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2155[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2167 := z.EncBinary()
					_ = yym2167
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2155 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2168 := z.DecBinary()
	_ = yym2168
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2169 := r.ReadMapStart()
			if yyl2169 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2169, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2169 := r.ReadArrayStart()
			if yyl2169 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2169, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2170Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2170Slc
	var yyhl2170 bool = l >= 0
	for yyj2170 := 0; ; yyj2170++ {
		if yyhl2170 {
			if yyj2170 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2170Slc = r.DecodeBytes(yys2170Slc, true, true)
		yys2170 := string(yys2170Slc)
		switch yys2170 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2170)
		} // end switch yys2170
	} // end for yyj2170
	if !yyhl2170 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2175 int
	var yyb2175 bool
	var yyhl2175 bool = l >= 0
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2175++
		if yyhl2175 {
			yyb2175 = yyj2175 > l
		} else {
			yyb2175 = r.CheckBreak()
		}
		if yyb2175 {
			break
		}
		z.DecStructFieldNotFound(yyj2175-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2180 := z.EncBinary()
		_ = yym2180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2181 := !z.EncBinary()
			yy2arr2181 := z.EncBasicHandle().StructToArray
			var yyq2181 [1]bool
			_, _, _ = yysep2181, yyq2181, yy2arr2181
			const yyr2181 bool = false
			if yyr2181 || yy2arr2181 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2181 int = 1
				for _, b := range yyq2181 {
					if b {
						yynn2181++
					}
				}
				r.EncodeMapStart(yynn2181)
			}
			if yyr2181 || yy2arr2181 {
				yym2183 := z.EncBinary()
				_ = yym2183
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2184 := z.EncBinary()
				_ = yym2184
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2181 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2185 := z.DecBinary()
	_ = yym2185
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2186 := r.ReadMapStart()
			if yyl2186 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2186, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2186 := r.ReadArrayStart()
			if yyl2186 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2186, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2187Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2187Slc
	var yyhl2187 bool = l >= 0
	for yyj2187 := 0; ; yyj2187++ {
		if yyhl2187 {
			if yyj2187 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2187Slc = r.DecodeBytes(yys2187Slc, true, true)
		yys2187 := string(yys2187Slc)
		switch yys2187 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2187)
		} // end switch yys2187
	} // end for yyj2187
	if !yyhl2187 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2189 int
	var yyb2189 bool
	var yyhl2189 bool = l >= 0
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2189++
		if yyhl2189 {
			yyb2189 = yyj2189 > l
		} else {
			yyb2189 = r.CheckBreak()
		}
		if yyb2189 {
			break
		}
		z.DecStructFieldNotFound(yyj2189-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2191 := z.EncBinary()
		_ = yym2191
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2192 := !z.EncBinary()
			yy2arr2192 := z.EncBasicHandle().StructToArray
			var yyq2192 [1]bool
			_, _, _ = yysep2192, yyq2192, yy2arr2192
			const yyr2192 bool = false
			yyq2192[0] = true
			if yyr2192 || yy2arr2192 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2192 int = 0
				for _, b := range yyq2192 {
					if b {
						yynn2192++
					}
				}
				r.EncodeMapStart(yynn2192)
			}
			if yyr2192 || yy2arr2192 {
				if yyq2192[0] {
					yy2194 := &x.KubeletEndpoint
					yy2194.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2192[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2195 := &x.KubeletEndpoint
					yy2195.CodecEncodeSelf(e)
				}
			}
			if yysep2192 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2196 := z.DecBinary()
	_ = yym2196
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2197 := r.ReadMapStart()
			if yyl2197 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2197, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2197 := r.ReadArrayStart()
			if yyl2197 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2197, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2198Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2198Slc
	var yyhl2198 bool = l >= 0
	for yyj2198 := 0; ; yyj2198++ {
		if yyhl2198 {
			if yyj2198 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2198Slc = r.DecodeBytes(yys2198Slc, true, true)
		yys2198 := string(yys2198Slc)
		switch yys2198 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2199 := &x.KubeletEndpoint
				yyv2199.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2198)
		} // end switch yys2198
	} // end for yyj2198
	if !yyhl2198 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2200 int
	var yyb2200 bool
	var yyhl2200 bool = l >= 0
	yyj2200++
	if yyhl2200 {
		yyb2200 = yyj2200 > l
	} else {
		yyb2200 = r.CheckBreak()
	}
	if yyb2200 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2201 := &x.KubeletEndpoint
		yyv2201.CodecDecodeSelf(d)
	}
	for {
		yyj2200++
		if yyhl2200 {
			yyb2200 = yyj2200 > l
		} else {
			yyb2200 = r.CheckBreak()
		}
		if yyb2200 {
			break
		}
		z.DecStructFieldNotFound(yyj2200-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2202 := z.EncBinary()
		_ = yym2202
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2203 := !z.EncBinary()
			yy2arr2203 := z.EncBasicHandle().StructToArray
			var yyq2203 [8]bool
			_, _, _ = yysep2203, yyq2203, yy2arr2203
			const yyr2203 bool = false
			if yyr2203 || yy2arr2203 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2203 int = 8
				for _, b := range yyq2203 {
					if b {
						yynn2203++
					}
				}
				r.EncodeMapStart(yynn2203)
			}
			if yyr2203 || yy2arr2203 {
				yym2205 := z.EncBinary()
				_ = yym2205
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2206 := z.EncBinary()
				_ = yym2206
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2203 || yy2arr2203 {
				yym2208 := z.EncBinary()
				_ = yym2208
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2209 := z.EncBinary()
				_ = yym2209
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2203 || yy2arr2203 {
				yym2211 := z.EncBinary()
				_ = yym2211
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2212 := z.EncBinary()
				_ = yym2212
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2203 || yy2arr2203 {
				yym2214 := z.EncBinary()
				_ = yym2214
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2215 := z.EncBinary()
				_ = yym2215
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2203 || yy2arr2203 {
				yym2217 := z.EncBinary()
				_ = yym2217
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2218 := z.EncBinary()
				_ = yym2218
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2203 || yy2arr2203 {
				yym2220 := z.EncBinary()
				_ = yym2220
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2221 := z.EncBinary()
				_ = yym2221
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2203 || yy2arr2203 {
				yym2223 := z.EncBinary()
				_ = yym2223
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2224 := z.EncBinary()
				_ = yym2224
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2203 || yy2arr2203 {
				yym2226 := z.EncBinary()
				_ = yym2226
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2227 := z.EncBinary()
				_ = yym2227
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2203 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2228 := z.DecBinary()
	_ = yym2228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2229 := r.ReadMapStart()
			if yyl2229 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2229, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2229 := r.ReadArrayStart()
			if yyl2229 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2230Slc
	var yyhl2230 bool = l >= 0
	for yyj2230 := 0; ; yyj2230++ {
		if yyhl2230 {
			if yyj2230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2230Slc = r.DecodeBytes(yys2230Slc, true, true)
		yys2230 := string(yys2230Slc)
		switch yys2230 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2230)
		} // end switch yys2230
	} // end for yyj2230
	if !yyhl2230 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2239 int
	var yyb2239 bool
	var yyhl2239 bool = l >= 0
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2239++
		if yyhl2239 {
			yyb2239 = yyj2239 > l
		} else {
			yyb2239 = r.CheckBreak()
		}
		if yyb2239 {
			break
		}
		z.DecStructFieldNotFound(yyj2239-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2248 := z.EncBinary()
		_ = yym2248
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2249 := !z.EncBinary()
			yy2arr2249 := z.EncBasicHandle().StructToArray
			var yyq2249 [6]bool
			_, _, _ = yysep2249, yyq2249, yy2arr2249
			const yyr2249 bool = false
			yyq2249[0] = len(x.Capacity) != 0
			yyq2249[1] = x.Phase != ""
			yyq2249[2] = len(x.Conditions) != 0
			yyq2249[3] = len(x.Addresses) != 0
			yyq2249[4] = true
			yyq2249[5] = true
			if yyr2249 || yy2arr2249 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2249 int = 0
				for _, b := range yyq2249 {
					if b {
						yynn2249++
					}
				}
				r.EncodeMapStart(yynn2249)
			}
			if yyr2249 || yy2arr2249 {
				if yyq2249[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2249[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2249 || yy2arr2249 {
				if yyq2249[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2249[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2249 || yy2arr2249 {
				if yyq2249[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2253 := z.EncBinary()
						_ = yym2253
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2249[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2254 := z.EncBinary()
						_ = yym2254
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2249 || yy2arr2249 {
				if yyq2249[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2256 := z.EncBinary()
						_ = yym2256
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2249[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2257 := z.EncBinary()
						_ = yym2257
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2249 || yy2arr2249 {
				if yyq2249[4] {
					yy2259 := &x.DaemonEndpoints
					yy2259.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2249[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2260 := &x.DaemonEndpoints
					yy2260.CodecEncodeSelf(e)
				}
			}
			if yyr2249 || yy2arr2249 {
				if yyq2249[5] {
					yy2262 := &x.NodeInfo
					yy2262.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2249[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2263 := &x.NodeInfo
					yy2263.CodecEncodeSelf(e)
				}
			}
			if yysep2249 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2264 := z.DecBinary()
	_ = yym2264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2265 := r.ReadMapStart()
			if yyl2265 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2265, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2265 := r.ReadArrayStart()
			if yyl2265 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2266Slc
	var yyhl2266 bool = l >= 0
	for yyj2266 := 0; ; yyj2266++ {
		if yyhl2266 {
			if yyj2266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2266Slc = r.DecodeBytes(yys2266Slc, true, true)
		yys2266 := string(yys2266Slc)
		switch yys2266 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2267 := &x.Capacity
				yyv2267.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2269 := &x.Conditions
				yym2270 := z.DecBinary()
				_ = yym2270
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2269), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2271 := &x.Addresses
				yym2272 := z.DecBinary()
				_ = yym2272
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2271), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2273 := &x.DaemonEndpoints
				yyv2273.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2274 := &x.NodeInfo
				yyv2274.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2266)
		} // end switch yys2266
	} // end for yyj2266
	if !yyhl2266 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2275 int
	var yyb2275 bool
	var yyhl2275 bool = l >= 0
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2276 := &x.Capacity
		yyv2276.CodecDecodeSelf(d)
	}
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2278 := &x.Conditions
		yym2279 := z.DecBinary()
		_ = yym2279
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2278), d)
		}
	}
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2280 := &x.Addresses
		yym2281 := z.DecBinary()
		_ = yym2281
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2280), d)
		}
	}
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2282 := &x.DaemonEndpoints
		yyv2282.CodecDecodeSelf(d)
	}
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2283 := &x.NodeInfo
		yyv2283.CodecDecodeSelf(d)
	}
	for {
		yyj2275++
		if yyhl2275 {
			yyb2275 = yyj2275 > l
		} else {
			yyb2275 = r.CheckBreak()
		}
		if yyb2275 {
			break
		}
		z.DecStructFieldNotFound(yyj2275-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2284 := z.EncBinary()
	_ = yym2284
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2285 := z.DecBinary()
	_ = yym2285
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2286 := z.EncBinary()
	_ = yym2286
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2287 := z.DecBinary()
	_ = yym2287
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2288 := z.EncBinary()
		_ = yym2288
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2289 := !z.EncBinary()
			yy2arr2289 := z.EncBasicHandle().StructToArray
			var yyq2289 [6]bool
			_, _, _ = yysep2289, yyq2289, yy2arr2289
			const yyr2289 bool = false
			yyq2289[2] = true
			yyq2289[3] = true
			yyq2289[4] = x.Reason != ""
			yyq2289[5] = x.Message != ""
			if yyr2289 || yy2arr2289 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2289 int = 2
				for _, b := range yyq2289 {
					if b {
						yynn2289++
					}
				}
				r.EncodeMapStart(yynn2289)
			}
			if yyr2289 || yy2arr2289 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2289 || yy2arr2289 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2289 || yy2arr2289 {
				if yyq2289[2] {
					yy2293 := &x.LastHeartbeatTime
					yym2294 := z.EncBinary()
					_ = yym2294
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2293) {
					} else if yym2294 {
						z.EncBinaryMarshal(yy2293)
					} else if !yym2294 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2293)
					} else {
						z.EncFallback(yy2293)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2289[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2295 := &x.LastHeartbeatTime
					yym2296 := z.EncBinary()
					_ = yym2296
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2295) {
					} else if yym2296 {
						z.EncBinaryMarshal(yy2295)
					} else if !yym2296 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2295)
					} else {
						z.EncFallback(yy2295)
					}
				}
			}
			if yyr2289 || yy2arr2289 {
				if yyq2289[3] {
					yy2298 := &x.LastTransitionTime
					yym2299 := z.EncBinary()
					_ = yym2299
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2298) {
					} else if yym2299 {
						z.EncBinaryMarshal(yy2298)
					} else if !yym2299 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2298)
					} else {
						z.EncFallback(yy2298)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2289[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2300 := &x.LastTransitionTime
					yym2301 := z.EncBinary()
					_ = yym2301
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2300) {
					} else if yym2301 {
						z.EncBinaryMarshal(yy2300)
					} else if !yym2301 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2300)
					} else {
						z.EncFallback(yy2300)
					}
				}
			}
			if yyr2289 || yy2arr2289 {
				if yyq2289[4] {
					yym2303 := z.EncBinary()
					_ = yym2303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2289[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2304 := z.EncBinary()
					_ = yym2304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2289 || yy2arr2289 {
				if yyq2289[5] {
					yym2306 := z.EncBinary()
					_ = yym2306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2289[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2307 := z.EncBinary()
					_ = yym2307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2289 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2308 := z.DecBinary()
	_ = yym2308
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2309 := r.ReadMapStart()
			if yyl2309 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2309, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2309 := r.ReadArrayStart()
			if yyl2309 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2309, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2310Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2310Slc
	var yyhl2310 bool = l >= 0
	for yyj2310 := 0; ; yyj2310++ {
		if yyhl2310 {
			if yyj2310 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2310Slc = r.DecodeBytes(yys2310Slc, true, true)
		yys2310 := string(yys2310Slc)
		switch yys2310 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2313 := &x.LastHeartbeatTime
				yym2314 := z.DecBinary()
				_ = yym2314
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2313) {
				} else if yym2314 {
					z.DecBinaryUnmarshal(yyv2313)
				} else if !yym2314 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2313)
				} else {
					z.DecFallback(yyv2313, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2315 := &x.LastTransitionTime
				yym2316 := z.DecBinary()
				_ = yym2316
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2315) {
				} else if yym2316 {
					z.DecBinaryUnmarshal(yyv2315)
				} else if !yym2316 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2315)
				} else {
					z.DecFallback(yyv2315, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2310)
		} // end switch yys2310
	} // end for yyj2310
	if !yyhl2310 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2319 int
	var yyb2319 bool
	var yyhl2319 bool = l >= 0
	yyj2319++
	if yyhl2319 {
		yyb2319 = yyj2319 > l
	} else {
		yyb2319 = r.CheckBreak()
	}
	if yyb2319 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2319++
	if yyhl2319 {
		yyb2319 = yyj2319 > l
	} else {
		yyb2319 = r.CheckBreak()
	}
	if yyb2319 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2319++
	if yyhl2319 {
		yyb2319 = yyj2319 > l
	} else {
		yyb2319 = r.CheckBreak()
	}
	if yyb2319 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2322 := &x.LastHeartbeatTime
		yym2323 := z.DecBinary()
		_ = yym2323
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2322) {
		} else if yym2323 {
			z.DecBinaryUnmarshal(yyv2322)
		} else if !yym2323 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2322)
		} else {
			z.DecFallback(yyv2322, false)
		}
	}
	yyj2319++
	if yyhl2319 {
		yyb2319 = yyj2319 > l
	} else {
		yyb2319 = r.CheckBreak()
	}
	if yyb2319 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2324 := &x.LastTransitionTime
		yym2325 := z.DecBinary()
		_ = yym2325
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2324) {
		} else if yym2325 {
			z.DecBinaryUnmarshal(yyv2324)
		} else if !yym2325 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2324)
		} else {
			z.DecFallback(yyv2324, false)
		}
	}
	yyj2319++
	if yyhl2319 {
		yyb2319 = yyj2319 > l
	} else {
		yyb2319 = r.CheckBreak()
	}
	if yyb2319 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2319++
	if yyhl2319 {
		yyb2319 = yyj2319 > l
	} else {
		yyb2319 = r.CheckBreak()
	}
	if yyb2319 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2319++
		if yyhl2319 {
			yyb2319 = yyj2319 > l
		} else {
			yyb2319 = r.CheckBreak()
		}
		if yyb2319 {
			break
		}
		z.DecStructFieldNotFound(yyj2319-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2328 := z.EncBinary()
	_ = yym2328
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2329 := z.DecBinary()
	_ = yym2329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2330 := z.EncBinary()
		_ = yym2330
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2331 := !z.EncBinary()
			yy2arr2331 := z.EncBasicHandle().StructToArray
			var yyq2331 [2]bool
			_, _, _ = yysep2331, yyq2331, yy2arr2331
			const yyr2331 bool = false
			if yyr2331 || yy2arr2331 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2331 int = 2
				for _, b := range yyq2331 {
					if b {
						yynn2331++
					}
				}
				r.EncodeMapStart(yynn2331)
			}
			if yyr2331 || yy2arr2331 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2331 || yy2arr2331 {
				yym2334 := z.EncBinary()
				_ = yym2334
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2335 := z.EncBinary()
				_ = yym2335
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2331 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2336 := z.DecBinary()
	_ = yym2336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2337 := r.ReadMapStart()
			if yyl2337 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2337, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2337 := r.ReadArrayStart()
			if yyl2337 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2337, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2338Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2338Slc
	var yyhl2338 bool = l >= 0
	for yyj2338 := 0; ; yyj2338++ {
		if yyhl2338 {
			if yyj2338 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2338Slc = r.DecodeBytes(yys2338Slc, true, true)
		yys2338 := string(yys2338Slc)
		switch yys2338 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2338)
		} // end switch yys2338
	} // end for yyj2338
	if !yyhl2338 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2341 int
	var yyb2341 bool
	var yyhl2341 bool = l >= 0
	yyj2341++
	if yyhl2341 {
		yyb2341 = yyj2341 > l
	} else {
		yyb2341 = r.CheckBreak()
	}
	if yyb2341 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2341++
	if yyhl2341 {
		yyb2341 = yyj2341 > l
	} else {
		yyb2341 = r.CheckBreak()
	}
	if yyb2341 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2341++
		if yyhl2341 {
			yyb2341 = yyj2341 > l
		} else {
			yyb2341 = r.CheckBreak()
		}
		if yyb2341 {
			break
		}
		z.DecStructFieldNotFound(yyj2341-1, "")
	}
	r.ReadEnd()
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2344 := z.EncBinary()
		_ = yym2344
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2345 := !z.EncBinary()
			yy2arr2345 := z.EncBasicHandle().StructToArray
			var yyq2345 [1]bool
			_, _, _ = yysep2345, yyq2345, yy2arr2345
			const yyr2345 bool = false
			yyq2345[0] = len(x.Capacity) != 0
			if yyr2345 || yy2arr2345 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2345 int = 0
				for _, b := range yyq2345 {
					if b {
						yynn2345++
					}
				}
				r.EncodeMapStart(yynn2345)
			}
			if yyr2345 || yy2arr2345 {
				if yyq2345[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2345[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2345 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2347 := z.DecBinary()
	_ = yym2347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2348 := r.ReadMapStart()
			if yyl2348 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2348, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2348 := r.ReadArrayStart()
			if yyl2348 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2348, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2349Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2349Slc
	var yyhl2349 bool = l >= 0
	for yyj2349 := 0; ; yyj2349++ {
		if yyhl2349 {
			if yyj2349 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2349Slc = r.DecodeBytes(yys2349Slc, true, true)
		yys2349 := string(yys2349Slc)
		switch yys2349 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2350 := &x.Capacity
				yyv2350.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2349)
		} // end switch yys2349
	} // end for yyj2349
	if !yyhl2349 {
		r.ReadEnd()
	}
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2351 int
	var yyb2351 bool
	var yyhl2351 bool = l >= 0
	yyj2351++
	if yyhl2351 {
		yyb2351 = yyj2351 > l
	} else {
		yyb2351 = r.CheckBreak()
	}
	if yyb2351 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2352 := &x.Capacity
		yyv2352.CodecDecodeSelf(d)
	}
	for {
		yyj2351++
		if yyhl2351 {
			yyb2351 = yyj2351 > l
		} else {
			yyb2351 = r.CheckBreak()
		}
		if yyb2351 {
			break
		}
		z.DecStructFieldNotFound(yyj2351-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2353 := z.EncBinary()
	_ = yym2353
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2354 := z.DecBinary()
	_ = yym2354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2355 := z.EncBinary()
		_ = yym2355
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2356 := z.DecBinary()
	_ = yym2356
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2357 := z.EncBinary()
		_ = yym2357
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2358 := !z.EncBinary()
			yy2arr2358 := z.EncBasicHandle().StructToArray
			var yyq2358 [5]bool
			_, _, _ = yysep2358, yyq2358, yy2arr2358
			const yyr2358 bool = false
			yyq2358[0] = x.Kind != ""
			yyq2358[1] = x.APIVersion != ""
			yyq2358[2] = true
			yyq2358[3] = true
			yyq2358[4] = true
			if yyr2358 || yy2arr2358 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2358 int = 0
				for _, b := range yyq2358 {
					if b {
						yynn2358++
					}
				}
				r.EncodeMapStart(yynn2358)
			}
			if yyr2358 || yy2arr2358 {
				if yyq2358[0] {
					yym2360 := z.EncBinary()
					_ = yym2360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2358[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2358 || yy2arr2358 {
				if yyq2358[1] {
					yym2363 := z.EncBinary()
					_ = yym2363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2358[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2358 || yy2arr2358 {
				if yyq2358[2] {
					yy2366 := &x.ObjectMeta
					yy2366.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2358[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2367 := &x.ObjectMeta
					yy2367.CodecEncodeSelf(e)
				}
			}
			if yyr2358 || yy2arr2358 {
				if yyq2358[3] {
					yy2369 := &x.Spec
					yy2369.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2358[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2370 := &x.Spec
					yy2370.CodecEncodeSelf(e)
				}
			}
			if yyr2358 || yy2arr2358 {
				if yyq2358[4] {
					yy2372 := &x.Status
					yy2372.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2358[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2373 := &x.Status
					yy2373.CodecEncodeSelf(e)
				}
			}
			if yysep2358 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2374 := z.DecBinary()
	_ = yym2374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2375 := r.ReadMapStart()
			if yyl2375 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2375, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2375 := r.ReadArrayStart()
			if yyl2375 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2376Slc
	var yyhl2376 bool = l >= 0
	for yyj2376 := 0; ; yyj2376++ {
		if yyhl2376 {
			if yyj2376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2376Slc = r.DecodeBytes(yys2376Slc, true, true)
		yys2376 := string(yys2376Slc)
		switch yys2376 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2379 := &x.ObjectMeta
				yyv2379.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2380 := &x.Spec
				yyv2380.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2381 := &x.Status
				yyv2381.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2376)
		} // end switch yys2376
	} // end for yyj2376
	if !yyhl2376 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2382 int
	var yyb2382 bool
	var yyhl2382 bool = l >= 0
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2385 := &x.ObjectMeta
		yyv2385.CodecDecodeSelf(d)
	}
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2386 := &x.Spec
		yyv2386.CodecDecodeSelf(d)
	}
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2387 := &x.Status
		yyv2387.CodecDecodeSelf(d)
	}
	for {
		yyj2382++
		if yyhl2382 {
			yyb2382 = yyj2382 > l
		} else {
			yyb2382 = r.CheckBreak()
		}
		if yyb2382 {
			break
		}
		z.DecStructFieldNotFound(yyj2382-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2388 := z.EncBinary()
		_ = yym2388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2389 := !z.EncBinary()
			yy2arr2389 := z.EncBasicHandle().StructToArray
			var yyq2389 [4]bool
			_, _, _ = yysep2389, yyq2389, yy2arr2389
			const yyr2389 bool = false
			yyq2389[0] = x.Kind != ""
			yyq2389[1] = x.APIVersion != ""
			yyq2389[2] = true
			if yyr2389 || yy2arr2389 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2389 int = 1
				for _, b := range yyq2389 {
					if b {
						yynn2389++
					}
				}
				r.EncodeMapStart(yynn2389)
			}
			if yyr2389 || yy2arr2389 {
				if yyq2389[0] {
					yym2391 := z.EncBinary()
					_ = yym2391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2389[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2392 := z.EncBinary()
					_ = yym2392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2389 || yy2arr2389 {
				if yyq2389[1] {
					yym2394 := z.EncBinary()
					_ = yym2394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2389[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2395 := z.EncBinary()
					_ = yym2395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2389 || yy2arr2389 {
				if yyq2389[2] {
					yy2397 := &x.ListMeta
					yym2398 := z.EncBinary()
					_ = yym2398
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2397) {
					} else {
						z.EncFallback(yy2397)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2389[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2399 := &x.ListMeta
					yym2400 := z.EncBinary()
					_ = yym2400
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2399) {
					} else {
						z.EncFallback(yy2399)
					}
				}
			}
			if yyr2389 || yy2arr2389 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2402 := z.EncBinary()
					_ = yym2402
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2403 := z.EncBinary()
					_ = yym2403
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2389 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2404 := z.DecBinary()
	_ = yym2404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2405 := r.ReadMapStart()
			if yyl2405 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2405, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2405 := r.ReadArrayStart()
			if yyl2405 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2406Slc
	var yyhl2406 bool = l >= 0
	for yyj2406 := 0; ; yyj2406++ {
		if yyhl2406 {
			if yyj2406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2406Slc = r.DecodeBytes(yys2406Slc, true, true)
		yys2406 := string(yys2406Slc)
		switch yys2406 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2409 := &x.ListMeta
				yym2410 := z.DecBinary()
				_ = yym2410
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2409) {
				} else {
					z.DecFallback(yyv2409, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2411 := &x.Items
				yym2412 := z.DecBinary()
				_ = yym2412
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2411), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2406)
		} // end switch yys2406
	} // end for yyj2406
	if !yyhl2406 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2413 int
	var yyb2413 bool
	var yyhl2413 bool = l >= 0
	yyj2413++
	if yyhl2413 {
		yyb2413 = yyj2413 > l
	} else {
		yyb2413 = r.CheckBreak()
	}
	if yyb2413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2413++
	if yyhl2413 {
		yyb2413 = yyj2413 > l
	} else {
		yyb2413 = r.CheckBreak()
	}
	if yyb2413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2413++
	if yyhl2413 {
		yyb2413 = yyj2413 > l
	} else {
		yyb2413 = r.CheckBreak()
	}
	if yyb2413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2416 := &x.ListMeta
		yym2417 := z.DecBinary()
		_ = yym2417
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2416) {
		} else {
			z.DecFallback(yyv2416, false)
		}
	}
	yyj2413++
	if yyhl2413 {
		yyb2413 = yyj2413 > l
	} else {
		yyb2413 = r.CheckBreak()
	}
	if yyb2413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2418 := &x.Items
		yym2419 := z.DecBinary()
		_ = yym2419
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2418), d)
		}
	}
	for {
		yyj2413++
		if yyhl2413 {
			yyb2413 = yyj2413 > l
		} else {
			yyb2413 = r.CheckBreak()
		}
		if yyb2413 {
			break
		}
		z.DecStructFieldNotFound(yyj2413-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2420 := z.EncBinary()
		_ = yym2420
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2421 := !z.EncBinary()
			yy2arr2421 := z.EncBasicHandle().StructToArray
			var yyq2421 [1]bool
			_, _, _ = yysep2421, yyq2421, yy2arr2421
			const yyr2421 bool = false
			if yyr2421 || yy2arr2421 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2421 int = 1
				for _, b := range yyq2421 {
					if b {
						yynn2421++
					}
				}
				r.EncodeMapStart(yynn2421)
			}
			if yyr2421 || yy2arr2421 {
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2423 := z.EncBinary()
					_ = yym2423
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2424 := z.EncBinary()
					_ = yym2424
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yysep2421 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2425 := z.DecBinary()
	_ = yym2425
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2426 := r.ReadMapStart()
			if yyl2426 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2426, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2426 := r.ReadArrayStart()
			if yyl2426 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2426, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2427Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2427Slc
	var yyhl2427 bool = l >= 0
	for yyj2427 := 0; ; yyj2427++ {
		if yyhl2427 {
			if yyj2427 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2427Slc = r.DecodeBytes(yys2427Slc, true, true)
		yys2427 := string(yys2427Slc)
		switch yys2427 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2428 := &x.Finalizers
				yym2429 := z.DecBinary()
				_ = yym2429
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2428), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2427)
		} // end switch yys2427
	} // end for yyj2427
	if !yyhl2427 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2430 int
	var yyb2430 bool
	var yyhl2430 bool = l >= 0
	yyj2430++
	if yyhl2430 {
		yyb2430 = yyj2430 > l
	} else {
		yyb2430 = r.CheckBreak()
	}
	if yyb2430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2431 := &x.Finalizers
		yym2432 := z.DecBinary()
		_ = yym2432
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2431), d)
		}
	}
	for {
		yyj2430++
		if yyhl2430 {
			yyb2430 = yyj2430 > l
		} else {
			yyb2430 = r.CheckBreak()
		}
		if yyb2430 {
			break
		}
		z.DecStructFieldNotFound(yyj2430-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2433 := z.EncBinary()
	_ = yym2433
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2434 := z.DecBinary()
	_ = yym2434
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2435 := z.EncBinary()
		_ = yym2435
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2436 := !z.EncBinary()
			yy2arr2436 := z.EncBasicHandle().StructToArray
			var yyq2436 [1]bool
			_, _, _ = yysep2436, yyq2436, yy2arr2436
			const yyr2436 bool = false
			yyq2436[0] = x.Phase != ""
			if yyr2436 || yy2arr2436 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2436 int = 0
				for _, b := range yyq2436 {
					if b {
						yynn2436++
					}
				}
				r.EncodeMapStart(yynn2436)
			}
			if yyr2436 || yy2arr2436 {
				if yyq2436[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2436[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2436 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2438 := z.DecBinary()
	_ = yym2438
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2439 := r.ReadMapStart()
			if yyl2439 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2439, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2439 := r.ReadArrayStart()
			if yyl2439 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2439, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2440Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2440Slc
	var yyhl2440 bool = l >= 0
	for yyj2440 := 0; ; yyj2440++ {
		if yyhl2440 {
			if yyj2440 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2440Slc = r.DecodeBytes(yys2440Slc, true, true)
		yys2440 := string(yys2440Slc)
		switch yys2440 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2440)
		} // end switch yys2440
	} // end for yyj2440
	if !yyhl2440 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2442 int
	var yyb2442 bool
	var yyhl2442 bool = l >= 0
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2442++
		if yyhl2442 {
			yyb2442 = yyj2442 > l
		} else {
			yyb2442 = r.CheckBreak()
		}
		if yyb2442 {
			break
		}
		z.DecStructFieldNotFound(yyj2442-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2444 := z.EncBinary()
	_ = yym2444
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2445 := z.DecBinary()
	_ = yym2445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2446 := z.EncBinary()
		_ = yym2446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2447 := !z.EncBinary()
			yy2arr2447 := z.EncBasicHandle().StructToArray
			var yyq2447 [5]bool
			_, _, _ = yysep2447, yyq2447, yy2arr2447
			const yyr2447 bool = false
			yyq2447[0] = x.Kind != ""
			yyq2447[1] = x.APIVersion != ""
			yyq2447[2] = true
			yyq2447[3] = true
			yyq2447[4] = true
			if yyr2447 || yy2arr2447 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2447 int = 0
				for _, b := range yyq2447 {
					if b {
						yynn2447++
					}
				}
				r.EncodeMapStart(yynn2447)
			}
			if yyr2447 || yy2arr2447 {
				if yyq2447[0] {
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2447[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2450 := z.EncBinary()
					_ = yym2450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2447 || yy2arr2447 {
				if yyq2447[1] {
					yym2452 := z.EncBinary()
					_ = yym2452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2447[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2453 := z.EncBinary()
					_ = yym2453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2447 || yy2arr2447 {
				if yyq2447[2] {
					yy2455 := &x.ObjectMeta
					yy2455.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2447[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2456 := &x.ObjectMeta
					yy2456.CodecEncodeSelf(e)
				}
			}
			if yyr2447 || yy2arr2447 {
				if yyq2447[3] {
					yy2458 := &x.Spec
					yy2458.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2447[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2459 := &x.Spec
					yy2459.CodecEncodeSelf(e)
				}
			}
			if yyr2447 || yy2arr2447 {
				if yyq2447[4] {
					yy2461 := &x.Status
					yy2461.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2447[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2462 := &x.Status
					yy2462.CodecEncodeSelf(e)
				}
			}
			if yysep2447 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2463 := z.DecBinary()
	_ = yym2463
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2464 := r.ReadMapStart()
			if yyl2464 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2464, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2464 := r.ReadArrayStart()
			if yyl2464 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2464, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2465Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2465Slc
	var yyhl2465 bool = l >= 0
	for yyj2465 := 0; ; yyj2465++ {
		if yyhl2465 {
			if yyj2465 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2465Slc = r.DecodeBytes(yys2465Slc, true, true)
		yys2465 := string(yys2465Slc)
		switch yys2465 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2468 := &x.ObjectMeta
				yyv2468.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2469 := &x.Spec
				yyv2469.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2470 := &x.Status
				yyv2470.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2465)
		} // end switch yys2465
	} // end for yyj2465
	if !yyhl2465 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2471 int
	var yyb2471 bool
	var yyhl2471 bool = l >= 0
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2474 := &x.ObjectMeta
		yyv2474.CodecDecodeSelf(d)
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2475 := &x.Spec
		yyv2475.CodecDecodeSelf(d)
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2476 := &x.Status
		yyv2476.CodecDecodeSelf(d)
	}
	for {
		yyj2471++
		if yyhl2471 {
			yyb2471 = yyj2471 > l
		} else {
			yyb2471 = r.CheckBreak()
		}
		if yyb2471 {
			break
		}
		z.DecStructFieldNotFound(yyj2471-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2477 := z.EncBinary()
		_ = yym2477
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2478 := !z.EncBinary()
			yy2arr2478 := z.EncBasicHandle().StructToArray
			var yyq2478 [4]bool
			_, _, _ = yysep2478, yyq2478, yy2arr2478
			const yyr2478 bool = false
			yyq2478[0] = x.Kind != ""
			yyq2478[1] = x.APIVersion != ""
			yyq2478[2] = true
			if yyr2478 || yy2arr2478 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2478 int = 1
				for _, b := range yyq2478 {
					if b {
						yynn2478++
					}
				}
				r.EncodeMapStart(yynn2478)
			}
			if yyr2478 || yy2arr2478 {
				if yyq2478[0] {
					yym2480 := z.EncBinary()
					_ = yym2480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2478[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2481 := z.EncBinary()
					_ = yym2481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2478 || yy2arr2478 {
				if yyq2478[1] {
					yym2483 := z.EncBinary()
					_ = yym2483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2478[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2484 := z.EncBinary()
					_ = yym2484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2478 || yy2arr2478 {
				if yyq2478[2] {
					yy2486 := &x.ListMeta
					yym2487 := z.EncBinary()
					_ = yym2487
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2486) {
					} else {
						z.EncFallback(yy2486)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2478[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2488 := &x.ListMeta
					yym2489 := z.EncBinary()
					_ = yym2489
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2488) {
					} else {
						z.EncFallback(yy2488)
					}
				}
			}
			if yyr2478 || yy2arr2478 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2491 := z.EncBinary()
					_ = yym2491
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2492 := z.EncBinary()
					_ = yym2492
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2478 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2493 := z.DecBinary()
	_ = yym2493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2494 := r.ReadMapStart()
			if yyl2494 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2494, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2494 := r.ReadArrayStart()
			if yyl2494 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2495Slc
	var yyhl2495 bool = l >= 0
	for yyj2495 := 0; ; yyj2495++ {
		if yyhl2495 {
			if yyj2495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2495Slc = r.DecodeBytes(yys2495Slc, true, true)
		yys2495 := string(yys2495Slc)
		switch yys2495 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2498 := &x.ListMeta
				yym2499 := z.DecBinary()
				_ = yym2499
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2498) {
				} else {
					z.DecFallback(yyv2498, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2500 := &x.Items
				yym2501 := z.DecBinary()
				_ = yym2501
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2500), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2495)
		} // end switch yys2495
	} // end for yyj2495
	if !yyhl2495 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2502 int
	var yyb2502 bool
	var yyhl2502 bool = l >= 0
	yyj2502++
	if yyhl2502 {
		yyb2502 = yyj2502 > l
	} else {
		yyb2502 = r.CheckBreak()
	}
	if yyb2502 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2502++
	if yyhl2502 {
		yyb2502 = yyj2502 > l
	} else {
		yyb2502 = r.CheckBreak()
	}
	if yyb2502 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2502++
	if yyhl2502 {
		yyb2502 = yyj2502 > l
	} else {
		yyb2502 = r.CheckBreak()
	}
	if yyb2502 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2505 := &x.ListMeta
		yym2506 := z.DecBinary()
		_ = yym2506
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2505) {
		} else {
			z.DecFallback(yyv2505, false)
		}
	}
	yyj2502++
	if yyhl2502 {
		yyb2502 = yyj2502 > l
	} else {
		yyb2502 = r.CheckBreak()
	}
	if yyb2502 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2507 := &x.Items
		yym2508 := z.DecBinary()
		_ = yym2508
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2507), d)
		}
	}
	for {
		yyj2502++
		if yyhl2502 {
			yyb2502 = yyj2502 > l
		} else {
			yyb2502 = r.CheckBreak()
		}
		if yyb2502 {
			break
		}
		z.DecStructFieldNotFound(yyj2502-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2509 := z.EncBinary()
		_ = yym2509
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2510 := !z.EncBinary()
			yy2arr2510 := z.EncBasicHandle().StructToArray
			var yyq2510 [4]bool
			_, _, _ = yysep2510, yyq2510, yy2arr2510
			const yyr2510 bool = false
			yyq2510[0] = x.Kind != ""
			yyq2510[1] = x.APIVersion != ""
			yyq2510[2] = true
			if yyr2510 || yy2arr2510 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2510 int = 1
				for _, b := range yyq2510 {
					if b {
						yynn2510++
					}
				}
				r.EncodeMapStart(yynn2510)
			}
			if yyr2510 || yy2arr2510 {
				if yyq2510[0] {
					yym2512 := z.EncBinary()
					_ = yym2512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2510[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2513 := z.EncBinary()
					_ = yym2513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2510 || yy2arr2510 {
				if yyq2510[1] {
					yym2515 := z.EncBinary()
					_ = yym2515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2510[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2516 := z.EncBinary()
					_ = yym2516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2510 || yy2arr2510 {
				if yyq2510[2] {
					yy2518 := &x.ObjectMeta
					yy2518.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2510[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2519 := &x.ObjectMeta
					yy2519.CodecEncodeSelf(e)
				}
			}
			if yyr2510 || yy2arr2510 {
				yy2521 := &x.Target
				yy2521.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2522 := &x.Target
				yy2522.CodecEncodeSelf(e)
			}
			if yysep2510 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2523 := z.DecBinary()
	_ = yym2523
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2524 := r.ReadMapStart()
			if yyl2524 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2524, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2524 := r.ReadArrayStart()
			if yyl2524 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2524, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2525Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2525Slc
	var yyhl2525 bool = l >= 0
	for yyj2525 := 0; ; yyj2525++ {
		if yyhl2525 {
			if yyj2525 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2525Slc = r.DecodeBytes(yys2525Slc, true, true)
		yys2525 := string(yys2525Slc)
		switch yys2525 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2528 := &x.ObjectMeta
				yyv2528.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2529 := &x.Target
				yyv2529.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2525)
		} // end switch yys2525
	} // end for yyj2525
	if !yyhl2525 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2530 int
	var yyb2530 bool
	var yyhl2530 bool = l >= 0
	yyj2530++
	if yyhl2530 {
		yyb2530 = yyj2530 > l
	} else {
		yyb2530 = r.CheckBreak()
	}
	if yyb2530 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2530++
	if yyhl2530 {
		yyb2530 = yyj2530 > l
	} else {
		yyb2530 = r.CheckBreak()
	}
	if yyb2530 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2530++
	if yyhl2530 {
		yyb2530 = yyj2530 > l
	} else {
		yyb2530 = r.CheckBreak()
	}
	if yyb2530 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2533 := &x.ObjectMeta
		yyv2533.CodecDecodeSelf(d)
	}
	yyj2530++
	if yyhl2530 {
		yyb2530 = yyj2530 > l
	} else {
		yyb2530 = r.CheckBreak()
	}
	if yyb2530 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2534 := &x.Target
		yyv2534.CodecDecodeSelf(d)
	}
	for {
		yyj2530++
		if yyhl2530 {
			yyb2530 = yyj2530 > l
		} else {
			yyb2530 = r.CheckBreak()
		}
		if yyb2530 {
			break
		}
		z.DecStructFieldNotFound(yyj2530-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2535 := z.EncBinary()
		_ = yym2535
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2536 := !z.EncBinary()
			yy2arr2536 := z.EncBasicHandle().StructToArray
			var yyq2536 [3]bool
			_, _, _ = yysep2536, yyq2536, yy2arr2536
			const yyr2536 bool = false
			yyq2536[0] = x.Kind != ""
			yyq2536[1] = x.APIVersion != ""
			if yyr2536 || yy2arr2536 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2536 int = 1
				for _, b := range yyq2536 {
					if b {
						yynn2536++
					}
				}
				r.EncodeMapStart(yynn2536)
			}
			if yyr2536 || yy2arr2536 {
				if yyq2536[0] {
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2536[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2539 := z.EncBinary()
					_ = yym2539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2536 || yy2arr2536 {
				if yyq2536[1] {
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2536[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2542 := z.EncBinary()
					_ = yym2542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2536 || yy2arr2536 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2544 := *x.GracePeriodSeconds
					yym2545 := z.EncBinary()
					_ = yym2545
					if false {
					} else {
						r.EncodeInt(int64(yy2544))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2546 := *x.GracePeriodSeconds
					yym2547 := z.EncBinary()
					_ = yym2547
					if false {
					} else {
						r.EncodeInt(int64(yy2546))
					}
				}
			}
			if yysep2536 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2548 := z.DecBinary()
	_ = yym2548
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2549 := r.ReadMapStart()
			if yyl2549 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2549, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2549 := r.ReadArrayStart()
			if yyl2549 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2549, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2550Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2550Slc
	var yyhl2550 bool = l >= 0
	for yyj2550 := 0; ; yyj2550++ {
		if yyhl2550 {
			if yyj2550 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2550Slc = r.DecodeBytes(yys2550Slc, true, true)
		yys2550 := string(yys2550Slc)
		switch yys2550 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2554 := z.DecBinary()
				_ = yym2554
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2550)
		} // end switch yys2550
	} // end for yyj2550
	if !yyhl2550 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2555 int
	var yyb2555 bool
	var yyhl2555 bool = l >= 0
	yyj2555++
	if yyhl2555 {
		yyb2555 = yyj2555 > l
	} else {
		yyb2555 = r.CheckBreak()
	}
	if yyb2555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2555++
	if yyhl2555 {
		yyb2555 = yyj2555 > l
	} else {
		yyb2555 = r.CheckBreak()
	}
	if yyb2555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2555++
	if yyhl2555 {
		yyb2555 = yyj2555 > l
	} else {
		yyb2555 = r.CheckBreak()
	}
	if yyb2555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2559 := z.DecBinary()
		_ = yym2559
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2555++
		if yyhl2555 {
			yyb2555 = yyj2555 > l
		} else {
			yyb2555 = r.CheckBreak()
		}
		if yyb2555 {
			break
		}
		z.DecStructFieldNotFound(yyj2555-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2560 := z.EncBinary()
		_ = yym2560
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2561 := !z.EncBinary()
			yy2arr2561 := z.EncBasicHandle().StructToArray
			var yyq2561 [6]bool
			_, _, _ = yysep2561, yyq2561, yy2arr2561
			const yyr2561 bool = false
			yyq2561[0] = x.Kind != ""
			yyq2561[1] = x.APIVersion != ""
			if yyr2561 || yy2arr2561 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2561 int = 4
				for _, b := range yyq2561 {
					if b {
						yynn2561++
					}
				}
				r.EncodeMapStart(yynn2561)
			}
			if yyr2561 || yy2arr2561 {
				if yyq2561[0] {
					yym2563 := z.EncBinary()
					_ = yym2563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2561[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2564 := z.EncBinary()
					_ = yym2564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2561 || yy2arr2561 {
				if yyq2561[1] {
					yym2566 := z.EncBinary()
					_ = yym2566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2561[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2567 := z.EncBinary()
					_ = yym2567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2561 || yy2arr2561 {
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2569 := z.EncBinary()
					_ = yym2569
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2570 := z.EncBinary()
					_ = yym2570
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr2561 || yy2arr2561 {
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2572 := z.EncBinary()
					_ = yym2572
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2573 := z.EncBinary()
					_ = yym2573
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr2561 || yy2arr2561 {
				yym2575 := z.EncBinary()
				_ = yym2575
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				yym2576 := z.EncBinary()
				_ = yym2576
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr2561 || yy2arr2561 {
				yym2578 := z.EncBinary()
				_ = yym2578
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				yym2579 := z.EncBinary()
				_ = yym2579
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yysep2561 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2580 := z.DecBinary()
	_ = yym2580
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2581 := r.ReadMapStart()
			if yyl2581 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2581, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2581 := r.ReadArrayStart()
			if yyl2581 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2581, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2582Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2582Slc
	var yyhl2582 bool = l >= 0
	for yyj2582 := 0; ; yyj2582++ {
		if yyhl2582 {
			if yyj2582 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2582Slc = r.DecodeBytes(yys2582Slc, true, true)
		yys2582 := string(yys2582Slc)
		switch yys2582 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv2585 := &x.LabelSelector
				yym2586 := z.DecBinary()
				_ = yym2586
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2585) {
				} else {
					z.DecFallback(yyv2585, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv2587 := &x.FieldSelector
				yym2588 := z.DecBinary()
				_ = yym2588
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2587) {
				} else {
					z.DecFallback(yyv2587, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2582)
		} // end switch yys2582
	} // end for yyj2582
	if !yyhl2582 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2591 int
	var yyb2591 bool
	var yyhl2591 bool = l >= 0
	yyj2591++
	if yyhl2591 {
		yyb2591 = yyj2591 > l
	} else {
		yyb2591 = r.CheckBreak()
	}
	if yyb2591 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2591++
	if yyhl2591 {
		yyb2591 = yyj2591 > l
	} else {
		yyb2591 = r.CheckBreak()
	}
	if yyb2591 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2591++
	if yyhl2591 {
		yyb2591 = yyj2591 > l
	} else {
		yyb2591 = r.CheckBreak()
	}
	if yyb2591 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv2594 := &x.LabelSelector
		yym2595 := z.DecBinary()
		_ = yym2595
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2594) {
		} else {
			z.DecFallback(yyv2594, true)
		}
	}
	yyj2591++
	if yyhl2591 {
		yyb2591 = yyj2591 > l
	} else {
		yyb2591 = r.CheckBreak()
	}
	if yyb2591 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv2596 := &x.FieldSelector
		yym2597 := z.DecBinary()
		_ = yym2597
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2596) {
		} else {
			z.DecFallback(yyv2596, true)
		}
	}
	yyj2591++
	if yyhl2591 {
		yyb2591 = yyj2591 > l
	} else {
		yyb2591 = r.CheckBreak()
	}
	if yyb2591 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2591++
	if yyhl2591 {
		yyb2591 = yyj2591 > l
	} else {
		yyb2591 = r.CheckBreak()
	}
	if yyb2591 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	for {
		yyj2591++
		if yyhl2591 {
			yyb2591 = yyj2591 > l
		} else {
			yyb2591 = r.CheckBreak()
		}
		if yyb2591 {
			break
		}
		z.DecStructFieldNotFound(yyj2591-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2600 := z.EncBinary()
		_ = yym2600
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2601 := !z.EncBinary()
			yy2arr2601 := z.EncBasicHandle().StructToArray
			var yyq2601 [10]bool
			_, _, _ = yysep2601, yyq2601, yy2arr2601
			const yyr2601 bool = false
			yyq2601[0] = x.Kind != ""
			yyq2601[1] = x.APIVersion != ""
			if yyr2601 || yy2arr2601 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2601 int = 8
				for _, b := range yyq2601 {
					if b {
						yynn2601++
					}
				}
				r.EncodeMapStart(yynn2601)
			}
			if yyr2601 || yy2arr2601 {
				if yyq2601[0] {
					yym2603 := z.EncBinary()
					_ = yym2603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2601[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2604 := z.EncBinary()
					_ = yym2604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				if yyq2601[1] {
					yym2606 := z.EncBinary()
					_ = yym2606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2601[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2607 := z.EncBinary()
					_ = yym2607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				yym2609 := z.EncBinary()
				_ = yym2609
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				yym2610 := z.EncBinary()
				_ = yym2610
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2601 || yy2arr2601 {
				yym2612 := z.EncBinary()
				_ = yym2612
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				yym2613 := z.EncBinary()
				_ = yym2613
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2601 || yy2arr2601 {
				yym2615 := z.EncBinary()
				_ = yym2615
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				yym2616 := z.EncBinary()
				_ = yym2616
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr2601 || yy2arr2601 {
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2618 := *x.SinceSeconds
					yym2619 := z.EncBinary()
					_ = yym2619
					if false {
					} else {
						r.EncodeInt(int64(yy2618))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2620 := *x.SinceSeconds
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeInt(int64(yy2620))
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2623 := z.EncBinary()
					_ = yym2623
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2623 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2623 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2624 := z.EncBinary()
					_ = yym2624
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2624 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2624 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				yym2626 := z.EncBinary()
				_ = yym2626
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				yym2627 := z.EncBinary()
				_ = yym2627
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr2601 || yy2arr2601 {
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2629 := *x.TailLines
					yym2630 := z.EncBinary()
					_ = yym2630
					if false {
					} else {
						r.EncodeInt(int64(yy2629))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2631 := *x.TailLines
					yym2632 := z.EncBinary()
					_ = yym2632
					if false {
					} else {
						r.EncodeInt(int64(yy2631))
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2634 := *x.LimitBytes
					yym2635 := z.EncBinary()
					_ = yym2635
					if false {
					} else {
						r.EncodeInt(int64(yy2634))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2636 := *x.LimitBytes
					yym2637 := z.EncBinary()
					_ = yym2637
					if false {
					} else {
						r.EncodeInt(int64(yy2636))
					}
				}
			}
			if yysep2601 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2638 := z.DecBinary()
	_ = yym2638
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2639 := r.ReadMapStart()
			if yyl2639 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2639, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2639 := r.ReadArrayStart()
			if yyl2639 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2639, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2640Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2640Slc
	var yyhl2640 bool = l >= 0
	for yyj2640 := 0; ; yyj2640++ {
		if yyhl2640 {
			if yyj2640 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2640Slc = r.DecodeBytes(yys2640Slc, true, true)
		yys2640 := string(yys2640Slc)
		switch yys2640 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2647 := z.DecBinary()
				_ = yym2647
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2649 := z.DecBinary()
				_ = yym2649
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2649 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2649 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2652 := z.DecBinary()
				_ = yym2652
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2654 := z.DecBinary()
				_ = yym2654
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2640)
		} // end switch yys2640
	} // end for yyj2640
	if !yyhl2640 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2655 int
	var yyb2655 bool
	var yyhl2655 bool = l >= 0
	yyj2655++
	if yyhl2655 {
		yyb2655 = yyj2655 > l
	} else {
		yyb2655 = r.CheckBreak()
	}
	if yyb2655 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2655++
	if yyhl2655 {
		yyb2655 = yyj2655 > l
	} else {
		yyb2655 = r.CheckBreak()
	}
	if yyb2655 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2655++
	if yyhl2655 {
		yyb2655 = yyj2655 > l
	} else {
		yyb2655 = r.CheckBreak()
	}
	if yyb2655 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2655++
	if yyhl2655 {
		yyb2655 = yyj2655 > l
	} else {
		yyb2655 = r.CheckBreak()
	}
	if yyb2655 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2655++
	if yyhl2655 {
		yyb2655 = yyj2655 > l
	} else {
		yyb2655 = r.CheckBreak()
	}
	if yyb2655 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2655++
	if yyhl2655 {
		yyb2655 = yyj2655 > l
	} else {
		yyb2655 = r.CheckBreak()
	}
	if yyb2655 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2662 := z.DecBinary()
		_ = yym2662
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2655++
	if yyhl2655 {
		yyb2655 = yyj2655 > l
	} else {
		yyb2655 = r.CheckBreak()
	}
	if yyb2655 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2664 := z.DecBinary()
		_ = yym2664
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2664 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2664 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2655++
	if yyhl2655 {
		yyb2655 = yyj2655 > l
	} else {
		yyb2655 = r.CheckBreak()
	}
	if yyb2655 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2655++
	if yyhl2655 {
		yyb2655 = yyj2655 > l
	} else {
		yyb2655 = r.CheckBreak()
	}
	if yyb2655 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2667 := z.DecBinary()
		_ = yym2667
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2655++
	if yyhl2655 {
		yyb2655 = yyj2655 > l
	} else {
		yyb2655 = r.CheckBreak()
	}
	if yyb2655 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2669 := z.DecBinary()
		_ = yym2669
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2655++
		if yyhl2655 {
			yyb2655 = yyj2655 > l
		} else {
			yyb2655 = r.CheckBreak()
		}
		if yyb2655 {
			break
		}
		z.DecStructFieldNotFound(yyj2655-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2670 := z.EncBinary()
		_ = yym2670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2671 := !z.EncBinary()
			yy2arr2671 := z.EncBasicHandle().StructToArray
			var yyq2671 [7]bool
			_, _, _ = yysep2671, yyq2671, yy2arr2671
			const yyr2671 bool = false
			yyq2671[0] = x.Kind != ""
			yyq2671[1] = x.APIVersion != ""
			yyq2671[2] = x.Stdin != false
			yyq2671[3] = x.Stdout != false
			yyq2671[4] = x.Stderr != false
			yyq2671[5] = x.TTY != false
			yyq2671[6] = x.Container != ""
			if yyr2671 || yy2arr2671 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2671 int = 0
				for _, b := range yyq2671 {
					if b {
						yynn2671++
					}
				}
				r.EncodeMapStart(yynn2671)
			}
			if yyr2671 || yy2arr2671 {
				if yyq2671[0] {
					yym2673 := z.EncBinary()
					_ = yym2673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2671[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2674 := z.EncBinary()
					_ = yym2674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2671 || yy2arr2671 {
				if yyq2671[1] {
					yym2676 := z.EncBinary()
					_ = yym2676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2671[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2677 := z.EncBinary()
					_ = yym2677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2671 || yy2arr2671 {
				if yyq2671[2] {
					yym2679 := z.EncBinary()
					_ = yym2679
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2671[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2680 := z.EncBinary()
					_ = yym2680
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2671 || yy2arr2671 {
				if yyq2671[3] {
					yym2682 := z.EncBinary()
					_ = yym2682
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2671[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2683 := z.EncBinary()
					_ = yym2683
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2671 || yy2arr2671 {
				if yyq2671[4] {
					yym2685 := z.EncBinary()
					_ = yym2685
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2671[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2686 := z.EncBinary()
					_ = yym2686
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2671 || yy2arr2671 {
				if yyq2671[5] {
					yym2688 := z.EncBinary()
					_ = yym2688
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2671[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2689 := z.EncBinary()
					_ = yym2689
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2671 || yy2arr2671 {
				if yyq2671[6] {
					yym2691 := z.EncBinary()
					_ = yym2691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2671[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2692 := z.EncBinary()
					_ = yym2692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2671 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2693 := z.DecBinary()
	_ = yym2693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2694 := r.ReadMapStart()
			if yyl2694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2694, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2694 := r.ReadArrayStart()
			if yyl2694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2695Slc
	var yyhl2695 bool = l >= 0
	for yyj2695 := 0; ; yyj2695++ {
		if yyhl2695 {
			if yyj2695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2695Slc = r.DecodeBytes(yys2695Slc, true, true)
		yys2695 := string(yys2695Slc)
		switch yys2695 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2695)
		} // end switch yys2695
	} // end for yyj2695
	if !yyhl2695 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2703 int
	var yyb2703 bool
	var yyhl2703 bool = l >= 0
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2703++
		if yyhl2703 {
			yyb2703 = yyj2703 > l
		} else {
			yyb2703 = r.CheckBreak()
		}
		if yyb2703 {
			break
		}
		z.DecStructFieldNotFound(yyj2703-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2711 := z.EncBinary()
		_ = yym2711
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2712 := !z.EncBinary()
			yy2arr2712 := z.EncBasicHandle().StructToArray
			var yyq2712 [8]bool
			_, _, _ = yysep2712, yyq2712, yy2arr2712
			const yyr2712 bool = false
			yyq2712[0] = x.Kind != ""
			yyq2712[1] = x.APIVersion != ""
			if yyr2712 || yy2arr2712 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2712 int = 6
				for _, b := range yyq2712 {
					if b {
						yynn2712++
					}
				}
				r.EncodeMapStart(yynn2712)
			}
			if yyr2712 || yy2arr2712 {
				if yyq2712[0] {
					yym2714 := z.EncBinary()
					_ = yym2714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2712[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2715 := z.EncBinary()
					_ = yym2715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2712 || yy2arr2712 {
				if yyq2712[1] {
					yym2717 := z.EncBinary()
					_ = yym2717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2712[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2712 || yy2arr2712 {
				yym2720 := z.EncBinary()
				_ = yym2720
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				yym2721 := z.EncBinary()
				_ = yym2721
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr2712 || yy2arr2712 {
				yym2723 := z.EncBinary()
				_ = yym2723
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				yym2724 := z.EncBinary()
				_ = yym2724
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr2712 || yy2arr2712 {
				yym2726 := z.EncBinary()
				_ = yym2726
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				yym2727 := z.EncBinary()
				_ = yym2727
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr2712 || yy2arr2712 {
				yym2729 := z.EncBinary()
				_ = yym2729
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				yym2730 := z.EncBinary()
				_ = yym2730
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr2712 || yy2arr2712 {
				yym2732 := z.EncBinary()
				_ = yym2732
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				yym2733 := z.EncBinary()
				_ = yym2733
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2712 || yy2arr2712 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2712 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2737 := z.DecBinary()
	_ = yym2737
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2738 := r.ReadMapStart()
			if yyl2738 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2738, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2738 := r.ReadArrayStart()
			if yyl2738 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2738, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2739Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2739Slc
	var yyhl2739 bool = l >= 0
	for yyj2739 := 0; ; yyj2739++ {
		if yyhl2739 {
			if yyj2739 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2739Slc = r.DecodeBytes(yys2739Slc, true, true)
		yys2739 := string(yys2739Slc)
		switch yys2739 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2747 := &x.Command
				yym2748 := z.DecBinary()
				_ = yym2748
				if false {
				} else {
					z.F.DecSliceStringX(yyv2747, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2739)
		} // end switch yys2739
	} // end for yyj2739
	if !yyhl2739 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2749 int
	var yyb2749 bool
	var yyhl2749 bool = l >= 0
	yyj2749++
	if yyhl2749 {
		yyb2749 = yyj2749 > l
	} else {
		yyb2749 = r.CheckBreak()
	}
	if yyb2749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2749++
	if yyhl2749 {
		yyb2749 = yyj2749 > l
	} else {
		yyb2749 = r.CheckBreak()
	}
	if yyb2749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2749++
	if yyhl2749 {
		yyb2749 = yyj2749 > l
	} else {
		yyb2749 = r.CheckBreak()
	}
	if yyb2749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2749++
	if yyhl2749 {
		yyb2749 = yyj2749 > l
	} else {
		yyb2749 = r.CheckBreak()
	}
	if yyb2749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2749++
	if yyhl2749 {
		yyb2749 = yyj2749 > l
	} else {
		yyb2749 = r.CheckBreak()
	}
	if yyb2749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2749++
	if yyhl2749 {
		yyb2749 = yyj2749 > l
	} else {
		yyb2749 = r.CheckBreak()
	}
	if yyb2749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2749++
	if yyhl2749 {
		yyb2749 = yyj2749 > l
	} else {
		yyb2749 = r.CheckBreak()
	}
	if yyb2749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2749++
	if yyhl2749 {
		yyb2749 = yyj2749 > l
	} else {
		yyb2749 = r.CheckBreak()
	}
	if yyb2749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2757 := &x.Command
		yym2758 := z.DecBinary()
		_ = yym2758
		if false {
		} else {
			z.F.DecSliceStringX(yyv2757, false, d)
		}
	}
	for {
		yyj2749++
		if yyhl2749 {
			yyb2749 = yyj2749 > l
		} else {
			yyb2749 = r.CheckBreak()
		}
		if yyb2749 {
			break
		}
		z.DecStructFieldNotFound(yyj2749-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2759 := z.EncBinary()
		_ = yym2759
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2760 := !z.EncBinary()
			yy2arr2760 := z.EncBasicHandle().StructToArray
			var yyq2760 [3]bool
			_, _, _ = yysep2760, yyq2760, yy2arr2760
			const yyr2760 bool = false
			yyq2760[0] = x.Kind != ""
			yyq2760[1] = x.APIVersion != ""
			if yyr2760 || yy2arr2760 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2760 int = 1
				for _, b := range yyq2760 {
					if b {
						yynn2760++
					}
				}
				r.EncodeMapStart(yynn2760)
			}
			if yyr2760 || yy2arr2760 {
				if yyq2760[0] {
					yym2762 := z.EncBinary()
					_ = yym2762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2760[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2763 := z.EncBinary()
					_ = yym2763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2760 || yy2arr2760 {
				if yyq2760[1] {
					yym2765 := z.EncBinary()
					_ = yym2765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2760[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2766 := z.EncBinary()
					_ = yym2766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2760 || yy2arr2760 {
				yym2768 := z.EncBinary()
				_ = yym2768
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				yym2769 := z.EncBinary()
				_ = yym2769
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep2760 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2770 := z.DecBinary()
	_ = yym2770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2771 := r.ReadMapStart()
			if yyl2771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2771, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2771 := r.ReadArrayStart()
			if yyl2771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2772Slc
	var yyhl2772 bool = l >= 0
	for yyj2772 := 0; ; yyj2772++ {
		if yyhl2772 {
			if yyj2772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2772Slc = r.DecodeBytes(yys2772Slc, true, true)
		yys2772 := string(yys2772Slc)
		switch yys2772 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2772)
		} // end switch yys2772
	} // end for yyj2772
	if !yyhl2772 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2776 int
	var yyb2776 bool
	var yyhl2776 bool = l >= 0
	yyj2776++
	if yyhl2776 {
		yyb2776 = yyj2776 > l
	} else {
		yyb2776 = r.CheckBreak()
	}
	if yyb2776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2776++
	if yyhl2776 {
		yyb2776 = yyj2776 > l
	} else {
		yyb2776 = r.CheckBreak()
	}
	if yyb2776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2776++
	if yyhl2776 {
		yyb2776 = yyj2776 > l
	} else {
		yyb2776 = r.CheckBreak()
	}
	if yyb2776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2776++
		if yyhl2776 {
			yyb2776 = yyj2776 > l
		} else {
			yyb2776 = r.CheckBreak()
		}
		if yyb2776 {
			break
		}
		z.DecStructFieldNotFound(yyj2776-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2780 := z.EncBinary()
		_ = yym2780
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2781 := !z.EncBinary()
			yy2arr2781 := z.EncBasicHandle().StructToArray
			var yyq2781 [7]bool
			_, _, _ = yysep2781, yyq2781, yy2arr2781
			const yyr2781 bool = false
			yyq2781[0] = x.Kind != ""
			yyq2781[1] = x.Namespace != ""
			yyq2781[2] = x.Name != ""
			yyq2781[3] = x.UID != ""
			yyq2781[4] = x.APIVersion != ""
			yyq2781[5] = x.ResourceVersion != ""
			yyq2781[6] = x.FieldPath != ""
			if yyr2781 || yy2arr2781 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2781 int = 0
				for _, b := range yyq2781 {
					if b {
						yynn2781++
					}
				}
				r.EncodeMapStart(yynn2781)
			}
			if yyr2781 || yy2arr2781 {
				if yyq2781[0] {
					yym2783 := z.EncBinary()
					_ = yym2783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2781[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2784 := z.EncBinary()
					_ = yym2784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2781 || yy2arr2781 {
				if yyq2781[1] {
					yym2786 := z.EncBinary()
					_ = yym2786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2781[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym2787 := z.EncBinary()
					_ = yym2787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2781 || yy2arr2781 {
				if yyq2781[2] {
					yym2789 := z.EncBinary()
					_ = yym2789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2781[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2790 := z.EncBinary()
					_ = yym2790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2781 || yy2arr2781 {
				if yyq2781[3] {
					yym2792 := z.EncBinary()
					_ = yym2792
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2781[3] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym2793 := z.EncBinary()
					_ = yym2793
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2781 || yy2arr2781 {
				if yyq2781[4] {
					yym2795 := z.EncBinary()
					_ = yym2795
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2781[4] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2796 := z.EncBinary()
					_ = yym2796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2781 || yy2arr2781 {
				if yyq2781[5] {
					yym2798 := z.EncBinary()
					_ = yym2798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2781[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2781 || yy2arr2781 {
				if yyq2781[6] {
					yym2801 := z.EncBinary()
					_ = yym2801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2781[6] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2781 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2803 := z.DecBinary()
	_ = yym2803
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2804 := r.ReadMapStart()
			if yyl2804 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2804, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2804 := r.ReadArrayStart()
			if yyl2804 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2804, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2805Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2805Slc
	var yyhl2805 bool = l >= 0
	for yyj2805 := 0; ; yyj2805++ {
		if yyhl2805 {
			if yyj2805 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2805Slc = r.DecodeBytes(yys2805Slc, true, true)
		yys2805 := string(yys2805Slc)
		switch yys2805 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2805)
		} // end switch yys2805
	} // end for yyj2805
	if !yyhl2805 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2813 int
	var yyb2813 bool
	var yyhl2813 bool = l >= 0
	yyj2813++
	if yyhl2813 {
		yyb2813 = yyj2813 > l
	} else {
		yyb2813 = r.CheckBreak()
	}
	if yyb2813 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2813++
	if yyhl2813 {
		yyb2813 = yyj2813 > l
	} else {
		yyb2813 = r.CheckBreak()
	}
	if yyb2813 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2813++
	if yyhl2813 {
		yyb2813 = yyj2813 > l
	} else {
		yyb2813 = r.CheckBreak()
	}
	if yyb2813 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2813++
	if yyhl2813 {
		yyb2813 = yyj2813 > l
	} else {
		yyb2813 = r.CheckBreak()
	}
	if yyb2813 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2813++
	if yyhl2813 {
		yyb2813 = yyj2813 > l
	} else {
		yyb2813 = r.CheckBreak()
	}
	if yyb2813 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2813++
	if yyhl2813 {
		yyb2813 = yyj2813 > l
	} else {
		yyb2813 = r.CheckBreak()
	}
	if yyb2813 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2813++
	if yyhl2813 {
		yyb2813 = yyj2813 > l
	} else {
		yyb2813 = r.CheckBreak()
	}
	if yyb2813 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2813++
		if yyhl2813 {
			yyb2813 = yyj2813 > l
		} else {
			yyb2813 = r.CheckBreak()
		}
		if yyb2813 {
			break
		}
		z.DecStructFieldNotFound(yyj2813-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2821 := z.EncBinary()
		_ = yym2821
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2822 := !z.EncBinary()
			yy2arr2822 := z.EncBasicHandle().StructToArray
			var yyq2822 [1]bool
			_, _, _ = yysep2822, yyq2822, yy2arr2822
			const yyr2822 bool = false
			if yyr2822 || yy2arr2822 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2822 int = 1
				for _, b := range yyq2822 {
					if b {
						yynn2822++
					}
				}
				r.EncodeMapStart(yynn2822)
			}
			if yyr2822 || yy2arr2822 {
				yym2824 := z.EncBinary()
				_ = yym2824
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				yym2825 := z.EncBinary()
				_ = yym2825
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yysep2822 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2826 := z.DecBinary()
	_ = yym2826
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2827 := r.ReadMapStart()
			if yyl2827 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2827, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2827 := r.ReadArrayStart()
			if yyl2827 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2827, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2828Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2828Slc
	var yyhl2828 bool = l >= 0
	for yyj2828 := 0; ; yyj2828++ {
		if yyhl2828 {
			if yyj2828 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2828Slc = r.DecodeBytes(yys2828Slc, true, true)
		yys2828 := string(yys2828Slc)
		switch yys2828 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2828)
		} // end switch yys2828
	} // end for yyj2828
	if !yyhl2828 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2830 int
	var yyb2830 bool
	var yyhl2830 bool = l >= 0
	yyj2830++
	if yyhl2830 {
		yyb2830 = yyj2830 > l
	} else {
		yyb2830 = r.CheckBreak()
	}
	if yyb2830 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2830++
		if yyhl2830 {
			yyb2830 = yyj2830 > l
		} else {
			yyb2830 = r.CheckBreak()
		}
		if yyb2830 {
			break
		}
		z.DecStructFieldNotFound(yyj2830-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2832 := z.EncBinary()
		_ = yym2832
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2833 := !z.EncBinary()
			yy2arr2833 := z.EncBasicHandle().StructToArray
			var yyq2833 [3]bool
			_, _, _ = yysep2833, yyq2833, yy2arr2833
			const yyr2833 bool = false
			yyq2833[0] = x.Kind != ""
			yyq2833[1] = x.APIVersion != ""
			yyq2833[2] = true
			if yyr2833 || yy2arr2833 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2833 int = 0
				for _, b := range yyq2833 {
					if b {
						yynn2833++
					}
				}
				r.EncodeMapStart(yynn2833)
			}
			if yyr2833 || yy2arr2833 {
				if yyq2833[0] {
					yym2835 := z.EncBinary()
					_ = yym2835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2833[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2836 := z.EncBinary()
					_ = yym2836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2833 || yy2arr2833 {
				if yyq2833[1] {
					yym2838 := z.EncBinary()
					_ = yym2838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2833[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2839 := z.EncBinary()
					_ = yym2839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2833 || yy2arr2833 {
				if yyq2833[2] {
					yy2841 := &x.Reference
					yy2841.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2833[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy2842 := &x.Reference
					yy2842.CodecEncodeSelf(e)
				}
			}
			if yysep2833 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2843 := z.DecBinary()
	_ = yym2843
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2844 := r.ReadMapStart()
			if yyl2844 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2844, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2844 := r.ReadArrayStart()
			if yyl2844 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2844, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2845Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2845Slc
	var yyhl2845 bool = l >= 0
	for yyj2845 := 0; ; yyj2845++ {
		if yyhl2845 {
			if yyj2845 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2845Slc = r.DecodeBytes(yys2845Slc, true, true)
		yys2845 := string(yys2845Slc)
		switch yys2845 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2848 := &x.Reference
				yyv2848.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2845)
		} // end switch yys2845
	} // end for yyj2845
	if !yyhl2845 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2849 int
	var yyb2849 bool
	var yyhl2849 bool = l >= 0
	yyj2849++
	if yyhl2849 {
		yyb2849 = yyj2849 > l
	} else {
		yyb2849 = r.CheckBreak()
	}
	if yyb2849 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2849++
	if yyhl2849 {
		yyb2849 = yyj2849 > l
	} else {
		yyb2849 = r.CheckBreak()
	}
	if yyb2849 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2849++
	if yyhl2849 {
		yyb2849 = yyj2849 > l
	} else {
		yyb2849 = r.CheckBreak()
	}
	if yyb2849 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2852 := &x.Reference
		yyv2852.CodecDecodeSelf(d)
	}
	for {
		yyj2849++
		if yyhl2849 {
			yyb2849 = yyj2849 > l
		} else {
			yyb2849 = r.CheckBreak()
		}
		if yyb2849 {
			break
		}
		z.DecStructFieldNotFound(yyj2849-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2853 := z.EncBinary()
		_ = yym2853
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2854 := !z.EncBinary()
			yy2arr2854 := z.EncBasicHandle().StructToArray
			var yyq2854 [2]bool
			_, _, _ = yysep2854, yyq2854, yy2arr2854
			const yyr2854 bool = false
			yyq2854[0] = x.Component != ""
			yyq2854[1] = x.Host != ""
			if yyr2854 || yy2arr2854 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2854 int = 0
				for _, b := range yyq2854 {
					if b {
						yynn2854++
					}
				}
				r.EncodeMapStart(yynn2854)
			}
			if yyr2854 || yy2arr2854 {
				if yyq2854[0] {
					yym2856 := z.EncBinary()
					_ = yym2856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2854[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym2857 := z.EncBinary()
					_ = yym2857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2854 || yy2arr2854 {
				if yyq2854[1] {
					yym2859 := z.EncBinary()
					_ = yym2859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2854[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym2860 := z.EncBinary()
					_ = yym2860
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep2854 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2861 := z.DecBinary()
	_ = yym2861
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2862 := r.ReadMapStart()
			if yyl2862 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2862, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2862 := r.ReadArrayStart()
			if yyl2862 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2862, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2863Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2863Slc
	var yyhl2863 bool = l >= 0
	for yyj2863 := 0; ; yyj2863++ {
		if yyhl2863 {
			if yyj2863 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2863Slc = r.DecodeBytes(yys2863Slc, true, true)
		yys2863 := string(yys2863Slc)
		switch yys2863 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2863)
		} // end switch yys2863
	} // end for yyj2863
	if !yyhl2863 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2866 int
	var yyb2866 bool
	var yyhl2866 bool = l >= 0
	yyj2866++
	if yyhl2866 {
		yyb2866 = yyj2866 > l
	} else {
		yyb2866 = r.CheckBreak()
	}
	if yyb2866 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2866++
	if yyhl2866 {
		yyb2866 = yyj2866 > l
	} else {
		yyb2866 = r.CheckBreak()
	}
	if yyb2866 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2866++
		if yyhl2866 {
			yyb2866 = yyj2866 > l
		} else {
			yyb2866 = r.CheckBreak()
		}
		if yyb2866 {
			break
		}
		z.DecStructFieldNotFound(yyj2866-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2869 := z.EncBinary()
		_ = yym2869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2870 := !z.EncBinary()
			yy2arr2870 := z.EncBasicHandle().StructToArray
			var yyq2870 [10]bool
			_, _, _ = yysep2870, yyq2870, yy2arr2870
			const yyr2870 bool = false
			yyq2870[0] = x.Kind != ""
			yyq2870[1] = x.APIVersion != ""
			yyq2870[2] = true
			yyq2870[3] = true
			yyq2870[4] = x.Reason != ""
			yyq2870[5] = x.Message != ""
			yyq2870[6] = true
			yyq2870[7] = true
			yyq2870[8] = true
			yyq2870[9] = x.Count != 0
			if yyr2870 || yy2arr2870 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2870 int = 0
				for _, b := range yyq2870 {
					if b {
						yynn2870++
					}
				}
				r.EncodeMapStart(yynn2870)
			}
			if yyr2870 || yy2arr2870 {
				if yyq2870[0] {
					yym2872 := z.EncBinary()
					_ = yym2872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2870[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2873 := z.EncBinary()
					_ = yym2873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2870 || yy2arr2870 {
				if yyq2870[1] {
					yym2875 := z.EncBinary()
					_ = yym2875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2870[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2870 || yy2arr2870 {
				if yyq2870[2] {
					yy2878 := &x.ObjectMeta
					yy2878.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2870[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2879 := &x.ObjectMeta
					yy2879.CodecEncodeSelf(e)
				}
			}
			if yyr2870 || yy2arr2870 {
				if yyq2870[3] {
					yy2881 := &x.InvolvedObject
					yy2881.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2870[3] {
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					yy2882 := &x.InvolvedObject
					yy2882.CodecEncodeSelf(e)
				}
			}
			if yyr2870 || yy2arr2870 {
				if yyq2870[4] {
					yym2884 := z.EncBinary()
					_ = yym2884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2870[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2885 := z.EncBinary()
					_ = yym2885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2870 || yy2arr2870 {
				if yyq2870[5] {
					yym2887 := z.EncBinary()
					_ = yym2887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2870[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2888 := z.EncBinary()
					_ = yym2888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2870 || yy2arr2870 {
				if yyq2870[6] {
					yy2890 := &x.Source
					yy2890.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2870[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy2891 := &x.Source
					yy2891.CodecEncodeSelf(e)
				}
			}
			if yyr2870 || yy2arr2870 {
				if yyq2870[7] {
					yy2893 := &x.FirstTimestamp
					yym2894 := z.EncBinary()
					_ = yym2894
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2893) {
					} else if yym2894 {
						z.EncBinaryMarshal(yy2893)
					} else if !yym2894 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2893)
					} else {
						z.EncFallback(yy2893)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2870[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy2895 := &x.FirstTimestamp
					yym2896 := z.EncBinary()
					_ = yym2896
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2895) {
					} else if yym2896 {
						z.EncBinaryMarshal(yy2895)
					} else if !yym2896 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2895)
					} else {
						z.EncFallback(yy2895)
					}
				}
			}
			if yyr2870 || yy2arr2870 {
				if yyq2870[8] {
					yy2898 := &x.LastTimestamp
					yym2899 := z.EncBinary()
					_ = yym2899
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2898) {
					} else if yym2899 {
						z.EncBinaryMarshal(yy2898)
					} else if !yym2899 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2898)
					} else {
						z.EncFallback(yy2898)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2870[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy2900 := &x.LastTimestamp
					yym2901 := z.EncBinary()
					_ = yym2901
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2900) {
					} else if yym2901 {
						z.EncBinaryMarshal(yy2900)
					} else if !yym2901 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2900)
					} else {
						z.EncFallback(yy2900)
					}
				}
			}
			if yyr2870 || yy2arr2870 {
				if yyq2870[9] {
					yym2903 := z.EncBinary()
					_ = yym2903
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2870[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym2904 := z.EncBinary()
					_ = yym2904
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep2870 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2905 := z.DecBinary()
	_ = yym2905
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2906 := r.ReadMapStart()
			if yyl2906 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2906, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2906 := r.ReadArrayStart()
			if yyl2906 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2906, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2907Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2907Slc
	var yyhl2907 bool = l >= 0
	for yyj2907 := 0; ; yyj2907++ {
		if yyhl2907 {
			if yyj2907 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2907Slc = r.DecodeBytes(yys2907Slc, true, true)
		yys2907 := string(yys2907Slc)
		switch yys2907 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2910 := &x.ObjectMeta
				yyv2910.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2911 := &x.InvolvedObject
				yyv2911.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2914 := &x.Source
				yyv2914.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2915 := &x.FirstTimestamp
				yym2916 := z.DecBinary()
				_ = yym2916
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2915) {
				} else if yym2916 {
					z.DecBinaryUnmarshal(yyv2915)
				} else if !yym2916 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2915)
				} else {
					z.DecFallback(yyv2915, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2917 := &x.LastTimestamp
				yym2918 := z.DecBinary()
				_ = yym2918
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2917) {
				} else if yym2918 {
					z.DecBinaryUnmarshal(yyv2917)
				} else if !yym2918 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2917)
				} else {
					z.DecFallback(yyv2917, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2907)
		} // end switch yys2907
	} // end for yyj2907
	if !yyhl2907 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2920 int
	var yyb2920 bool
	var yyhl2920 bool = l >= 0
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2923 := &x.ObjectMeta
		yyv2923.CodecDecodeSelf(d)
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2924 := &x.InvolvedObject
		yyv2924.CodecDecodeSelf(d)
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2927 := &x.Source
		yyv2927.CodecDecodeSelf(d)
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2928 := &x.FirstTimestamp
		yym2929 := z.DecBinary()
		_ = yym2929
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2928) {
		} else if yym2929 {
			z.DecBinaryUnmarshal(yyv2928)
		} else if !yym2929 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2928)
		} else {
			z.DecFallback(yyv2928, false)
		}
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2930 := &x.LastTimestamp
		yym2931 := z.DecBinary()
		_ = yym2931
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2930) {
		} else if yym2931 {
			z.DecBinaryUnmarshal(yyv2930)
		} else if !yym2931 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2930)
		} else {
			z.DecFallback(yyv2930, false)
		}
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2920++
		if yyhl2920 {
			yyb2920 = yyj2920 > l
		} else {
			yyb2920 = r.CheckBreak()
		}
		if yyb2920 {
			break
		}
		z.DecStructFieldNotFound(yyj2920-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2933 := z.EncBinary()
		_ = yym2933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2934 := !z.EncBinary()
			yy2arr2934 := z.EncBasicHandle().StructToArray
			var yyq2934 [4]bool
			_, _, _ = yysep2934, yyq2934, yy2arr2934
			const yyr2934 bool = false
			yyq2934[0] = x.Kind != ""
			yyq2934[1] = x.APIVersion != ""
			yyq2934[2] = true
			if yyr2934 || yy2arr2934 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2934 int = 1
				for _, b := range yyq2934 {
					if b {
						yynn2934++
					}
				}
				r.EncodeMapStart(yynn2934)
			}
			if yyr2934 || yy2arr2934 {
				if yyq2934[0] {
					yym2936 := z.EncBinary()
					_ = yym2936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2934[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2937 := z.EncBinary()
					_ = yym2937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2934 || yy2arr2934 {
				if yyq2934[1] {
					yym2939 := z.EncBinary()
					_ = yym2939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2934[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2940 := z.EncBinary()
					_ = yym2940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2934 || yy2arr2934 {
				if yyq2934[2] {
					yy2942 := &x.ListMeta
					yym2943 := z.EncBinary()
					_ = yym2943
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2942) {
					} else {
						z.EncFallback(yy2942)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2934[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2944 := &x.ListMeta
					yym2945 := z.EncBinary()
					_ = yym2945
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2944) {
					} else {
						z.EncFallback(yy2944)
					}
				}
			}
			if yyr2934 || yy2arr2934 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2947 := z.EncBinary()
					_ = yym2947
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2948 := z.EncBinary()
					_ = yym2948
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep2934 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2949 := z.DecBinary()
	_ = yym2949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2950 := r.ReadMapStart()
			if yyl2950 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2950, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2950 := r.ReadArrayStart()
			if yyl2950 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2950, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2951Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2951Slc
	var yyhl2951 bool = l >= 0
	for yyj2951 := 0; ; yyj2951++ {
		if yyhl2951 {
			if yyj2951 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2951Slc = r.DecodeBytes(yys2951Slc, true, true)
		yys2951 := string(yys2951Slc)
		switch yys2951 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2954 := &x.ListMeta
				yym2955 := z.DecBinary()
				_ = yym2955
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2954) {
				} else {
					z.DecFallback(yyv2954, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2956 := &x.Items
				yym2957 := z.DecBinary()
				_ = yym2957
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv2956), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2951)
		} // end switch yys2951
	} // end for yyj2951
	if !yyhl2951 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2958 int
	var yyb2958 bool
	var yyhl2958 bool = l >= 0
	yyj2958++
	if yyhl2958 {
		yyb2958 = yyj2958 > l
	} else {
		yyb2958 = r.CheckBreak()
	}
	if yyb2958 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2958++
	if yyhl2958 {
		yyb2958 = yyj2958 > l
	} else {
		yyb2958 = r.CheckBreak()
	}
	if yyb2958 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2958++
	if yyhl2958 {
		yyb2958 = yyj2958 > l
	} else {
		yyb2958 = r.CheckBreak()
	}
	if yyb2958 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2961 := &x.ListMeta
		yym2962 := z.DecBinary()
		_ = yym2962
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2961) {
		} else {
			z.DecFallback(yyv2961, false)
		}
	}
	yyj2958++
	if yyhl2958 {
		yyb2958 = yyj2958 > l
	} else {
		yyb2958 = r.CheckBreak()
	}
	if yyb2958 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2963 := &x.Items
		yym2964 := z.DecBinary()
		_ = yym2964
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv2963), d)
		}
	}
	for {
		yyj2958++
		if yyhl2958 {
			yyb2958 = yyj2958 > l
		} else {
			yyb2958 = r.CheckBreak()
		}
		if yyb2958 {
			break
		}
		z.DecStructFieldNotFound(yyj2958-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2965 := z.EncBinary()
		_ = yym2965
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2966 := !z.EncBinary()
			yy2arr2966 := z.EncBasicHandle().StructToArray
			var yyq2966 [4]bool
			_, _, _ = yysep2966, yyq2966, yy2arr2966
			const yyr2966 bool = false
			yyq2966[0] = x.Kind != ""
			yyq2966[1] = x.APIVersion != ""
			yyq2966[2] = true
			if yyr2966 || yy2arr2966 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2966 int = 1
				for _, b := range yyq2966 {
					if b {
						yynn2966++
					}
				}
				r.EncodeMapStart(yynn2966)
			}
			if yyr2966 || yy2arr2966 {
				if yyq2966[0] {
					yym2968 := z.EncBinary()
					_ = yym2968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2966[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2969 := z.EncBinary()
					_ = yym2969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2966 || yy2arr2966 {
				if yyq2966[1] {
					yym2971 := z.EncBinary()
					_ = yym2971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2966[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2972 := z.EncBinary()
					_ = yym2972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2966 || yy2arr2966 {
				if yyq2966[2] {
					yy2974 := &x.ListMeta
					yym2975 := z.EncBinary()
					_ = yym2975
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2974) {
					} else {
						z.EncFallback(yy2974)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2966[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2976 := &x.ListMeta
					yym2977 := z.EncBinary()
					_ = yym2977
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2976) {
					} else {
						z.EncFallback(yy2976)
					}
				}
			}
			if yyr2966 || yy2arr2966 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2979 := z.EncBinary()
					_ = yym2979
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2980 := z.EncBinary()
					_ = yym2980
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			}
			if yysep2966 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2981 := z.DecBinary()
	_ = yym2981
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2982 := r.ReadMapStart()
			if yyl2982 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2982, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2982 := r.ReadArrayStart()
			if yyl2982 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2982, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2983Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2983Slc
	var yyhl2983 bool = l >= 0
	for yyj2983 := 0; ; yyj2983++ {
		if yyhl2983 {
			if yyj2983 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2983Slc = r.DecodeBytes(yys2983Slc, true, true)
		yys2983 := string(yys2983Slc)
		switch yys2983 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2986 := &x.ListMeta
				yym2987 := z.DecBinary()
				_ = yym2987
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2986) {
				} else {
					z.DecFallback(yyv2986, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2988 := &x.Items
				yym2989 := z.DecBinary()
				_ = yym2989
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv2988), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2983)
		} // end switch yys2983
	} // end for yyj2983
	if !yyhl2983 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2990 int
	var yyb2990 bool
	var yyhl2990 bool = l >= 0
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2993 := &x.ListMeta
		yym2994 := z.DecBinary()
		_ = yym2994
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2993) {
		} else {
			z.DecFallback(yyv2993, false)
		}
	}
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2995 := &x.Items
		yym2996 := z.DecBinary()
		_ = yym2996
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv2995), d)
		}
	}
	for {
		yyj2990++
		if yyhl2990 {
			yyb2990 = yyj2990 > l
		} else {
			yyb2990 = r.CheckBreak()
		}
		if yyb2990 {
			break
		}
		z.DecStructFieldNotFound(yyj2990-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2997 := z.EncBinary()
	_ = yym2997
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2998 := z.DecBinary()
	_ = yym2998
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2999 := z.EncBinary()
		_ = yym2999
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3000 := !z.EncBinary()
			yy2arr3000 := z.EncBasicHandle().StructToArray
			var yyq3000 [6]bool
			_, _, _ = yysep3000, yyq3000, yy2arr3000
			const yyr3000 bool = false
			yyq3000[0] = x.Type != ""
			yyq3000[1] = len(x.Max) != 0
			yyq3000[2] = len(x.Min) != 0
			yyq3000[3] = len(x.Default) != 0
			yyq3000[4] = len(x.DefaultRequest) != 0
			yyq3000[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr3000 || yy2arr3000 {
				r.EncodeArrayStart(6)
			} else {
				var yynn3000 int = 0
				for _, b := range yyq3000 {
					if b {
						yynn3000++
					}
				}
				r.EncodeMapStart(yynn3000)
			}
			if yyr3000 || yy2arr3000 {
				if yyq3000[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3000[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3000 || yy2arr3000 {
				if yyq3000[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3000[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3000 || yy2arr3000 {
				if yyq3000[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3000[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3000 || yy2arr3000 {
				if yyq3000[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3000[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3000 || yy2arr3000 {
				if yyq3000[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3000[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3000 || yy2arr3000 {
				if yyq3000[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3000[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3000 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3007 := z.DecBinary()
	_ = yym3007
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3008 := r.ReadMapStart()
			if yyl3008 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3008, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3008 := r.ReadArrayStart()
			if yyl3008 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3008, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3009Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3009Slc
	var yyhl3009 bool = l >= 0
	for yyj3009 := 0; ; yyj3009++ {
		if yyhl3009 {
			if yyj3009 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3009Slc = r.DecodeBytes(yys3009Slc, true, true)
		yys3009 := string(yys3009Slc)
		switch yys3009 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3011 := &x.Max
				yyv3011.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3012 := &x.Min
				yyv3012.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3013 := &x.Default
				yyv3013.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3014 := &x.DefaultRequest
				yyv3014.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3015 := &x.MaxLimitRequestRatio
				yyv3015.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3009)
		} // end switch yys3009
	} // end for yyj3009
	if !yyhl3009 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3016 int
	var yyb3016 bool
	var yyhl3016 bool = l >= 0
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3018 := &x.Max
		yyv3018.CodecDecodeSelf(d)
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3019 := &x.Min
		yyv3019.CodecDecodeSelf(d)
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3020 := &x.Default
		yyv3020.CodecDecodeSelf(d)
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3021 := &x.DefaultRequest
		yyv3021.CodecDecodeSelf(d)
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3022 := &x.MaxLimitRequestRatio
		yyv3022.CodecDecodeSelf(d)
	}
	for {
		yyj3016++
		if yyhl3016 {
			yyb3016 = yyj3016 > l
		} else {
			yyb3016 = r.CheckBreak()
		}
		if yyb3016 {
			break
		}
		z.DecStructFieldNotFound(yyj3016-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3023 := z.EncBinary()
		_ = yym3023
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3024 := !z.EncBinary()
			yy2arr3024 := z.EncBasicHandle().StructToArray
			var yyq3024 [1]bool
			_, _, _ = yysep3024, yyq3024, yy2arr3024
			const yyr3024 bool = false
			if yyr3024 || yy2arr3024 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3024 int = 1
				for _, b := range yyq3024 {
					if b {
						yynn3024++
					}
				}
				r.EncodeMapStart(yynn3024)
			}
			if yyr3024 || yy2arr3024 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3026 := z.EncBinary()
					_ = yym3026
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3027 := z.EncBinary()
					_ = yym3027
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep3024 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3028 := z.DecBinary()
	_ = yym3028
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3029 := r.ReadMapStart()
			if yyl3029 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3029, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3029 := r.ReadArrayStart()
			if yyl3029 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3029, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3030Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3030Slc
	var yyhl3030 bool = l >= 0
	for yyj3030 := 0; ; yyj3030++ {
		if yyhl3030 {
			if yyj3030 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3030Slc = r.DecodeBytes(yys3030Slc, true, true)
		yys3030 := string(yys3030Slc)
		switch yys3030 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3031 := &x.Limits
				yym3032 := z.DecBinary()
				_ = yym3032
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3031), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3030)
		} // end switch yys3030
	} // end for yyj3030
	if !yyhl3030 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3033 int
	var yyb3033 bool
	var yyhl3033 bool = l >= 0
	yyj3033++
	if yyhl3033 {
		yyb3033 = yyj3033 > l
	} else {
		yyb3033 = r.CheckBreak()
	}
	if yyb3033 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3034 := &x.Limits
		yym3035 := z.DecBinary()
		_ = yym3035
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3034), d)
		}
	}
	for {
		yyj3033++
		if yyhl3033 {
			yyb3033 = yyj3033 > l
		} else {
			yyb3033 = r.CheckBreak()
		}
		if yyb3033 {
			break
		}
		z.DecStructFieldNotFound(yyj3033-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3036 := z.EncBinary()
		_ = yym3036
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3037 := !z.EncBinary()
			yy2arr3037 := z.EncBasicHandle().StructToArray
			var yyq3037 [4]bool
			_, _, _ = yysep3037, yyq3037, yy2arr3037
			const yyr3037 bool = false
			yyq3037[0] = x.Kind != ""
			yyq3037[1] = x.APIVersion != ""
			yyq3037[2] = true
			yyq3037[3] = true
			if yyr3037 || yy2arr3037 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3037 int = 0
				for _, b := range yyq3037 {
					if b {
						yynn3037++
					}
				}
				r.EncodeMapStart(yynn3037)
			}
			if yyr3037 || yy2arr3037 {
				if yyq3037[0] {
					yym3039 := z.EncBinary()
					_ = yym3039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3037[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3040 := z.EncBinary()
					_ = yym3040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3037 || yy2arr3037 {
				if yyq3037[1] {
					yym3042 := z.EncBinary()
					_ = yym3042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3037[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3043 := z.EncBinary()
					_ = yym3043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3037 || yy2arr3037 {
				if yyq3037[2] {
					yy3045 := &x.ObjectMeta
					yy3045.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3037[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3046 := &x.ObjectMeta
					yy3046.CodecEncodeSelf(e)
				}
			}
			if yyr3037 || yy2arr3037 {
				if yyq3037[3] {
					yy3048 := &x.Spec
					yy3048.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3037[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3049 := &x.Spec
					yy3049.CodecEncodeSelf(e)
				}
			}
			if yysep3037 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3050 := z.DecBinary()
	_ = yym3050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3051 := r.ReadMapStart()
			if yyl3051 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3051, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3051 := r.ReadArrayStart()
			if yyl3051 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3051, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3052Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3052Slc
	var yyhl3052 bool = l >= 0
	for yyj3052 := 0; ; yyj3052++ {
		if yyhl3052 {
			if yyj3052 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3052Slc = r.DecodeBytes(yys3052Slc, true, true)
		yys3052 := string(yys3052Slc)
		switch yys3052 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3055 := &x.ObjectMeta
				yyv3055.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3056 := &x.Spec
				yyv3056.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3052)
		} // end switch yys3052
	} // end for yyj3052
	if !yyhl3052 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3057 int
	var yyb3057 bool
	var yyhl3057 bool = l >= 0
	yyj3057++
	if yyhl3057 {
		yyb3057 = yyj3057 > l
	} else {
		yyb3057 = r.CheckBreak()
	}
	if yyb3057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3057++
	if yyhl3057 {
		yyb3057 = yyj3057 > l
	} else {
		yyb3057 = r.CheckBreak()
	}
	if yyb3057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3057++
	if yyhl3057 {
		yyb3057 = yyj3057 > l
	} else {
		yyb3057 = r.CheckBreak()
	}
	if yyb3057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3060 := &x.ObjectMeta
		yyv3060.CodecDecodeSelf(d)
	}
	yyj3057++
	if yyhl3057 {
		yyb3057 = yyj3057 > l
	} else {
		yyb3057 = r.CheckBreak()
	}
	if yyb3057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3061 := &x.Spec
		yyv3061.CodecDecodeSelf(d)
	}
	for {
		yyj3057++
		if yyhl3057 {
			yyb3057 = yyj3057 > l
		} else {
			yyb3057 = r.CheckBreak()
		}
		if yyb3057 {
			break
		}
		z.DecStructFieldNotFound(yyj3057-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3062 := z.EncBinary()
		_ = yym3062
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3063 := !z.EncBinary()
			yy2arr3063 := z.EncBasicHandle().StructToArray
			var yyq3063 [4]bool
			_, _, _ = yysep3063, yyq3063, yy2arr3063
			const yyr3063 bool = false
			yyq3063[0] = x.Kind != ""
			yyq3063[1] = x.APIVersion != ""
			yyq3063[2] = true
			if yyr3063 || yy2arr3063 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3063 int = 1
				for _, b := range yyq3063 {
					if b {
						yynn3063++
					}
				}
				r.EncodeMapStart(yynn3063)
			}
			if yyr3063 || yy2arr3063 {
				if yyq3063[0] {
					yym3065 := z.EncBinary()
					_ = yym3065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3063[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3066 := z.EncBinary()
					_ = yym3066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3063 || yy2arr3063 {
				if yyq3063[1] {
					yym3068 := z.EncBinary()
					_ = yym3068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3063[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3069 := z.EncBinary()
					_ = yym3069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3063 || yy2arr3063 {
				if yyq3063[2] {
					yy3071 := &x.ListMeta
					yym3072 := z.EncBinary()
					_ = yym3072
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3071) {
					} else {
						z.EncFallback(yy3071)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3063[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3073 := &x.ListMeta
					yym3074 := z.EncBinary()
					_ = yym3074
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3073) {
					} else {
						z.EncFallback(yy3073)
					}
				}
			}
			if yyr3063 || yy2arr3063 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3076 := z.EncBinary()
					_ = yym3076
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3077 := z.EncBinary()
					_ = yym3077
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3063 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3078 := z.DecBinary()
	_ = yym3078
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3079 := r.ReadMapStart()
			if yyl3079 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3079, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3079 := r.ReadArrayStart()
			if yyl3079 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3079, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3080Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3080Slc
	var yyhl3080 bool = l >= 0
	for yyj3080 := 0; ; yyj3080++ {
		if yyhl3080 {
			if yyj3080 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3080Slc = r.DecodeBytes(yys3080Slc, true, true)
		yys3080 := string(yys3080Slc)
		switch yys3080 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3083 := &x.ListMeta
				yym3084 := z.DecBinary()
				_ = yym3084
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3083) {
				} else {
					z.DecFallback(yyv3083, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3085 := &x.Items
				yym3086 := z.DecBinary()
				_ = yym3086
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3085), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3080)
		} // end switch yys3080
	} // end for yyj3080
	if !yyhl3080 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3087 int
	var yyb3087 bool
	var yyhl3087 bool = l >= 0
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3090 := &x.ListMeta
		yym3091 := z.DecBinary()
		_ = yym3091
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3090) {
		} else {
			z.DecFallback(yyv3090, false)
		}
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3092 := &x.Items
		yym3093 := z.DecBinary()
		_ = yym3093
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3092), d)
		}
	}
	for {
		yyj3087++
		if yyhl3087 {
			yyb3087 = yyj3087 > l
		} else {
			yyb3087 = r.CheckBreak()
		}
		if yyb3087 {
			break
		}
		z.DecStructFieldNotFound(yyj3087-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3094 := z.EncBinary()
		_ = yym3094
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3095 := !z.EncBinary()
			yy2arr3095 := z.EncBasicHandle().StructToArray
			var yyq3095 [1]bool
			_, _, _ = yysep3095, yyq3095, yy2arr3095
			const yyr3095 bool = false
			yyq3095[0] = len(x.Hard) != 0
			if yyr3095 || yy2arr3095 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3095 int = 0
				for _, b := range yyq3095 {
					if b {
						yynn3095++
					}
				}
				r.EncodeMapStart(yynn3095)
			}
			if yyr3095 || yy2arr3095 {
				if yyq3095[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3095[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3095 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3097 := z.DecBinary()
	_ = yym3097
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3098 := r.ReadMapStart()
			if yyl3098 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3098, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3098 := r.ReadArrayStart()
			if yyl3098 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3098, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3099Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3099Slc
	var yyhl3099 bool = l >= 0
	for yyj3099 := 0; ; yyj3099++ {
		if yyhl3099 {
			if yyj3099 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3099Slc = r.DecodeBytes(yys3099Slc, true, true)
		yys3099 := string(yys3099Slc)
		switch yys3099 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3100 := &x.Hard
				yyv3100.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3099)
		} // end switch yys3099
	} // end for yyj3099
	if !yyhl3099 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3101 int
	var yyb3101 bool
	var yyhl3101 bool = l >= 0
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3102 := &x.Hard
		yyv3102.CodecDecodeSelf(d)
	}
	for {
		yyj3101++
		if yyhl3101 {
			yyb3101 = yyj3101 > l
		} else {
			yyb3101 = r.CheckBreak()
		}
		if yyb3101 {
			break
		}
		z.DecStructFieldNotFound(yyj3101-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3103 := z.EncBinary()
		_ = yym3103
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3104 := !z.EncBinary()
			yy2arr3104 := z.EncBasicHandle().StructToArray
			var yyq3104 [2]bool
			_, _, _ = yysep3104, yyq3104, yy2arr3104
			const yyr3104 bool = false
			yyq3104[0] = len(x.Hard) != 0
			yyq3104[1] = len(x.Used) != 0
			if yyr3104 || yy2arr3104 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3104 int = 0
				for _, b := range yyq3104 {
					if b {
						yynn3104++
					}
				}
				r.EncodeMapStart(yynn3104)
			}
			if yyr3104 || yy2arr3104 {
				if yyq3104[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3104[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3104 || yy2arr3104 {
				if yyq3104[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3104[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3104 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3107 := z.DecBinary()
	_ = yym3107
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3108 := r.ReadMapStart()
			if yyl3108 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3108, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3108 := r.ReadArrayStart()
			if yyl3108 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3108, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3109Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3109Slc
	var yyhl3109 bool = l >= 0
	for yyj3109 := 0; ; yyj3109++ {
		if yyhl3109 {
			if yyj3109 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3109Slc = r.DecodeBytes(yys3109Slc, true, true)
		yys3109 := string(yys3109Slc)
		switch yys3109 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3110 := &x.Hard
				yyv3110.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3111 := &x.Used
				yyv3111.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3109)
		} // end switch yys3109
	} // end for yyj3109
	if !yyhl3109 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3112 int
	var yyb3112 bool
	var yyhl3112 bool = l >= 0
	yyj3112++
	if yyhl3112 {
		yyb3112 = yyj3112 > l
	} else {
		yyb3112 = r.CheckBreak()
	}
	if yyb3112 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3113 := &x.Hard
		yyv3113.CodecDecodeSelf(d)
	}
	yyj3112++
	if yyhl3112 {
		yyb3112 = yyj3112 > l
	} else {
		yyb3112 = r.CheckBreak()
	}
	if yyb3112 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3114 := &x.Used
		yyv3114.CodecDecodeSelf(d)
	}
	for {
		yyj3112++
		if yyhl3112 {
			yyb3112 = yyj3112 > l
		} else {
			yyb3112 = r.CheckBreak()
		}
		if yyb3112 {
			break
		}
		z.DecStructFieldNotFound(yyj3112-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3115 := z.EncBinary()
		_ = yym3115
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3116 := !z.EncBinary()
			yy2arr3116 := z.EncBasicHandle().StructToArray
			var yyq3116 [5]bool
			_, _, _ = yysep3116, yyq3116, yy2arr3116
			const yyr3116 bool = false
			yyq3116[0] = x.Kind != ""
			yyq3116[1] = x.APIVersion != ""
			yyq3116[2] = true
			yyq3116[3] = true
			yyq3116[4] = true
			if yyr3116 || yy2arr3116 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3116 int = 0
				for _, b := range yyq3116 {
					if b {
						yynn3116++
					}
				}
				r.EncodeMapStart(yynn3116)
			}
			if yyr3116 || yy2arr3116 {
				if yyq3116[0] {
					yym3118 := z.EncBinary()
					_ = yym3118
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3116[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3119 := z.EncBinary()
					_ = yym3119
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3116 || yy2arr3116 {
				if yyq3116[1] {
					yym3121 := z.EncBinary()
					_ = yym3121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3116[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3122 := z.EncBinary()
					_ = yym3122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3116 || yy2arr3116 {
				if yyq3116[2] {
					yy3124 := &x.ObjectMeta
					yy3124.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3116[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3125 := &x.ObjectMeta
					yy3125.CodecEncodeSelf(e)
				}
			}
			if yyr3116 || yy2arr3116 {
				if yyq3116[3] {
					yy3127 := &x.Spec
					yy3127.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3116[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3128 := &x.Spec
					yy3128.CodecEncodeSelf(e)
				}
			}
			if yyr3116 || yy2arr3116 {
				if yyq3116[4] {
					yy3130 := &x.Status
					yy3130.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3116[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3131 := &x.Status
					yy3131.CodecEncodeSelf(e)
				}
			}
			if yysep3116 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3132 := z.DecBinary()
	_ = yym3132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3133 := r.ReadMapStart()
			if yyl3133 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3133, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3133 := r.ReadArrayStart()
			if yyl3133 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3133, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3134Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3134Slc
	var yyhl3134 bool = l >= 0
	for yyj3134 := 0; ; yyj3134++ {
		if yyhl3134 {
			if yyj3134 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3134Slc = r.DecodeBytes(yys3134Slc, true, true)
		yys3134 := string(yys3134Slc)
		switch yys3134 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3137 := &x.ObjectMeta
				yyv3137.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3138 := &x.Spec
				yyv3138.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3139 := &x.Status
				yyv3139.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3134)
		} // end switch yys3134
	} // end for yyj3134
	if !yyhl3134 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3140 int
	var yyb3140 bool
	var yyhl3140 bool = l >= 0
	yyj3140++
	if yyhl3140 {
		yyb3140 = yyj3140 > l
	} else {
		yyb3140 = r.CheckBreak()
	}
	if yyb3140 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3140++
	if yyhl3140 {
		yyb3140 = yyj3140 > l
	} else {
		yyb3140 = r.CheckBreak()
	}
	if yyb3140 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3140++
	if yyhl3140 {
		yyb3140 = yyj3140 > l
	} else {
		yyb3140 = r.CheckBreak()
	}
	if yyb3140 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3143 := &x.ObjectMeta
		yyv3143.CodecDecodeSelf(d)
	}
	yyj3140++
	if yyhl3140 {
		yyb3140 = yyj3140 > l
	} else {
		yyb3140 = r.CheckBreak()
	}
	if yyb3140 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3144 := &x.Spec
		yyv3144.CodecDecodeSelf(d)
	}
	yyj3140++
	if yyhl3140 {
		yyb3140 = yyj3140 > l
	} else {
		yyb3140 = r.CheckBreak()
	}
	if yyb3140 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3145 := &x.Status
		yyv3145.CodecDecodeSelf(d)
	}
	for {
		yyj3140++
		if yyhl3140 {
			yyb3140 = yyj3140 > l
		} else {
			yyb3140 = r.CheckBreak()
		}
		if yyb3140 {
			break
		}
		z.DecStructFieldNotFound(yyj3140-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3146 := z.EncBinary()
		_ = yym3146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3147 := !z.EncBinary()
			yy2arr3147 := z.EncBasicHandle().StructToArray
			var yyq3147 [4]bool
			_, _, _ = yysep3147, yyq3147, yy2arr3147
			const yyr3147 bool = false
			yyq3147[0] = x.Kind != ""
			yyq3147[1] = x.APIVersion != ""
			yyq3147[2] = true
			if yyr3147 || yy2arr3147 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3147 int = 1
				for _, b := range yyq3147 {
					if b {
						yynn3147++
					}
				}
				r.EncodeMapStart(yynn3147)
			}
			if yyr3147 || yy2arr3147 {
				if yyq3147[0] {
					yym3149 := z.EncBinary()
					_ = yym3149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3147[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3150 := z.EncBinary()
					_ = yym3150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				if yyq3147[1] {
					yym3152 := z.EncBinary()
					_ = yym3152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3147[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3153 := z.EncBinary()
					_ = yym3153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				if yyq3147[2] {
					yy3155 := &x.ListMeta
					yym3156 := z.EncBinary()
					_ = yym3156
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3155) {
					} else {
						z.EncFallback(yy3155)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3147[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3157 := &x.ListMeta
					yym3158 := z.EncBinary()
					_ = yym3158
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3157) {
					} else {
						z.EncFallback(yy3157)
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3160 := z.EncBinary()
					_ = yym3160
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3161 := z.EncBinary()
					_ = yym3161
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3147 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3162 := z.DecBinary()
	_ = yym3162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3163 := r.ReadMapStart()
			if yyl3163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3163, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3163 := r.ReadArrayStart()
			if yyl3163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3164Slc
	var yyhl3164 bool = l >= 0
	for yyj3164 := 0; ; yyj3164++ {
		if yyhl3164 {
			if yyj3164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3164Slc = r.DecodeBytes(yys3164Slc, true, true)
		yys3164 := string(yys3164Slc)
		switch yys3164 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3167 := &x.ListMeta
				yym3168 := z.DecBinary()
				_ = yym3168
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3167) {
				} else {
					z.DecFallback(yyv3167, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3169 := &x.Items
				yym3170 := z.DecBinary()
				_ = yym3170
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3169), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3164)
		} // end switch yys3164
	} // end for yyj3164
	if !yyhl3164 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3171 int
	var yyb3171 bool
	var yyhl3171 bool = l >= 0
	yyj3171++
	if yyhl3171 {
		yyb3171 = yyj3171 > l
	} else {
		yyb3171 = r.CheckBreak()
	}
	if yyb3171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3171++
	if yyhl3171 {
		yyb3171 = yyj3171 > l
	} else {
		yyb3171 = r.CheckBreak()
	}
	if yyb3171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3171++
	if yyhl3171 {
		yyb3171 = yyj3171 > l
	} else {
		yyb3171 = r.CheckBreak()
	}
	if yyb3171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3174 := &x.ListMeta
		yym3175 := z.DecBinary()
		_ = yym3175
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3174) {
		} else {
			z.DecFallback(yyv3174, false)
		}
	}
	yyj3171++
	if yyhl3171 {
		yyb3171 = yyj3171 > l
	} else {
		yyb3171 = r.CheckBreak()
	}
	if yyb3171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3176 := &x.Items
		yym3177 := z.DecBinary()
		_ = yym3177
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3176), d)
		}
	}
	for {
		yyj3171++
		if yyhl3171 {
			yyb3171 = yyj3171 > l
		} else {
			yyb3171 = r.CheckBreak()
		}
		if yyb3171 {
			break
		}
		z.DecStructFieldNotFound(yyj3171-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3178 := z.EncBinary()
		_ = yym3178
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3179 := !z.EncBinary()
			yy2arr3179 := z.EncBasicHandle().StructToArray
			var yyq3179 [5]bool
			_, _, _ = yysep3179, yyq3179, yy2arr3179
			const yyr3179 bool = false
			yyq3179[0] = x.Kind != ""
			yyq3179[1] = x.APIVersion != ""
			yyq3179[2] = true
			yyq3179[3] = len(x.Data) != 0
			yyq3179[4] = x.Type != ""
			if yyr3179 || yy2arr3179 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3179 int = 0
				for _, b := range yyq3179 {
					if b {
						yynn3179++
					}
				}
				r.EncodeMapStart(yynn3179)
			}
			if yyr3179 || yy2arr3179 {
				if yyq3179[0] {
					yym3181 := z.EncBinary()
					_ = yym3181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3179[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3182 := z.EncBinary()
					_ = yym3182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3179 || yy2arr3179 {
				if yyq3179[1] {
					yym3184 := z.EncBinary()
					_ = yym3184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3179[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3179 || yy2arr3179 {
				if yyq3179[2] {
					yy3187 := &x.ObjectMeta
					yy3187.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3179[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3188 := &x.ObjectMeta
					yy3188.CodecEncodeSelf(e)
				}
			}
			if yyr3179 || yy2arr3179 {
				if yyq3179[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3190 := z.EncBinary()
						_ = yym3190
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3179[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3191 := z.EncBinary()
						_ = yym3191
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3179 || yy2arr3179 {
				if yyq3179[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3179[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3179 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3193 := z.DecBinary()
	_ = yym3193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3194 := r.ReadMapStart()
			if yyl3194 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3194, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3194 := r.ReadArrayStart()
			if yyl3194 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3195Slc
	var yyhl3195 bool = l >= 0
	for yyj3195 := 0; ; yyj3195++ {
		if yyhl3195 {
			if yyj3195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3195Slc = r.DecodeBytes(yys3195Slc, true, true)
		yys3195 := string(yys3195Slc)
		switch yys3195 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3198 := &x.ObjectMeta
				yyv3198.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3199 := &x.Data
				yym3200 := z.DecBinary()
				_ = yym3200
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3199), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3195)
		} // end switch yys3195
	} // end for yyj3195
	if !yyhl3195 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3202 int
	var yyb3202 bool
	var yyhl3202 bool = l >= 0
	yyj3202++
	if yyhl3202 {
		yyb3202 = yyj3202 > l
	} else {
		yyb3202 = r.CheckBreak()
	}
	if yyb3202 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3202++
	if yyhl3202 {
		yyb3202 = yyj3202 > l
	} else {
		yyb3202 = r.CheckBreak()
	}
	if yyb3202 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3202++
	if yyhl3202 {
		yyb3202 = yyj3202 > l
	} else {
		yyb3202 = r.CheckBreak()
	}
	if yyb3202 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3205 := &x.ObjectMeta
		yyv3205.CodecDecodeSelf(d)
	}
	yyj3202++
	if yyhl3202 {
		yyb3202 = yyj3202 > l
	} else {
		yyb3202 = r.CheckBreak()
	}
	if yyb3202 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3206 := &x.Data
		yym3207 := z.DecBinary()
		_ = yym3207
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3206), d)
		}
	}
	yyj3202++
	if yyhl3202 {
		yyb3202 = yyj3202 > l
	} else {
		yyb3202 = r.CheckBreak()
	}
	if yyb3202 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3202++
		if yyhl3202 {
			yyb3202 = yyj3202 > l
		} else {
			yyb3202 = r.CheckBreak()
		}
		if yyb3202 {
			break
		}
		z.DecStructFieldNotFound(yyj3202-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3209 := z.EncBinary()
	_ = yym3209
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3210 := z.DecBinary()
	_ = yym3210
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3211 := z.EncBinary()
		_ = yym3211
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3212 := !z.EncBinary()
			yy2arr3212 := z.EncBasicHandle().StructToArray
			var yyq3212 [4]bool
			_, _, _ = yysep3212, yyq3212, yy2arr3212
			const yyr3212 bool = false
			yyq3212[0] = x.Kind != ""
			yyq3212[1] = x.APIVersion != ""
			yyq3212[2] = true
			if yyr3212 || yy2arr3212 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3212 int = 1
				for _, b := range yyq3212 {
					if b {
						yynn3212++
					}
				}
				r.EncodeMapStart(yynn3212)
			}
			if yyr3212 || yy2arr3212 {
				if yyq3212[0] {
					yym3214 := z.EncBinary()
					_ = yym3214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3212[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3215 := z.EncBinary()
					_ = yym3215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3212 || yy2arr3212 {
				if yyq3212[1] {
					yym3217 := z.EncBinary()
					_ = yym3217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3212[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3212 || yy2arr3212 {
				if yyq3212[2] {
					yy3220 := &x.ListMeta
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3220) {
					} else {
						z.EncFallback(yy3220)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3212[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3222 := &x.ListMeta
					yym3223 := z.EncBinary()
					_ = yym3223
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3222) {
					} else {
						z.EncFallback(yy3222)
					}
				}
			}
			if yyr3212 || yy2arr3212 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3225 := z.EncBinary()
					_ = yym3225
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3226 := z.EncBinary()
					_ = yym3226
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3212 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3227 := z.DecBinary()
	_ = yym3227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3228 := r.ReadMapStart()
			if yyl3228 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3228, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3228 := r.ReadArrayStart()
			if yyl3228 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3228, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3229Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3229Slc
	var yyhl3229 bool = l >= 0
	for yyj3229 := 0; ; yyj3229++ {
		if yyhl3229 {
			if yyj3229 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3229Slc = r.DecodeBytes(yys3229Slc, true, true)
		yys3229 := string(yys3229Slc)
		switch yys3229 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3232 := &x.ListMeta
				yym3233 := z.DecBinary()
				_ = yym3233
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3232) {
				} else {
					z.DecFallback(yyv3232, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3234 := &x.Items
				yym3235 := z.DecBinary()
				_ = yym3235
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3234), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3229)
		} // end switch yys3229
	} // end for yyj3229
	if !yyhl3229 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3236 int
	var yyb3236 bool
	var yyhl3236 bool = l >= 0
	yyj3236++
	if yyhl3236 {
		yyb3236 = yyj3236 > l
	} else {
		yyb3236 = r.CheckBreak()
	}
	if yyb3236 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3236++
	if yyhl3236 {
		yyb3236 = yyj3236 > l
	} else {
		yyb3236 = r.CheckBreak()
	}
	if yyb3236 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3236++
	if yyhl3236 {
		yyb3236 = yyj3236 > l
	} else {
		yyb3236 = r.CheckBreak()
	}
	if yyb3236 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3239 := &x.ListMeta
		yym3240 := z.DecBinary()
		_ = yym3240
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3239) {
		} else {
			z.DecFallback(yyv3239, false)
		}
	}
	yyj3236++
	if yyhl3236 {
		yyb3236 = yyj3236 > l
	} else {
		yyb3236 = r.CheckBreak()
	}
	if yyb3236 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3241 := &x.Items
		yym3242 := z.DecBinary()
		_ = yym3242
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3241), d)
		}
	}
	for {
		yyj3236++
		if yyhl3236 {
			yyb3236 = yyj3236 > l
		} else {
			yyb3236 = r.CheckBreak()
		}
		if yyb3236 {
			break
		}
		z.DecStructFieldNotFound(yyj3236-1, "")
	}
	r.ReadEnd()
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3243 := z.EncBinary()
	_ = yym3243
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3244 := z.DecBinary()
	_ = yym3244
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3245 := z.EncBinary()
	_ = yym3245
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3246 := z.DecBinary()
	_ = yym3246
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3247 := z.EncBinary()
		_ = yym3247
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3248 := !z.EncBinary()
			yy2arr3248 := z.EncBasicHandle().StructToArray
			var yyq3248 [4]bool
			_, _, _ = yysep3248, yyq3248, yy2arr3248
			const yyr3248 bool = false
			yyq3248[2] = x.Message != ""
			yyq3248[3] = x.Error != ""
			if yyr3248 || yy2arr3248 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3248 int = 2
				for _, b := range yyq3248 {
					if b {
						yynn3248++
					}
				}
				r.EncodeMapStart(yynn3248)
			}
			if yyr3248 || yy2arr3248 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3248 || yy2arr3248 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3248 || yy2arr3248 {
				if yyq3248[2] {
					yym3252 := z.EncBinary()
					_ = yym3252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3248[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3253 := z.EncBinary()
					_ = yym3253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3248 || yy2arr3248 {
				if yyq3248[3] {
					yym3255 := z.EncBinary()
					_ = yym3255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3248[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3256 := z.EncBinary()
					_ = yym3256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3248 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3257 := z.DecBinary()
	_ = yym3257
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3258 := r.ReadMapStart()
			if yyl3258 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3258, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3258 := r.ReadArrayStart()
			if yyl3258 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3258, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3259Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3259Slc
	var yyhl3259 bool = l >= 0
	for yyj3259 := 0; ; yyj3259++ {
		if yyhl3259 {
			if yyj3259 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3259Slc = r.DecodeBytes(yys3259Slc, true, true)
		yys3259 := string(yys3259Slc)
		switch yys3259 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3259)
		} // end switch yys3259
	} // end for yyj3259
	if !yyhl3259 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3264 int
	var yyb3264 bool
	var yyhl3264 bool = l >= 0
	yyj3264++
	if yyhl3264 {
		yyb3264 = yyj3264 > l
	} else {
		yyb3264 = r.CheckBreak()
	}
	if yyb3264 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3264++
	if yyhl3264 {
		yyb3264 = yyj3264 > l
	} else {
		yyb3264 = r.CheckBreak()
	}
	if yyb3264 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3264++
	if yyhl3264 {
		yyb3264 = yyj3264 > l
	} else {
		yyb3264 = r.CheckBreak()
	}
	if yyb3264 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3264++
	if yyhl3264 {
		yyb3264 = yyj3264 > l
	} else {
		yyb3264 = r.CheckBreak()
	}
	if yyb3264 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3264++
		if yyhl3264 {
			yyb3264 = yyj3264 > l
		} else {
			yyb3264 = r.CheckBreak()
		}
		if yyb3264 {
			break
		}
		z.DecStructFieldNotFound(yyj3264-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3269 := z.EncBinary()
		_ = yym3269
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3270 := !z.EncBinary()
			yy2arr3270 := z.EncBasicHandle().StructToArray
			var yyq3270 [4]bool
			_, _, _ = yysep3270, yyq3270, yy2arr3270
			const yyr3270 bool = false
			yyq3270[0] = x.Kind != ""
			yyq3270[1] = x.APIVersion != ""
			yyq3270[2] = true
			yyq3270[3] = len(x.Conditions) != 0
			if yyr3270 || yy2arr3270 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3270 int = 0
				for _, b := range yyq3270 {
					if b {
						yynn3270++
					}
				}
				r.EncodeMapStart(yynn3270)
			}
			if yyr3270 || yy2arr3270 {
				if yyq3270[0] {
					yym3272 := z.EncBinary()
					_ = yym3272
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3270[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3273 := z.EncBinary()
					_ = yym3273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3270 || yy2arr3270 {
				if yyq3270[1] {
					yym3275 := z.EncBinary()
					_ = yym3275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3270[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3276 := z.EncBinary()
					_ = yym3276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3270 || yy2arr3270 {
				if yyq3270[2] {
					yy3278 := &x.ObjectMeta
					yy3278.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3270[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3279 := &x.ObjectMeta
					yy3279.CodecEncodeSelf(e)
				}
			}
			if yyr3270 || yy2arr3270 {
				if yyq3270[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3281 := z.EncBinary()
						_ = yym3281
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3270[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3282 := z.EncBinary()
						_ = yym3282
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3270 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3283 := z.DecBinary()
	_ = yym3283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3284 := r.ReadMapStart()
			if yyl3284 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3284, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3284 := r.ReadArrayStart()
			if yyl3284 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3285Slc
	var yyhl3285 bool = l >= 0
	for yyj3285 := 0; ; yyj3285++ {
		if yyhl3285 {
			if yyj3285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3285Slc = r.DecodeBytes(yys3285Slc, true, true)
		yys3285 := string(yys3285Slc)
		switch yys3285 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3288 := &x.ObjectMeta
				yyv3288.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3289 := &x.Conditions
				yym3290 := z.DecBinary()
				_ = yym3290
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3289), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3285)
		} // end switch yys3285
	} // end for yyj3285
	if !yyhl3285 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3291 int
	var yyb3291 bool
	var yyhl3291 bool = l >= 0
	yyj3291++
	if yyhl3291 {
		yyb3291 = yyj3291 > l
	} else {
		yyb3291 = r.CheckBreak()
	}
	if yyb3291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3291++
	if yyhl3291 {
		yyb3291 = yyj3291 > l
	} else {
		yyb3291 = r.CheckBreak()
	}
	if yyb3291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3291++
	if yyhl3291 {
		yyb3291 = yyj3291 > l
	} else {
		yyb3291 = r.CheckBreak()
	}
	if yyb3291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3294 := &x.ObjectMeta
		yyv3294.CodecDecodeSelf(d)
	}
	yyj3291++
	if yyhl3291 {
		yyb3291 = yyj3291 > l
	} else {
		yyb3291 = r.CheckBreak()
	}
	if yyb3291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3295 := &x.Conditions
		yym3296 := z.DecBinary()
		_ = yym3296
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3295), d)
		}
	}
	for {
		yyj3291++
		if yyhl3291 {
			yyb3291 = yyj3291 > l
		} else {
			yyb3291 = r.CheckBreak()
		}
		if yyb3291 {
			break
		}
		z.DecStructFieldNotFound(yyj3291-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3297 := z.EncBinary()
		_ = yym3297
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3298 := !z.EncBinary()
			yy2arr3298 := z.EncBasicHandle().StructToArray
			var yyq3298 [4]bool
			_, _, _ = yysep3298, yyq3298, yy2arr3298
			const yyr3298 bool = false
			yyq3298[0] = x.Kind != ""
			yyq3298[1] = x.APIVersion != ""
			yyq3298[2] = true
			if yyr3298 || yy2arr3298 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3298 int = 1
				for _, b := range yyq3298 {
					if b {
						yynn3298++
					}
				}
				r.EncodeMapStart(yynn3298)
			}
			if yyr3298 || yy2arr3298 {
				if yyq3298[0] {
					yym3300 := z.EncBinary()
					_ = yym3300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3298[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3301 := z.EncBinary()
					_ = yym3301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3298 || yy2arr3298 {
				if yyq3298[1] {
					yym3303 := z.EncBinary()
					_ = yym3303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3298[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3304 := z.EncBinary()
					_ = yym3304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3298 || yy2arr3298 {
				if yyq3298[2] {
					yy3306 := &x.ListMeta
					yym3307 := z.EncBinary()
					_ = yym3307
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3306) {
					} else {
						z.EncFallback(yy3306)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3298[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3308 := &x.ListMeta
					yym3309 := z.EncBinary()
					_ = yym3309
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3308) {
					} else {
						z.EncFallback(yy3308)
					}
				}
			}
			if yyr3298 || yy2arr3298 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3311 := z.EncBinary()
					_ = yym3311
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3312 := z.EncBinary()
					_ = yym3312
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3298 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3313 := z.DecBinary()
	_ = yym3313
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3314 := r.ReadMapStart()
			if yyl3314 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3314, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3314 := r.ReadArrayStart()
			if yyl3314 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3314, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3315Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3315Slc
	var yyhl3315 bool = l >= 0
	for yyj3315 := 0; ; yyj3315++ {
		if yyhl3315 {
			if yyj3315 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3315Slc = r.DecodeBytes(yys3315Slc, true, true)
		yys3315 := string(yys3315Slc)
		switch yys3315 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3318 := &x.ListMeta
				yym3319 := z.DecBinary()
				_ = yym3319
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3318) {
				} else {
					z.DecFallback(yyv3318, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3320 := &x.Items
				yym3321 := z.DecBinary()
				_ = yym3321
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3320), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3315)
		} // end switch yys3315
	} // end for yyj3315
	if !yyhl3315 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3322 int
	var yyb3322 bool
	var yyhl3322 bool = l >= 0
	yyj3322++
	if yyhl3322 {
		yyb3322 = yyj3322 > l
	} else {
		yyb3322 = r.CheckBreak()
	}
	if yyb3322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3322++
	if yyhl3322 {
		yyb3322 = yyj3322 > l
	} else {
		yyb3322 = r.CheckBreak()
	}
	if yyb3322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3322++
	if yyhl3322 {
		yyb3322 = yyj3322 > l
	} else {
		yyb3322 = r.CheckBreak()
	}
	if yyb3322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3325 := &x.ListMeta
		yym3326 := z.DecBinary()
		_ = yym3326
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3325) {
		} else {
			z.DecFallback(yyv3325, false)
		}
	}
	yyj3322++
	if yyhl3322 {
		yyb3322 = yyj3322 > l
	} else {
		yyb3322 = r.CheckBreak()
	}
	if yyb3322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3327 := &x.Items
		yym3328 := z.DecBinary()
		_ = yym3328
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3327), d)
		}
	}
	for {
		yyj3322++
		if yyhl3322 {
			yyb3322 = yyj3322 > l
		} else {
			yyb3322 = r.CheckBreak()
		}
		if yyb3322 {
			break
		}
		z.DecStructFieldNotFound(yyj3322-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3329 := z.EncBinary()
		_ = yym3329
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3330 := !z.EncBinary()
			yy2arr3330 := z.EncBasicHandle().StructToArray
			var yyq3330 [5]bool
			_, _, _ = yysep3330, yyq3330, yy2arr3330
			const yyr3330 bool = false
			yyq3330[0] = x.Capabilities != nil
			yyq3330[1] = x.Privileged != nil
			yyq3330[2] = x.SELinuxOptions != nil
			yyq3330[3] = x.RunAsUser != nil
			if yyr3330 || yy2arr3330 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3330 int = 1
				for _, b := range yyq3330 {
					if b {
						yynn3330++
					}
				}
				r.EncodeMapStart(yynn3330)
			}
			if yyr3330 || yy2arr3330 {
				if yyq3330[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3330[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3330 || yy2arr3330 {
				if yyq3330[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3333 := *x.Privileged
						yym3334 := z.EncBinary()
						_ = yym3334
						if false {
						} else {
							r.EncodeBool(bool(yy3333))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3330[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3335 := *x.Privileged
						yym3336 := z.EncBinary()
						_ = yym3336
						if false {
						} else {
							r.EncodeBool(bool(yy3335))
						}
					}
				}
			}
			if yyr3330 || yy2arr3330 {
				if yyq3330[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3330[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3330 || yy2arr3330 {
				if yyq3330[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3339 := *x.RunAsUser
						yym3340 := z.EncBinary()
						_ = yym3340
						if false {
						} else {
							r.EncodeInt(int64(yy3339))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3330[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3341 := *x.RunAsUser
						yym3342 := z.EncBinary()
						_ = yym3342
						if false {
						} else {
							r.EncodeInt(int64(yy3341))
						}
					}
				}
			}
			if yyr3330 || yy2arr3330 {
				yym3344 := z.EncBinary()
				_ = yym3344
				if false {
				} else {
					r.EncodeBool(bool(x.RunAsNonRoot))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("RunAsNonRoot"))
				yym3345 := z.EncBinary()
				_ = yym3345
				if false {
				} else {
					r.EncodeBool(bool(x.RunAsNonRoot))
				}
			}
			if yysep3330 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3346 := z.DecBinary()
	_ = yym3346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3347 := r.ReadMapStart()
			if yyl3347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3347, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3347 := r.ReadArrayStart()
			if yyl3347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3348Slc
	var yyhl3348 bool = l >= 0
	for yyj3348 := 0; ; yyj3348++ {
		if yyhl3348 {
			if yyj3348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3348Slc = r.DecodeBytes(yys3348Slc, true, true)
		yys3348 := string(yys3348Slc)
		switch yys3348 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3351 := z.DecBinary()
				_ = yym3351
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3354 := z.DecBinary()
				_ = yym3354
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "RunAsNonRoot":
			if r.TryDecodeAsNil() {
				x.RunAsNonRoot = false
			} else {
				x.RunAsNonRoot = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3348)
		} // end switch yys3348
	} // end for yyj3348
	if !yyhl3348 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3356 int
	var yyb3356 bool
	var yyhl3356 bool = l >= 0
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3359 := z.DecBinary()
		_ = yym3359
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3362 := z.DecBinary()
		_ = yym3362
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RunAsNonRoot = false
	} else {
		x.RunAsNonRoot = bool(r.DecodeBool())
	}
	for {
		yyj3356++
		if yyhl3356 {
			yyb3356 = yyj3356 > l
		} else {
			yyb3356 = r.CheckBreak()
		}
		if yyb3356 {
			break
		}
		z.DecStructFieldNotFound(yyj3356-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3364 := z.EncBinary()
		_ = yym3364
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3365 := !z.EncBinary()
			yy2arr3365 := z.EncBasicHandle().StructToArray
			var yyq3365 [4]bool
			_, _, _ = yysep3365, yyq3365, yy2arr3365
			const yyr3365 bool = false
			yyq3365[0] = x.User != ""
			yyq3365[1] = x.Role != ""
			yyq3365[2] = x.Type != ""
			yyq3365[3] = x.Level != ""
			if yyr3365 || yy2arr3365 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3365 int = 0
				for _, b := range yyq3365 {
					if b {
						yynn3365++
					}
				}
				r.EncodeMapStart(yynn3365)
			}
			if yyr3365 || yy2arr3365 {
				if yyq3365[0] {
					yym3367 := z.EncBinary()
					_ = yym3367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3365[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3368 := z.EncBinary()
					_ = yym3368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3365 || yy2arr3365 {
				if yyq3365[1] {
					yym3370 := z.EncBinary()
					_ = yym3370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3365[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3365 || yy2arr3365 {
				if yyq3365[2] {
					yym3373 := z.EncBinary()
					_ = yym3373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3365[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3374 := z.EncBinary()
					_ = yym3374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3365 || yy2arr3365 {
				if yyq3365[3] {
					yym3376 := z.EncBinary()
					_ = yym3376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3365[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3377 := z.EncBinary()
					_ = yym3377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3365 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3378 := z.DecBinary()
	_ = yym3378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3379 := r.ReadMapStart()
			if yyl3379 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3379, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3379 := r.ReadArrayStart()
			if yyl3379 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3380Slc
	var yyhl3380 bool = l >= 0
	for yyj3380 := 0; ; yyj3380++ {
		if yyhl3380 {
			if yyj3380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3380Slc = r.DecodeBytes(yys3380Slc, true, true)
		yys3380 := string(yys3380Slc)
		switch yys3380 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3380)
		} // end switch yys3380
	} // end for yyj3380
	if !yyhl3380 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3385 int
	var yyb3385 bool
	var yyhl3385 bool = l >= 0
	yyj3385++
	if yyhl3385 {
		yyb3385 = yyj3385 > l
	} else {
		yyb3385 = r.CheckBreak()
	}
	if yyb3385 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3385++
	if yyhl3385 {
		yyb3385 = yyj3385 > l
	} else {
		yyb3385 = r.CheckBreak()
	}
	if yyb3385 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3385++
	if yyhl3385 {
		yyb3385 = yyj3385 > l
	} else {
		yyb3385 = r.CheckBreak()
	}
	if yyb3385 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3385++
	if yyhl3385 {
		yyb3385 = yyj3385 > l
	} else {
		yyb3385 = r.CheckBreak()
	}
	if yyb3385 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3385++
		if yyhl3385 {
			yyb3385 = yyj3385 > l
		} else {
			yyb3385 = r.CheckBreak()
		}
		if yyb3385 {
			break
		}
		z.DecStructFieldNotFound(yyj3385-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3390 := z.EncBinary()
		_ = yym3390
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3391 := !z.EncBinary()
			yy2arr3391 := z.EncBasicHandle().StructToArray
			var yyq3391 [5]bool
			_, _, _ = yysep3391, yyq3391, yy2arr3391
			const yyr3391 bool = false
			yyq3391[0] = x.Kind != ""
			yyq3391[1] = x.APIVersion != ""
			yyq3391[2] = true
			if yyr3391 || yy2arr3391 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3391 int = 2
				for _, b := range yyq3391 {
					if b {
						yynn3391++
					}
				}
				r.EncodeMapStart(yynn3391)
			}
			if yyr3391 || yy2arr3391 {
				if yyq3391[0] {
					yym3393 := z.EncBinary()
					_ = yym3393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3391[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3394 := z.EncBinary()
					_ = yym3394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3391 || yy2arr3391 {
				if yyq3391[1] {
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3391[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3397 := z.EncBinary()
					_ = yym3397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3391 || yy2arr3391 {
				if yyq3391[2] {
					yy3399 := &x.ObjectMeta
					yy3399.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3391[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3400 := &x.ObjectMeta
					yy3400.CodecEncodeSelf(e)
				}
			}
			if yyr3391 || yy2arr3391 {
				yym3402 := z.EncBinary()
				_ = yym3402
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3403 := z.EncBinary()
				_ = yym3403
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3391 || yy2arr3391 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3405 := z.EncBinary()
					_ = yym3405
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3406 := z.EncBinary()
					_ = yym3406
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3391 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3407 := z.DecBinary()
	_ = yym3407
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3408 := r.ReadMapStart()
			if yyl3408 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3408, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3408 := r.ReadArrayStart()
			if yyl3408 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3408, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3409Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3409Slc
	var yyhl3409 bool = l >= 0
	for yyj3409 := 0; ; yyj3409++ {
		if yyhl3409 {
			if yyj3409 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3409Slc = r.DecodeBytes(yys3409Slc, true, true)
		yys3409 := string(yys3409Slc)
		switch yys3409 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3412 := &x.ObjectMeta
				yyv3412.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3414 := &x.Data
				yym3415 := z.DecBinary()
				_ = yym3415
				if false {
				} else {
					*yyv3414 = r.DecodeBytes(*(*[]byte)(yyv3414), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3409)
		} // end switch yys3409
	} // end for yyj3409
	if !yyhl3409 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3416 int
	var yyb3416 bool
	var yyhl3416 bool = l >= 0
	yyj3416++
	if yyhl3416 {
		yyb3416 = yyj3416 > l
	} else {
		yyb3416 = r.CheckBreak()
	}
	if yyb3416 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3416++
	if yyhl3416 {
		yyb3416 = yyj3416 > l
	} else {
		yyb3416 = r.CheckBreak()
	}
	if yyb3416 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3416++
	if yyhl3416 {
		yyb3416 = yyj3416 > l
	} else {
		yyb3416 = r.CheckBreak()
	}
	if yyb3416 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3419 := &x.ObjectMeta
		yyv3419.CodecDecodeSelf(d)
	}
	yyj3416++
	if yyhl3416 {
		yyb3416 = yyj3416 > l
	} else {
		yyb3416 = r.CheckBreak()
	}
	if yyb3416 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3416++
	if yyhl3416 {
		yyb3416 = yyj3416 > l
	} else {
		yyb3416 = r.CheckBreak()
	}
	if yyb3416 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3421 := &x.Data
		yym3422 := z.DecBinary()
		_ = yym3422
		if false {
		} else {
			*yyv3421 = r.DecodeBytes(*(*[]byte)(yyv3421), false, false)
		}
	}
	for {
		yyj3416++
		if yyhl3416 {
			yyb3416 = yyj3416 > l
		} else {
			yyb3416 = r.CheckBreak()
		}
		if yyb3416 {
			break
		}
		z.DecStructFieldNotFound(yyj3416-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3423 := range v {
		yyv3423.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3424 := *v
	yyh3424, yyl3424 := z.DecSliceHelperStart()

	var yyrr3424, yyrl3424 int
	var yyc3424, yyrt3424 bool
	_, _, _ = yyc3424, yyrt3424, yyrl3424
	yyrr3424 = yyl3424

	if yyv3424 == nil {
		if yyrl3424, yyrt3424 = z.DecInferLen(yyl3424, z.DecBasicHandle().MaxInitLen, 16); yyrt3424 {
			yyrr3424 = yyrl3424
		}
		yyv3424 = make([]PersistentVolumeAccessMode, yyrl3424)
		yyc3424 = true
	}

	if yyl3424 == 0 {
		if len(yyv3424) != 0 {
			yyv3424 = yyv3424[:0]
			yyc3424 = true
		}
	} else if yyl3424 > 0 {

		if yyl3424 > cap(yyv3424) {
			yyrl3424, yyrt3424 = z.DecInferLen(yyl3424, z.DecBasicHandle().MaxInitLen, 16)

			yyv23424 := yyv3424
			yyv3424 = make([]PersistentVolumeAccessMode, yyrl3424)
			if len(yyv3424) > 0 {
				copy(yyv3424, yyv23424[:cap(yyv23424)])
			}
			yyc3424 = true

			yyrr3424 = len(yyv3424)
		} else if yyl3424 != len(yyv3424) {
			yyv3424 = yyv3424[:yyl3424]
			yyc3424 = true
		}
		yyj3424 := 0
		for ; yyj3424 < yyrr3424; yyj3424++ {
			if r.TryDecodeAsNil() {
				yyv3424[yyj3424] = ""
			} else {
				yyv3424[yyj3424] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3424 {
			for ; yyj3424 < yyl3424; yyj3424++ {
				yyv3424 = append(yyv3424, "")
				if r.TryDecodeAsNil() {
					yyv3424[yyj3424] = ""
				} else {
					yyv3424[yyj3424] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3424 := 0; !r.CheckBreak(); yyj3424++ {
			if yyj3424 >= len(yyv3424) {
				yyv3424 = append(yyv3424, "") // var yyz3424 PersistentVolumeAccessMode
				yyc3424 = true
			}

			if yyj3424 < len(yyv3424) {
				if r.TryDecodeAsNil() {
					yyv3424[yyj3424] = ""
				} else {
					yyv3424[yyj3424] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3424.End()
	}
	if yyc3424 {
		*v = yyv3424
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3428 := range v {
		yy3429 := &yyv3428
		yy3429.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3430 := *v
	yyh3430, yyl3430 := z.DecSliceHelperStart()

	var yyrr3430, yyrl3430 int
	var yyc3430, yyrt3430 bool
	_, _, _ = yyc3430, yyrt3430, yyrl3430
	yyrr3430 = yyl3430

	if yyv3430 == nil {
		if yyrl3430, yyrt3430 = z.DecInferLen(yyl3430, z.DecBasicHandle().MaxInitLen, 384); yyrt3430 {
			yyrr3430 = yyrl3430
		}
		yyv3430 = make([]PersistentVolume, yyrl3430)
		yyc3430 = true
	}

	if yyl3430 == 0 {
		if len(yyv3430) != 0 {
			yyv3430 = yyv3430[:0]
			yyc3430 = true
		}
	} else if yyl3430 > 0 {

		if yyl3430 > cap(yyv3430) {
			yyrl3430, yyrt3430 = z.DecInferLen(yyl3430, z.DecBasicHandle().MaxInitLen, 384)
			yyv3430 = make([]PersistentVolume, yyrl3430)
			yyc3430 = true

			yyrr3430 = len(yyv3430)
		} else if yyl3430 != len(yyv3430) {
			yyv3430 = yyv3430[:yyl3430]
			yyc3430 = true
		}
		yyj3430 := 0
		for ; yyj3430 < yyrr3430; yyj3430++ {
			if r.TryDecodeAsNil() {
				yyv3430[yyj3430] = PersistentVolume{}
			} else {
				yyv3431 := &yyv3430[yyj3430]
				yyv3431.CodecDecodeSelf(d)
			}

		}
		if yyrt3430 {
			for ; yyj3430 < yyl3430; yyj3430++ {
				yyv3430 = append(yyv3430, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3430[yyj3430] = PersistentVolume{}
				} else {
					yyv3432 := &yyv3430[yyj3430]
					yyv3432.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3430 := 0; !r.CheckBreak(); yyj3430++ {
			if yyj3430 >= len(yyv3430) {
				yyv3430 = append(yyv3430, PersistentVolume{}) // var yyz3430 PersistentVolume
				yyc3430 = true
			}

			if yyj3430 < len(yyv3430) {
				if r.TryDecodeAsNil() {
					yyv3430[yyj3430] = PersistentVolume{}
				} else {
					yyv3433 := &yyv3430[yyj3430]
					yyv3433.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3430.End()
	}
	if yyc3430 {
		*v = yyv3430
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3434 := range v {
		yy3435 := &yyv3434
		yy3435.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3436 := *v
	yyh3436, yyl3436 := z.DecSliceHelperStart()

	var yyrr3436, yyrl3436 int
	var yyc3436, yyrt3436 bool
	_, _, _ = yyc3436, yyrt3436, yyrl3436
	yyrr3436 = yyl3436

	if yyv3436 == nil {
		if yyrl3436, yyrt3436 = z.DecInferLen(yyl3436, z.DecBasicHandle().MaxInitLen, 296); yyrt3436 {
			yyrr3436 = yyrl3436
		}
		yyv3436 = make([]PersistentVolumeClaim, yyrl3436)
		yyc3436 = true
	}

	if yyl3436 == 0 {
		if len(yyv3436) != 0 {
			yyv3436 = yyv3436[:0]
			yyc3436 = true
		}
	} else if yyl3436 > 0 {

		if yyl3436 > cap(yyv3436) {
			yyrl3436, yyrt3436 = z.DecInferLen(yyl3436, z.DecBasicHandle().MaxInitLen, 296)
			yyv3436 = make([]PersistentVolumeClaim, yyrl3436)
			yyc3436 = true

			yyrr3436 = len(yyv3436)
		} else if yyl3436 != len(yyv3436) {
			yyv3436 = yyv3436[:yyl3436]
			yyc3436 = true
		}
		yyj3436 := 0
		for ; yyj3436 < yyrr3436; yyj3436++ {
			if r.TryDecodeAsNil() {
				yyv3436[yyj3436] = PersistentVolumeClaim{}
			} else {
				yyv3437 := &yyv3436[yyj3436]
				yyv3437.CodecDecodeSelf(d)
			}

		}
		if yyrt3436 {
			for ; yyj3436 < yyl3436; yyj3436++ {
				yyv3436 = append(yyv3436, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3436[yyj3436] = PersistentVolumeClaim{}
				} else {
					yyv3438 := &yyv3436[yyj3436]
					yyv3438.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3436 := 0; !r.CheckBreak(); yyj3436++ {
			if yyj3436 >= len(yyv3436) {
				yyv3436 = append(yyv3436, PersistentVolumeClaim{}) // var yyz3436 PersistentVolumeClaim
				yyc3436 = true
			}

			if yyj3436 < len(yyv3436) {
				if r.TryDecodeAsNil() {
					yyv3436[yyj3436] = PersistentVolumeClaim{}
				} else {
					yyv3439 := &yyv3436[yyj3436]
					yyv3439.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3436.End()
	}
	if yyc3436 {
		*v = yyv3436
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3440 := range v {
		yy3441 := &yyv3440
		yy3441.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3442 := *v
	yyh3442, yyl3442 := z.DecSliceHelperStart()

	var yyrr3442, yyrl3442 int
	var yyc3442, yyrt3442 bool
	_, _, _ = yyc3442, yyrt3442, yyrl3442
	yyrr3442 = yyl3442

	if yyv3442 == nil {
		if yyrl3442, yyrt3442 = z.DecInferLen(yyl3442, z.DecBasicHandle().MaxInitLen, 48); yyrt3442 {
			yyrr3442 = yyrl3442
		}
		yyv3442 = make([]DownwardAPIVolumeFile, yyrl3442)
		yyc3442 = true
	}

	if yyl3442 == 0 {
		if len(yyv3442) != 0 {
			yyv3442 = yyv3442[:0]
			yyc3442 = true
		}
	} else if yyl3442 > 0 {

		if yyl3442 > cap(yyv3442) {
			yyrl3442, yyrt3442 = z.DecInferLen(yyl3442, z.DecBasicHandle().MaxInitLen, 48)
			yyv3442 = make([]DownwardAPIVolumeFile, yyrl3442)
			yyc3442 = true

			yyrr3442 = len(yyv3442)
		} else if yyl3442 != len(yyv3442) {
			yyv3442 = yyv3442[:yyl3442]
			yyc3442 = true
		}
		yyj3442 := 0
		for ; yyj3442 < yyrr3442; yyj3442++ {
			if r.TryDecodeAsNil() {
				yyv3442[yyj3442] = DownwardAPIVolumeFile{}
			} else {
				yyv3443 := &yyv3442[yyj3442]
				yyv3443.CodecDecodeSelf(d)
			}

		}
		if yyrt3442 {
			for ; yyj3442 < yyl3442; yyj3442++ {
				yyv3442 = append(yyv3442, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3442[yyj3442] = DownwardAPIVolumeFile{}
				} else {
					yyv3444 := &yyv3442[yyj3442]
					yyv3444.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3442 := 0; !r.CheckBreak(); yyj3442++ {
			if yyj3442 >= len(yyv3442) {
				yyv3442 = append(yyv3442, DownwardAPIVolumeFile{}) // var yyz3442 DownwardAPIVolumeFile
				yyc3442 = true
			}

			if yyj3442 < len(yyv3442) {
				if r.TryDecodeAsNil() {
					yyv3442[yyj3442] = DownwardAPIVolumeFile{}
				} else {
					yyv3445 := &yyv3442[yyj3442]
					yyv3445.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3442.End()
	}
	if yyc3442 {
		*v = yyv3442
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3446 := range v {
		yyv3446.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3447 := *v
	yyh3447, yyl3447 := z.DecSliceHelperStart()

	var yyrr3447, yyrl3447 int
	var yyc3447, yyrt3447 bool
	_, _, _ = yyc3447, yyrt3447, yyrl3447
	yyrr3447 = yyl3447

	if yyv3447 == nil {
		if yyrl3447, yyrt3447 = z.DecInferLen(yyl3447, z.DecBasicHandle().MaxInitLen, 16); yyrt3447 {
			yyrr3447 = yyrl3447
		}
		yyv3447 = make([]Capability, yyrl3447)
		yyc3447 = true
	}

	if yyl3447 == 0 {
		if len(yyv3447) != 0 {
			yyv3447 = yyv3447[:0]
			yyc3447 = true
		}
	} else if yyl3447 > 0 {

		if yyl3447 > cap(yyv3447) {
			yyrl3447, yyrt3447 = z.DecInferLen(yyl3447, z.DecBasicHandle().MaxInitLen, 16)

			yyv23447 := yyv3447
			yyv3447 = make([]Capability, yyrl3447)
			if len(yyv3447) > 0 {
				copy(yyv3447, yyv23447[:cap(yyv23447)])
			}
			yyc3447 = true

			yyrr3447 = len(yyv3447)
		} else if yyl3447 != len(yyv3447) {
			yyv3447 = yyv3447[:yyl3447]
			yyc3447 = true
		}
		yyj3447 := 0
		for ; yyj3447 < yyrr3447; yyj3447++ {
			if r.TryDecodeAsNil() {
				yyv3447[yyj3447] = ""
			} else {
				yyv3447[yyj3447] = Capability(r.DecodeString())
			}

		}
		if yyrt3447 {
			for ; yyj3447 < yyl3447; yyj3447++ {
				yyv3447 = append(yyv3447, "")
				if r.TryDecodeAsNil() {
					yyv3447[yyj3447] = ""
				} else {
					yyv3447[yyj3447] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3447 := 0; !r.CheckBreak(); yyj3447++ {
			if yyj3447 >= len(yyv3447) {
				yyv3447 = append(yyv3447, "") // var yyz3447 Capability
				yyc3447 = true
			}

			if yyj3447 < len(yyv3447) {
				if r.TryDecodeAsNil() {
					yyv3447[yyj3447] = ""
				} else {
					yyv3447[yyj3447] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3447.End()
	}
	if yyc3447 {
		*v = yyv3447
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3451 := range v {
		yy3452 := &yyv3451
		yy3452.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3453 := *v
	yyh3453, yyl3453 := z.DecSliceHelperStart()

	var yyrr3453, yyrl3453 int
	var yyc3453, yyrt3453 bool
	_, _, _ = yyc3453, yyrt3453, yyrl3453
	yyrr3453 = yyl3453

	if yyv3453 == nil {
		if yyrl3453, yyrt3453 = z.DecInferLen(yyl3453, z.DecBasicHandle().MaxInitLen, 64); yyrt3453 {
			yyrr3453 = yyrl3453
		}
		yyv3453 = make([]ContainerPort, yyrl3453)
		yyc3453 = true
	}

	if yyl3453 == 0 {
		if len(yyv3453) != 0 {
			yyv3453 = yyv3453[:0]
			yyc3453 = true
		}
	} else if yyl3453 > 0 {

		if yyl3453 > cap(yyv3453) {
			yyrl3453, yyrt3453 = z.DecInferLen(yyl3453, z.DecBasicHandle().MaxInitLen, 64)
			yyv3453 = make([]ContainerPort, yyrl3453)
			yyc3453 = true

			yyrr3453 = len(yyv3453)
		} else if yyl3453 != len(yyv3453) {
			yyv3453 = yyv3453[:yyl3453]
			yyc3453 = true
		}
		yyj3453 := 0
		for ; yyj3453 < yyrr3453; yyj3453++ {
			if r.TryDecodeAsNil() {
				yyv3453[yyj3453] = ContainerPort{}
			} else {
				yyv3454 := &yyv3453[yyj3453]
				yyv3454.CodecDecodeSelf(d)
			}

		}
		if yyrt3453 {
			for ; yyj3453 < yyl3453; yyj3453++ {
				yyv3453 = append(yyv3453, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3453[yyj3453] = ContainerPort{}
				} else {
					yyv3455 := &yyv3453[yyj3453]
					yyv3455.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3453 := 0; !r.CheckBreak(); yyj3453++ {
			if yyj3453 >= len(yyv3453) {
				yyv3453 = append(yyv3453, ContainerPort{}) // var yyz3453 ContainerPort
				yyc3453 = true
			}

			if yyj3453 < len(yyv3453) {
				if r.TryDecodeAsNil() {
					yyv3453[yyj3453] = ContainerPort{}
				} else {
					yyv3456 := &yyv3453[yyj3453]
					yyv3456.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3453.End()
	}
	if yyc3453 {
		*v = yyv3453
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3457 := range v {
		yy3458 := &yyv3457
		yy3458.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3459 := *v
	yyh3459, yyl3459 := z.DecSliceHelperStart()

	var yyrr3459, yyrl3459 int
	var yyc3459, yyrt3459 bool
	_, _, _ = yyc3459, yyrt3459, yyrl3459
	yyrr3459 = yyl3459

	if yyv3459 == nil {
		if yyrl3459, yyrt3459 = z.DecInferLen(yyl3459, z.DecBasicHandle().MaxInitLen, 40); yyrt3459 {
			yyrr3459 = yyrl3459
		}
		yyv3459 = make([]EnvVar, yyrl3459)
		yyc3459 = true
	}

	if yyl3459 == 0 {
		if len(yyv3459) != 0 {
			yyv3459 = yyv3459[:0]
			yyc3459 = true
		}
	} else if yyl3459 > 0 {

		if yyl3459 > cap(yyv3459) {
			yyrl3459, yyrt3459 = z.DecInferLen(yyl3459, z.DecBasicHandle().MaxInitLen, 40)
			yyv3459 = make([]EnvVar, yyrl3459)
			yyc3459 = true

			yyrr3459 = len(yyv3459)
		} else if yyl3459 != len(yyv3459) {
			yyv3459 = yyv3459[:yyl3459]
			yyc3459 = true
		}
		yyj3459 := 0
		for ; yyj3459 < yyrr3459; yyj3459++ {
			if r.TryDecodeAsNil() {
				yyv3459[yyj3459] = EnvVar{}
			} else {
				yyv3460 := &yyv3459[yyj3459]
				yyv3460.CodecDecodeSelf(d)
			}

		}
		if yyrt3459 {
			for ; yyj3459 < yyl3459; yyj3459++ {
				yyv3459 = append(yyv3459, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3459[yyj3459] = EnvVar{}
				} else {
					yyv3461 := &yyv3459[yyj3459]
					yyv3461.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3459 := 0; !r.CheckBreak(); yyj3459++ {
			if yyj3459 >= len(yyv3459) {
				yyv3459 = append(yyv3459, EnvVar{}) // var yyz3459 EnvVar
				yyc3459 = true
			}

			if yyj3459 < len(yyv3459) {
				if r.TryDecodeAsNil() {
					yyv3459[yyj3459] = EnvVar{}
				} else {
					yyv3462 := &yyv3459[yyj3459]
					yyv3462.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3459.End()
	}
	if yyc3459 {
		*v = yyv3459
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3463 := range v {
		yy3464 := &yyv3463
		yy3464.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3465 := *v
	yyh3465, yyl3465 := z.DecSliceHelperStart()

	var yyrr3465, yyrl3465 int
	var yyc3465, yyrt3465 bool
	_, _, _ = yyc3465, yyrt3465, yyrl3465
	yyrr3465 = yyl3465

	if yyv3465 == nil {
		if yyrl3465, yyrt3465 = z.DecInferLen(yyl3465, z.DecBasicHandle().MaxInitLen, 40); yyrt3465 {
			yyrr3465 = yyrl3465
		}
		yyv3465 = make([]VolumeMount, yyrl3465)
		yyc3465 = true
	}

	if yyl3465 == 0 {
		if len(yyv3465) != 0 {
			yyv3465 = yyv3465[:0]
			yyc3465 = true
		}
	} else if yyl3465 > 0 {

		if yyl3465 > cap(yyv3465) {
			yyrl3465, yyrt3465 = z.DecInferLen(yyl3465, z.DecBasicHandle().MaxInitLen, 40)
			yyv3465 = make([]VolumeMount, yyrl3465)
			yyc3465 = true

			yyrr3465 = len(yyv3465)
		} else if yyl3465 != len(yyv3465) {
			yyv3465 = yyv3465[:yyl3465]
			yyc3465 = true
		}
		yyj3465 := 0
		for ; yyj3465 < yyrr3465; yyj3465++ {
			if r.TryDecodeAsNil() {
				yyv3465[yyj3465] = VolumeMount{}
			} else {
				yyv3466 := &yyv3465[yyj3465]
				yyv3466.CodecDecodeSelf(d)
			}

		}
		if yyrt3465 {
			for ; yyj3465 < yyl3465; yyj3465++ {
				yyv3465 = append(yyv3465, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3465[yyj3465] = VolumeMount{}
				} else {
					yyv3467 := &yyv3465[yyj3465]
					yyv3467.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3465 := 0; !r.CheckBreak(); yyj3465++ {
			if yyj3465 >= len(yyv3465) {
				yyv3465 = append(yyv3465, VolumeMount{}) // var yyz3465 VolumeMount
				yyc3465 = true
			}

			if yyj3465 < len(yyv3465) {
				if r.TryDecodeAsNil() {
					yyv3465[yyj3465] = VolumeMount{}
				} else {
					yyv3468 := &yyv3465[yyj3465]
					yyv3468.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3465.End()
	}
	if yyc3465 {
		*v = yyv3465
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3469 := range v {
		yy3470 := &yyv3469
		yy3470.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3471 := *v
	yyh3471, yyl3471 := z.DecSliceHelperStart()

	var yyrr3471, yyrl3471 int
	var yyc3471, yyrt3471 bool
	_, _, _ = yyc3471, yyrt3471, yyrl3471
	yyrr3471 = yyl3471

	if yyv3471 == nil {
		if yyrl3471, yyrt3471 = z.DecInferLen(yyl3471, z.DecBasicHandle().MaxInitLen, 496); yyrt3471 {
			yyrr3471 = yyrl3471
		}
		yyv3471 = make([]Pod, yyrl3471)
		yyc3471 = true
	}

	if yyl3471 == 0 {
		if len(yyv3471) != 0 {
			yyv3471 = yyv3471[:0]
			yyc3471 = true
		}
	} else if yyl3471 > 0 {

		if yyl3471 > cap(yyv3471) {
			yyrl3471, yyrt3471 = z.DecInferLen(yyl3471, z.DecBasicHandle().MaxInitLen, 496)
			yyv3471 = make([]Pod, yyrl3471)
			yyc3471 = true

			yyrr3471 = len(yyv3471)
		} else if yyl3471 != len(yyv3471) {
			yyv3471 = yyv3471[:yyl3471]
			yyc3471 = true
		}
		yyj3471 := 0
		for ; yyj3471 < yyrr3471; yyj3471++ {
			if r.TryDecodeAsNil() {
				yyv3471[yyj3471] = Pod{}
			} else {
				yyv3472 := &yyv3471[yyj3471]
				yyv3472.CodecDecodeSelf(d)
			}

		}
		if yyrt3471 {
			for ; yyj3471 < yyl3471; yyj3471++ {
				yyv3471 = append(yyv3471, Pod{})
				if r.TryDecodeAsNil() {
					yyv3471[yyj3471] = Pod{}
				} else {
					yyv3473 := &yyv3471[yyj3471]
					yyv3473.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3471 := 0; !r.CheckBreak(); yyj3471++ {
			if yyj3471 >= len(yyv3471) {
				yyv3471 = append(yyv3471, Pod{}) // var yyz3471 Pod
				yyc3471 = true
			}

			if yyj3471 < len(yyv3471) {
				if r.TryDecodeAsNil() {
					yyv3471[yyj3471] = Pod{}
				} else {
					yyv3474 := &yyv3471[yyj3471]
					yyv3474.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3471.End()
	}
	if yyc3471 {
		*v = yyv3471
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3475 := range v {
		yy3476 := &yyv3475
		yy3476.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3477 := *v
	yyh3477, yyl3477 := z.DecSliceHelperStart()

	var yyrr3477, yyrl3477 int
	var yyc3477, yyrt3477 bool
	_, _, _ = yyc3477, yyrt3477, yyrl3477
	yyrr3477 = yyl3477

	if yyv3477 == nil {
		if yyrl3477, yyrt3477 = z.DecInferLen(yyl3477, z.DecBasicHandle().MaxInitLen, 144); yyrt3477 {
			yyrr3477 = yyrl3477
		}
		yyv3477 = make([]Volume, yyrl3477)
		yyc3477 = true
	}

	if yyl3477 == 0 {
		if len(yyv3477) != 0 {
			yyv3477 = yyv3477[:0]
			yyc3477 = true
		}
	} else if yyl3477 > 0 {

		if yyl3477 > cap(yyv3477) {
			yyrl3477, yyrt3477 = z.DecInferLen(yyl3477, z.DecBasicHandle().MaxInitLen, 144)
			yyv3477 = make([]Volume, yyrl3477)
			yyc3477 = true

			yyrr3477 = len(yyv3477)
		} else if yyl3477 != len(yyv3477) {
			yyv3477 = yyv3477[:yyl3477]
			yyc3477 = true
		}
		yyj3477 := 0
		for ; yyj3477 < yyrr3477; yyj3477++ {
			if r.TryDecodeAsNil() {
				yyv3477[yyj3477] = Volume{}
			} else {
				yyv3478 := &yyv3477[yyj3477]
				yyv3478.CodecDecodeSelf(d)
			}

		}
		if yyrt3477 {
			for ; yyj3477 < yyl3477; yyj3477++ {
				yyv3477 = append(yyv3477, Volume{})
				if r.TryDecodeAsNil() {
					yyv3477[yyj3477] = Volume{}
				} else {
					yyv3479 := &yyv3477[yyj3477]
					yyv3479.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3477 := 0; !r.CheckBreak(); yyj3477++ {
			if yyj3477 >= len(yyv3477) {
				yyv3477 = append(yyv3477, Volume{}) // var yyz3477 Volume
				yyc3477 = true
			}

			if yyj3477 < len(yyv3477) {
				if r.TryDecodeAsNil() {
					yyv3477[yyj3477] = Volume{}
				} else {
					yyv3480 := &yyv3477[yyj3477]
					yyv3480.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3477.End()
	}
	if yyc3477 {
		*v = yyv3477
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3481 := range v {
		yy3482 := &yyv3481
		yy3482.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3483 := *v
	yyh3483, yyl3483 := z.DecSliceHelperStart()

	var yyrr3483, yyrl3483 int
	var yyc3483, yyrt3483 bool
	_, _, _ = yyc3483, yyrt3483, yyrl3483
	yyrr3483 = yyl3483

	if yyv3483 == nil {
		if yyrl3483, yyrt3483 = z.DecInferLen(yyl3483, z.DecBasicHandle().MaxInitLen, 256); yyrt3483 {
			yyrr3483 = yyrl3483
		}
		yyv3483 = make([]Container, yyrl3483)
		yyc3483 = true
	}

	if yyl3483 == 0 {
		if len(yyv3483) != 0 {
			yyv3483 = yyv3483[:0]
			yyc3483 = true
		}
	} else if yyl3483 > 0 {

		if yyl3483 > cap(yyv3483) {
			yyrl3483, yyrt3483 = z.DecInferLen(yyl3483, z.DecBasicHandle().MaxInitLen, 256)
			yyv3483 = make([]Container, yyrl3483)
			yyc3483 = true

			yyrr3483 = len(yyv3483)
		} else if yyl3483 != len(yyv3483) {
			yyv3483 = yyv3483[:yyl3483]
			yyc3483 = true
		}
		yyj3483 := 0
		for ; yyj3483 < yyrr3483; yyj3483++ {
			if r.TryDecodeAsNil() {
				yyv3483[yyj3483] = Container{}
			} else {
				yyv3484 := &yyv3483[yyj3483]
				yyv3484.CodecDecodeSelf(d)
			}

		}
		if yyrt3483 {
			for ; yyj3483 < yyl3483; yyj3483++ {
				yyv3483 = append(yyv3483, Container{})
				if r.TryDecodeAsNil() {
					yyv3483[yyj3483] = Container{}
				} else {
					yyv3485 := &yyv3483[yyj3483]
					yyv3485.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3483 := 0; !r.CheckBreak(); yyj3483++ {
			if yyj3483 >= len(yyv3483) {
				yyv3483 = append(yyv3483, Container{}) // var yyz3483 Container
				yyc3483 = true
			}

			if yyj3483 < len(yyv3483) {
				if r.TryDecodeAsNil() {
					yyv3483[yyj3483] = Container{}
				} else {
					yyv3486 := &yyv3483[yyj3483]
					yyv3486.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3483.End()
	}
	if yyc3483 {
		*v = yyv3483
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3487 := range v {
		yy3488 := &yyv3487
		yy3488.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3489 := *v
	yyh3489, yyl3489 := z.DecSliceHelperStart()

	var yyrr3489, yyrl3489 int
	var yyc3489, yyrt3489 bool
	_, _, _ = yyc3489, yyrt3489, yyrl3489
	yyrr3489 = yyl3489

	if yyv3489 == nil {
		if yyrl3489, yyrt3489 = z.DecInferLen(yyl3489, z.DecBasicHandle().MaxInitLen, 16); yyrt3489 {
			yyrr3489 = yyrl3489
		}
		yyv3489 = make([]LocalObjectReference, yyrl3489)
		yyc3489 = true
	}

	if yyl3489 == 0 {
		if len(yyv3489) != 0 {
			yyv3489 = yyv3489[:0]
			yyc3489 = true
		}
	} else if yyl3489 > 0 {

		if yyl3489 > cap(yyv3489) {
			yyrl3489, yyrt3489 = z.DecInferLen(yyl3489, z.DecBasicHandle().MaxInitLen, 16)
			yyv3489 = make([]LocalObjectReference, yyrl3489)
			yyc3489 = true

			yyrr3489 = len(yyv3489)
		} else if yyl3489 != len(yyv3489) {
			yyv3489 = yyv3489[:yyl3489]
			yyc3489 = true
		}
		yyj3489 := 0
		for ; yyj3489 < yyrr3489; yyj3489++ {
			if r.TryDecodeAsNil() {
				yyv3489[yyj3489] = LocalObjectReference{}
			} else {
				yyv3490 := &yyv3489[yyj3489]
				yyv3490.CodecDecodeSelf(d)
			}

		}
		if yyrt3489 {
			for ; yyj3489 < yyl3489; yyj3489++ {
				yyv3489 = append(yyv3489, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3489[yyj3489] = LocalObjectReference{}
				} else {
					yyv3491 := &yyv3489[yyj3489]
					yyv3491.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3489 := 0; !r.CheckBreak(); yyj3489++ {
			if yyj3489 >= len(yyv3489) {
				yyv3489 = append(yyv3489, LocalObjectReference{}) // var yyz3489 LocalObjectReference
				yyc3489 = true
			}

			if yyj3489 < len(yyv3489) {
				if r.TryDecodeAsNil() {
					yyv3489[yyj3489] = LocalObjectReference{}
				} else {
					yyv3492 := &yyv3489[yyj3489]
					yyv3492.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3489.End()
	}
	if yyc3489 {
		*v = yyv3489
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3493 := range v {
		yy3494 := &yyv3493
		yy3494.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3495 := *v
	yyh3495, yyl3495 := z.DecSliceHelperStart()

	var yyrr3495, yyrl3495 int
	var yyc3495, yyrt3495 bool
	_, _, _ = yyc3495, yyrt3495, yyrl3495
	yyrr3495 = yyl3495

	if yyv3495 == nil {
		if yyrl3495, yyrt3495 = z.DecInferLen(yyl3495, z.DecBasicHandle().MaxInitLen, 112); yyrt3495 {
			yyrr3495 = yyrl3495
		}
		yyv3495 = make([]PodCondition, yyrl3495)
		yyc3495 = true
	}

	if yyl3495 == 0 {
		if len(yyv3495) != 0 {
			yyv3495 = yyv3495[:0]
			yyc3495 = true
		}
	} else if yyl3495 > 0 {

		if yyl3495 > cap(yyv3495) {
			yyrl3495, yyrt3495 = z.DecInferLen(yyl3495, z.DecBasicHandle().MaxInitLen, 112)
			yyv3495 = make([]PodCondition, yyrl3495)
			yyc3495 = true

			yyrr3495 = len(yyv3495)
		} else if yyl3495 != len(yyv3495) {
			yyv3495 = yyv3495[:yyl3495]
			yyc3495 = true
		}
		yyj3495 := 0
		for ; yyj3495 < yyrr3495; yyj3495++ {
			if r.TryDecodeAsNil() {
				yyv3495[yyj3495] = PodCondition{}
			} else {
				yyv3496 := &yyv3495[yyj3495]
				yyv3496.CodecDecodeSelf(d)
			}

		}
		if yyrt3495 {
			for ; yyj3495 < yyl3495; yyj3495++ {
				yyv3495 = append(yyv3495, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3495[yyj3495] = PodCondition{}
				} else {
					yyv3497 := &yyv3495[yyj3495]
					yyv3497.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3495 := 0; !r.CheckBreak(); yyj3495++ {
			if yyj3495 >= len(yyv3495) {
				yyv3495 = append(yyv3495, PodCondition{}) // var yyz3495 PodCondition
				yyc3495 = true
			}

			if yyj3495 < len(yyv3495) {
				if r.TryDecodeAsNil() {
					yyv3495[yyj3495] = PodCondition{}
				} else {
					yyv3498 := &yyv3495[yyj3495]
					yyv3498.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3495.End()
	}
	if yyc3495 {
		*v = yyv3495
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3499 := range v {
		yy3500 := &yyv3499
		yy3500.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3501 := *v
	yyh3501, yyl3501 := z.DecSliceHelperStart()

	var yyrr3501, yyrl3501 int
	var yyc3501, yyrt3501 bool
	_, _, _ = yyc3501, yyrt3501, yyrl3501
	yyrr3501 = yyl3501

	if yyv3501 == nil {
		if yyrl3501, yyrt3501 = z.DecInferLen(yyl3501, z.DecBasicHandle().MaxInitLen, 128); yyrt3501 {
			yyrr3501 = yyrl3501
		}
		yyv3501 = make([]ContainerStatus, yyrl3501)
		yyc3501 = true
	}

	if yyl3501 == 0 {
		if len(yyv3501) != 0 {
			yyv3501 = yyv3501[:0]
			yyc3501 = true
		}
	} else if yyl3501 > 0 {

		if yyl3501 > cap(yyv3501) {
			yyrl3501, yyrt3501 = z.DecInferLen(yyl3501, z.DecBasicHandle().MaxInitLen, 128)
			yyv3501 = make([]ContainerStatus, yyrl3501)
			yyc3501 = true

			yyrr3501 = len(yyv3501)
		} else if yyl3501 != len(yyv3501) {
			yyv3501 = yyv3501[:yyl3501]
			yyc3501 = true
		}
		yyj3501 := 0
		for ; yyj3501 < yyrr3501; yyj3501++ {
			if r.TryDecodeAsNil() {
				yyv3501[yyj3501] = ContainerStatus{}
			} else {
				yyv3502 := &yyv3501[yyj3501]
				yyv3502.CodecDecodeSelf(d)
			}

		}
		if yyrt3501 {
			for ; yyj3501 < yyl3501; yyj3501++ {
				yyv3501 = append(yyv3501, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3501[yyj3501] = ContainerStatus{}
				} else {
					yyv3503 := &yyv3501[yyj3501]
					yyv3503.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3501 := 0; !r.CheckBreak(); yyj3501++ {
			if yyj3501 >= len(yyv3501) {
				yyv3501 = append(yyv3501, ContainerStatus{}) // var yyz3501 ContainerStatus
				yyc3501 = true
			}

			if yyj3501 < len(yyv3501) {
				if r.TryDecodeAsNil() {
					yyv3501[yyj3501] = ContainerStatus{}
				} else {
					yyv3504 := &yyv3501[yyj3501]
					yyv3504.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3501.End()
	}
	if yyc3501 {
		*v = yyv3501
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3505 := range v {
		yy3506 := &yyv3505
		yy3506.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3507 := *v
	yyh3507, yyl3507 := z.DecSliceHelperStart()

	var yyrr3507, yyrl3507 int
	var yyc3507, yyrt3507 bool
	_, _, _ = yyc3507, yyrt3507, yyrl3507
	yyrr3507 = yyl3507

	if yyv3507 == nil {
		if yyrl3507, yyrt3507 = z.DecInferLen(yyl3507, z.DecBasicHandle().MaxInitLen, 520); yyrt3507 {
			yyrr3507 = yyrl3507
		}
		yyv3507 = make([]PodTemplate, yyrl3507)
		yyc3507 = true
	}

	if yyl3507 == 0 {
		if len(yyv3507) != 0 {
			yyv3507 = yyv3507[:0]
			yyc3507 = true
		}
	} else if yyl3507 > 0 {

		if yyl3507 > cap(yyv3507) {
			yyrl3507, yyrt3507 = z.DecInferLen(yyl3507, z.DecBasicHandle().MaxInitLen, 520)
			yyv3507 = make([]PodTemplate, yyrl3507)
			yyc3507 = true

			yyrr3507 = len(yyv3507)
		} else if yyl3507 != len(yyv3507) {
			yyv3507 = yyv3507[:yyl3507]
			yyc3507 = true
		}
		yyj3507 := 0
		for ; yyj3507 < yyrr3507; yyj3507++ {
			if r.TryDecodeAsNil() {
				yyv3507[yyj3507] = PodTemplate{}
			} else {
				yyv3508 := &yyv3507[yyj3507]
				yyv3508.CodecDecodeSelf(d)
			}

		}
		if yyrt3507 {
			for ; yyj3507 < yyl3507; yyj3507++ {
				yyv3507 = append(yyv3507, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3507[yyj3507] = PodTemplate{}
				} else {
					yyv3509 := &yyv3507[yyj3507]
					yyv3509.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3507 := 0; !r.CheckBreak(); yyj3507++ {
			if yyj3507 >= len(yyv3507) {
				yyv3507 = append(yyv3507, PodTemplate{}) // var yyz3507 PodTemplate
				yyc3507 = true
			}

			if yyj3507 < len(yyv3507) {
				if r.TryDecodeAsNil() {
					yyv3507[yyj3507] = PodTemplate{}
				} else {
					yyv3510 := &yyv3507[yyj3507]
					yyv3510.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3507.End()
	}
	if yyc3507 {
		*v = yyv3507
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3511 := range v {
		yy3512 := &yyv3511
		yy3512.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3513 := *v
	yyh3513, yyl3513 := z.DecSliceHelperStart()

	var yyrr3513, yyrl3513 int
	var yyc3513, yyrt3513 bool
	_, _, _ = yyc3513, yyrt3513, yyrl3513
	yyrr3513 = yyl3513

	if yyv3513 == nil {
		if yyrl3513, yyrt3513 = z.DecInferLen(yyl3513, z.DecBasicHandle().MaxInitLen, 232); yyrt3513 {
			yyrr3513 = yyrl3513
		}
		yyv3513 = make([]ReplicationController, yyrl3513)
		yyc3513 = true
	}

	if yyl3513 == 0 {
		if len(yyv3513) != 0 {
			yyv3513 = yyv3513[:0]
			yyc3513 = true
		}
	} else if yyl3513 > 0 {

		if yyl3513 > cap(yyv3513) {
			yyrl3513, yyrt3513 = z.DecInferLen(yyl3513, z.DecBasicHandle().MaxInitLen, 232)
			yyv3513 = make([]ReplicationController, yyrl3513)
			yyc3513 = true

			yyrr3513 = len(yyv3513)
		} else if yyl3513 != len(yyv3513) {
			yyv3513 = yyv3513[:yyl3513]
			yyc3513 = true
		}
		yyj3513 := 0
		for ; yyj3513 < yyrr3513; yyj3513++ {
			if r.TryDecodeAsNil() {
				yyv3513[yyj3513] = ReplicationController{}
			} else {
				yyv3514 := &yyv3513[yyj3513]
				yyv3514.CodecDecodeSelf(d)
			}

		}
		if yyrt3513 {
			for ; yyj3513 < yyl3513; yyj3513++ {
				yyv3513 = append(yyv3513, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3513[yyj3513] = ReplicationController{}
				} else {
					yyv3515 := &yyv3513[yyj3513]
					yyv3515.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3513 := 0; !r.CheckBreak(); yyj3513++ {
			if yyj3513 >= len(yyv3513) {
				yyv3513 = append(yyv3513, ReplicationController{}) // var yyz3513 ReplicationController
				yyc3513 = true
			}

			if yyj3513 < len(yyv3513) {
				if r.TryDecodeAsNil() {
					yyv3513[yyj3513] = ReplicationController{}
				} else {
					yyv3516 := &yyv3513[yyj3513]
					yyv3516.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3513.End()
	}
	if yyc3513 {
		*v = yyv3513
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3517 := range v {
		yy3518 := &yyv3517
		yy3518.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3519 := *v
	yyh3519, yyl3519 := z.DecSliceHelperStart()

	var yyrr3519, yyrl3519 int
	var yyc3519, yyrt3519 bool
	_, _, _ = yyc3519, yyrt3519, yyrl3519
	yyrr3519 = yyl3519

	if yyv3519 == nil {
		if yyrl3519, yyrt3519 = z.DecInferLen(yyl3519, z.DecBasicHandle().MaxInitLen, 336); yyrt3519 {
			yyrr3519 = yyrl3519
		}
		yyv3519 = make([]Service, yyrl3519)
		yyc3519 = true
	}

	if yyl3519 == 0 {
		if len(yyv3519) != 0 {
			yyv3519 = yyv3519[:0]
			yyc3519 = true
		}
	} else if yyl3519 > 0 {

		if yyl3519 > cap(yyv3519) {
			yyrl3519, yyrt3519 = z.DecInferLen(yyl3519, z.DecBasicHandle().MaxInitLen, 336)
			yyv3519 = make([]Service, yyrl3519)
			yyc3519 = true

			yyrr3519 = len(yyv3519)
		} else if yyl3519 != len(yyv3519) {
			yyv3519 = yyv3519[:yyl3519]
			yyc3519 = true
		}
		yyj3519 := 0
		for ; yyj3519 < yyrr3519; yyj3519++ {
			if r.TryDecodeAsNil() {
				yyv3519[yyj3519] = Service{}
			} else {
				yyv3520 := &yyv3519[yyj3519]
				yyv3520.CodecDecodeSelf(d)
			}

		}
		if yyrt3519 {
			for ; yyj3519 < yyl3519; yyj3519++ {
				yyv3519 = append(yyv3519, Service{})
				if r.TryDecodeAsNil() {
					yyv3519[yyj3519] = Service{}
				} else {
					yyv3521 := &yyv3519[yyj3519]
					yyv3521.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3519 := 0; !r.CheckBreak(); yyj3519++ {
			if yyj3519 >= len(yyv3519) {
				yyv3519 = append(yyv3519, Service{}) // var yyz3519 Service
				yyc3519 = true
			}

			if yyj3519 < len(yyv3519) {
				if r.TryDecodeAsNil() {
					yyv3519[yyj3519] = Service{}
				} else {
					yyv3522 := &yyv3519[yyj3519]
					yyv3522.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3519.End()
	}
	if yyc3519 {
		*v = yyv3519
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3523 := range v {
		yy3524 := &yyv3523
		yy3524.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3525 := *v
	yyh3525, yyl3525 := z.DecSliceHelperStart()

	var yyrr3525, yyrl3525 int
	var yyc3525, yyrt3525 bool
	_, _, _ = yyc3525, yyrt3525, yyrl3525
	yyrr3525 = yyl3525

	if yyv3525 == nil {
		if yyrl3525, yyrt3525 = z.DecInferLen(yyl3525, z.DecBasicHandle().MaxInitLen, 32); yyrt3525 {
			yyrr3525 = yyrl3525
		}
		yyv3525 = make([]LoadBalancerIngress, yyrl3525)
		yyc3525 = true
	}

	if yyl3525 == 0 {
		if len(yyv3525) != 0 {
			yyv3525 = yyv3525[:0]
			yyc3525 = true
		}
	} else if yyl3525 > 0 {

		if yyl3525 > cap(yyv3525) {
			yyrl3525, yyrt3525 = z.DecInferLen(yyl3525, z.DecBasicHandle().MaxInitLen, 32)
			yyv3525 = make([]LoadBalancerIngress, yyrl3525)
			yyc3525 = true

			yyrr3525 = len(yyv3525)
		} else if yyl3525 != len(yyv3525) {
			yyv3525 = yyv3525[:yyl3525]
			yyc3525 = true
		}
		yyj3525 := 0
		for ; yyj3525 < yyrr3525; yyj3525++ {
			if r.TryDecodeAsNil() {
				yyv3525[yyj3525] = LoadBalancerIngress{}
			} else {
				yyv3526 := &yyv3525[yyj3525]
				yyv3526.CodecDecodeSelf(d)
			}

		}
		if yyrt3525 {
			for ; yyj3525 < yyl3525; yyj3525++ {
				yyv3525 = append(yyv3525, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3525[yyj3525] = LoadBalancerIngress{}
				} else {
					yyv3527 := &yyv3525[yyj3525]
					yyv3527.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3525 := 0; !r.CheckBreak(); yyj3525++ {
			if yyj3525 >= len(yyv3525) {
				yyv3525 = append(yyv3525, LoadBalancerIngress{}) // var yyz3525 LoadBalancerIngress
				yyc3525 = true
			}

			if yyj3525 < len(yyv3525) {
				if r.TryDecodeAsNil() {
					yyv3525[yyj3525] = LoadBalancerIngress{}
				} else {
					yyv3528 := &yyv3525[yyj3525]
					yyv3528.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3525.End()
	}
	if yyc3525 {
		*v = yyv3525
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3529 := range v {
		yy3530 := &yyv3529
		yy3530.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3531 := *v
	yyh3531, yyl3531 := z.DecSliceHelperStart()

	var yyrr3531, yyrl3531 int
	var yyc3531, yyrt3531 bool
	_, _, _ = yyc3531, yyrt3531, yyrl3531
	yyrr3531 = yyl3531

	if yyv3531 == nil {
		if yyrl3531, yyrt3531 = z.DecInferLen(yyl3531, z.DecBasicHandle().MaxInitLen, 80); yyrt3531 {
			yyrr3531 = yyrl3531
		}
		yyv3531 = make([]ServicePort, yyrl3531)
		yyc3531 = true
	}

	if yyl3531 == 0 {
		if len(yyv3531) != 0 {
			yyv3531 = yyv3531[:0]
			yyc3531 = true
		}
	} else if yyl3531 > 0 {

		if yyl3531 > cap(yyv3531) {
			yyrl3531, yyrt3531 = z.DecInferLen(yyl3531, z.DecBasicHandle().MaxInitLen, 80)
			yyv3531 = make([]ServicePort, yyrl3531)
			yyc3531 = true

			yyrr3531 = len(yyv3531)
		} else if yyl3531 != len(yyv3531) {
			yyv3531 = yyv3531[:yyl3531]
			yyc3531 = true
		}
		yyj3531 := 0
		for ; yyj3531 < yyrr3531; yyj3531++ {
			if r.TryDecodeAsNil() {
				yyv3531[yyj3531] = ServicePort{}
			} else {
				yyv3532 := &yyv3531[yyj3531]
				yyv3532.CodecDecodeSelf(d)
			}

		}
		if yyrt3531 {
			for ; yyj3531 < yyl3531; yyj3531++ {
				yyv3531 = append(yyv3531, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3531[yyj3531] = ServicePort{}
				} else {
					yyv3533 := &yyv3531[yyj3531]
					yyv3533.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3531 := 0; !r.CheckBreak(); yyj3531++ {
			if yyj3531 >= len(yyv3531) {
				yyv3531 = append(yyv3531, ServicePort{}) // var yyz3531 ServicePort
				yyc3531 = true
			}

			if yyj3531 < len(yyv3531) {
				if r.TryDecodeAsNil() {
					yyv3531[yyj3531] = ServicePort{}
				} else {
					yyv3534 := &yyv3531[yyj3531]
					yyv3534.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3531.End()
	}
	if yyc3531 {
		*v = yyv3531
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3535 := range v {
		yy3536 := &yyv3535
		yy3536.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3537 := *v
	yyh3537, yyl3537 := z.DecSliceHelperStart()

	var yyrr3537, yyrl3537 int
	var yyc3537, yyrt3537 bool
	_, _, _ = yyc3537, yyrt3537, yyrl3537
	yyrr3537 = yyl3537

	if yyv3537 == nil {
		if yyrl3537, yyrt3537 = z.DecInferLen(yyl3537, z.DecBasicHandle().MaxInitLen, 112); yyrt3537 {
			yyrr3537 = yyrl3537
		}
		yyv3537 = make([]ObjectReference, yyrl3537)
		yyc3537 = true
	}

	if yyl3537 == 0 {
		if len(yyv3537) != 0 {
			yyv3537 = yyv3537[:0]
			yyc3537 = true
		}
	} else if yyl3537 > 0 {

		if yyl3537 > cap(yyv3537) {
			yyrl3537, yyrt3537 = z.DecInferLen(yyl3537, z.DecBasicHandle().MaxInitLen, 112)
			yyv3537 = make([]ObjectReference, yyrl3537)
			yyc3537 = true

			yyrr3537 = len(yyv3537)
		} else if yyl3537 != len(yyv3537) {
			yyv3537 = yyv3537[:yyl3537]
			yyc3537 = true
		}
		yyj3537 := 0
		for ; yyj3537 < yyrr3537; yyj3537++ {
			if r.TryDecodeAsNil() {
				yyv3537[yyj3537] = ObjectReference{}
			} else {
				yyv3538 := &yyv3537[yyj3537]
				yyv3538.CodecDecodeSelf(d)
			}

		}
		if yyrt3537 {
			for ; yyj3537 < yyl3537; yyj3537++ {
				yyv3537 = append(yyv3537, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3537[yyj3537] = ObjectReference{}
				} else {
					yyv3539 := &yyv3537[yyj3537]
					yyv3539.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3537 := 0; !r.CheckBreak(); yyj3537++ {
			if yyj3537 >= len(yyv3537) {
				yyv3537 = append(yyv3537, ObjectReference{}) // var yyz3537 ObjectReference
				yyc3537 = true
			}

			if yyj3537 < len(yyv3537) {
				if r.TryDecodeAsNil() {
					yyv3537[yyj3537] = ObjectReference{}
				} else {
					yyv3540 := &yyv3537[yyj3537]
					yyv3540.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3537.End()
	}
	if yyc3537 {
		*v = yyv3537
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3541 := range v {
		yy3542 := &yyv3541
		yy3542.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3543 := *v
	yyh3543, yyl3543 := z.DecSliceHelperStart()

	var yyrr3543, yyrl3543 int
	var yyc3543, yyrt3543 bool
	_, _, _ = yyc3543, yyrt3543, yyrl3543
	yyrr3543 = yyl3543

	if yyv3543 == nil {
		if yyrl3543, yyrt3543 = z.DecInferLen(yyl3543, z.DecBasicHandle().MaxInitLen, 240); yyrt3543 {
			yyrr3543 = yyrl3543
		}
		yyv3543 = make([]ServiceAccount, yyrl3543)
		yyc3543 = true
	}

	if yyl3543 == 0 {
		if len(yyv3543) != 0 {
			yyv3543 = yyv3543[:0]
			yyc3543 = true
		}
	} else if yyl3543 > 0 {

		if yyl3543 > cap(yyv3543) {
			yyrl3543, yyrt3543 = z.DecInferLen(yyl3543, z.DecBasicHandle().MaxInitLen, 240)
			yyv3543 = make([]ServiceAccount, yyrl3543)
			yyc3543 = true

			yyrr3543 = len(yyv3543)
		} else if yyl3543 != len(yyv3543) {
			yyv3543 = yyv3543[:yyl3543]
			yyc3543 = true
		}
		yyj3543 := 0
		for ; yyj3543 < yyrr3543; yyj3543++ {
			if r.TryDecodeAsNil() {
				yyv3543[yyj3543] = ServiceAccount{}
			} else {
				yyv3544 := &yyv3543[yyj3543]
				yyv3544.CodecDecodeSelf(d)
			}

		}
		if yyrt3543 {
			for ; yyj3543 < yyl3543; yyj3543++ {
				yyv3543 = append(yyv3543, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3543[yyj3543] = ServiceAccount{}
				} else {
					yyv3545 := &yyv3543[yyj3543]
					yyv3545.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3543 := 0; !r.CheckBreak(); yyj3543++ {
			if yyj3543 >= len(yyv3543) {
				yyv3543 = append(yyv3543, ServiceAccount{}) // var yyz3543 ServiceAccount
				yyc3543 = true
			}

			if yyj3543 < len(yyv3543) {
				if r.TryDecodeAsNil() {
					yyv3543[yyj3543] = ServiceAccount{}
				} else {
					yyv3546 := &yyv3543[yyj3543]
					yyv3546.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3543.End()
	}
	if yyc3543 {
		*v = yyv3543
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3547 := range v {
		yy3548 := &yyv3547
		yy3548.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3549 := *v
	yyh3549, yyl3549 := z.DecSliceHelperStart()

	var yyrr3549, yyrl3549 int
	var yyc3549, yyrt3549 bool
	_, _, _ = yyc3549, yyrt3549, yyrl3549
	yyrr3549 = yyl3549

	if yyv3549 == nil {
		if yyrl3549, yyrt3549 = z.DecInferLen(yyl3549, z.DecBasicHandle().MaxInitLen, 72); yyrt3549 {
			yyrr3549 = yyrl3549
		}
		yyv3549 = make([]EndpointSubset, yyrl3549)
		yyc3549 = true
	}

	if yyl3549 == 0 {
		if len(yyv3549) != 0 {
			yyv3549 = yyv3549[:0]
			yyc3549 = true
		}
	} else if yyl3549 > 0 {

		if yyl3549 > cap(yyv3549) {
			yyrl3549, yyrt3549 = z.DecInferLen(yyl3549, z.DecBasicHandle().MaxInitLen, 72)
			yyv3549 = make([]EndpointSubset, yyrl3549)
			yyc3549 = true

			yyrr3549 = len(yyv3549)
		} else if yyl3549 != len(yyv3549) {
			yyv3549 = yyv3549[:yyl3549]
			yyc3549 = true
		}
		yyj3549 := 0
		for ; yyj3549 < yyrr3549; yyj3549++ {
			if r.TryDecodeAsNil() {
				yyv3549[yyj3549] = EndpointSubset{}
			} else {
				yyv3550 := &yyv3549[yyj3549]
				yyv3550.CodecDecodeSelf(d)
			}

		}
		if yyrt3549 {
			for ; yyj3549 < yyl3549; yyj3549++ {
				yyv3549 = append(yyv3549, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3549[yyj3549] = EndpointSubset{}
				} else {
					yyv3551 := &yyv3549[yyj3549]
					yyv3551.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3549 := 0; !r.CheckBreak(); yyj3549++ {
			if yyj3549 >= len(yyv3549) {
				yyv3549 = append(yyv3549, EndpointSubset{}) // var yyz3549 EndpointSubset
				yyc3549 = true
			}

			if yyj3549 < len(yyv3549) {
				if r.TryDecodeAsNil() {
					yyv3549[yyj3549] = EndpointSubset{}
				} else {
					yyv3552 := &yyv3549[yyj3549]
					yyv3552.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3549.End()
	}
	if yyc3549 {
		*v = yyv3549
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3553 := range v {
		yy3554 := &yyv3553
		yy3554.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3555 := *v
	yyh3555, yyl3555 := z.DecSliceHelperStart()

	var yyrr3555, yyrl3555 int
	var yyc3555, yyrt3555 bool
	_, _, _ = yyc3555, yyrt3555, yyrl3555
	yyrr3555 = yyl3555

	if yyv3555 == nil {
		if yyrl3555, yyrt3555 = z.DecInferLen(yyl3555, z.DecBasicHandle().MaxInitLen, 24); yyrt3555 {
			yyrr3555 = yyrl3555
		}
		yyv3555 = make([]EndpointAddress, yyrl3555)
		yyc3555 = true
	}

	if yyl3555 == 0 {
		if len(yyv3555) != 0 {
			yyv3555 = yyv3555[:0]
			yyc3555 = true
		}
	} else if yyl3555 > 0 {

		if yyl3555 > cap(yyv3555) {
			yyrl3555, yyrt3555 = z.DecInferLen(yyl3555, z.DecBasicHandle().MaxInitLen, 24)
			yyv3555 = make([]EndpointAddress, yyrl3555)
			yyc3555 = true

			yyrr3555 = len(yyv3555)
		} else if yyl3555 != len(yyv3555) {
			yyv3555 = yyv3555[:yyl3555]
			yyc3555 = true
		}
		yyj3555 := 0
		for ; yyj3555 < yyrr3555; yyj3555++ {
			if r.TryDecodeAsNil() {
				yyv3555[yyj3555] = EndpointAddress{}
			} else {
				yyv3556 := &yyv3555[yyj3555]
				yyv3556.CodecDecodeSelf(d)
			}

		}
		if yyrt3555 {
			for ; yyj3555 < yyl3555; yyj3555++ {
				yyv3555 = append(yyv3555, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3555[yyj3555] = EndpointAddress{}
				} else {
					yyv3557 := &yyv3555[yyj3555]
					yyv3557.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3555 := 0; !r.CheckBreak(); yyj3555++ {
			if yyj3555 >= len(yyv3555) {
				yyv3555 = append(yyv3555, EndpointAddress{}) // var yyz3555 EndpointAddress
				yyc3555 = true
			}

			if yyj3555 < len(yyv3555) {
				if r.TryDecodeAsNil() {
					yyv3555[yyj3555] = EndpointAddress{}
				} else {
					yyv3558 := &yyv3555[yyj3555]
					yyv3558.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3555.End()
	}
	if yyc3555 {
		*v = yyv3555
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3559 := range v {
		yy3560 := &yyv3559
		yy3560.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3561 := *v
	yyh3561, yyl3561 := z.DecSliceHelperStart()

	var yyrr3561, yyrl3561 int
	var yyc3561, yyrt3561 bool
	_, _, _ = yyc3561, yyrt3561, yyrl3561
	yyrr3561 = yyl3561

	if yyv3561 == nil {
		if yyrl3561, yyrt3561 = z.DecInferLen(yyl3561, z.DecBasicHandle().MaxInitLen, 40); yyrt3561 {
			yyrr3561 = yyrl3561
		}
		yyv3561 = make([]EndpointPort, yyrl3561)
		yyc3561 = true
	}

	if yyl3561 == 0 {
		if len(yyv3561) != 0 {
			yyv3561 = yyv3561[:0]
			yyc3561 = true
		}
	} else if yyl3561 > 0 {

		if yyl3561 > cap(yyv3561) {
			yyrl3561, yyrt3561 = z.DecInferLen(yyl3561, z.DecBasicHandle().MaxInitLen, 40)
			yyv3561 = make([]EndpointPort, yyrl3561)
			yyc3561 = true

			yyrr3561 = len(yyv3561)
		} else if yyl3561 != len(yyv3561) {
			yyv3561 = yyv3561[:yyl3561]
			yyc3561 = true
		}
		yyj3561 := 0
		for ; yyj3561 < yyrr3561; yyj3561++ {
			if r.TryDecodeAsNil() {
				yyv3561[yyj3561] = EndpointPort{}
			} else {
				yyv3562 := &yyv3561[yyj3561]
				yyv3562.CodecDecodeSelf(d)
			}

		}
		if yyrt3561 {
			for ; yyj3561 < yyl3561; yyj3561++ {
				yyv3561 = append(yyv3561, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3561[yyj3561] = EndpointPort{}
				} else {
					yyv3563 := &yyv3561[yyj3561]
					yyv3563.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3561 := 0; !r.CheckBreak(); yyj3561++ {
			if yyj3561 >= len(yyv3561) {
				yyv3561 = append(yyv3561, EndpointPort{}) // var yyz3561 EndpointPort
				yyc3561 = true
			}

			if yyj3561 < len(yyv3561) {
				if r.TryDecodeAsNil() {
					yyv3561[yyj3561] = EndpointPort{}
				} else {
					yyv3564 := &yyv3561[yyj3561]
					yyv3564.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3561.End()
	}
	if yyc3561 {
		*v = yyv3561
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3565 := range v {
		yy3566 := &yyv3565
		yy3566.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3567 := *v
	yyh3567, yyl3567 := z.DecSliceHelperStart()

	var yyrr3567, yyrl3567 int
	var yyc3567, yyrt3567 bool
	_, _, _ = yyc3567, yyrt3567, yyrl3567
	yyrr3567 = yyl3567

	if yyv3567 == nil {
		if yyrl3567, yyrt3567 = z.DecInferLen(yyl3567, z.DecBasicHandle().MaxInitLen, 216); yyrt3567 {
			yyrr3567 = yyrl3567
		}
		yyv3567 = make([]Endpoints, yyrl3567)
		yyc3567 = true
	}

	if yyl3567 == 0 {
		if len(yyv3567) != 0 {
			yyv3567 = yyv3567[:0]
			yyc3567 = true
		}
	} else if yyl3567 > 0 {

		if yyl3567 > cap(yyv3567) {
			yyrl3567, yyrt3567 = z.DecInferLen(yyl3567, z.DecBasicHandle().MaxInitLen, 216)
			yyv3567 = make([]Endpoints, yyrl3567)
			yyc3567 = true

			yyrr3567 = len(yyv3567)
		} else if yyl3567 != len(yyv3567) {
			yyv3567 = yyv3567[:yyl3567]
			yyc3567 = true
		}
		yyj3567 := 0
		for ; yyj3567 < yyrr3567; yyj3567++ {
			if r.TryDecodeAsNil() {
				yyv3567[yyj3567] = Endpoints{}
			} else {
				yyv3568 := &yyv3567[yyj3567]
				yyv3568.CodecDecodeSelf(d)
			}

		}
		if yyrt3567 {
			for ; yyj3567 < yyl3567; yyj3567++ {
				yyv3567 = append(yyv3567, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3567[yyj3567] = Endpoints{}
				} else {
					yyv3569 := &yyv3567[yyj3567]
					yyv3569.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3567 := 0; !r.CheckBreak(); yyj3567++ {
			if yyj3567 >= len(yyv3567) {
				yyv3567 = append(yyv3567, Endpoints{}) // var yyz3567 Endpoints
				yyc3567 = true
			}

			if yyj3567 < len(yyv3567) {
				if r.TryDecodeAsNil() {
					yyv3567[yyj3567] = Endpoints{}
				} else {
					yyv3570 := &yyv3567[yyj3567]
					yyv3570.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3567.End()
	}
	if yyc3567 {
		*v = yyv3567
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3571 := range v {
		yy3572 := &yyv3571
		yy3572.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3573 := *v
	yyh3573, yyl3573 := z.DecSliceHelperStart()

	var yyrr3573, yyrl3573 int
	var yyc3573, yyrt3573 bool
	_, _, _ = yyc3573, yyrt3573, yyrl3573
	yyrr3573 = yyl3573

	if yyv3573 == nil {
		if yyrl3573, yyrt3573 = z.DecInferLen(yyl3573, z.DecBasicHandle().MaxInitLen, 112); yyrt3573 {
			yyrr3573 = yyrl3573
		}
		yyv3573 = make([]NodeCondition, yyrl3573)
		yyc3573 = true
	}

	if yyl3573 == 0 {
		if len(yyv3573) != 0 {
			yyv3573 = yyv3573[:0]
			yyc3573 = true
		}
	} else if yyl3573 > 0 {

		if yyl3573 > cap(yyv3573) {
			yyrl3573, yyrt3573 = z.DecInferLen(yyl3573, z.DecBasicHandle().MaxInitLen, 112)
			yyv3573 = make([]NodeCondition, yyrl3573)
			yyc3573 = true

			yyrr3573 = len(yyv3573)
		} else if yyl3573 != len(yyv3573) {
			yyv3573 = yyv3573[:yyl3573]
			yyc3573 = true
		}
		yyj3573 := 0
		for ; yyj3573 < yyrr3573; yyj3573++ {
			if r.TryDecodeAsNil() {
				yyv3573[yyj3573] = NodeCondition{}
			} else {
				yyv3574 := &yyv3573[yyj3573]
				yyv3574.CodecDecodeSelf(d)
			}

		}
		if yyrt3573 {
			for ; yyj3573 < yyl3573; yyj3573++ {
				yyv3573 = append(yyv3573, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3573[yyj3573] = NodeCondition{}
				} else {
					yyv3575 := &yyv3573[yyj3573]
					yyv3575.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3573 := 0; !r.CheckBreak(); yyj3573++ {
			if yyj3573 >= len(yyv3573) {
				yyv3573 = append(yyv3573, NodeCondition{}) // var yyz3573 NodeCondition
				yyc3573 = true
			}

			if yyj3573 < len(yyv3573) {
				if r.TryDecodeAsNil() {
					yyv3573[yyj3573] = NodeCondition{}
				} else {
					yyv3576 := &yyv3573[yyj3573]
					yyv3576.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3573.End()
	}
	if yyc3573 {
		*v = yyv3573
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3577 := range v {
		yy3578 := &yyv3577
		yy3578.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3579 := *v
	yyh3579, yyl3579 := z.DecSliceHelperStart()

	var yyrr3579, yyrl3579 int
	var yyc3579, yyrt3579 bool
	_, _, _ = yyc3579, yyrt3579, yyrl3579
	yyrr3579 = yyl3579

	if yyv3579 == nil {
		if yyrl3579, yyrt3579 = z.DecInferLen(yyl3579, z.DecBasicHandle().MaxInitLen, 32); yyrt3579 {
			yyrr3579 = yyrl3579
		}
		yyv3579 = make([]NodeAddress, yyrl3579)
		yyc3579 = true
	}

	if yyl3579 == 0 {
		if len(yyv3579) != 0 {
			yyv3579 = yyv3579[:0]
			yyc3579 = true
		}
	} else if yyl3579 > 0 {

		if yyl3579 > cap(yyv3579) {
			yyrl3579, yyrt3579 = z.DecInferLen(yyl3579, z.DecBasicHandle().MaxInitLen, 32)
			yyv3579 = make([]NodeAddress, yyrl3579)
			yyc3579 = true

			yyrr3579 = len(yyv3579)
		} else if yyl3579 != len(yyv3579) {
			yyv3579 = yyv3579[:yyl3579]
			yyc3579 = true
		}
		yyj3579 := 0
		for ; yyj3579 < yyrr3579; yyj3579++ {
			if r.TryDecodeAsNil() {
				yyv3579[yyj3579] = NodeAddress{}
			} else {
				yyv3580 := &yyv3579[yyj3579]
				yyv3580.CodecDecodeSelf(d)
			}

		}
		if yyrt3579 {
			for ; yyj3579 < yyl3579; yyj3579++ {
				yyv3579 = append(yyv3579, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3579[yyj3579] = NodeAddress{}
				} else {
					yyv3581 := &yyv3579[yyj3579]
					yyv3581.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3579 := 0; !r.CheckBreak(); yyj3579++ {
			if yyj3579 >= len(yyv3579) {
				yyv3579 = append(yyv3579, NodeAddress{}) // var yyz3579 NodeAddress
				yyc3579 = true
			}

			if yyj3579 < len(yyv3579) {
				if r.TryDecodeAsNil() {
					yyv3579[yyj3579] = NodeAddress{}
				} else {
					yyv3582 := &yyv3579[yyj3579]
					yyv3582.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3579.End()
	}
	if yyc3579 {
		*v = yyv3579
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3583, yyv3583 := range v {
		yyk3583.CodecEncodeSelf(e)
		yy3584 := &yyv3583
		yym3585 := z.EncBinary()
		_ = yym3585
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3584) {
		} else if !yym3585 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3584)
		} else {
			z.EncFallback(yy3584)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3586 := *v
	yyl3586 := r.ReadMapStart()
	yybh3586 := z.DecBasicHandle()
	if yyv3586 == nil {
		yyrl3586, _ := z.DecInferLen(yyl3586, yybh3586.MaxInitLen, 40)
		yyv3586 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3586)
		*v = yyv3586
	}
	var yymk3586 ResourceName
	var yymv3586 pkg3_resource.Quantity
	var yymg3586 bool
	if yybh3586.MapValueReset {
		yymg3586 = true
	}
	if yyl3586 > 0 {
		for yyj3586 := 0; yyj3586 < yyl3586; yyj3586++ {
			if r.TryDecodeAsNil() {
				yymk3586 = ""
			} else {
				yymk3586 = ResourceName(r.DecodeString())
			}

			if yymg3586 {
				yymv3586 = yyv3586[yymk3586]
			} else {
				yymv3586 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3586 = pkg3_resource.Quantity{}
			} else {
				yyv3588 := &yymv3586
				yym3589 := z.DecBinary()
				_ = yym3589
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3588) {
				} else if !yym3589 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3588)
				} else {
					z.DecFallback(yyv3588, false)
				}
			}

			if yyv3586 != nil {
				yyv3586[yymk3586] = yymv3586
			}
		}
	} else if yyl3586 < 0 {
		for yyj3586 := 0; !r.CheckBreak(); yyj3586++ {
			if r.TryDecodeAsNil() {
				yymk3586 = ""
			} else {
				yymk3586 = ResourceName(r.DecodeString())
			}

			if yymg3586 {
				yymv3586 = yyv3586[yymk3586]
			} else {
				yymv3586 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3586 = pkg3_resource.Quantity{}
			} else {
				yyv3591 := &yymv3586
				yym3592 := z.DecBinary()
				_ = yym3592
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3591) {
				} else if !yym3592 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3591)
				} else {
					z.DecFallback(yyv3591, false)
				}
			}

			if yyv3586 != nil {
				yyv3586[yymk3586] = yymv3586
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3593 := range v {
		yy3594 := &yyv3593
		yy3594.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3595 := *v
	yyh3595, yyl3595 := z.DecSliceHelperStart()

	var yyrr3595, yyrl3595 int
	var yyc3595, yyrt3595 bool
	_, _, _ = yyc3595, yyrt3595, yyrl3595
	yyrr3595 = yyl3595

	if yyv3595 == nil {
		if yyrl3595, yyrt3595 = z.DecInferLen(yyl3595, z.DecBasicHandle().MaxInitLen, 456); yyrt3595 {
			yyrr3595 = yyrl3595
		}
		yyv3595 = make([]Node, yyrl3595)
		yyc3595 = true
	}

	if yyl3595 == 0 {
		if len(yyv3595) != 0 {
			yyv3595 = yyv3595[:0]
			yyc3595 = true
		}
	} else if yyl3595 > 0 {

		if yyl3595 > cap(yyv3595) {
			yyrl3595, yyrt3595 = z.DecInferLen(yyl3595, z.DecBasicHandle().MaxInitLen, 456)
			yyv3595 = make([]Node, yyrl3595)
			yyc3595 = true

			yyrr3595 = len(yyv3595)
		} else if yyl3595 != len(yyv3595) {
			yyv3595 = yyv3595[:yyl3595]
			yyc3595 = true
		}
		yyj3595 := 0
		for ; yyj3595 < yyrr3595; yyj3595++ {
			if r.TryDecodeAsNil() {
				yyv3595[yyj3595] = Node{}
			} else {
				yyv3596 := &yyv3595[yyj3595]
				yyv3596.CodecDecodeSelf(d)
			}

		}
		if yyrt3595 {
			for ; yyj3595 < yyl3595; yyj3595++ {
				yyv3595 = append(yyv3595, Node{})
				if r.TryDecodeAsNil() {
					yyv3595[yyj3595] = Node{}
				} else {
					yyv3597 := &yyv3595[yyj3595]
					yyv3597.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3595 := 0; !r.CheckBreak(); yyj3595++ {
			if yyj3595 >= len(yyv3595) {
				yyv3595 = append(yyv3595, Node{}) // var yyz3595 Node
				yyc3595 = true
			}

			if yyj3595 < len(yyv3595) {
				if r.TryDecodeAsNil() {
					yyv3595[yyj3595] = Node{}
				} else {
					yyv3598 := &yyv3595[yyj3595]
					yyv3598.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3595.End()
	}
	if yyc3595 {
		*v = yyv3595
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3599 := range v {
		yyv3599.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3600 := *v
	yyh3600, yyl3600 := z.DecSliceHelperStart()

	var yyrr3600, yyrl3600 int
	var yyc3600, yyrt3600 bool
	_, _, _ = yyc3600, yyrt3600, yyrl3600
	yyrr3600 = yyl3600

	if yyv3600 == nil {
		if yyrl3600, yyrt3600 = z.DecInferLen(yyl3600, z.DecBasicHandle().MaxInitLen, 16); yyrt3600 {
			yyrr3600 = yyrl3600
		}
		yyv3600 = make([]FinalizerName, yyrl3600)
		yyc3600 = true
	}

	if yyl3600 == 0 {
		if len(yyv3600) != 0 {
			yyv3600 = yyv3600[:0]
			yyc3600 = true
		}
	} else if yyl3600 > 0 {

		if yyl3600 > cap(yyv3600) {
			yyrl3600, yyrt3600 = z.DecInferLen(yyl3600, z.DecBasicHandle().MaxInitLen, 16)

			yyv23600 := yyv3600
			yyv3600 = make([]FinalizerName, yyrl3600)
			if len(yyv3600) > 0 {
				copy(yyv3600, yyv23600[:cap(yyv23600)])
			}
			yyc3600 = true

			yyrr3600 = len(yyv3600)
		} else if yyl3600 != len(yyv3600) {
			yyv3600 = yyv3600[:yyl3600]
			yyc3600 = true
		}
		yyj3600 := 0
		for ; yyj3600 < yyrr3600; yyj3600++ {
			if r.TryDecodeAsNil() {
				yyv3600[yyj3600] = ""
			} else {
				yyv3600[yyj3600] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3600 {
			for ; yyj3600 < yyl3600; yyj3600++ {
				yyv3600 = append(yyv3600, "")
				if r.TryDecodeAsNil() {
					yyv3600[yyj3600] = ""
				} else {
					yyv3600[yyj3600] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3600 := 0; !r.CheckBreak(); yyj3600++ {
			if yyj3600 >= len(yyv3600) {
				yyv3600 = append(yyv3600, "") // var yyz3600 FinalizerName
				yyc3600 = true
			}

			if yyj3600 < len(yyv3600) {
				if r.TryDecodeAsNil() {
					yyv3600[yyj3600] = ""
				} else {
					yyv3600[yyj3600] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3600.End()
	}
	if yyc3600 {
		*v = yyv3600
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3604 := range v {
		yy3605 := &yyv3604
		yy3605.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3606 := *v
	yyh3606, yyl3606 := z.DecSliceHelperStart()

	var yyrr3606, yyrl3606 int
	var yyc3606, yyrt3606 bool
	_, _, _ = yyc3606, yyrt3606, yyrl3606
	yyrr3606 = yyl3606

	if yyv3606 == nil {
		if yyrl3606, yyrt3606 = z.DecInferLen(yyl3606, z.DecBasicHandle().MaxInitLen, 232); yyrt3606 {
			yyrr3606 = yyrl3606
		}
		yyv3606 = make([]Namespace, yyrl3606)
		yyc3606 = true
	}

	if yyl3606 == 0 {
		if len(yyv3606) != 0 {
			yyv3606 = yyv3606[:0]
			yyc3606 = true
		}
	} else if yyl3606 > 0 {

		if yyl3606 > cap(yyv3606) {
			yyrl3606, yyrt3606 = z.DecInferLen(yyl3606, z.DecBasicHandle().MaxInitLen, 232)
			yyv3606 = make([]Namespace, yyrl3606)
			yyc3606 = true

			yyrr3606 = len(yyv3606)
		} else if yyl3606 != len(yyv3606) {
			yyv3606 = yyv3606[:yyl3606]
			yyc3606 = true
		}
		yyj3606 := 0
		for ; yyj3606 < yyrr3606; yyj3606++ {
			if r.TryDecodeAsNil() {
				yyv3606[yyj3606] = Namespace{}
			} else {
				yyv3607 := &yyv3606[yyj3606]
				yyv3607.CodecDecodeSelf(d)
			}

		}
		if yyrt3606 {
			for ; yyj3606 < yyl3606; yyj3606++ {
				yyv3606 = append(yyv3606, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3606[yyj3606] = Namespace{}
				} else {
					yyv3608 := &yyv3606[yyj3606]
					yyv3608.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3606 := 0; !r.CheckBreak(); yyj3606++ {
			if yyj3606 >= len(yyv3606) {
				yyv3606 = append(yyv3606, Namespace{}) // var yyz3606 Namespace
				yyc3606 = true
			}

			if yyj3606 < len(yyv3606) {
				if r.TryDecodeAsNil() {
					yyv3606[yyj3606] = Namespace{}
				} else {
					yyv3609 := &yyv3606[yyj3606]
					yyv3609.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3606.End()
	}
	if yyc3606 {
		*v = yyv3606
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3610 := range v {
		yy3611 := &yyv3610
		yy3611.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3612 := *v
	yyh3612, yyl3612 := z.DecSliceHelperStart()

	var yyrr3612, yyrl3612 int
	var yyc3612, yyrt3612 bool
	_, _, _ = yyc3612, yyrt3612, yyrl3612
	yyrr3612 = yyl3612

	if yyv3612 == nil {
		if yyrl3612, yyrt3612 = z.DecInferLen(yyl3612, z.DecBasicHandle().MaxInitLen, 424); yyrt3612 {
			yyrr3612 = yyrl3612
		}
		yyv3612 = make([]Event, yyrl3612)
		yyc3612 = true
	}

	if yyl3612 == 0 {
		if len(yyv3612) != 0 {
			yyv3612 = yyv3612[:0]
			yyc3612 = true
		}
	} else if yyl3612 > 0 {

		if yyl3612 > cap(yyv3612) {
			yyrl3612, yyrt3612 = z.DecInferLen(yyl3612, z.DecBasicHandle().MaxInitLen, 424)
			yyv3612 = make([]Event, yyrl3612)
			yyc3612 = true

			yyrr3612 = len(yyv3612)
		} else if yyl3612 != len(yyv3612) {
			yyv3612 = yyv3612[:yyl3612]
			yyc3612 = true
		}
		yyj3612 := 0
		for ; yyj3612 < yyrr3612; yyj3612++ {
			if r.TryDecodeAsNil() {
				yyv3612[yyj3612] = Event{}
			} else {
				yyv3613 := &yyv3612[yyj3612]
				yyv3613.CodecDecodeSelf(d)
			}

		}
		if yyrt3612 {
			for ; yyj3612 < yyl3612; yyj3612++ {
				yyv3612 = append(yyv3612, Event{})
				if r.TryDecodeAsNil() {
					yyv3612[yyj3612] = Event{}
				} else {
					yyv3614 := &yyv3612[yyj3612]
					yyv3614.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3612 := 0; !r.CheckBreak(); yyj3612++ {
			if yyj3612 >= len(yyv3612) {
				yyv3612 = append(yyv3612, Event{}) // var yyz3612 Event
				yyc3612 = true
			}

			if yyj3612 < len(yyv3612) {
				if r.TryDecodeAsNil() {
					yyv3612[yyj3612] = Event{}
				} else {
					yyv3615 := &yyv3612[yyj3612]
					yyv3615.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3612.End()
	}
	if yyc3612 {
		*v = yyv3612
	}

}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg8_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3616 := range v {
		if yyv3616 == nil {
			r.EncodeNil()
		} else {
			yym3617 := z.EncBinary()
			_ = yym3617
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv3616) {
			} else {
				z.EncFallback(yyv3616)
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg8_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3618 := *v
	yyh3618, yyl3618 := z.DecSliceHelperStart()

	var yyrr3618, yyrl3618 int
	var yyc3618, yyrt3618 bool
	_, _, _ = yyc3618, yyrt3618, yyrl3618
	yyrr3618 = yyl3618

	if yyv3618 == nil {
		if yyrl3618, yyrt3618 = z.DecInferLen(yyl3618, z.DecBasicHandle().MaxInitLen, 16); yyrt3618 {
			yyrr3618 = yyrl3618
		}
		yyv3618 = make([]pkg8_runtime.Object, yyrl3618)
		yyc3618 = true
	}

	if yyl3618 == 0 {
		if len(yyv3618) != 0 {
			yyv3618 = yyv3618[:0]
			yyc3618 = true
		}
	} else if yyl3618 > 0 {

		if yyl3618 > cap(yyv3618) {
			yyrl3618, yyrt3618 = z.DecInferLen(yyl3618, z.DecBasicHandle().MaxInitLen, 16)
			yyv3618 = make([]pkg8_runtime.Object, yyrl3618)
			yyc3618 = true

			yyrr3618 = len(yyv3618)
		} else if yyl3618 != len(yyv3618) {
			yyv3618 = yyv3618[:yyl3618]
			yyc3618 = true
		}
		yyj3618 := 0
		for ; yyj3618 < yyrr3618; yyj3618++ {
			if r.TryDecodeAsNil() {
				yyv3618[yyj3618] = nil
			} else {
				yyv3619 := &yyv3618[yyj3618]
				yym3620 := z.DecBinary()
				_ = yym3620
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3619) {
				} else {
					z.DecFallback(yyv3619, true)
				}
			}

		}
		if yyrt3618 {
			for ; yyj3618 < yyl3618; yyj3618++ {
				yyv3618 = append(yyv3618, nil)
				if r.TryDecodeAsNil() {
					yyv3618[yyj3618] = nil
				} else {
					yyv3621 := &yyv3618[yyj3618]
					yym3622 := z.DecBinary()
					_ = yym3622
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3621) {
					} else {
						z.DecFallback(yyv3621, true)
					}
				}

			}
		}

	} else {
		for yyj3618 := 0; !r.CheckBreak(); yyj3618++ {
			if yyj3618 >= len(yyv3618) {
				yyv3618 = append(yyv3618, nil) // var yyz3618 pkg8_runtime.Object
				yyc3618 = true
			}

			if yyj3618 < len(yyv3618) {
				if r.TryDecodeAsNil() {
					yyv3618[yyj3618] = nil
				} else {
					yyv3623 := &yyv3618[yyj3618]
					yym3624 := z.DecBinary()
					_ = yym3624
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3623) {
					} else {
						z.DecFallback(yyv3623, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3618.End()
	}
	if yyc3618 {
		*v = yyv3618
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3625 := range v {
		yy3626 := &yyv3625
		yy3626.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3627 := *v
	yyh3627, yyl3627 := z.DecSliceHelperStart()

	var yyrr3627, yyrl3627 int
	var yyc3627, yyrt3627 bool
	_, _, _ = yyc3627, yyrt3627, yyrl3627
	yyrr3627 = yyl3627

	if yyv3627 == nil {
		if yyrl3627, yyrt3627 = z.DecInferLen(yyl3627, z.DecBasicHandle().MaxInitLen, 56); yyrt3627 {
			yyrr3627 = yyrl3627
		}
		yyv3627 = make([]LimitRangeItem, yyrl3627)
		yyc3627 = true
	}

	if yyl3627 == 0 {
		if len(yyv3627) != 0 {
			yyv3627 = yyv3627[:0]
			yyc3627 = true
		}
	} else if yyl3627 > 0 {

		if yyl3627 > cap(yyv3627) {
			yyrl3627, yyrt3627 = z.DecInferLen(yyl3627, z.DecBasicHandle().MaxInitLen, 56)
			yyv3627 = make([]LimitRangeItem, yyrl3627)
			yyc3627 = true

			yyrr3627 = len(yyv3627)
		} else if yyl3627 != len(yyv3627) {
			yyv3627 = yyv3627[:yyl3627]
			yyc3627 = true
		}
		yyj3627 := 0
		for ; yyj3627 < yyrr3627; yyj3627++ {
			if r.TryDecodeAsNil() {
				yyv3627[yyj3627] = LimitRangeItem{}
			} else {
				yyv3628 := &yyv3627[yyj3627]
				yyv3628.CodecDecodeSelf(d)
			}

		}
		if yyrt3627 {
			for ; yyj3627 < yyl3627; yyj3627++ {
				yyv3627 = append(yyv3627, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3627[yyj3627] = LimitRangeItem{}
				} else {
					yyv3629 := &yyv3627[yyj3627]
					yyv3629.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3627 := 0; !r.CheckBreak(); yyj3627++ {
			if yyj3627 >= len(yyv3627) {
				yyv3627 = append(yyv3627, LimitRangeItem{}) // var yyz3627 LimitRangeItem
				yyc3627 = true
			}

			if yyj3627 < len(yyv3627) {
				if r.TryDecodeAsNil() {
					yyv3627[yyj3627] = LimitRangeItem{}
				} else {
					yyv3630 := &yyv3627[yyj3627]
					yyv3630.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3627.End()
	}
	if yyc3627 {
		*v = yyv3627
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3631 := range v {
		yy3632 := &yyv3631
		yy3632.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3633 := *v
	yyh3633, yyl3633 := z.DecSliceHelperStart()

	var yyrr3633, yyrl3633 int
	var yyc3633, yyrt3633 bool
	_, _, _ = yyc3633, yyrt3633, yyrl3633
	yyrr3633 = yyl3633

	if yyv3633 == nil {
		if yyrl3633, yyrt3633 = z.DecInferLen(yyl3633, z.DecBasicHandle().MaxInitLen, 216); yyrt3633 {
			yyrr3633 = yyrl3633
		}
		yyv3633 = make([]LimitRange, yyrl3633)
		yyc3633 = true
	}

	if yyl3633 == 0 {
		if len(yyv3633) != 0 {
			yyv3633 = yyv3633[:0]
			yyc3633 = true
		}
	} else if yyl3633 > 0 {

		if yyl3633 > cap(yyv3633) {
			yyrl3633, yyrt3633 = z.DecInferLen(yyl3633, z.DecBasicHandle().MaxInitLen, 216)
			yyv3633 = make([]LimitRange, yyrl3633)
			yyc3633 = true

			yyrr3633 = len(yyv3633)
		} else if yyl3633 != len(yyv3633) {
			yyv3633 = yyv3633[:yyl3633]
			yyc3633 = true
		}
		yyj3633 := 0
		for ; yyj3633 < yyrr3633; yyj3633++ {
			if r.TryDecodeAsNil() {
				yyv3633[yyj3633] = LimitRange{}
			} else {
				yyv3634 := &yyv3633[yyj3633]
				yyv3634.CodecDecodeSelf(d)
			}

		}
		if yyrt3633 {
			for ; yyj3633 < yyl3633; yyj3633++ {
				yyv3633 = append(yyv3633, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3633[yyj3633] = LimitRange{}
				} else {
					yyv3635 := &yyv3633[yyj3633]
					yyv3635.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3633 := 0; !r.CheckBreak(); yyj3633++ {
			if yyj3633 >= len(yyv3633) {
				yyv3633 = append(yyv3633, LimitRange{}) // var yyz3633 LimitRange
				yyc3633 = true
			}

			if yyj3633 < len(yyv3633) {
				if r.TryDecodeAsNil() {
					yyv3633[yyj3633] = LimitRange{}
				} else {
					yyv3636 := &yyv3633[yyj3633]
					yyv3636.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3633.End()
	}
	if yyc3633 {
		*v = yyv3633
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3637 := range v {
		yy3638 := &yyv3637
		yy3638.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3639 := *v
	yyh3639, yyl3639 := z.DecSliceHelperStart()

	var yyrr3639, yyrl3639 int
	var yyc3639, yyrt3639 bool
	_, _, _ = yyc3639, yyrt3639, yyrl3639
	yyrr3639 = yyl3639

	if yyv3639 == nil {
		if yyrl3639, yyrt3639 = z.DecInferLen(yyl3639, z.DecBasicHandle().MaxInitLen, 216); yyrt3639 {
			yyrr3639 = yyrl3639
		}
		yyv3639 = make([]ResourceQuota, yyrl3639)
		yyc3639 = true
	}

	if yyl3639 == 0 {
		if len(yyv3639) != 0 {
			yyv3639 = yyv3639[:0]
			yyc3639 = true
		}
	} else if yyl3639 > 0 {

		if yyl3639 > cap(yyv3639) {
			yyrl3639, yyrt3639 = z.DecInferLen(yyl3639, z.DecBasicHandle().MaxInitLen, 216)
			yyv3639 = make([]ResourceQuota, yyrl3639)
			yyc3639 = true

			yyrr3639 = len(yyv3639)
		} else if yyl3639 != len(yyv3639) {
			yyv3639 = yyv3639[:yyl3639]
			yyc3639 = true
		}
		yyj3639 := 0
		for ; yyj3639 < yyrr3639; yyj3639++ {
			if r.TryDecodeAsNil() {
				yyv3639[yyj3639] = ResourceQuota{}
			} else {
				yyv3640 := &yyv3639[yyj3639]
				yyv3640.CodecDecodeSelf(d)
			}

		}
		if yyrt3639 {
			for ; yyj3639 < yyl3639; yyj3639++ {
				yyv3639 = append(yyv3639, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3639[yyj3639] = ResourceQuota{}
				} else {
					yyv3641 := &yyv3639[yyj3639]
					yyv3641.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3639 := 0; !r.CheckBreak(); yyj3639++ {
			if yyj3639 >= len(yyv3639) {
				yyv3639 = append(yyv3639, ResourceQuota{}) // var yyz3639 ResourceQuota
				yyc3639 = true
			}

			if yyj3639 < len(yyv3639) {
				if r.TryDecodeAsNil() {
					yyv3639[yyj3639] = ResourceQuota{}
				} else {
					yyv3642 := &yyv3639[yyj3639]
					yyv3642.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3639.End()
	}
	if yyc3639 {
		*v = yyv3639
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3643, yyv3643 := range v {
		yym3644 := z.EncBinary()
		_ = yym3644
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3643))
		}
		if yyv3643 == nil {
			r.EncodeNil()
		} else {
			yym3645 := z.EncBinary()
			_ = yym3645
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3643))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3646 := *v
	yyl3646 := r.ReadMapStart()
	yybh3646 := z.DecBasicHandle()
	if yyv3646 == nil {
		yyrl3646, _ := z.DecInferLen(yyl3646, yybh3646.MaxInitLen, 40)
		yyv3646 = make(map[string][]uint8, yyrl3646)
		*v = yyv3646
	}
	var yymk3646 string
	var yymv3646 []uint8
	var yymg3646 bool
	if yybh3646.MapValueReset {
		yymg3646 = true
	}
	if yyl3646 > 0 {
		for yyj3646 := 0; yyj3646 < yyl3646; yyj3646++ {
			if r.TryDecodeAsNil() {
				yymk3646 = ""
			} else {
				yymk3646 = string(r.DecodeString())
			}

			if yymg3646 {
				yymv3646 = yyv3646[yymk3646]
			} else {
				yymv3646 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3646 = nil
			} else {
				yyv3648 := &yymv3646
				yym3649 := z.DecBinary()
				_ = yym3649
				if false {
				} else {
					*yyv3648 = r.DecodeBytes(*(*[]byte)(yyv3648), false, false)
				}
			}

			if yyv3646 != nil {
				yyv3646[yymk3646] = yymv3646
			}
		}
	} else if yyl3646 < 0 {
		for yyj3646 := 0; !r.CheckBreak(); yyj3646++ {
			if r.TryDecodeAsNil() {
				yymk3646 = ""
			} else {
				yymk3646 = string(r.DecodeString())
			}

			if yymg3646 {
				yymv3646 = yyv3646[yymk3646]
			} else {
				yymv3646 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3646 = nil
			} else {
				yyv3651 := &yymv3646
				yym3652 := z.DecBinary()
				_ = yym3652
				if false {
				} else {
					*yyv3651 = r.DecodeBytes(*(*[]byte)(yyv3651), false, false)
				}
			}

			if yyv3646 != nil {
				yyv3646[yymk3646] = yymv3646
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3653 := range v {
		yy3654 := &yyv3653
		yy3654.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3655 := *v
	yyh3655, yyl3655 := z.DecSliceHelperStart()

	var yyrr3655, yyrl3655 int
	var yyc3655, yyrt3655 bool
	_, _, _ = yyc3655, yyrt3655, yyrl3655
	yyrr3655 = yyl3655

	if yyv3655 == nil {
		if yyrl3655, yyrt3655 = z.DecInferLen(yyl3655, z.DecBasicHandle().MaxInitLen, 216); yyrt3655 {
			yyrr3655 = yyrl3655
		}
		yyv3655 = make([]Secret, yyrl3655)
		yyc3655 = true
	}

	if yyl3655 == 0 {
		if len(yyv3655) != 0 {
			yyv3655 = yyv3655[:0]
			yyc3655 = true
		}
	} else if yyl3655 > 0 {

		if yyl3655 > cap(yyv3655) {
			yyrl3655, yyrt3655 = z.DecInferLen(yyl3655, z.DecBasicHandle().MaxInitLen, 216)
			yyv3655 = make([]Secret, yyrl3655)
			yyc3655 = true

			yyrr3655 = len(yyv3655)
		} else if yyl3655 != len(yyv3655) {
			yyv3655 = yyv3655[:yyl3655]
			yyc3655 = true
		}
		yyj3655 := 0
		for ; yyj3655 < yyrr3655; yyj3655++ {
			if r.TryDecodeAsNil() {
				yyv3655[yyj3655] = Secret{}
			} else {
				yyv3656 := &yyv3655[yyj3655]
				yyv3656.CodecDecodeSelf(d)
			}

		}
		if yyrt3655 {
			for ; yyj3655 < yyl3655; yyj3655++ {
				yyv3655 = append(yyv3655, Secret{})
				if r.TryDecodeAsNil() {
					yyv3655[yyj3655] = Secret{}
				} else {
					yyv3657 := &yyv3655[yyj3655]
					yyv3657.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3655 := 0; !r.CheckBreak(); yyj3655++ {
			if yyj3655 >= len(yyv3655) {
				yyv3655 = append(yyv3655, Secret{}) // var yyz3655 Secret
				yyc3655 = true
			}

			if yyj3655 < len(yyv3655) {
				if r.TryDecodeAsNil() {
					yyv3655[yyj3655] = Secret{}
				} else {
					yyv3658 := &yyv3655[yyj3655]
					yyv3658.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3655.End()
	}
	if yyc3655 {
		*v = yyv3655
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3659 := range v {
		yy3660 := &yyv3659
		yy3660.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3661 := *v
	yyh3661, yyl3661 := z.DecSliceHelperStart()

	var yyrr3661, yyrl3661 int
	var yyc3661, yyrt3661 bool
	_, _, _ = yyc3661, yyrt3661, yyrl3661
	yyrr3661 = yyl3661

	if yyv3661 == nil {
		if yyrl3661, yyrt3661 = z.DecInferLen(yyl3661, z.DecBasicHandle().MaxInitLen, 64); yyrt3661 {
			yyrr3661 = yyrl3661
		}
		yyv3661 = make([]ComponentCondition, yyrl3661)
		yyc3661 = true
	}

	if yyl3661 == 0 {
		if len(yyv3661) != 0 {
			yyv3661 = yyv3661[:0]
			yyc3661 = true
		}
	} else if yyl3661 > 0 {

		if yyl3661 > cap(yyv3661) {
			yyrl3661, yyrt3661 = z.DecInferLen(yyl3661, z.DecBasicHandle().MaxInitLen, 64)
			yyv3661 = make([]ComponentCondition, yyrl3661)
			yyc3661 = true

			yyrr3661 = len(yyv3661)
		} else if yyl3661 != len(yyv3661) {
			yyv3661 = yyv3661[:yyl3661]
			yyc3661 = true
		}
		yyj3661 := 0
		for ; yyj3661 < yyrr3661; yyj3661++ {
			if r.TryDecodeAsNil() {
				yyv3661[yyj3661] = ComponentCondition{}
			} else {
				yyv3662 := &yyv3661[yyj3661]
				yyv3662.CodecDecodeSelf(d)
			}

		}
		if yyrt3661 {
			for ; yyj3661 < yyl3661; yyj3661++ {
				yyv3661 = append(yyv3661, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3661[yyj3661] = ComponentCondition{}
				} else {
					yyv3663 := &yyv3661[yyj3661]
					yyv3663.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3661 := 0; !r.CheckBreak(); yyj3661++ {
			if yyj3661 >= len(yyv3661) {
				yyv3661 = append(yyv3661, ComponentCondition{}) // var yyz3661 ComponentCondition
				yyc3661 = true
			}

			if yyj3661 < len(yyv3661) {
				if r.TryDecodeAsNil() {
					yyv3661[yyj3661] = ComponentCondition{}
				} else {
					yyv3664 := &yyv3661[yyj3661]
					yyv3664.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3661.End()
	}
	if yyc3661 {
		*v = yyv3661
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3665 := range v {
		yy3666 := &yyv3665
		yy3666.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3667 := *v
	yyh3667, yyl3667 := z.DecSliceHelperStart()

	var yyrr3667, yyrl3667 int
	var yyc3667, yyrt3667 bool
	_, _, _ = yyc3667, yyrt3667, yyrl3667
	yyrr3667 = yyl3667

	if yyv3667 == nil {
		if yyrl3667, yyrt3667 = z.DecInferLen(yyl3667, z.DecBasicHandle().MaxInitLen, 216); yyrt3667 {
			yyrr3667 = yyrl3667
		}
		yyv3667 = make([]ComponentStatus, yyrl3667)
		yyc3667 = true
	}

	if yyl3667 == 0 {
		if len(yyv3667) != 0 {
			yyv3667 = yyv3667[:0]
			yyc3667 = true
		}
	} else if yyl3667 > 0 {

		if yyl3667 > cap(yyv3667) {
			yyrl3667, yyrt3667 = z.DecInferLen(yyl3667, z.DecBasicHandle().MaxInitLen, 216)
			yyv3667 = make([]ComponentStatus, yyrl3667)
			yyc3667 = true

			yyrr3667 = len(yyv3667)
		} else if yyl3667 != len(yyv3667) {
			yyv3667 = yyv3667[:yyl3667]
			yyc3667 = true
		}
		yyj3667 := 0
		for ; yyj3667 < yyrr3667; yyj3667++ {
			if r.TryDecodeAsNil() {
				yyv3667[yyj3667] = ComponentStatus{}
			} else {
				yyv3668 := &yyv3667[yyj3667]
				yyv3668.CodecDecodeSelf(d)
			}

		}
		if yyrt3667 {
			for ; yyj3667 < yyl3667; yyj3667++ {
				yyv3667 = append(yyv3667, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3667[yyj3667] = ComponentStatus{}
				} else {
					yyv3669 := &yyv3667[yyj3667]
					yyv3669.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3667 := 0; !r.CheckBreak(); yyj3667++ {
			if yyj3667 >= len(yyv3667) {
				yyv3667 = append(yyv3667, ComponentStatus{}) // var yyz3667 ComponentStatus
				yyc3667 = true
			}

			if yyj3667 < len(yyv3667) {
				if r.TryDecodeAsNil() {
					yyv3667[yyj3667] = ComponentStatus{}
				} else {
					yyv3670 := &yyv3667[yyj3667]
					yyv3670.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3667.End()
	}
	if yyc3667 {
		*v = yyv3667
	}

}
