/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg7_fields "k8s.io/kubernetes/pkg/fields"
	pkg6_labels "k8s.io/kubernetes/pkg/labels"
	pkg8_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg7_fields.Selector
		var v3 pkg6_labels.Selector
		var v4 pkg8_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg5_intstr.IntOrString
		var v7 pkg4_inf.Dec
		var v8 time.Time
		_, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				yynn82 = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct103 := r.ContainerType()
		if yyct103 == codecSelferValueTypeMap1234 {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if yyct103 == codecSelferValueTypeArray1234 {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			var yynn141 int
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				yynn141 = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
				yynn141 = 0
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct159 := r.ContainerType()
		if yyct159 == codecSelferValueTypeMap1234 {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if yyct159 == codecSelferValueTypeArray1234 {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [11]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[0] = x.GCEPersistentDisk != nil
			yyq195[1] = x.AWSElasticBlockStore != nil
			yyq195[2] = x.HostPath != nil
			yyq195[3] = x.Glusterfs != nil
			yyq195[4] = x.NFS != nil
			yyq195[5] = x.RBD != nil
			yyq195[6] = x.ISCSI != nil
			yyq195[7] = x.Cinder != nil
			yyq195[8] = x.CephFS != nil
			yyq195[9] = x.FC != nil
			yyq195[10] = x.Flocker != nil
			var yynn195 int
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(11)
			} else {
				yynn195 = 0
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
				yynn195 = 0
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym207 := z.DecBinary()
	_ = yym207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct208 := r.ContainerType()
		if yyct208 == codecSelferValueTypeMap1234 {
			yyl208 := r.ReadMapStart()
			if yyl208 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl208, d)
			}
		} else if yyct208 == codecSelferValueTypeArray1234 {
			yyl208 := r.ReadArrayStart()
			if yyl208 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys209Slc
	var yyhl209 bool = l >= 0
	for yyj209 := 0; ; yyj209++ {
		if yyhl209 {
			if yyj209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys209Slc = r.DecodeBytes(yys209Slc, true, true)
		yys209 := string(yys209Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys209 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys209)
		} // end switch yys209
	} // end for yyj209
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym233 := z.EncBinary()
		_ = yym233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep234 := !z.EncBinary()
			yy2arr234 := z.EncBasicHandle().StructToArray
			var yyq234 [2]bool
			_, _, _ = yysep234, yyq234, yy2arr234
			const yyr234 bool = false
			yyq234[1] = x.ReadOnly != false
			var yynn234 int
			if yyr234 || yy2arr234 {
				r.EncodeArrayStart(2)
			} else {
				yynn234 = 1
				for _, b := range yyq234 {
					if b {
						yynn234++
					}
				}
				r.EncodeMapStart(yynn234)
				yynn234 = 0
			}
			if yyr234 || yy2arr234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym236 := z.EncBinary()
				_ = yym236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym237 := z.EncBinary()
				_ = yym237
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr234 || yy2arr234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq234[1] {
					yym239 := z.EncBinary()
					_ = yym239
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq234[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym240 := z.EncBinary()
					_ = yym240
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr234 || yy2arr234 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym241 := z.DecBinary()
	_ = yym241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct242 := r.ContainerType()
		if yyct242 == codecSelferValueTypeMap1234 {
			yyl242 := r.ReadMapStart()
			if yyl242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl242, d)
			}
		} else if yyct242 == codecSelferValueTypeArray1234 {
			yyl242 := r.ReadArrayStart()
			if yyl242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys243Slc
	var yyhl243 bool = l >= 0
	for yyj243 := 0; ; yyj243++ {
		if yyhl243 {
			if yyj243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys243Slc = r.DecodeBytes(yys243Slc, true, true)
		yys243 := string(yys243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys243 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys243)
		} // end switch yys243
	} // end for yyj243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj246 int
	var yyb246 bool
	var yyhl246 bool = l >= 0
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj246++
		if yyhl246 {
			yyb246 = yyj246 > l
		} else {
			yyb246 = r.CheckBreak()
		}
		if yyb246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			var yynn250 int
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				yynn250 = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
				yynn250 = 0
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct267 := r.ContainerType()
		if yyct267 == codecSelferValueTypeMap1234 {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if yyct267 == codecSelferValueTypeArray1234 {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			var yynn281 int
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				yynn281 = 1
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
				yynn281 = 0
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct300 := r.ContainerType()
		if yyct300 == codecSelferValueTypeMap1234 {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if yyct300 == codecSelferValueTypeArray1234 {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			var yynn338 int
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				yynn338 = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
				yynn338 = 0
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct347 := r.ContainerType()
		if yyct347 == codecSelferValueTypeMap1234 {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if yyct347 == codecSelferValueTypeArray1234 {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			var yynn357 int
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				yynn357 = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
				yynn357 = 0
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct373 := r.ContainerType()
		if yyct373 == codecSelferValueTypeMap1234 {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if yyct373 == codecSelferValueTypeArray1234 {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			var yynn389 int
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				yynn389 = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
				yynn389 = 0
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct406 := r.ContainerType()
		if yyct406 == codecSelferValueTypeMap1234 {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if yyct406 == codecSelferValueTypeArray1234 {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			var yynn420 int
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				yynn420 = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
				yynn420 = 0
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct436 := r.ContainerType()
		if yyct436 == codecSelferValueTypeMap1234 {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if yyct436 == codecSelferValueTypeArray1234 {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			var yynn452 int
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				yynn452 = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
				yynn452 = 0
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct463 := r.ContainerType()
		if yyct463 == codecSelferValueTypeMap1234 {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if yyct463 == codecSelferValueTypeArray1234 {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			var yynn475 int
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				yynn475 = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
				yynn475 = 0
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct482 := r.ContainerType()
		if yyct482 == codecSelferValueTypeMap1234 {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if yyct482 == codecSelferValueTypeArray1234 {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			var yynn500 int
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				yynn500 = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
				yynn500 = 0
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct505 := r.ContainerType()
		if yyct505 == codecSelferValueTypeMap1234 {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if yyct505 == codecSelferValueTypeArray1234 {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			yyq511[0] = x.Medium != ""
			var yynn511 int
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				yynn511 = 0
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
				yynn511 = 0
			}
			if yyr511 || yy2arr511 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq511[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq511[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr511 || yy2arr511 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct514 := r.ContainerType()
		if yyct514 == codecSelferValueTypeMap1234 {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if yyct514 == codecSelferValueTypeArray1234 {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym519 := z.EncBinary()
	_ = yym519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym521 := z.EncBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym522 := z.DecBinary()
	_ = yym522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym523 := z.EncBinary()
		_ = yym523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep524 := !z.EncBinary()
			yy2arr524 := z.EncBasicHandle().StructToArray
			var yyq524 [4]bool
			_, _, _ = yysep524, yyq524, yy2arr524
			const yyr524 bool = false
			yyq524[1] = x.FSType != ""
			yyq524[2] = x.Partition != 0
			yyq524[3] = x.ReadOnly != false
			var yynn524 int
			if yyr524 || yy2arr524 {
				r.EncodeArrayStart(4)
			} else {
				yynn524 = 1
				for _, b := range yyq524 {
					if b {
						yynn524++
					}
				}
				r.EncodeMapStart(yynn524)
				yynn524 = 0
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym527 := z.EncBinary()
				_ = yym527
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[1] {
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq524[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[2] {
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq524[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[3] {
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq524[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym536 := z.EncBinary()
					_ = yym536
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym537 := z.DecBinary()
	_ = yym537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct538 := r.ContainerType()
		if yyct538 == codecSelferValueTypeMap1234 {
			yyl538 := r.ReadMapStart()
			if yyl538 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl538, d)
			}
		} else if yyct538 == codecSelferValueTypeArray1234 {
			yyl538 := r.ReadArrayStart()
			if yyl538 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys539Slc
	var yyhl539 bool = l >= 0
	for yyj539 := 0; ; yyj539++ {
		if yyhl539 {
			if yyj539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys539Slc = r.DecodeBytes(yys539Slc, true, true)
		yys539 := string(yys539Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys539 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys539)
		} // end switch yys539
	} // end for yyj539
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj544 int
	var yyb544 bool
	var yyhl544 bool = l >= 0
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj544++
		if yyhl544 {
			yyb544 = yyj544 > l
		} else {
			yyb544 = r.CheckBreak()
		}
		if yyb544 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj544-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym549 := z.EncBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep550 := !z.EncBinary()
			yy2arr550 := z.EncBasicHandle().StructToArray
			var yyq550 [6]bool
			_, _, _ = yysep550, yyq550, yy2arr550
			const yyr550 bool = false
			yyq550[0] = x.TargetPortal != ""
			yyq550[1] = x.IQN != ""
			yyq550[2] = x.Lun != 0
			yyq550[3] = x.ISCSIInterface != ""
			yyq550[4] = x.FSType != ""
			yyq550[5] = x.ReadOnly != false
			var yynn550 int
			if yyr550 || yy2arr550 {
				r.EncodeArrayStart(6)
			} else {
				yynn550 = 0
				for _, b := range yyq550 {
					if b {
						yynn550++
					}
				}
				r.EncodeMapStart(yynn550)
				yynn550 = 0
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[0] {
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym553 := z.EncBinary()
					_ = yym553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[1] {
					yym555 := z.EncBinary()
					_ = yym555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[2] {
					yym558 := z.EncBinary()
					_ = yym558
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq550[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym559 := z.EncBinary()
					_ = yym559
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[3] {
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[4] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[5] {
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq550[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym568 := z.EncBinary()
					_ = yym568
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym569 := z.DecBinary()
	_ = yym569
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct570 := r.ContainerType()
		if yyct570 == codecSelferValueTypeMap1234 {
			yyl570 := r.ReadMapStart()
			if yyl570 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl570, d)
			}
		} else if yyct570 == codecSelferValueTypeArray1234 {
			yyl570 := r.ReadArrayStart()
			if yyl570 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl570, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys571Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys571Slc
	var yyhl571 bool = l >= 0
	for yyj571 := 0; ; yyj571++ {
		if yyhl571 {
			if yyj571 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys571Slc = r.DecodeBytes(yys571Slc, true, true)
		yys571 := string(yys571Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys571 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys571)
		} // end switch yys571
	} // end for yyj571
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj578 int
	var yyb578 bool
	var yyhl578 bool = l >= 0
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj578++
		if yyhl578 {
			yyb578 = yyj578 > l
		} else {
			yyb578 = r.CheckBreak()
		}
		if yyb578 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj578-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym585 := z.EncBinary()
		_ = yym585
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep586 := !z.EncBinary()
			yy2arr586 := z.EncBasicHandle().StructToArray
			var yyq586 [4]bool
			_, _, _ = yysep586, yyq586, yy2arr586
			const yyr586 bool = false
			yyq586[3] = x.ReadOnly != false
			var yynn586 int
			if yyr586 || yy2arr586 {
				r.EncodeArrayStart(4)
			} else {
				yynn586 = 3
				for _, b := range yyq586 {
					if b {
						yynn586++
					}
				}
				r.EncodeMapStart(yynn586)
				yynn586 = 0
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym588 := z.EncBinary()
					_ = yym588
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy591 := *x.Lun
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else {
						r.EncodeInt(int64(yy591))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy593 := *x.Lun
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeInt(int64(yy593))
					}
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym596 := z.EncBinary()
				_ = yym596
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym597 := z.EncBinary()
				_ = yym597
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq586[3] {
					yym599 := z.EncBinary()
					_ = yym599
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq586[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym600 := z.EncBinary()
					_ = yym600
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym601 := z.DecBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct602 := r.ContainerType()
		if yyct602 == codecSelferValueTypeMap1234 {
			yyl602 := r.ReadMapStart()
			if yyl602 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl602, d)
			}
		} else if yyct602 == codecSelferValueTypeArray1234 {
			yyl602 := r.ReadArrayStart()
			if yyl602 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl602, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys603Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys603Slc
	var yyhl603 bool = l >= 0
	for yyj603 := 0; ; yyj603++ {
		if yyhl603 {
			if yyj603 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys603Slc = r.DecodeBytes(yys603Slc, true, true)
		yys603 := string(yys603Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys603 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv604 := &x.TargetWWNs
				yym605 := z.DecBinary()
				_ = yym605
				if false {
				} else {
					z.F.DecSliceStringX(yyv604, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym607 := z.DecBinary()
				_ = yym607
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys603)
		} // end switch yys603
	} // end for yyj603
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj610 int
	var yyb610 bool
	var yyhl610 bool = l >= 0
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv611 := &x.TargetWWNs
		yym612 := z.DecBinary()
		_ = yym612
		if false {
		} else {
			z.F.DecSliceStringX(yyv611, false, d)
		}
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym614 := z.DecBinary()
		_ = yym614
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj610++
		if yyhl610 {
			yyb610 = yyj610 > l
		} else {
			yyb610 = r.CheckBreak()
		}
		if yyb610 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj610-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym617 := z.EncBinary()
		_ = yym617
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep618 := !z.EncBinary()
			yy2arr618 := z.EncBasicHandle().StructToArray
			var yyq618 [4]bool
			_, _, _ = yysep618, yyq618, yy2arr618
			const yyr618 bool = false
			yyq618[1] = x.FSType != ""
			yyq618[2] = x.Partition != 0
			yyq618[3] = x.ReadOnly != false
			var yynn618 int
			if yyr618 || yy2arr618 {
				r.EncodeArrayStart(4)
			} else {
				yynn618 = 1
				for _, b := range yyq618 {
					if b {
						yynn618++
					}
				}
				r.EncodeMapStart(yynn618)
				yynn618 = 0
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym620 := z.EncBinary()
				_ = yym620
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym621 := z.EncBinary()
				_ = yym621
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[1] {
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq618[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[2] {
					yym626 := z.EncBinary()
					_ = yym626
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq618[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[3] {
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq618[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym631 := z.DecBinary()
	_ = yym631
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct632 := r.ContainerType()
		if yyct632 == codecSelferValueTypeMap1234 {
			yyl632 := r.ReadMapStart()
			if yyl632 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl632, d)
			}
		} else if yyct632 == codecSelferValueTypeArray1234 {
			yyl632 := r.ReadArrayStart()
			if yyl632 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl632, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys633Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys633Slc
	var yyhl633 bool = l >= 0
	for yyj633 := 0; ; yyj633++ {
		if yyhl633 {
			if yyj633 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys633Slc = r.DecodeBytes(yys633Slc, true, true)
		yys633 := string(yys633Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys633 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys633)
		} // end switch yys633
	} // end for yyj633
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj638 int
	var yyb638 bool
	var yyhl638 bool = l >= 0
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj638++
		if yyhl638 {
			yyb638 = yyj638 > l
		} else {
			yyb638 = r.CheckBreak()
		}
		if yyb638 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj638-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym643 := z.EncBinary()
		_ = yym643
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep644 := !z.EncBinary()
			yy2arr644 := z.EncBasicHandle().StructToArray
			var yyq644 [3]bool
			_, _, _ = yysep644, yyq644, yy2arr644
			const yyr644 bool = false
			yyq644[1] = x.Revision != ""
			yyq644[2] = x.Directory != ""
			var yynn644 int
			if yyr644 || yy2arr644 {
				r.EncodeArrayStart(3)
			} else {
				yynn644 = 1
				for _, b := range yyq644 {
					if b {
						yynn644++
					}
				}
				r.EncodeMapStart(yynn644)
				yynn644 = 0
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym646 := z.EncBinary()
				_ = yym646
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym647 := z.EncBinary()
				_ = yym647
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq644[1] {
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq644[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq644[2] {
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq644[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym654 := z.DecBinary()
	_ = yym654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct655 := r.ContainerType()
		if yyct655 == codecSelferValueTypeMap1234 {
			yyl655 := r.ReadMapStart()
			if yyl655 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl655, d)
			}
		} else if yyct655 == codecSelferValueTypeArray1234 {
			yyl655 := r.ReadArrayStart()
			if yyl655 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys656Slc
	var yyhl656 bool = l >= 0
	for yyj656 := 0; ; yyj656++ {
		if yyhl656 {
			if yyj656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys656Slc = r.DecodeBytes(yys656Slc, true, true)
		yys656 := string(yys656Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys656 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys656)
		} // end switch yys656
	} // end for yyj656
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj660 int
	var yyb660 bool
	var yyhl660 bool = l >= 0
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj660++
		if yyhl660 {
			yyb660 = yyj660 > l
		} else {
			yyb660 = r.CheckBreak()
		}
		if yyb660 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj660-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym664 := z.EncBinary()
		_ = yym664
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep665 := !z.EncBinary()
			yy2arr665 := z.EncBasicHandle().StructToArray
			var yyq665 [1]bool
			_, _, _ = yysep665, yyq665, yy2arr665
			const yyr665 bool = false
			var yynn665 int
			if yyr665 || yy2arr665 {
				r.EncodeArrayStart(1)
			} else {
				yynn665 = 1
				for _, b := range yyq665 {
					if b {
						yynn665++
					}
				}
				r.EncodeMapStart(yynn665)
				yynn665 = 0
			}
			if yyr665 || yy2arr665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym667 := z.EncBinary()
				_ = yym667
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym668 := z.EncBinary()
				_ = yym668
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr665 || yy2arr665 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym669 := z.DecBinary()
	_ = yym669
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct670 := r.ContainerType()
		if yyct670 == codecSelferValueTypeMap1234 {
			yyl670 := r.ReadMapStart()
			if yyl670 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl670, d)
			}
		} else if yyct670 == codecSelferValueTypeArray1234 {
			yyl670 := r.ReadArrayStart()
			if yyl670 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl670, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys671Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys671Slc
	var yyhl671 bool = l >= 0
	for yyj671 := 0; ; yyj671++ {
		if yyhl671 {
			if yyj671 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys671Slc = r.DecodeBytes(yys671Slc, true, true)
		yys671 := string(yys671Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys671 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys671)
		} // end switch yys671
	} // end for yyj671
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj673 int
	var yyb673 bool
	var yyhl673 bool = l >= 0
	yyj673++
	if yyhl673 {
		yyb673 = yyj673 > l
	} else {
		yyb673 = r.CheckBreak()
	}
	if yyb673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj673++
		if yyhl673 {
			yyb673 = yyj673 > l
		} else {
			yyb673 = r.CheckBreak()
		}
		if yyb673 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj673-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym675 := z.EncBinary()
		_ = yym675
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep676 := !z.EncBinary()
			yy2arr676 := z.EncBasicHandle().StructToArray
			var yyq676 [3]bool
			_, _, _ = yysep676, yyq676, yy2arr676
			const yyr676 bool = false
			yyq676[2] = x.ReadOnly != false
			var yynn676 int
			if yyr676 || yy2arr676 {
				r.EncodeArrayStart(3)
			} else {
				yynn676 = 2
				for _, b := range yyq676 {
					if b {
						yynn676++
					}
				}
				r.EncodeMapStart(yynn676)
				yynn676 = 0
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym678 := z.EncBinary()
				_ = yym678
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym679 := z.EncBinary()
				_ = yym679
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym681 := z.EncBinary()
				_ = yym681
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym682 := z.EncBinary()
				_ = yym682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq676[2] {
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq676[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym685 := z.EncBinary()
					_ = yym685
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym686 := z.DecBinary()
	_ = yym686
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct687 := r.ContainerType()
		if yyct687 == codecSelferValueTypeMap1234 {
			yyl687 := r.ReadMapStart()
			if yyl687 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl687, d)
			}
		} else if yyct687 == codecSelferValueTypeArray1234 {
			yyl687 := r.ReadArrayStart()
			if yyl687 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl687, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys688Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys688Slc
	var yyhl688 bool = l >= 0
	for yyj688 := 0; ; yyj688++ {
		if yyhl688 {
			if yyj688 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys688Slc = r.DecodeBytes(yys688Slc, true, true)
		yys688 := string(yys688Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys688 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys688)
		} // end switch yys688
	} // end for yyj688
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj692 int
	var yyb692 bool
	var yyhl692 bool = l >= 0
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj692++
		if yyhl692 {
			yyb692 = yyj692 > l
		} else {
			yyb692 = r.CheckBreak()
		}
		if yyb692 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj692-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym696 := z.EncBinary()
		_ = yym696
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep697 := !z.EncBinary()
			yy2arr697 := z.EncBasicHandle().StructToArray
			var yyq697 [3]bool
			_, _, _ = yysep697, yyq697, yy2arr697
			const yyr697 bool = false
			yyq697[2] = x.ReadOnly != false
			var yynn697 int
			if yyr697 || yy2arr697 {
				r.EncodeArrayStart(3)
			} else {
				yynn697 = 2
				for _, b := range yyq697 {
					if b {
						yynn697++
					}
				}
				r.EncodeMapStart(yynn697)
				yynn697 = 0
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym699 := z.EncBinary()
				_ = yym699
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym700 := z.EncBinary()
				_ = yym700
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym702 := z.EncBinary()
				_ = yym702
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym703 := z.EncBinary()
				_ = yym703
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq697[2] {
					yym705 := z.EncBinary()
					_ = yym705
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq697[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym706 := z.EncBinary()
					_ = yym706
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym707 := z.DecBinary()
	_ = yym707
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct708 := r.ContainerType()
		if yyct708 == codecSelferValueTypeMap1234 {
			yyl708 := r.ReadMapStart()
			if yyl708 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl708, d)
			}
		} else if yyct708 == codecSelferValueTypeArray1234 {
			yyl708 := r.ReadArrayStart()
			if yyl708 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl708, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys709Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys709Slc
	var yyhl709 bool = l >= 0
	for yyj709 := 0; ; yyj709++ {
		if yyhl709 {
			if yyj709 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys709Slc = r.DecodeBytes(yys709Slc, true, true)
		yys709 := string(yys709Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys709 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys709)
		} // end switch yys709
	} // end for yyj709
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj713 int
	var yyb713 bool
	var yyhl713 bool = l >= 0
	yyj713++
	if yyhl713 {
		yyb713 = yyj713 > l
	} else {
		yyb713 = r.CheckBreak()
	}
	if yyb713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj713++
	if yyhl713 {
		yyb713 = yyj713 > l
	} else {
		yyb713 = r.CheckBreak()
	}
	if yyb713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj713++
	if yyhl713 {
		yyb713 = yyj713 > l
	} else {
		yyb713 = r.CheckBreak()
	}
	if yyb713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj713++
		if yyhl713 {
			yyb713 = yyj713 > l
		} else {
			yyb713 = r.CheckBreak()
		}
		if yyb713 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj713-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym717 := z.EncBinary()
		_ = yym717
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep718 := !z.EncBinary()
			yy2arr718 := z.EncBasicHandle().StructToArray
			var yyq718 [8]bool
			_, _, _ = yysep718, yyq718, yy2arr718
			const yyr718 bool = false
			yyq718[2] = x.FSType != ""
			yyq718[7] = x.ReadOnly != false
			var yynn718 int
			if yyr718 || yy2arr718 {
				r.EncodeArrayStart(8)
			} else {
				yynn718 = 6
				for _, b := range yyq718 {
					if b {
						yynn718++
					}
				}
				r.EncodeMapStart(yynn718)
				yynn718 = 0
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym723 := z.EncBinary()
				_ = yym723
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq718[2] {
					yym726 := z.EncBinary()
					_ = yym726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq718[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym729 := z.EncBinary()
				_ = yym729
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym730 := z.EncBinary()
				_ = yym730
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym732 := z.EncBinary()
				_ = yym732
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym733 := z.EncBinary()
				_ = yym733
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym735 := z.EncBinary()
				_ = yym735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq718[7] {
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq718[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym740 := z.EncBinary()
					_ = yym740
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym741 := z.DecBinary()
	_ = yym741
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct742 := r.ContainerType()
		if yyct742 == codecSelferValueTypeMap1234 {
			yyl742 := r.ReadMapStart()
			if yyl742 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl742, d)
			}
		} else if yyct742 == codecSelferValueTypeArray1234 {
			yyl742 := r.ReadArrayStart()
			if yyl742 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl742, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys743Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys743Slc
	var yyhl743 bool = l >= 0
	for yyj743 := 0; ; yyj743++ {
		if yyhl743 {
			if yyj743 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys743Slc = r.DecodeBytes(yys743Slc, true, true)
		yys743 := string(yys743Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys743 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv744 := &x.CephMonitors
				yym745 := z.DecBinary()
				_ = yym745
				if false {
				} else {
					z.F.DecSliceStringX(yyv744, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys743)
		} // end switch yys743
	} // end for yyj743
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj753 int
	var yyb753 bool
	var yyhl753 bool = l >= 0
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv754 := &x.CephMonitors
		yym755 := z.DecBinary()
		_ = yym755
		if false {
		} else {
			z.F.DecSliceStringX(yyv754, false, d)
		}
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj753++
		if yyhl753 {
			yyb753 = yyj753 > l
		} else {
			yyb753 = r.CheckBreak()
		}
		if yyb753 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj753-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym763 := z.EncBinary()
		_ = yym763
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep764 := !z.EncBinary()
			yy2arr764 := z.EncBasicHandle().StructToArray
			var yyq764 [3]bool
			_, _, _ = yysep764, yyq764, yy2arr764
			const yyr764 bool = false
			yyq764[1] = x.FSType != ""
			yyq764[2] = x.ReadOnly != false
			var yynn764 int
			if yyr764 || yy2arr764 {
				r.EncodeArrayStart(3)
			} else {
				yynn764 = 1
				for _, b := range yyq764 {
					if b {
						yynn764++
					}
				}
				r.EncodeMapStart(yynn764)
				yynn764 = 0
			}
			if yyr764 || yy2arr764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym767 := z.EncBinary()
				_ = yym767
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr764 || yy2arr764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq764[1] {
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq764[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr764 || yy2arr764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq764[2] {
					yym772 := z.EncBinary()
					_ = yym772
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq764[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym773 := z.EncBinary()
					_ = yym773
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr764 || yy2arr764 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym774 := z.DecBinary()
	_ = yym774
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct775 := r.ContainerType()
		if yyct775 == codecSelferValueTypeMap1234 {
			yyl775 := r.ReadMapStart()
			if yyl775 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl775, d)
			}
		} else if yyct775 == codecSelferValueTypeArray1234 {
			yyl775 := r.ReadArrayStart()
			if yyl775 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl775, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys776Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys776Slc
	var yyhl776 bool = l >= 0
	for yyj776 := 0; ; yyj776++ {
		if yyhl776 {
			if yyj776 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys776Slc = r.DecodeBytes(yys776Slc, true, true)
		yys776 := string(yys776Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys776 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys776)
		} // end switch yys776
	} // end for yyj776
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj780 int
	var yyb780 bool
	var yyhl780 bool = l >= 0
	yyj780++
	if yyhl780 {
		yyb780 = yyj780 > l
	} else {
		yyb780 = r.CheckBreak()
	}
	if yyb780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj780++
	if yyhl780 {
		yyb780 = yyj780 > l
	} else {
		yyb780 = r.CheckBreak()
	}
	if yyb780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj780++
	if yyhl780 {
		yyb780 = yyj780 > l
	} else {
		yyb780 = r.CheckBreak()
	}
	if yyb780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj780++
		if yyhl780 {
			yyb780 = yyj780 > l
		} else {
			yyb780 = r.CheckBreak()
		}
		if yyb780 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj780-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym784 := z.EncBinary()
		_ = yym784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep785 := !z.EncBinary()
			yy2arr785 := z.EncBasicHandle().StructToArray
			var yyq785 [5]bool
			_, _, _ = yysep785, yyq785, yy2arr785
			const yyr785 bool = false
			yyq785[1] = x.User != ""
			yyq785[2] = x.SecretFile != ""
			yyq785[3] = x.SecretRef != nil
			yyq785[4] = x.ReadOnly != false
			var yynn785 int
			if yyr785 || yy2arr785 {
				r.EncodeArrayStart(5)
			} else {
				yynn785 = 1
				for _, b := range yyq785 {
					if b {
						yynn785++
					}
				}
				r.EncodeMapStart(yynn785)
				yynn785 = 0
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq785[1] {
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq785[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq785[2] {
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq785[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym794 := z.EncBinary()
					_ = yym794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq785[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq785[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq785[4] {
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq785[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym799 := z.DecBinary()
	_ = yym799
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct800 := r.ContainerType()
		if yyct800 == codecSelferValueTypeMap1234 {
			yyl800 := r.ReadMapStart()
			if yyl800 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl800, d)
			}
		} else if yyct800 == codecSelferValueTypeArray1234 {
			yyl800 := r.ReadArrayStart()
			if yyl800 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl800, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys801Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys801Slc
	var yyhl801 bool = l >= 0
	for yyj801 := 0; ; yyj801++ {
		if yyhl801 {
			if yyj801 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys801Slc = r.DecodeBytes(yys801Slc, true, true)
		yys801 := string(yys801Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys801 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv802 := &x.Monitors
				yym803 := z.DecBinary()
				_ = yym803
				if false {
				} else {
					z.F.DecSliceStringX(yyv802, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys801)
		} // end switch yys801
	} // end for yyj801
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj808 int
	var yyb808 bool
	var yyhl808 bool = l >= 0
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv809 := &x.Monitors
		yym810 := z.DecBinary()
		_ = yym810
		if false {
		} else {
			z.F.DecSliceStringX(yyv809, false, d)
		}
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj808++
		if yyhl808 {
			yyb808 = yyj808 > l
		} else {
			yyb808 = r.CheckBreak()
		}
		if yyb808 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj808-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym815 := z.EncBinary()
		_ = yym815
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep816 := !z.EncBinary()
			yy2arr816 := z.EncBasicHandle().StructToArray
			var yyq816 [1]bool
			_, _, _ = yysep816, yyq816, yy2arr816
			const yyr816 bool = false
			var yynn816 int
			if yyr816 || yy2arr816 {
				r.EncodeArrayStart(1)
			} else {
				yynn816 = 1
				for _, b := range yyq816 {
					if b {
						yynn816++
					}
				}
				r.EncodeMapStart(yynn816)
				yynn816 = 0
			}
			if yyr816 || yy2arr816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym818 := z.EncBinary()
				_ = yym818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym819 := z.EncBinary()
				_ = yym819
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr816 || yy2arr816 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym820 := z.DecBinary()
	_ = yym820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct821 := r.ContainerType()
		if yyct821 == codecSelferValueTypeMap1234 {
			yyl821 := r.ReadMapStart()
			if yyl821 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl821, d)
			}
		} else if yyct821 == codecSelferValueTypeArray1234 {
			yyl821 := r.ReadArrayStart()
			if yyl821 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl821, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys822Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys822Slc
	var yyhl822 bool = l >= 0
	for yyj822 := 0; ; yyj822++ {
		if yyhl822 {
			if yyj822 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys822Slc = r.DecodeBytes(yys822Slc, true, true)
		yys822 := string(yys822Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys822 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys822)
		} // end switch yys822
	} // end for yyj822
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj824 int
	var yyb824 bool
	var yyhl824 bool = l >= 0
	yyj824++
	if yyhl824 {
		yyb824 = yyj824 > l
	} else {
		yyb824 = r.CheckBreak()
	}
	if yyb824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj824++
		if yyhl824 {
			yyb824 = yyj824 > l
		} else {
			yyb824 = r.CheckBreak()
		}
		if yyb824 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj824-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym826 := z.EncBinary()
		_ = yym826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep827 := !z.EncBinary()
			yy2arr827 := z.EncBasicHandle().StructToArray
			var yyq827 [1]bool
			_, _, _ = yysep827, yyq827, yy2arr827
			const yyr827 bool = false
			yyq827[0] = len(x.Items) != 0
			var yynn827 int
			if yyr827 || yy2arr827 {
				r.EncodeArrayStart(1)
			} else {
				yynn827 = 0
				for _, b := range yyq827 {
					if b {
						yynn827++
					}
				}
				r.EncodeMapStart(yynn827)
				yynn827 = 0
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym829 := z.EncBinary()
						_ = yym829
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq827[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym830 := z.EncBinary()
						_ = yym830
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym831 := z.DecBinary()
	_ = yym831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct832 := r.ContainerType()
		if yyct832 == codecSelferValueTypeMap1234 {
			yyl832 := r.ReadMapStart()
			if yyl832 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl832, d)
			}
		} else if yyct832 == codecSelferValueTypeArray1234 {
			yyl832 := r.ReadArrayStart()
			if yyl832 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys833Slc
	var yyhl833 bool = l >= 0
	for yyj833 := 0; ; yyj833++ {
		if yyhl833 {
			if yyj833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys833Slc = r.DecodeBytes(yys833Slc, true, true)
		yys833 := string(yys833Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys833 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv834 := &x.Items
				yym835 := z.DecBinary()
				_ = yym835
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv834), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys833)
		} // end switch yys833
	} // end for yyj833
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj836 int
	var yyb836 bool
	var yyhl836 bool = l >= 0
	yyj836++
	if yyhl836 {
		yyb836 = yyj836 > l
	} else {
		yyb836 = r.CheckBreak()
	}
	if yyb836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv837 := &x.Items
		yym838 := z.DecBinary()
		_ = yym838
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv837), d)
		}
	}
	for {
		yyj836++
		if yyhl836 {
			yyb836 = yyj836 > l
		} else {
			yyb836 = r.CheckBreak()
		}
		if yyb836 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj836-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym839 := z.EncBinary()
		_ = yym839
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep840 := !z.EncBinary()
			yy2arr840 := z.EncBasicHandle().StructToArray
			var yyq840 [2]bool
			_, _, _ = yysep840, yyq840, yy2arr840
			const yyr840 bool = false
			var yynn840 int
			if yyr840 || yy2arr840 {
				r.EncodeArrayStart(2)
			} else {
				yynn840 = 2
				for _, b := range yyq840 {
					if b {
						yynn840++
					}
				}
				r.EncodeMapStart(yynn840)
				yynn840 = 0
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym842 := z.EncBinary()
				_ = yym842
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym843 := z.EncBinary()
				_ = yym843
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy845 := &x.FieldRef
				yy845.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy846 := &x.FieldRef
				yy846.CodecEncodeSelf(e)
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym847 := z.DecBinary()
	_ = yym847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct848 := r.ContainerType()
		if yyct848 == codecSelferValueTypeMap1234 {
			yyl848 := r.ReadMapStart()
			if yyl848 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl848, d)
			}
		} else if yyct848 == codecSelferValueTypeArray1234 {
			yyl848 := r.ReadArrayStart()
			if yyl848 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl848, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys849Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys849Slc
	var yyhl849 bool = l >= 0
	for yyj849 := 0; ; yyj849++ {
		if yyhl849 {
			if yyj849 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys849Slc = r.DecodeBytes(yys849Slc, true, true)
		yys849 := string(yys849Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys849 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv851 := &x.FieldRef
				yyv851.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys849)
		} // end switch yys849
	} // end for yyj849
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj852 int
	var yyb852 bool
	var yyhl852 bool = l >= 0
	yyj852++
	if yyhl852 {
		yyb852 = yyj852 > l
	} else {
		yyb852 = r.CheckBreak()
	}
	if yyb852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj852++
	if yyhl852 {
		yyb852 = yyj852 > l
	} else {
		yyb852 = r.CheckBreak()
	}
	if yyb852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv854 := &x.FieldRef
		yyv854.CodecDecodeSelf(d)
	}
	for {
		yyj852++
		if yyhl852 {
			yyb852 = yyj852 > l
		} else {
			yyb852 = r.CheckBreak()
		}
		if yyb852 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj852-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym855 := z.EncBinary()
		_ = yym855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep856 := !z.EncBinary()
			yy2arr856 := z.EncBasicHandle().StructToArray
			var yyq856 [5]bool
			_, _, _ = yysep856, yyq856, yy2arr856
			const yyr856 bool = false
			yyq856[0] = x.Name != ""
			yyq856[1] = x.HostPort != 0
			yyq856[3] = x.Protocol != ""
			yyq856[4] = x.HostIP != ""
			var yynn856 int
			if yyr856 || yy2arr856 {
				r.EncodeArrayStart(5)
			} else {
				yynn856 = 1
				for _, b := range yyq856 {
					if b {
						yynn856++
					}
				}
				r.EncodeMapStart(yynn856)
				yynn856 = 0
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[0] {
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq856[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[1] {
					yym861 := z.EncBinary()
					_ = yym861
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq856[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym864 := z.EncBinary()
				_ = yym864
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym865 := z.EncBinary()
				_ = yym865
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq856[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[4] {
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq856[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym869 := z.EncBinary()
					_ = yym869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym870 := z.DecBinary()
	_ = yym870
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct871 := r.ContainerType()
		if yyct871 == codecSelferValueTypeMap1234 {
			yyl871 := r.ReadMapStart()
			if yyl871 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl871, d)
			}
		} else if yyct871 == codecSelferValueTypeArray1234 {
			yyl871 := r.ReadArrayStart()
			if yyl871 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl871, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys872Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys872Slc
	var yyhl872 bool = l >= 0
	for yyj872 := 0; ; yyj872++ {
		if yyhl872 {
			if yyj872 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys872Slc = r.DecodeBytes(yys872Slc, true, true)
		yys872 := string(yys872Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys872 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys872)
		} // end switch yys872
	} // end for yyj872
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj878 int
	var yyb878 bool
	var yyhl878 bool = l >= 0
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj878++
		if yyhl878 {
			yyb878 = yyj878 > l
		} else {
			yyb878 = r.CheckBreak()
		}
		if yyb878 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj878-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym884 := z.EncBinary()
		_ = yym884
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep885 := !z.EncBinary()
			yy2arr885 := z.EncBasicHandle().StructToArray
			var yyq885 [3]bool
			_, _, _ = yysep885, yyq885, yy2arr885
			const yyr885 bool = false
			yyq885[1] = x.ReadOnly != false
			var yynn885 int
			if yyr885 || yy2arr885 {
				r.EncodeArrayStart(3)
			} else {
				yynn885 = 2
				for _, b := range yyq885 {
					if b {
						yynn885++
					}
				}
				r.EncodeMapStart(yynn885)
				yynn885 = 0
			}
			if yyr885 || yy2arr885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym887 := z.EncBinary()
				_ = yym887
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym888 := z.EncBinary()
				_ = yym888
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr885 || yy2arr885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq885[1] {
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq885[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr885 || yy2arr885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym893 := z.EncBinary()
				_ = yym893
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym894 := z.EncBinary()
				_ = yym894
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr885 || yy2arr885 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym895 := z.DecBinary()
	_ = yym895
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct896 := r.ContainerType()
		if yyct896 == codecSelferValueTypeMap1234 {
			yyl896 := r.ReadMapStart()
			if yyl896 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl896, d)
			}
		} else if yyct896 == codecSelferValueTypeArray1234 {
			yyl896 := r.ReadArrayStart()
			if yyl896 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl896, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys897Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys897Slc
	var yyhl897 bool = l >= 0
	for yyj897 := 0; ; yyj897++ {
		if yyhl897 {
			if yyj897 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys897Slc = r.DecodeBytes(yys897Slc, true, true)
		yys897 := string(yys897Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys897 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys897)
		} // end switch yys897
	} // end for yyj897
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj901 int
	var yyb901 bool
	var yyhl901 bool = l >= 0
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj901++
		if yyhl901 {
			yyb901 = yyj901 > l
		} else {
			yyb901 = r.CheckBreak()
		}
		if yyb901 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj901-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym905 := z.EncBinary()
		_ = yym905
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep906 := !z.EncBinary()
			yy2arr906 := z.EncBasicHandle().StructToArray
			var yyq906 [3]bool
			_, _, _ = yysep906, yyq906, yy2arr906
			const yyr906 bool = false
			yyq906[1] = x.Value != ""
			yyq906[2] = x.ValueFrom != nil
			var yynn906 int
			if yyr906 || yy2arr906 {
				r.EncodeArrayStart(3)
			} else {
				yynn906 = 1
				for _, b := range yyq906 {
					if b {
						yynn906++
					}
				}
				r.EncodeMapStart(yynn906)
				yynn906 = 0
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym908 := z.EncBinary()
				_ = yym908
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym909 := z.EncBinary()
				_ = yym909
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq906[1] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq906[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq906[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq906[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym914 := z.DecBinary()
	_ = yym914
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct915 := r.ContainerType()
		if yyct915 == codecSelferValueTypeMap1234 {
			yyl915 := r.ReadMapStart()
			if yyl915 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl915, d)
			}
		} else if yyct915 == codecSelferValueTypeArray1234 {
			yyl915 := r.ReadArrayStart()
			if yyl915 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl915, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys916Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys916Slc
	var yyhl916 bool = l >= 0
	for yyj916 := 0; ; yyj916++ {
		if yyhl916 {
			if yyj916 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys916Slc = r.DecodeBytes(yys916Slc, true, true)
		yys916 := string(yys916Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys916 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys916)
		} // end switch yys916
	} // end for yyj916
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj920 int
	var yyb920 bool
	var yyhl920 bool = l >= 0
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj920++
		if yyhl920 {
			yyb920 = yyj920 > l
		} else {
			yyb920 = r.CheckBreak()
		}
		if yyb920 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj920-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym924 := z.EncBinary()
		_ = yym924
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep925 := !z.EncBinary()
			yy2arr925 := z.EncBasicHandle().StructToArray
			var yyq925 [1]bool
			_, _, _ = yysep925, yyq925, yy2arr925
			const yyr925 bool = false
			var yynn925 int
			if yyr925 || yy2arr925 {
				r.EncodeArrayStart(1)
			} else {
				yynn925 = 1
				for _, b := range yyq925 {
					if b {
						yynn925++
					}
				}
				r.EncodeMapStart(yynn925)
				yynn925 = 0
			}
			if yyr925 || yy2arr925 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yyr925 || yy2arr925 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym927 := z.DecBinary()
	_ = yym927
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct928 := r.ContainerType()
		if yyct928 == codecSelferValueTypeMap1234 {
			yyl928 := r.ReadMapStart()
			if yyl928 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl928, d)
			}
		} else if yyct928 == codecSelferValueTypeArray1234 {
			yyl928 := r.ReadArrayStart()
			if yyl928 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl928, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys929Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys929Slc
	var yyhl929 bool = l >= 0
	for yyj929 := 0; ; yyj929++ {
		if yyhl929 {
			if yyj929 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys929Slc = r.DecodeBytes(yys929Slc, true, true)
		yys929 := string(yys929Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys929 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys929)
		} // end switch yys929
	} // end for yyj929
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj931 int
	var yyb931 bool
	var yyhl931 bool = l >= 0
	yyj931++
	if yyhl931 {
		yyb931 = yyj931 > l
	} else {
		yyb931 = r.CheckBreak()
	}
	if yyb931 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj931++
		if yyhl931 {
			yyb931 = yyj931 > l
		} else {
			yyb931 = r.CheckBreak()
		}
		if yyb931 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj931-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym933 := z.EncBinary()
		_ = yym933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep934 := !z.EncBinary()
			yy2arr934 := z.EncBasicHandle().StructToArray
			var yyq934 [2]bool
			_, _, _ = yysep934, yyq934, yy2arr934
			const yyr934 bool = false
			var yynn934 int
			if yyr934 || yy2arr934 {
				r.EncodeArrayStart(2)
			} else {
				yynn934 = 2
				for _, b := range yyq934 {
					if b {
						yynn934++
					}
				}
				r.EncodeMapStart(yynn934)
				yynn934 = 0
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym936 := z.EncBinary()
				_ = yym936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym937 := z.EncBinary()
				_ = yym937
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym939 := z.EncBinary()
				_ = yym939
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym940 := z.EncBinary()
				_ = yym940
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym941 := z.DecBinary()
	_ = yym941
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct942 := r.ContainerType()
		if yyct942 == codecSelferValueTypeMap1234 {
			yyl942 := r.ReadMapStart()
			if yyl942 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl942, d)
			}
		} else if yyct942 == codecSelferValueTypeArray1234 {
			yyl942 := r.ReadArrayStart()
			if yyl942 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl942, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys943Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys943Slc
	var yyhl943 bool = l >= 0
	for yyj943 := 0; ; yyj943++ {
		if yyhl943 {
			if yyj943 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys943Slc = r.DecodeBytes(yys943Slc, true, true)
		yys943 := string(yys943Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys943 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys943)
		} // end switch yys943
	} // end for yyj943
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj946 int
	var yyb946 bool
	var yyhl946 bool = l >= 0
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj946++
		if yyhl946 {
			yyb946 = yyj946 > l
		} else {
			yyb946 = r.CheckBreak()
		}
		if yyb946 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj946-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym949 := z.EncBinary()
		_ = yym949
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep950 := !z.EncBinary()
			yy2arr950 := z.EncBasicHandle().StructToArray
			var yyq950 [4]bool
			_, _, _ = yysep950, yyq950, yy2arr950
			const yyr950 bool = false
			yyq950[0] = x.Path != ""
			yyq950[1] = true
			yyq950[2] = x.Host != ""
			yyq950[3] = x.Scheme != ""
			var yynn950 int
			if yyr950 || yy2arr950 {
				r.EncodeArrayStart(4)
			} else {
				yynn950 = 0
				for _, b := range yyq950 {
					if b {
						yynn950++
					}
				}
				r.EncodeMapStart(yynn950)
				yynn950 = 0
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq950[0] {
					yym952 := z.EncBinary()
					_ = yym952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq950[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym953 := z.EncBinary()
					_ = yym953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq950[1] {
					yy955 := &x.Port
					yym956 := z.EncBinary()
					_ = yym956
					if false {
					} else if z.HasExtensions() && z.EncExt(yy955) {
					} else if !yym956 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy955)
					} else {
						z.EncFallback(yy955)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq950[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy957 := &x.Port
					yym958 := z.EncBinary()
					_ = yym958
					if false {
					} else if z.HasExtensions() && z.EncExt(yy957) {
					} else if !yym958 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy957)
					} else {
						z.EncFallback(yy957)
					}
				}
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq950[2] {
					yym960 := z.EncBinary()
					_ = yym960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq950[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym961 := z.EncBinary()
					_ = yym961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq950[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq950[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym963 := z.DecBinary()
	_ = yym963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct964 := r.ContainerType()
		if yyct964 == codecSelferValueTypeMap1234 {
			yyl964 := r.ReadMapStart()
			if yyl964 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl964, d)
			}
		} else if yyct964 == codecSelferValueTypeArray1234 {
			yyl964 := r.ReadArrayStart()
			if yyl964 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys965Slc
	var yyhl965 bool = l >= 0
	for yyj965 := 0; ; yyj965++ {
		if yyhl965 {
			if yyj965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys965Slc = r.DecodeBytes(yys965Slc, true, true)
		yys965 := string(yys965Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys965 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv967 := &x.Port
				yym968 := z.DecBinary()
				_ = yym968
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv967) {
				} else if !yym968 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv967)
				} else {
					z.DecFallback(yyv967, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys965)
		} // end switch yys965
	} // end for yyj965
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj971 int
	var yyb971 bool
	var yyhl971 bool = l >= 0
	yyj971++
	if yyhl971 {
		yyb971 = yyj971 > l
	} else {
		yyb971 = r.CheckBreak()
	}
	if yyb971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj971++
	if yyhl971 {
		yyb971 = yyj971 > l
	} else {
		yyb971 = r.CheckBreak()
	}
	if yyb971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv973 := &x.Port
		yym974 := z.DecBinary()
		_ = yym974
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv973) {
		} else if !yym974 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv973)
		} else {
			z.DecFallback(yyv973, false)
		}
	}
	yyj971++
	if yyhl971 {
		yyb971 = yyj971 > l
	} else {
		yyb971 = r.CheckBreak()
	}
	if yyb971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj971++
	if yyhl971 {
		yyb971 = yyj971 > l
	} else {
		yyb971 = r.CheckBreak()
	}
	if yyb971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj971++
		if yyhl971 {
			yyb971 = yyj971 > l
		} else {
			yyb971 = r.CheckBreak()
		}
		if yyb971 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj971-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym977 := z.EncBinary()
	_ = yym977
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym978 := z.DecBinary()
	_ = yym978
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym979 := z.EncBinary()
		_ = yym979
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep980 := !z.EncBinary()
			yy2arr980 := z.EncBasicHandle().StructToArray
			var yyq980 [1]bool
			_, _, _ = yysep980, yyq980, yy2arr980
			const yyr980 bool = false
			yyq980[0] = true
			var yynn980 int
			if yyr980 || yy2arr980 {
				r.EncodeArrayStart(1)
			} else {
				yynn980 = 0
				for _, b := range yyq980 {
					if b {
						yynn980++
					}
				}
				r.EncodeMapStart(yynn980)
				yynn980 = 0
			}
			if yyr980 || yy2arr980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq980[0] {
					yy982 := &x.Port
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else if z.HasExtensions() && z.EncExt(yy982) {
					} else if !yym983 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy982)
					} else {
						z.EncFallback(yy982)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq980[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy984 := &x.Port
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else if z.HasExtensions() && z.EncExt(yy984) {
					} else if !yym985 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy984)
					} else {
						z.EncFallback(yy984)
					}
				}
			}
			if yyr980 || yy2arr980 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym986 := z.DecBinary()
	_ = yym986
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct987 := r.ContainerType()
		if yyct987 == codecSelferValueTypeMap1234 {
			yyl987 := r.ReadMapStart()
			if yyl987 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl987, d)
			}
		} else if yyct987 == codecSelferValueTypeArray1234 {
			yyl987 := r.ReadArrayStart()
			if yyl987 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl987, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys988Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys988Slc
	var yyhl988 bool = l >= 0
	for yyj988 := 0; ; yyj988++ {
		if yyhl988 {
			if yyj988 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys988Slc = r.DecodeBytes(yys988Slc, true, true)
		yys988 := string(yys988Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys988 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv989 := &x.Port
				yym990 := z.DecBinary()
				_ = yym990
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv989) {
				} else if !yym990 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv989)
				} else {
					z.DecFallback(yyv989, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys988)
		} // end switch yys988
	} // end for yyj988
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj991 int
	var yyb991 bool
	var yyhl991 bool = l >= 0
	yyj991++
	if yyhl991 {
		yyb991 = yyj991 > l
	} else {
		yyb991 = r.CheckBreak()
	}
	if yyb991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv992 := &x.Port
		yym993 := z.DecBinary()
		_ = yym993
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv992) {
		} else if !yym993 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv992)
		} else {
			z.DecFallback(yyv992, false)
		}
	}
	for {
		yyj991++
		if yyhl991 {
			yyb991 = yyj991 > l
		} else {
			yyb991 = r.CheckBreak()
		}
		if yyb991 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj991-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym994 := z.EncBinary()
		_ = yym994
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep995 := !z.EncBinary()
			yy2arr995 := z.EncBasicHandle().StructToArray
			var yyq995 [1]bool
			_, _, _ = yysep995, yyq995, yy2arr995
			const yyr995 bool = false
			yyq995[0] = len(x.Command) != 0
			var yynn995 int
			if yyr995 || yy2arr995 {
				r.EncodeArrayStart(1)
			} else {
				yynn995 = 0
				for _, b := range yyq995 {
					if b {
						yynn995++
					}
				}
				r.EncodeMapStart(yynn995)
				yynn995 = 0
			}
			if yyr995 || yy2arr995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq995[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym997 := z.EncBinary()
						_ = yym997
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq995[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym998 := z.EncBinary()
						_ = yym998
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr995 || yy2arr995 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym999 := z.DecBinary()
	_ = yym999
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1000 := r.ContainerType()
		if yyct1000 == codecSelferValueTypeMap1234 {
			yyl1000 := r.ReadMapStart()
			if yyl1000 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1000, d)
			}
		} else if yyct1000 == codecSelferValueTypeArray1234 {
			yyl1000 := r.ReadArrayStart()
			if yyl1000 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1000, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1001Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1001Slc
	var yyhl1001 bool = l >= 0
	for yyj1001 := 0; ; yyj1001++ {
		if yyhl1001 {
			if yyj1001 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1001Slc = r.DecodeBytes(yys1001Slc, true, true)
		yys1001 := string(yys1001Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1001 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1002 := &x.Command
				yym1003 := z.DecBinary()
				_ = yym1003
				if false {
				} else {
					z.F.DecSliceStringX(yyv1002, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1001)
		} // end switch yys1001
	} // end for yyj1001
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1004 int
	var yyb1004 bool
	var yyhl1004 bool = l >= 0
	yyj1004++
	if yyhl1004 {
		yyb1004 = yyj1004 > l
	} else {
		yyb1004 = r.CheckBreak()
	}
	if yyb1004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1005 := &x.Command
		yym1006 := z.DecBinary()
		_ = yym1006
		if false {
		} else {
			z.F.DecSliceStringX(yyv1005, false, d)
		}
	}
	for {
		yyj1004++
		if yyhl1004 {
			yyb1004 = yyj1004 > l
		} else {
			yyb1004 = r.CheckBreak()
		}
		if yyb1004 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1004-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1007 := z.EncBinary()
		_ = yym1007
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1008 := !z.EncBinary()
			yy2arr1008 := z.EncBasicHandle().StructToArray
			var yyq1008 [8]bool
			_, _, _ = yysep1008, yyq1008, yy2arr1008
			const yyr1008 bool = false
			yyq1008[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1008[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1008[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1008[3] = x.InitialDelaySeconds != 0
			yyq1008[4] = x.TimeoutSeconds != 0
			yyq1008[5] = x.PeriodSeconds != 0
			yyq1008[6] = x.SuccessThreshold != 0
			yyq1008[7] = x.FailureThreshold != 0
			var yynn1008 int
			if yyr1008 || yy2arr1008 {
				r.EncodeArrayStart(8)
			} else {
				yynn1008 = 0
				for _, b := range yyq1008 {
					if b {
						yynn1008++
					}
				}
				r.EncodeMapStart(yynn1008)
				yynn1008 = 0
			}
			var yyn1009 bool
			if x.Handler.Exec == nil {
				yyn1009 = true
				goto LABEL1009
			}
		LABEL1009:
			if yyr1008 || yy2arr1008 {
				if yyn1009 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1008[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1008[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1009 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1010 bool
			if x.Handler.HTTPGet == nil {
				yyn1010 = true
				goto LABEL1010
			}
		LABEL1010:
			if yyr1008 || yy2arr1008 {
				if yyn1010 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1008[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1008[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1010 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1011 bool
			if x.Handler.TCPSocket == nil {
				yyn1011 = true
				goto LABEL1011
			}
		LABEL1011:
			if yyr1008 || yy2arr1008 {
				if yyn1011 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1008[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1008[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1011 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1008[3] {
					yym1013 := z.EncBinary()
					_ = yym1013
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1014 := z.EncBinary()
					_ = yym1014
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1008[4] {
					yym1016 := z.EncBinary()
					_ = yym1016
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1017 := z.EncBinary()
					_ = yym1017
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1008[5] {
					yym1019 := z.EncBinary()
					_ = yym1019
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1020 := z.EncBinary()
					_ = yym1020
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1008[6] {
					yym1022 := z.EncBinary()
					_ = yym1022
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1023 := z.EncBinary()
					_ = yym1023
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1008[7] {
					yym1025 := z.EncBinary()
					_ = yym1025
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1027 := z.DecBinary()
	_ = yym1027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1028 := r.ContainerType()
		if yyct1028 == codecSelferValueTypeMap1234 {
			yyl1028 := r.ReadMapStart()
			if yyl1028 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1028, d)
			}
		} else if yyct1028 == codecSelferValueTypeArray1234 {
			yyl1028 := r.ReadArrayStart()
			if yyl1028 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1029Slc
	var yyhl1029 bool = l >= 0
	for yyj1029 := 0; ; yyj1029++ {
		if yyhl1029 {
			if yyj1029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1029Slc = r.DecodeBytes(yys1029Slc, true, true)
		yys1029 := string(yys1029Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1029 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1029)
		} // end switch yys1029
	} // end for yyj1029
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1038 int
	var yyb1038 bool
	var yyhl1038 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1038++
		if yyhl1038 {
			yyb1038 = yyj1038 > l
		} else {
			yyb1038 = r.CheckBreak()
		}
		if yyb1038 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1038-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1047 := z.EncBinary()
	_ = yym1047
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1048 := z.DecBinary()
	_ = yym1048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1049 := z.EncBinary()
	_ = yym1049
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1050 := z.DecBinary()
	_ = yym1050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1051 := z.EncBinary()
		_ = yym1051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1052 := !z.EncBinary()
			yy2arr1052 := z.EncBasicHandle().StructToArray
			var yyq1052 [2]bool
			_, _, _ = yysep1052, yyq1052, yy2arr1052
			const yyr1052 bool = false
			yyq1052[0] = len(x.Add) != 0
			yyq1052[1] = len(x.Drop) != 0
			var yynn1052 int
			if yyr1052 || yy2arr1052 {
				r.EncodeArrayStart(2)
			} else {
				yynn1052 = 0
				for _, b := range yyq1052 {
					if b {
						yynn1052++
					}
				}
				r.EncodeMapStart(yynn1052)
				yynn1052 = 0
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1052[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1054 := z.EncBinary()
						_ = yym1054
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1052[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1055 := z.EncBinary()
						_ = yym1055
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1052[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1057 := z.EncBinary()
						_ = yym1057
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1052[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1058 := z.EncBinary()
						_ = yym1058
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1059 := z.DecBinary()
	_ = yym1059
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1060 := r.ContainerType()
		if yyct1060 == codecSelferValueTypeMap1234 {
			yyl1060 := r.ReadMapStart()
			if yyl1060 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1060, d)
			}
		} else if yyct1060 == codecSelferValueTypeArray1234 {
			yyl1060 := r.ReadArrayStart()
			if yyl1060 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1060, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1061Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1061Slc
	var yyhl1061 bool = l >= 0
	for yyj1061 := 0; ; yyj1061++ {
		if yyhl1061 {
			if yyj1061 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1061Slc = r.DecodeBytes(yys1061Slc, true, true)
		yys1061 := string(yys1061Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1061 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1062 := &x.Add
				yym1063 := z.DecBinary()
				_ = yym1063
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1062), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1064 := &x.Drop
				yym1065 := z.DecBinary()
				_ = yym1065
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1064), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1061)
		} // end switch yys1061
	} // end for yyj1061
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1066 int
	var yyb1066 bool
	var yyhl1066 bool = l >= 0
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1067 := &x.Add
		yym1068 := z.DecBinary()
		_ = yym1068
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1067), d)
		}
	}
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1069 := &x.Drop
		yym1070 := z.DecBinary()
		_ = yym1070
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1069), d)
		}
	}
	for {
		yyj1066++
		if yyhl1066 {
			yyb1066 = yyj1066 > l
		} else {
			yyb1066 = r.CheckBreak()
		}
		if yyb1066 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1066-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1071 := z.EncBinary()
		_ = yym1071
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1072 := !z.EncBinary()
			yy2arr1072 := z.EncBasicHandle().StructToArray
			var yyq1072 [2]bool
			_, _, _ = yysep1072, yyq1072, yy2arr1072
			const yyr1072 bool = false
			yyq1072[0] = len(x.Limits) != 0
			yyq1072[1] = len(x.Requests) != 0
			var yynn1072 int
			if yyr1072 || yy2arr1072 {
				r.EncodeArrayStart(2)
			} else {
				yynn1072 = 0
				for _, b := range yyq1072 {
					if b {
						yynn1072++
					}
				}
				r.EncodeMapStart(yynn1072)
				yynn1072 = 0
			}
			if yyr1072 || yy2arr1072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1072[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1072[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1072 || yy2arr1072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1072[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1072[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1072 || yy2arr1072 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1075 := z.DecBinary()
	_ = yym1075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1076 := r.ContainerType()
		if yyct1076 == codecSelferValueTypeMap1234 {
			yyl1076 := r.ReadMapStart()
			if yyl1076 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1076, d)
			}
		} else if yyct1076 == codecSelferValueTypeArray1234 {
			yyl1076 := r.ReadArrayStart()
			if yyl1076 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1077Slc
	var yyhl1077 bool = l >= 0
	for yyj1077 := 0; ; yyj1077++ {
		if yyhl1077 {
			if yyj1077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1077Slc = r.DecodeBytes(yys1077Slc, true, true)
		yys1077 := string(yys1077Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1077 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1078 := &x.Limits
				yyv1078.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1079 := &x.Requests
				yyv1079.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1077)
		} // end switch yys1077
	} // end for yyj1077
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1080 int
	var yyb1080 bool
	var yyhl1080 bool = l >= 0
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1081 := &x.Limits
		yyv1081.CodecDecodeSelf(d)
	}
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1082 := &x.Requests
		yyv1082.CodecDecodeSelf(d)
	}
	for {
		yyj1080++
		if yyhl1080 {
			yyb1080 = yyj1080 > l
		} else {
			yyb1080 = r.CheckBreak()
		}
		if yyb1080 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1080-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1083 := z.EncBinary()
		_ = yym1083
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1084 := !z.EncBinary()
			yy2arr1084 := z.EncBasicHandle().StructToArray
			var yyq1084 [18]bool
			_, _, _ = yysep1084, yyq1084, yy2arr1084
			const yyr1084 bool = false
			yyq1084[2] = len(x.Command) != 0
			yyq1084[3] = len(x.Args) != 0
			yyq1084[4] = x.WorkingDir != ""
			yyq1084[5] = len(x.Ports) != 0
			yyq1084[6] = len(x.Env) != 0
			yyq1084[7] = true
			yyq1084[8] = len(x.VolumeMounts) != 0
			yyq1084[9] = x.LivenessProbe != nil
			yyq1084[10] = x.ReadinessProbe != nil
			yyq1084[11] = x.Lifecycle != nil
			yyq1084[12] = x.TerminationMessagePath != ""
			yyq1084[14] = x.SecurityContext != nil
			yyq1084[15] = x.Stdin != false
			yyq1084[16] = x.StdinOnce != false
			yyq1084[17] = x.TTY != false
			var yynn1084 int
			if yyr1084 || yy2arr1084 {
				r.EncodeArrayStart(18)
			} else {
				yynn1084 = 3
				for _, b := range yyq1084 {
					if b {
						yynn1084++
					}
				}
				r.EncodeMapStart(yynn1084)
				yynn1084 = 0
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1086 := z.EncBinary()
				_ = yym1086
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1087 := z.EncBinary()
				_ = yym1087
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1089 := z.EncBinary()
				_ = yym1089
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1090 := z.EncBinary()
				_ = yym1090
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1092 := z.EncBinary()
						_ = yym1092
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1093 := z.EncBinary()
						_ = yym1093
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1095 := z.EncBinary()
						_ = yym1095
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1096 := z.EncBinary()
						_ = yym1096
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[4] {
					yym1098 := z.EncBinary()
					_ = yym1098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1084[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1101 := z.EncBinary()
						_ = yym1101
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1102 := z.EncBinary()
						_ = yym1102
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1104 := z.EncBinary()
						_ = yym1104
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1105 := z.EncBinary()
						_ = yym1105
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[7] {
					yy1107 := &x.Resources
					yy1107.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1108 := &x.Resources
					yy1108.CodecEncodeSelf(e)
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1110 := z.EncBinary()
						_ = yym1110
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1111 := z.EncBinary()
						_ = yym1111
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[12] {
					yym1116 := z.EncBinary()
					_ = yym1116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1084[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1117 := z.EncBinary()
					_ = yym1117
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[15] {
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1084[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[16] {
					yym1124 := z.EncBinary()
					_ = yym1124
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1084[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1125 := z.EncBinary()
					_ = yym1125
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[17] {
					yym1127 := z.EncBinary()
					_ = yym1127
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1084[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1128 := z.EncBinary()
					_ = yym1128
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1129 := z.DecBinary()
	_ = yym1129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1130 := r.ContainerType()
		if yyct1130 == codecSelferValueTypeMap1234 {
			yyl1130 := r.ReadMapStart()
			if yyl1130 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1130, d)
			}
		} else if yyct1130 == codecSelferValueTypeArray1234 {
			yyl1130 := r.ReadArrayStart()
			if yyl1130 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1131Slc
	var yyhl1131 bool = l >= 0
	for yyj1131 := 0; ; yyj1131++ {
		if yyhl1131 {
			if yyj1131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1131Slc = r.DecodeBytes(yys1131Slc, true, true)
		yys1131 := string(yys1131Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1131 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1134 := &x.Command
				yym1135 := z.DecBinary()
				_ = yym1135
				if false {
				} else {
					z.F.DecSliceStringX(yyv1134, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1136 := &x.Args
				yym1137 := z.DecBinary()
				_ = yym1137
				if false {
				} else {
					z.F.DecSliceStringX(yyv1136, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1139 := &x.Ports
				yym1140 := z.DecBinary()
				_ = yym1140
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1139), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1141 := &x.Env
				yym1142 := z.DecBinary()
				_ = yym1142
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1141), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1143 := &x.Resources
				yyv1143.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1144 := &x.VolumeMounts
				yym1145 := z.DecBinary()
				_ = yym1145
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1144), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1131)
		} // end switch yys1131
	} // end for yyj1131
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1155 int
	var yyb1155 bool
	var yyhl1155 bool = l >= 0
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1158 := &x.Command
		yym1159 := z.DecBinary()
		_ = yym1159
		if false {
		} else {
			z.F.DecSliceStringX(yyv1158, false, d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1160 := &x.Args
		yym1161 := z.DecBinary()
		_ = yym1161
		if false {
		} else {
			z.F.DecSliceStringX(yyv1160, false, d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1163 := &x.Ports
		yym1164 := z.DecBinary()
		_ = yym1164
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1163), d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1165 := &x.Env
		yym1166 := z.DecBinary()
		_ = yym1166
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1165), d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1167 := &x.Resources
		yyv1167.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1168 := &x.VolumeMounts
		yym1169 := z.DecBinary()
		_ = yym1169
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1168), d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1155++
		if yyhl1155 {
			yyb1155 = yyj1155 > l
		} else {
			yyb1155 = r.CheckBreak()
		}
		if yyb1155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1179 := z.EncBinary()
		_ = yym1179
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1180 := !z.EncBinary()
			yy2arr1180 := z.EncBasicHandle().StructToArray
			var yyq1180 [3]bool
			_, _, _ = yysep1180, yyq1180, yy2arr1180
			const yyr1180 bool = false
			yyq1180[0] = x.Exec != nil
			yyq1180[1] = x.HTTPGet != nil
			yyq1180[2] = x.TCPSocket != nil
			var yynn1180 int
			if yyr1180 || yy2arr1180 {
				r.EncodeArrayStart(3)
			} else {
				yynn1180 = 0
				for _, b := range yyq1180 {
					if b {
						yynn1180++
					}
				}
				r.EncodeMapStart(yynn1180)
				yynn1180 = 0
			}
			if yyr1180 || yy2arr1180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1180[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1180[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1180 || yy2arr1180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1180[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1180[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1180 || yy2arr1180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1180[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1180[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1180 || yy2arr1180 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1184 := z.DecBinary()
	_ = yym1184
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1185 := r.ContainerType()
		if yyct1185 == codecSelferValueTypeMap1234 {
			yyl1185 := r.ReadMapStart()
			if yyl1185 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1185, d)
			}
		} else if yyct1185 == codecSelferValueTypeArray1234 {
			yyl1185 := r.ReadArrayStart()
			if yyl1185 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1185, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1186Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1186Slc
	var yyhl1186 bool = l >= 0
	for yyj1186 := 0; ; yyj1186++ {
		if yyhl1186 {
			if yyj1186 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1186Slc = r.DecodeBytes(yys1186Slc, true, true)
		yys1186 := string(yys1186Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1186 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1186)
		} // end switch yys1186
	} // end for yyj1186
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1190 int
	var yyb1190 bool
	var yyhl1190 bool = l >= 0
	yyj1190++
	if yyhl1190 {
		yyb1190 = yyj1190 > l
	} else {
		yyb1190 = r.CheckBreak()
	}
	if yyb1190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1190++
	if yyhl1190 {
		yyb1190 = yyj1190 > l
	} else {
		yyb1190 = r.CheckBreak()
	}
	if yyb1190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1190++
	if yyhl1190 {
		yyb1190 = yyj1190 > l
	} else {
		yyb1190 = r.CheckBreak()
	}
	if yyb1190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1190++
		if yyhl1190 {
			yyb1190 = yyj1190 > l
		} else {
			yyb1190 = r.CheckBreak()
		}
		if yyb1190 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1190-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1194 := z.EncBinary()
		_ = yym1194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1195 := !z.EncBinary()
			yy2arr1195 := z.EncBasicHandle().StructToArray
			var yyq1195 [2]bool
			_, _, _ = yysep1195, yyq1195, yy2arr1195
			const yyr1195 bool = false
			yyq1195[0] = x.PostStart != nil
			yyq1195[1] = x.PreStop != nil
			var yynn1195 int
			if yyr1195 || yy2arr1195 {
				r.EncodeArrayStart(2)
			} else {
				yynn1195 = 0
				for _, b := range yyq1195 {
					if b {
						yynn1195++
					}
				}
				r.EncodeMapStart(yynn1195)
				yynn1195 = 0
			}
			if yyr1195 || yy2arr1195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1195[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1195[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1195 || yy2arr1195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1195[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1195[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1195 || yy2arr1195 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1198 := z.DecBinary()
	_ = yym1198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1199 := r.ContainerType()
		if yyct1199 == codecSelferValueTypeMap1234 {
			yyl1199 := r.ReadMapStart()
			if yyl1199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1199, d)
			}
		} else if yyct1199 == codecSelferValueTypeArray1234 {
			yyl1199 := r.ReadArrayStart()
			if yyl1199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1200Slc
	var yyhl1200 bool = l >= 0
	for yyj1200 := 0; ; yyj1200++ {
		if yyhl1200 {
			if yyj1200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1200Slc = r.DecodeBytes(yys1200Slc, true, true)
		yys1200 := string(yys1200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1200 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1200)
		} // end switch yys1200
	} // end for yyj1200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1203 int
	var yyb1203 bool
	var yyhl1203 bool = l >= 0
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1203++
		if yyhl1203 {
			yyb1203 = yyj1203 > l
		} else {
			yyb1203 = r.CheckBreak()
		}
		if yyb1203 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1203-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1206 := z.EncBinary()
	_ = yym1206
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1207 := z.DecBinary()
	_ = yym1207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1208 := z.EncBinary()
		_ = yym1208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1209 := !z.EncBinary()
			yy2arr1209 := z.EncBasicHandle().StructToArray
			var yyq1209 [2]bool
			_, _, _ = yysep1209, yyq1209, yy2arr1209
			const yyr1209 bool = false
			yyq1209[0] = x.Reason != ""
			yyq1209[1] = x.Message != ""
			var yynn1209 int
			if yyr1209 || yy2arr1209 {
				r.EncodeArrayStart(2)
			} else {
				yynn1209 = 0
				for _, b := range yyq1209 {
					if b {
						yynn1209++
					}
				}
				r.EncodeMapStart(yynn1209)
				yynn1209 = 0
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1209[0] {
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1209[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1212 := z.EncBinary()
					_ = yym1212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1209[1] {
					yym1214 := z.EncBinary()
					_ = yym1214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1209[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1215 := z.EncBinary()
					_ = yym1215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1216 := z.DecBinary()
	_ = yym1216
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1217 := r.ContainerType()
		if yyct1217 == codecSelferValueTypeMap1234 {
			yyl1217 := r.ReadMapStart()
			if yyl1217 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1217, d)
			}
		} else if yyct1217 == codecSelferValueTypeArray1234 {
			yyl1217 := r.ReadArrayStart()
			if yyl1217 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1217, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1218Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1218Slc
	var yyhl1218 bool = l >= 0
	for yyj1218 := 0; ; yyj1218++ {
		if yyhl1218 {
			if yyj1218 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1218Slc = r.DecodeBytes(yys1218Slc, true, true)
		yys1218 := string(yys1218Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1218 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1218)
		} // end switch yys1218
	} // end for yyj1218
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1221 int
	var yyb1221 bool
	var yyhl1221 bool = l >= 0
	yyj1221++
	if yyhl1221 {
		yyb1221 = yyj1221 > l
	} else {
		yyb1221 = r.CheckBreak()
	}
	if yyb1221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1221++
	if yyhl1221 {
		yyb1221 = yyj1221 > l
	} else {
		yyb1221 = r.CheckBreak()
	}
	if yyb1221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1221++
		if yyhl1221 {
			yyb1221 = yyj1221 > l
		} else {
			yyb1221 = r.CheckBreak()
		}
		if yyb1221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1224 := z.EncBinary()
		_ = yym1224
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1225 := !z.EncBinary()
			yy2arr1225 := z.EncBasicHandle().StructToArray
			var yyq1225 [1]bool
			_, _, _ = yysep1225, yyq1225, yy2arr1225
			const yyr1225 bool = false
			yyq1225[0] = true
			var yynn1225 int
			if yyr1225 || yy2arr1225 {
				r.EncodeArrayStart(1)
			} else {
				yynn1225 = 0
				for _, b := range yyq1225 {
					if b {
						yynn1225++
					}
				}
				r.EncodeMapStart(yynn1225)
				yynn1225 = 0
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1225[0] {
					yy1227 := &x.StartedAt
					yym1228 := z.EncBinary()
					_ = yym1228
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1227) {
					} else if yym1228 {
						z.EncBinaryMarshal(yy1227)
					} else if !yym1228 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1227)
					} else {
						z.EncFallback(yy1227)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1225[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1229 := &x.StartedAt
					yym1230 := z.EncBinary()
					_ = yym1230
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1229) {
					} else if yym1230 {
						z.EncBinaryMarshal(yy1229)
					} else if !yym1230 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1229)
					} else {
						z.EncFallback(yy1229)
					}
				}
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1231 := z.DecBinary()
	_ = yym1231
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1232 := r.ContainerType()
		if yyct1232 == codecSelferValueTypeMap1234 {
			yyl1232 := r.ReadMapStart()
			if yyl1232 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1232, d)
			}
		} else if yyct1232 == codecSelferValueTypeArray1234 {
			yyl1232 := r.ReadArrayStart()
			if yyl1232 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1232, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1233Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1233Slc
	var yyhl1233 bool = l >= 0
	for yyj1233 := 0; ; yyj1233++ {
		if yyhl1233 {
			if yyj1233 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1233Slc = r.DecodeBytes(yys1233Slc, true, true)
		yys1233 := string(yys1233Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1233 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1234 := &x.StartedAt
				yym1235 := z.DecBinary()
				_ = yym1235
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1234) {
				} else if yym1235 {
					z.DecBinaryUnmarshal(yyv1234)
				} else if !yym1235 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1234)
				} else {
					z.DecFallback(yyv1234, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1233)
		} // end switch yys1233
	} // end for yyj1233
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1236 int
	var yyb1236 bool
	var yyhl1236 bool = l >= 0
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1237 := &x.StartedAt
		yym1238 := z.DecBinary()
		_ = yym1238
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1237) {
		} else if yym1238 {
			z.DecBinaryUnmarshal(yyv1237)
		} else if !yym1238 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1237)
		} else {
			z.DecFallback(yyv1237, false)
		}
	}
	for {
		yyj1236++
		if yyhl1236 {
			yyb1236 = yyj1236 > l
		} else {
			yyb1236 = r.CheckBreak()
		}
		if yyb1236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1239 := z.EncBinary()
		_ = yym1239
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1240 := !z.EncBinary()
			yy2arr1240 := z.EncBasicHandle().StructToArray
			var yyq1240 [7]bool
			_, _, _ = yysep1240, yyq1240, yy2arr1240
			const yyr1240 bool = false
			yyq1240[1] = x.Signal != 0
			yyq1240[2] = x.Reason != ""
			yyq1240[3] = x.Message != ""
			yyq1240[4] = true
			yyq1240[5] = true
			yyq1240[6] = x.ContainerID != ""
			var yynn1240 int
			if yyr1240 || yy2arr1240 {
				r.EncodeArrayStart(7)
			} else {
				yynn1240 = 1
				for _, b := range yyq1240 {
					if b {
						yynn1240++
					}
				}
				r.EncodeMapStart(yynn1240)
				yynn1240 = 0
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1242 := z.EncBinary()
				_ = yym1242
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1243 := z.EncBinary()
				_ = yym1243
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1240[1] {
					yym1245 := z.EncBinary()
					_ = yym1245
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1240[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1246 := z.EncBinary()
					_ = yym1246
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1240[2] {
					yym1248 := z.EncBinary()
					_ = yym1248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1240[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1249 := z.EncBinary()
					_ = yym1249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1240[3] {
					yym1251 := z.EncBinary()
					_ = yym1251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1240[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1252 := z.EncBinary()
					_ = yym1252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1240[4] {
					yy1254 := &x.StartedAt
					yym1255 := z.EncBinary()
					_ = yym1255
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1254) {
					} else if yym1255 {
						z.EncBinaryMarshal(yy1254)
					} else if !yym1255 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1254)
					} else {
						z.EncFallback(yy1254)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1240[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1256 := &x.StartedAt
					yym1257 := z.EncBinary()
					_ = yym1257
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1256) {
					} else if yym1257 {
						z.EncBinaryMarshal(yy1256)
					} else if !yym1257 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1256)
					} else {
						z.EncFallback(yy1256)
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1240[5] {
					yy1259 := &x.FinishedAt
					yym1260 := z.EncBinary()
					_ = yym1260
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1259) {
					} else if yym1260 {
						z.EncBinaryMarshal(yy1259)
					} else if !yym1260 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1259)
					} else {
						z.EncFallback(yy1259)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1240[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1261 := &x.FinishedAt
					yym1262 := z.EncBinary()
					_ = yym1262
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1261) {
					} else if yym1262 {
						z.EncBinaryMarshal(yy1261)
					} else if !yym1262 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1261)
					} else {
						z.EncFallback(yy1261)
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1240[6] {
					yym1264 := z.EncBinary()
					_ = yym1264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1240[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1265 := z.EncBinary()
					_ = yym1265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1266 := z.DecBinary()
	_ = yym1266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1267 := r.ContainerType()
		if yyct1267 == codecSelferValueTypeMap1234 {
			yyl1267 := r.ReadMapStart()
			if yyl1267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1267, d)
			}
		} else if yyct1267 == codecSelferValueTypeArray1234 {
			yyl1267 := r.ReadArrayStart()
			if yyl1267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1268Slc
	var yyhl1268 bool = l >= 0
	for yyj1268 := 0; ; yyj1268++ {
		if yyhl1268 {
			if yyj1268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1268Slc = r.DecodeBytes(yys1268Slc, true, true)
		yys1268 := string(yys1268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1268 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1273 := &x.StartedAt
				yym1274 := z.DecBinary()
				_ = yym1274
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1273) {
				} else if yym1274 {
					z.DecBinaryUnmarshal(yyv1273)
				} else if !yym1274 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1273)
				} else {
					z.DecFallback(yyv1273, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1275 := &x.FinishedAt
				yym1276 := z.DecBinary()
				_ = yym1276
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1275) {
				} else if yym1276 {
					z.DecBinaryUnmarshal(yyv1275)
				} else if !yym1276 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1275)
				} else {
					z.DecFallback(yyv1275, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1268)
		} // end switch yys1268
	} // end for yyj1268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1278 int
	var yyb1278 bool
	var yyhl1278 bool = l >= 0
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1283 := &x.StartedAt
		yym1284 := z.DecBinary()
		_ = yym1284
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1283) {
		} else if yym1284 {
			z.DecBinaryUnmarshal(yyv1283)
		} else if !yym1284 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1283)
		} else {
			z.DecFallback(yyv1283, false)
		}
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1285 := &x.FinishedAt
		yym1286 := z.DecBinary()
		_ = yym1286
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1285) {
		} else if yym1286 {
			z.DecBinaryUnmarshal(yyv1285)
		} else if !yym1286 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1285)
		} else {
			z.DecFallback(yyv1285, false)
		}
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1278++
		if yyhl1278 {
			yyb1278 = yyj1278 > l
		} else {
			yyb1278 = r.CheckBreak()
		}
		if yyb1278 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1278-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1288 := z.EncBinary()
		_ = yym1288
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1289 := !z.EncBinary()
			yy2arr1289 := z.EncBasicHandle().StructToArray
			var yyq1289 [3]bool
			_, _, _ = yysep1289, yyq1289, yy2arr1289
			const yyr1289 bool = false
			yyq1289[0] = x.Waiting != nil
			yyq1289[1] = x.Running != nil
			yyq1289[2] = x.Terminated != nil
			var yynn1289 int
			if yyr1289 || yy2arr1289 {
				r.EncodeArrayStart(3)
			} else {
				yynn1289 = 0
				for _, b := range yyq1289 {
					if b {
						yynn1289++
					}
				}
				r.EncodeMapStart(yynn1289)
				yynn1289 = 0
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1289[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1289[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1289[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1289[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1289[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1289[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1293 := z.DecBinary()
	_ = yym1293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1294 := r.ContainerType()
		if yyct1294 == codecSelferValueTypeMap1234 {
			yyl1294 := r.ReadMapStart()
			if yyl1294 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1294, d)
			}
		} else if yyct1294 == codecSelferValueTypeArray1234 {
			yyl1294 := r.ReadArrayStart()
			if yyl1294 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1295Slc
	var yyhl1295 bool = l >= 0
	for yyj1295 := 0; ; yyj1295++ {
		if yyhl1295 {
			if yyj1295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1295Slc = r.DecodeBytes(yys1295Slc, true, true)
		yys1295 := string(yys1295Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1295 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1295)
		} // end switch yys1295
	} // end for yyj1295
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1299 int
	var yyb1299 bool
	var yyhl1299 bool = l >= 0
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1299++
		if yyhl1299 {
			yyb1299 = yyj1299 > l
		} else {
			yyb1299 = r.CheckBreak()
		}
		if yyb1299 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1299-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1303 := z.EncBinary()
		_ = yym1303
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1304 := !z.EncBinary()
			yy2arr1304 := z.EncBasicHandle().StructToArray
			var yyq1304 [8]bool
			_, _, _ = yysep1304, yyq1304, yy2arr1304
			const yyr1304 bool = false
			yyq1304[1] = true
			yyq1304[2] = true
			yyq1304[7] = x.ContainerID != ""
			var yynn1304 int
			if yyr1304 || yy2arr1304 {
				r.EncodeArrayStart(8)
			} else {
				yynn1304 = 5
				for _, b := range yyq1304 {
					if b {
						yynn1304++
					}
				}
				r.EncodeMapStart(yynn1304)
				yynn1304 = 0
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1306 := z.EncBinary()
				_ = yym1306
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1307 := z.EncBinary()
				_ = yym1307
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[1] {
					yy1309 := &x.State
					yy1309.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1304[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1310 := &x.State
					yy1310.CodecEncodeSelf(e)
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[2] {
					yy1312 := &x.LastTerminationState
					yy1312.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1304[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1313 := &x.LastTerminationState
					yy1313.CodecEncodeSelf(e)
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1315 := z.EncBinary()
				_ = yym1315
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1316 := z.EncBinary()
				_ = yym1316
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1318 := z.EncBinary()
				_ = yym1318
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1319 := z.EncBinary()
				_ = yym1319
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1321 := z.EncBinary()
				_ = yym1321
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1322 := z.EncBinary()
				_ = yym1322
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1324 := z.EncBinary()
				_ = yym1324
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1325 := z.EncBinary()
				_ = yym1325
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[7] {
					yym1327 := z.EncBinary()
					_ = yym1327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1304[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1328 := z.EncBinary()
					_ = yym1328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1329 := z.DecBinary()
	_ = yym1329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1330 := r.ContainerType()
		if yyct1330 == codecSelferValueTypeMap1234 {
			yyl1330 := r.ReadMapStart()
			if yyl1330 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1330, d)
			}
		} else if yyct1330 == codecSelferValueTypeArray1234 {
			yyl1330 := r.ReadArrayStart()
			if yyl1330 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1331Slc
	var yyhl1331 bool = l >= 0
	for yyj1331 := 0; ; yyj1331++ {
		if yyhl1331 {
			if yyj1331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1331Slc = r.DecodeBytes(yys1331Slc, true, true)
		yys1331 := string(yys1331Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1331 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1333 := &x.State
				yyv1333.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1334 := &x.LastTerminationState
				yyv1334.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1331)
		} // end switch yys1331
	} // end for yyj1331
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1340 int
	var yyb1340 bool
	var yyhl1340 bool = l >= 0
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1342 := &x.State
		yyv1342.CodecDecodeSelf(d)
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1343 := &x.LastTerminationState
		yyv1343.CodecDecodeSelf(d)
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1340++
		if yyhl1340 {
			yyb1340 = yyj1340 > l
		} else {
			yyb1340 = r.CheckBreak()
		}
		if yyb1340 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1340-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1349 := z.EncBinary()
	_ = yym1349
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1350 := z.DecBinary()
	_ = yym1350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1351 := z.EncBinary()
	_ = yym1351
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1352 := z.DecBinary()
	_ = yym1352
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1353 := z.EncBinary()
		_ = yym1353
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1354 := !z.EncBinary()
			yy2arr1354 := z.EncBasicHandle().StructToArray
			var yyq1354 [6]bool
			_, _, _ = yysep1354, yyq1354, yy2arr1354
			const yyr1354 bool = false
			yyq1354[2] = true
			yyq1354[3] = true
			yyq1354[4] = x.Reason != ""
			yyq1354[5] = x.Message != ""
			var yynn1354 int
			if yyr1354 || yy2arr1354 {
				r.EncodeArrayStart(6)
			} else {
				yynn1354 = 2
				for _, b := range yyq1354 {
					if b {
						yynn1354++
					}
				}
				r.EncodeMapStart(yynn1354)
				yynn1354 = 0
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1354[2] {
					yy1358 := &x.LastProbeTime
					yym1359 := z.EncBinary()
					_ = yym1359
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1358) {
					} else if yym1359 {
						z.EncBinaryMarshal(yy1358)
					} else if !yym1359 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1358)
					} else {
						z.EncFallback(yy1358)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1354[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1360 := &x.LastProbeTime
					yym1361 := z.EncBinary()
					_ = yym1361
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1360) {
					} else if yym1361 {
						z.EncBinaryMarshal(yy1360)
					} else if !yym1361 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1360)
					} else {
						z.EncFallback(yy1360)
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1354[3] {
					yy1363 := &x.LastTransitionTime
					yym1364 := z.EncBinary()
					_ = yym1364
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1363) {
					} else if yym1364 {
						z.EncBinaryMarshal(yy1363)
					} else if !yym1364 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1363)
					} else {
						z.EncFallback(yy1363)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1354[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1365 := &x.LastTransitionTime
					yym1366 := z.EncBinary()
					_ = yym1366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1365) {
					} else if yym1366 {
						z.EncBinaryMarshal(yy1365)
					} else if !yym1366 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1365)
					} else {
						z.EncFallback(yy1365)
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1354[4] {
					yym1368 := z.EncBinary()
					_ = yym1368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1354[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1369 := z.EncBinary()
					_ = yym1369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1354[5] {
					yym1371 := z.EncBinary()
					_ = yym1371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1354[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1372 := z.EncBinary()
					_ = yym1372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1373 := z.DecBinary()
	_ = yym1373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1374 := r.ContainerType()
		if yyct1374 == codecSelferValueTypeMap1234 {
			yyl1374 := r.ReadMapStart()
			if yyl1374 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1374, d)
			}
		} else if yyct1374 == codecSelferValueTypeArray1234 {
			yyl1374 := r.ReadArrayStart()
			if yyl1374 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1375Slc
	var yyhl1375 bool = l >= 0
	for yyj1375 := 0; ; yyj1375++ {
		if yyhl1375 {
			if yyj1375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1375Slc = r.DecodeBytes(yys1375Slc, true, true)
		yys1375 := string(yys1375Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1375 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1378 := &x.LastProbeTime
				yym1379 := z.DecBinary()
				_ = yym1379
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1378) {
				} else if yym1379 {
					z.DecBinaryUnmarshal(yyv1378)
				} else if !yym1379 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1378)
				} else {
					z.DecFallback(yyv1378, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1380 := &x.LastTransitionTime
				yym1381 := z.DecBinary()
				_ = yym1381
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1380) {
				} else if yym1381 {
					z.DecBinaryUnmarshal(yyv1380)
				} else if !yym1381 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1380)
				} else {
					z.DecFallback(yyv1380, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1375)
		} // end switch yys1375
	} // end for yyj1375
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1384 int
	var yyb1384 bool
	var yyhl1384 bool = l >= 0
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1387 := &x.LastProbeTime
		yym1388 := z.DecBinary()
		_ = yym1388
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1387) {
		} else if yym1388 {
			z.DecBinaryUnmarshal(yyv1387)
		} else if !yym1388 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1387)
		} else {
			z.DecFallback(yyv1387, false)
		}
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1389 := &x.LastTransitionTime
		yym1390 := z.DecBinary()
		_ = yym1390
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1389) {
		} else if yym1390 {
			z.DecBinaryUnmarshal(yyv1389)
		} else if !yym1390 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1389)
		} else {
			z.DecFallback(yyv1389, false)
		}
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1384++
		if yyhl1384 {
			yyb1384 = yyj1384 > l
		} else {
			yyb1384 = r.CheckBreak()
		}
		if yyb1384 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1384-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1393 := z.EncBinary()
	_ = yym1393
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1394 := z.DecBinary()
	_ = yym1394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1395 := z.EncBinary()
		_ = yym1395
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1396 := !z.EncBinary()
			yy2arr1396 := z.EncBasicHandle().StructToArray
			var yyq1396 [4]bool
			_, _, _ = yysep1396, yyq1396, yy2arr1396
			const yyr1396 bool = false
			yyq1396[0] = x.Kind != ""
			yyq1396[1] = x.APIVersion != ""
			yyq1396[2] = true
			var yynn1396 int
			if yyr1396 || yy2arr1396 {
				r.EncodeArrayStart(4)
			} else {
				yynn1396 = 1
				for _, b := range yyq1396 {
					if b {
						yynn1396++
					}
				}
				r.EncodeMapStart(yynn1396)
				yynn1396 = 0
			}
			if yyr1396 || yy2arr1396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1396[0] {
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1396[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1396 || yy2arr1396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1396[1] {
					yym1401 := z.EncBinary()
					_ = yym1401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1396[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1402 := z.EncBinary()
					_ = yym1402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1396 || yy2arr1396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1396[2] {
					yy1404 := &x.ListMeta
					yym1405 := z.EncBinary()
					_ = yym1405
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1404) {
					} else {
						z.EncFallback(yy1404)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1396[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1406 := &x.ListMeta
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1406) {
					} else {
						z.EncFallback(yy1406)
					}
				}
			}
			if yyr1396 || yy2arr1396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1409 := z.EncBinary()
					_ = yym1409
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1396 || yy2arr1396 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1411 := z.DecBinary()
	_ = yym1411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1412 := r.ContainerType()
		if yyct1412 == codecSelferValueTypeMap1234 {
			yyl1412 := r.ReadMapStart()
			if yyl1412 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1412, d)
			}
		} else if yyct1412 == codecSelferValueTypeArray1234 {
			yyl1412 := r.ReadArrayStart()
			if yyl1412 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1412, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1413Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1413Slc
	var yyhl1413 bool = l >= 0
	for yyj1413 := 0; ; yyj1413++ {
		if yyhl1413 {
			if yyj1413 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1413Slc = r.DecodeBytes(yys1413Slc, true, true)
		yys1413 := string(yys1413Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1413 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1416 := &x.ListMeta
				yym1417 := z.DecBinary()
				_ = yym1417
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1416) {
				} else {
					z.DecFallback(yyv1416, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1418 := &x.Items
				yym1419 := z.DecBinary()
				_ = yym1419
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1418), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1413)
		} // end switch yys1413
	} // end for yyj1413
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1420 int
	var yyb1420 bool
	var yyhl1420 bool = l >= 0
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1423 := &x.ListMeta
		yym1424 := z.DecBinary()
		_ = yym1424
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1423) {
		} else {
			z.DecFallback(yyv1423, false)
		}
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1425 := &x.Items
		yym1426 := z.DecBinary()
		_ = yym1426
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1425), d)
		}
	}
	for {
		yyj1420++
		if yyhl1420 {
			yyb1420 = yyj1420 > l
		} else {
			yyb1420 = r.CheckBreak()
		}
		if yyb1420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1427 := z.EncBinary()
	_ = yym1427
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1428 := z.DecBinary()
	_ = yym1428
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1429 := z.EncBinary()
		_ = yym1429
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1430 := !z.EncBinary()
			yy2arr1430 := z.EncBasicHandle().StructToArray
			var yyq1430 [11]bool
			_, _, _ = yysep1430, yyq1430, yy2arr1430
			const yyr1430 bool = false
			yyq1430[2] = x.RestartPolicy != ""
			yyq1430[3] = x.TerminationGracePeriodSeconds != nil
			yyq1430[4] = x.ActiveDeadlineSeconds != nil
			yyq1430[5] = x.DNSPolicy != ""
			yyq1430[6] = len(x.NodeSelector) != 0
			yyq1430[8] = x.NodeName != ""
			yyq1430[9] = x.SecurityContext != nil
			yyq1430[10] = len(x.ImagePullSecrets) != 0
			var yynn1430 int
			if yyr1430 || yy2arr1430 {
				r.EncodeArrayStart(11)
			} else {
				yynn1430 = 3
				for _, b := range yyq1430 {
					if b {
						yynn1430++
					}
				}
				r.EncodeMapStart(yynn1430)
				yynn1430 = 0
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1432 := z.EncBinary()
					_ = yym1432
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1433 := z.EncBinary()
					_ = yym1433
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1435 := z.EncBinary()
					_ = yym1435
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1436 := z.EncBinary()
					_ = yym1436
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1430[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1439 := *x.TerminationGracePeriodSeconds
						yym1440 := z.EncBinary()
						_ = yym1440
						if false {
						} else {
							r.EncodeInt(int64(yy1439))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1441 := *x.TerminationGracePeriodSeconds
						yym1442 := z.EncBinary()
						_ = yym1442
						if false {
						} else {
							r.EncodeInt(int64(yy1441))
						}
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1444 := *x.ActiveDeadlineSeconds
						yym1445 := z.EncBinary()
						_ = yym1445
						if false {
						} else {
							r.EncodeInt(int64(yy1444))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1446 := *x.ActiveDeadlineSeconds
						yym1447 := z.EncBinary()
						_ = yym1447
						if false {
						} else {
							r.EncodeInt(int64(yy1446))
						}
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1430[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1450 := z.EncBinary()
						_ = yym1450
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1451 := z.EncBinary()
						_ = yym1451
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1453 := z.EncBinary()
				_ = yym1453
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1454 := z.EncBinary()
				_ = yym1454
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[8] {
					yym1456 := z.EncBinary()
					_ = yym1456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1430[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1457 := z.EncBinary()
					_ = yym1457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1460 := z.EncBinary()
						_ = yym1460
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1461 := z.EncBinary()
						_ = yym1461
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1462 := z.DecBinary()
	_ = yym1462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1463 := r.ContainerType()
		if yyct1463 == codecSelferValueTypeMap1234 {
			yyl1463 := r.ReadMapStart()
			if yyl1463 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1463, d)
			}
		} else if yyct1463 == codecSelferValueTypeArray1234 {
			yyl1463 := r.ReadArrayStart()
			if yyl1463 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1464Slc
	var yyhl1464 bool = l >= 0
	for yyj1464 := 0; ; yyj1464++ {
		if yyhl1464 {
			if yyj1464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1464Slc = r.DecodeBytes(yys1464Slc, true, true)
		yys1464 := string(yys1464Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1464 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1465 := &x.Volumes
				yym1466 := z.DecBinary()
				_ = yym1466
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1465), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1467 := &x.Containers
				yym1468 := z.DecBinary()
				_ = yym1468
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1467), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1471 := z.DecBinary()
				_ = yym1471
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1473 := z.DecBinary()
				_ = yym1473
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1475 := &x.NodeSelector
				yym1476 := z.DecBinary()
				_ = yym1476
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1475, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1480 := &x.ImagePullSecrets
				yym1481 := z.DecBinary()
				_ = yym1481
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1480), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1464)
		} // end switch yys1464
	} // end for yyj1464
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1482 int
	var yyb1482 bool
	var yyhl1482 bool = l >= 0
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1483 := &x.Volumes
		yym1484 := z.DecBinary()
		_ = yym1484
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1483), d)
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1485 := &x.Containers
		yym1486 := z.DecBinary()
		_ = yym1486
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1485), d)
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1489 := z.DecBinary()
		_ = yym1489
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1491 := z.DecBinary()
		_ = yym1491
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1493 := &x.NodeSelector
		yym1494 := z.DecBinary()
		_ = yym1494
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1493, false, d)
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1498 := &x.ImagePullSecrets
		yym1499 := z.DecBinary()
		_ = yym1499
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1498), d)
		}
	}
	for {
		yyj1482++
		if yyhl1482 {
			yyb1482 = yyj1482 > l
		} else {
			yyb1482 = r.CheckBreak()
		}
		if yyb1482 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1482-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1500 := z.EncBinary()
		_ = yym1500
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1501 := !z.EncBinary()
			yy2arr1501 := z.EncBasicHandle().StructToArray
			var yyq1501 [8]bool
			_, _, _ = yysep1501, yyq1501, yy2arr1501
			const yyr1501 bool = false
			yyq1501[0] = x.HostNetwork != false
			yyq1501[1] = x.HostPID != false
			yyq1501[2] = x.HostIPC != false
			yyq1501[3] = x.SELinuxOptions != nil
			yyq1501[4] = x.RunAsUser != nil
			yyq1501[5] = x.RunAsNonRoot != nil
			yyq1501[6] = len(x.SupplementalGroups) != 0
			yyq1501[7] = x.FSGroup != nil
			var yynn1501 int
			if yyr1501 || yy2arr1501 {
				r.EncodeArrayStart(8)
			} else {
				yynn1501 = 0
				for _, b := range yyq1501 {
					if b {
						yynn1501++
					}
				}
				r.EncodeMapStart(yynn1501)
				yynn1501 = 0
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[0] {
					yym1503 := z.EncBinary()
					_ = yym1503
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1501[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1504 := z.EncBinary()
					_ = yym1504
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[1] {
					yym1506 := z.EncBinary()
					_ = yym1506
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1501[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1507 := z.EncBinary()
					_ = yym1507
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[2] {
					yym1509 := z.EncBinary()
					_ = yym1509
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1501[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1510 := z.EncBinary()
					_ = yym1510
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1513 := *x.RunAsUser
						yym1514 := z.EncBinary()
						_ = yym1514
						if false {
						} else {
							r.EncodeInt(int64(yy1513))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1515 := *x.RunAsUser
						yym1516 := z.EncBinary()
						_ = yym1516
						if false {
						} else {
							r.EncodeInt(int64(yy1515))
						}
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1518 := *x.RunAsNonRoot
						yym1519 := z.EncBinary()
						_ = yym1519
						if false {
						} else {
							r.EncodeBool(bool(yy1518))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1520 := *x.RunAsNonRoot
						yym1521 := z.EncBinary()
						_ = yym1521
						if false {
						} else {
							r.EncodeBool(bool(yy1520))
						}
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1523 := z.EncBinary()
						_ = yym1523
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1524 := z.EncBinary()
						_ = yym1524
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1526 := *x.FSGroup
						yym1527 := z.EncBinary()
						_ = yym1527
						if false {
						} else {
							r.EncodeInt(int64(yy1526))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1528 := *x.FSGroup
						yym1529 := z.EncBinary()
						_ = yym1529
						if false {
						} else {
							r.EncodeInt(int64(yy1528))
						}
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1530 := z.DecBinary()
	_ = yym1530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1531 := r.ContainerType()
		if yyct1531 == codecSelferValueTypeMap1234 {
			yyl1531 := r.ReadMapStart()
			if yyl1531 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1531, d)
			}
		} else if yyct1531 == codecSelferValueTypeArray1234 {
			yyl1531 := r.ReadArrayStart()
			if yyl1531 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1532Slc
	var yyhl1532 bool = l >= 0
	for yyj1532 := 0; ; yyj1532++ {
		if yyhl1532 {
			if yyj1532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1532Slc = r.DecodeBytes(yys1532Slc, true, true)
		yys1532 := string(yys1532Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1532 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1538 := z.DecBinary()
				_ = yym1538
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1540 := z.DecBinary()
				_ = yym1540
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1541 := &x.SupplementalGroups
				yym1542 := z.DecBinary()
				_ = yym1542
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1541, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1544 := z.DecBinary()
				_ = yym1544
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1532)
		} // end switch yys1532
	} // end for yyj1532
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1545 int
	var yyb1545 bool
	var yyhl1545 bool = l >= 0
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1551 := z.DecBinary()
		_ = yym1551
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1553 := z.DecBinary()
		_ = yym1553
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1554 := &x.SupplementalGroups
		yym1555 := z.DecBinary()
		_ = yym1555
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1554, false, d)
		}
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1557 := z.DecBinary()
		_ = yym1557
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1545++
		if yyhl1545 {
			yyb1545 = yyj1545 > l
		} else {
			yyb1545 = r.CheckBreak()
		}
		if yyb1545 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1545-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1558 := z.EncBinary()
		_ = yym1558
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1559 := !z.EncBinary()
			yy2arr1559 := z.EncBasicHandle().StructToArray
			var yyq1559 [8]bool
			_, _, _ = yysep1559, yyq1559, yy2arr1559
			const yyr1559 bool = false
			yyq1559[0] = x.Phase != ""
			yyq1559[1] = len(x.Conditions) != 0
			yyq1559[2] = x.Message != ""
			yyq1559[3] = x.Reason != ""
			yyq1559[4] = x.HostIP != ""
			yyq1559[5] = x.PodIP != ""
			yyq1559[6] = x.StartTime != nil
			yyq1559[7] = len(x.ContainerStatuses) != 0
			var yynn1559 int
			if yyr1559 || yy2arr1559 {
				r.EncodeArrayStart(8)
			} else {
				yynn1559 = 0
				for _, b := range yyq1559 {
					if b {
						yynn1559++
					}
				}
				r.EncodeMapStart(yynn1559)
				yynn1559 = 0
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1562 := z.EncBinary()
						_ = yym1562
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1559[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1563 := z.EncBinary()
						_ = yym1563
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[2] {
					yym1565 := z.EncBinary()
					_ = yym1565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1566 := z.EncBinary()
					_ = yym1566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[3] {
					yym1568 := z.EncBinary()
					_ = yym1568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1569 := z.EncBinary()
					_ = yym1569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[4] {
					yym1571 := z.EncBinary()
					_ = yym1571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1572 := z.EncBinary()
					_ = yym1572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[5] {
					yym1574 := z.EncBinary()
					_ = yym1574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1575 := z.EncBinary()
					_ = yym1575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1577 := z.EncBinary()
						_ = yym1577
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1577 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1577 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1559[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1578 := z.EncBinary()
						_ = yym1578
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1578 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1578 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1580 := z.EncBinary()
						_ = yym1580
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1559[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1581 := z.EncBinary()
						_ = yym1581
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1582 := z.DecBinary()
	_ = yym1582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1583 := r.ContainerType()
		if yyct1583 == codecSelferValueTypeMap1234 {
			yyl1583 := r.ReadMapStart()
			if yyl1583 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1583, d)
			}
		} else if yyct1583 == codecSelferValueTypeArray1234 {
			yyl1583 := r.ReadArrayStart()
			if yyl1583 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1583, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1584Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1584Slc
	var yyhl1584 bool = l >= 0
	for yyj1584 := 0; ; yyj1584++ {
		if yyhl1584 {
			if yyj1584 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1584Slc = r.DecodeBytes(yys1584Slc, true, true)
		yys1584 := string(yys1584Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1584 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1586 := &x.Conditions
				yym1587 := z.DecBinary()
				_ = yym1587
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1586), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1593 := z.DecBinary()
				_ = yym1593
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1593 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1593 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1594 := &x.ContainerStatuses
				yym1595 := z.DecBinary()
				_ = yym1595
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1594), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1584)
		} // end switch yys1584
	} // end for yyj1584
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1596 int
	var yyb1596 bool
	var yyhl1596 bool = l >= 0
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1598 := &x.Conditions
		yym1599 := z.DecBinary()
		_ = yym1599
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1598), d)
		}
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1605 := z.DecBinary()
		_ = yym1605
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1605 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1605 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1606 := &x.ContainerStatuses
		yym1607 := z.DecBinary()
		_ = yym1607
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1606), d)
		}
	}
	for {
		yyj1596++
		if yyhl1596 {
			yyb1596 = yyj1596 > l
		} else {
			yyb1596 = r.CheckBreak()
		}
		if yyb1596 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1596-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1608 := z.EncBinary()
		_ = yym1608
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1609 := !z.EncBinary()
			yy2arr1609 := z.EncBasicHandle().StructToArray
			var yyq1609 [4]bool
			_, _, _ = yysep1609, yyq1609, yy2arr1609
			const yyr1609 bool = false
			yyq1609[0] = x.Kind != ""
			yyq1609[1] = x.APIVersion != ""
			yyq1609[2] = true
			yyq1609[3] = true
			var yynn1609 int
			if yyr1609 || yy2arr1609 {
				r.EncodeArrayStart(4)
			} else {
				yynn1609 = 0
				for _, b := range yyq1609 {
					if b {
						yynn1609++
					}
				}
				r.EncodeMapStart(yynn1609)
				yynn1609 = 0
			}
			if yyr1609 || yy2arr1609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1609[0] {
					yym1611 := z.EncBinary()
					_ = yym1611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1609[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1612 := z.EncBinary()
					_ = yym1612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1609 || yy2arr1609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1609[1] {
					yym1614 := z.EncBinary()
					_ = yym1614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1609[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1615 := z.EncBinary()
					_ = yym1615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1609 || yy2arr1609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1609[2] {
					yy1617 := &x.ObjectMeta
					yy1617.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1609[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1618 := &x.ObjectMeta
					yy1618.CodecEncodeSelf(e)
				}
			}
			if yyr1609 || yy2arr1609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1609[3] {
					yy1620 := &x.Status
					yy1620.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1609[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1621 := &x.Status
					yy1621.CodecEncodeSelf(e)
				}
			}
			if yyr1609 || yy2arr1609 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1622 := z.DecBinary()
	_ = yym1622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1623 := r.ContainerType()
		if yyct1623 == codecSelferValueTypeMap1234 {
			yyl1623 := r.ReadMapStart()
			if yyl1623 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1623, d)
			}
		} else if yyct1623 == codecSelferValueTypeArray1234 {
			yyl1623 := r.ReadArrayStart()
			if yyl1623 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1623, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1624Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1624Slc
	var yyhl1624 bool = l >= 0
	for yyj1624 := 0; ; yyj1624++ {
		if yyhl1624 {
			if yyj1624 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1624Slc = r.DecodeBytes(yys1624Slc, true, true)
		yys1624 := string(yys1624Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1624 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1627 := &x.ObjectMeta
				yyv1627.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1628 := &x.Status
				yyv1628.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1624)
		} // end switch yys1624
	} // end for yyj1624
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1629 int
	var yyb1629 bool
	var yyhl1629 bool = l >= 0
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1632 := &x.ObjectMeta
		yyv1632.CodecDecodeSelf(d)
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1633 := &x.Status
		yyv1633.CodecDecodeSelf(d)
	}
	for {
		yyj1629++
		if yyhl1629 {
			yyb1629 = yyj1629 > l
		} else {
			yyb1629 = r.CheckBreak()
		}
		if yyb1629 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1629-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1634 := z.EncBinary()
		_ = yym1634
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1635 := !z.EncBinary()
			yy2arr1635 := z.EncBasicHandle().StructToArray
			var yyq1635 [5]bool
			_, _, _ = yysep1635, yyq1635, yy2arr1635
			const yyr1635 bool = false
			yyq1635[0] = x.Kind != ""
			yyq1635[1] = x.APIVersion != ""
			yyq1635[2] = true
			yyq1635[3] = true
			yyq1635[4] = true
			var yynn1635 int
			if yyr1635 || yy2arr1635 {
				r.EncodeArrayStart(5)
			} else {
				yynn1635 = 0
				for _, b := range yyq1635 {
					if b {
						yynn1635++
					}
				}
				r.EncodeMapStart(yynn1635)
				yynn1635 = 0
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1635[0] {
					yym1637 := z.EncBinary()
					_ = yym1637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1635[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1638 := z.EncBinary()
					_ = yym1638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1635[1] {
					yym1640 := z.EncBinary()
					_ = yym1640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1635[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1641 := z.EncBinary()
					_ = yym1641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1635[2] {
					yy1643 := &x.ObjectMeta
					yy1643.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1635[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1644 := &x.ObjectMeta
					yy1644.CodecEncodeSelf(e)
				}
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1635[3] {
					yy1646 := &x.Spec
					yy1646.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1635[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1647 := &x.Spec
					yy1647.CodecEncodeSelf(e)
				}
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1635[4] {
					yy1649 := &x.Status
					yy1649.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1635[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1650 := &x.Status
					yy1650.CodecEncodeSelf(e)
				}
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1651 := z.DecBinary()
	_ = yym1651
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1652 := r.ContainerType()
		if yyct1652 == codecSelferValueTypeMap1234 {
			yyl1652 := r.ReadMapStart()
			if yyl1652 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1652, d)
			}
		} else if yyct1652 == codecSelferValueTypeArray1234 {
			yyl1652 := r.ReadArrayStart()
			if yyl1652 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1652, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1653Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1653Slc
	var yyhl1653 bool = l >= 0
	for yyj1653 := 0; ; yyj1653++ {
		if yyhl1653 {
			if yyj1653 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1653Slc = r.DecodeBytes(yys1653Slc, true, true)
		yys1653 := string(yys1653Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1653 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1656 := &x.ObjectMeta
				yyv1656.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1657 := &x.Spec
				yyv1657.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1658 := &x.Status
				yyv1658.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1653)
		} // end switch yys1653
	} // end for yyj1653
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1659 int
	var yyb1659 bool
	var yyhl1659 bool = l >= 0
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1662 := &x.ObjectMeta
		yyv1662.CodecDecodeSelf(d)
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1663 := &x.Spec
		yyv1663.CodecDecodeSelf(d)
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1664 := &x.Status
		yyv1664.CodecDecodeSelf(d)
	}
	for {
		yyj1659++
		if yyhl1659 {
			yyb1659 = yyj1659 > l
		} else {
			yyb1659 = r.CheckBreak()
		}
		if yyb1659 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1659-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1665 := z.EncBinary()
		_ = yym1665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1666 := !z.EncBinary()
			yy2arr1666 := z.EncBasicHandle().StructToArray
			var yyq1666 [2]bool
			_, _, _ = yysep1666, yyq1666, yy2arr1666
			const yyr1666 bool = false
			yyq1666[0] = true
			yyq1666[1] = true
			var yynn1666 int
			if yyr1666 || yy2arr1666 {
				r.EncodeArrayStart(2)
			} else {
				yynn1666 = 0
				for _, b := range yyq1666 {
					if b {
						yynn1666++
					}
				}
				r.EncodeMapStart(yynn1666)
				yynn1666 = 0
			}
			if yyr1666 || yy2arr1666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1666[0] {
					yy1668 := &x.ObjectMeta
					yy1668.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1666[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1669 := &x.ObjectMeta
					yy1669.CodecEncodeSelf(e)
				}
			}
			if yyr1666 || yy2arr1666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1666[1] {
					yy1671 := &x.Spec
					yy1671.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1666[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1672 := &x.Spec
					yy1672.CodecEncodeSelf(e)
				}
			}
			if yyr1666 || yy2arr1666 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1673 := z.DecBinary()
	_ = yym1673
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1674 := r.ContainerType()
		if yyct1674 == codecSelferValueTypeMap1234 {
			yyl1674 := r.ReadMapStart()
			if yyl1674 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1674, d)
			}
		} else if yyct1674 == codecSelferValueTypeArray1234 {
			yyl1674 := r.ReadArrayStart()
			if yyl1674 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1674, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1675Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1675Slc
	var yyhl1675 bool = l >= 0
	for yyj1675 := 0; ; yyj1675++ {
		if yyhl1675 {
			if yyj1675 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1675Slc = r.DecodeBytes(yys1675Slc, true, true)
		yys1675 := string(yys1675Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1675 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1676 := &x.ObjectMeta
				yyv1676.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1677 := &x.Spec
				yyv1677.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1675)
		} // end switch yys1675
	} // end for yyj1675
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1678 int
	var yyb1678 bool
	var yyhl1678 bool = l >= 0
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1679 := &x.ObjectMeta
		yyv1679.CodecDecodeSelf(d)
	}
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1680 := &x.Spec
		yyv1680.CodecDecodeSelf(d)
	}
	for {
		yyj1678++
		if yyhl1678 {
			yyb1678 = yyj1678 > l
		} else {
			yyb1678 = r.CheckBreak()
		}
		if yyb1678 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1678-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1681 := z.EncBinary()
		_ = yym1681
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1682 := !z.EncBinary()
			yy2arr1682 := z.EncBasicHandle().StructToArray
			var yyq1682 [4]bool
			_, _, _ = yysep1682, yyq1682, yy2arr1682
			const yyr1682 bool = false
			yyq1682[0] = x.Kind != ""
			yyq1682[1] = x.APIVersion != ""
			yyq1682[2] = true
			yyq1682[3] = true
			var yynn1682 int
			if yyr1682 || yy2arr1682 {
				r.EncodeArrayStart(4)
			} else {
				yynn1682 = 0
				for _, b := range yyq1682 {
					if b {
						yynn1682++
					}
				}
				r.EncodeMapStart(yynn1682)
				yynn1682 = 0
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[0] {
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1682[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1685 := z.EncBinary()
					_ = yym1685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[1] {
					yym1687 := z.EncBinary()
					_ = yym1687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1682[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1688 := z.EncBinary()
					_ = yym1688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[2] {
					yy1690 := &x.ObjectMeta
					yy1690.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1682[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1691 := &x.ObjectMeta
					yy1691.CodecEncodeSelf(e)
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[3] {
					yy1693 := &x.Template
					yy1693.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1682[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1694 := &x.Template
					yy1694.CodecEncodeSelf(e)
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1695 := z.DecBinary()
	_ = yym1695
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1696 := r.ContainerType()
		if yyct1696 == codecSelferValueTypeMap1234 {
			yyl1696 := r.ReadMapStart()
			if yyl1696 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1696, d)
			}
		} else if yyct1696 == codecSelferValueTypeArray1234 {
			yyl1696 := r.ReadArrayStart()
			if yyl1696 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1696, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1697Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1697Slc
	var yyhl1697 bool = l >= 0
	for yyj1697 := 0; ; yyj1697++ {
		if yyhl1697 {
			if yyj1697 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1697Slc = r.DecodeBytes(yys1697Slc, true, true)
		yys1697 := string(yys1697Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1697 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1700 := &x.ObjectMeta
				yyv1700.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1701 := &x.Template
				yyv1701.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1697)
		} // end switch yys1697
	} // end for yyj1697
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1702 int
	var yyb1702 bool
	var yyhl1702 bool = l >= 0
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1705 := &x.ObjectMeta
		yyv1705.CodecDecodeSelf(d)
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1706 := &x.Template
		yyv1706.CodecDecodeSelf(d)
	}
	for {
		yyj1702++
		if yyhl1702 {
			yyb1702 = yyj1702 > l
		} else {
			yyb1702 = r.CheckBreak()
		}
		if yyb1702 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1702-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1707 := z.EncBinary()
		_ = yym1707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1708 := !z.EncBinary()
			yy2arr1708 := z.EncBasicHandle().StructToArray
			var yyq1708 [4]bool
			_, _, _ = yysep1708, yyq1708, yy2arr1708
			const yyr1708 bool = false
			yyq1708[0] = x.Kind != ""
			yyq1708[1] = x.APIVersion != ""
			yyq1708[2] = true
			var yynn1708 int
			if yyr1708 || yy2arr1708 {
				r.EncodeArrayStart(4)
			} else {
				yynn1708 = 1
				for _, b := range yyq1708 {
					if b {
						yynn1708++
					}
				}
				r.EncodeMapStart(yynn1708)
				yynn1708 = 0
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[0] {
					yym1710 := z.EncBinary()
					_ = yym1710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1708[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1711 := z.EncBinary()
					_ = yym1711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[1] {
					yym1713 := z.EncBinary()
					_ = yym1713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1708[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1714 := z.EncBinary()
					_ = yym1714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[2] {
					yy1716 := &x.ListMeta
					yym1717 := z.EncBinary()
					_ = yym1717
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1716) {
					} else {
						z.EncFallback(yy1716)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1708[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1718 := &x.ListMeta
					yym1719 := z.EncBinary()
					_ = yym1719
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1718) {
					} else {
						z.EncFallback(yy1718)
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1721 := z.EncBinary()
					_ = yym1721
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1722 := z.EncBinary()
					_ = yym1722
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1723 := z.DecBinary()
	_ = yym1723
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1724 := r.ContainerType()
		if yyct1724 == codecSelferValueTypeMap1234 {
			yyl1724 := r.ReadMapStart()
			if yyl1724 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1724, d)
			}
		} else if yyct1724 == codecSelferValueTypeArray1234 {
			yyl1724 := r.ReadArrayStart()
			if yyl1724 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1724, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1725Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1725Slc
	var yyhl1725 bool = l >= 0
	for yyj1725 := 0; ; yyj1725++ {
		if yyhl1725 {
			if yyj1725 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1725Slc = r.DecodeBytes(yys1725Slc, true, true)
		yys1725 := string(yys1725Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1725 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1728 := &x.ListMeta
				yym1729 := z.DecBinary()
				_ = yym1729
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1728) {
				} else {
					z.DecFallback(yyv1728, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1730 := &x.Items
				yym1731 := z.DecBinary()
				_ = yym1731
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1730), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1725)
		} // end switch yys1725
	} // end for yyj1725
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1732 int
	var yyb1732 bool
	var yyhl1732 bool = l >= 0
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1735 := &x.ListMeta
		yym1736 := z.DecBinary()
		_ = yym1736
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1735) {
		} else {
			z.DecFallback(yyv1735, false)
		}
	}
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1737 := &x.Items
		yym1738 := z.DecBinary()
		_ = yym1738
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1737), d)
		}
	}
	for {
		yyj1732++
		if yyhl1732 {
			yyb1732 = yyj1732 > l
		} else {
			yyb1732 = r.CheckBreak()
		}
		if yyb1732 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1732-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1739 := z.EncBinary()
		_ = yym1739
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1740 := !z.EncBinary()
			yy2arr1740 := z.EncBasicHandle().StructToArray
			var yyq1740 [3]bool
			_, _, _ = yysep1740, yyq1740, yy2arr1740
			const yyr1740 bool = false
			yyq1740[2] = x.Template != nil
			var yynn1740 int
			if yyr1740 || yy2arr1740 {
				r.EncodeArrayStart(3)
			} else {
				yynn1740 = 2
				for _, b := range yyq1740 {
					if b {
						yynn1740++
					}
				}
				r.EncodeMapStart(yynn1740)
				yynn1740 = 0
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1742 := z.EncBinary()
				_ = yym1742
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1743 := z.EncBinary()
				_ = yym1743
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1745 := z.EncBinary()
					_ = yym1745
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1740[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1740[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1748 := z.DecBinary()
	_ = yym1748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1749 := r.ContainerType()
		if yyct1749 == codecSelferValueTypeMap1234 {
			yyl1749 := r.ReadMapStart()
			if yyl1749 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1749, d)
			}
		} else if yyct1749 == codecSelferValueTypeArray1234 {
			yyl1749 := r.ReadArrayStart()
			if yyl1749 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1750Slc
	var yyhl1750 bool = l >= 0
	for yyj1750 := 0; ; yyj1750++ {
		if yyhl1750 {
			if yyj1750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1750Slc = r.DecodeBytes(yys1750Slc, true, true)
		yys1750 := string(yys1750Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1750 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1752 := &x.Selector
				yym1753 := z.DecBinary()
				_ = yym1753
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1752, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1750)
		} // end switch yys1750
	} // end for yyj1750
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1755 int
	var yyb1755 bool
	var yyhl1755 bool = l >= 0
	yyj1755++
	if yyhl1755 {
		yyb1755 = yyj1755 > l
	} else {
		yyb1755 = r.CheckBreak()
	}
	if yyb1755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1755++
	if yyhl1755 {
		yyb1755 = yyj1755 > l
	} else {
		yyb1755 = r.CheckBreak()
	}
	if yyb1755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1757 := &x.Selector
		yym1758 := z.DecBinary()
		_ = yym1758
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1757, false, d)
		}
	}
	yyj1755++
	if yyhl1755 {
		yyb1755 = yyj1755 > l
	} else {
		yyb1755 = r.CheckBreak()
	}
	if yyb1755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1755++
		if yyhl1755 {
			yyb1755 = yyj1755 > l
		} else {
			yyb1755 = r.CheckBreak()
		}
		if yyb1755 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1755-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1760 := z.EncBinary()
		_ = yym1760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1761 := !z.EncBinary()
			yy2arr1761 := z.EncBasicHandle().StructToArray
			var yyq1761 [2]bool
			_, _, _ = yysep1761, yyq1761, yy2arr1761
			const yyr1761 bool = false
			yyq1761[1] = x.ObservedGeneration != 0
			var yynn1761 int
			if yyr1761 || yy2arr1761 {
				r.EncodeArrayStart(2)
			} else {
				yynn1761 = 1
				for _, b := range yyq1761 {
					if b {
						yynn1761++
					}
				}
				r.EncodeMapStart(yynn1761)
				yynn1761 = 0
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1763 := z.EncBinary()
				_ = yym1763
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1764 := z.EncBinary()
				_ = yym1764
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1761[1] {
					yym1766 := z.EncBinary()
					_ = yym1766
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1761[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1767 := z.EncBinary()
					_ = yym1767
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1768 := z.DecBinary()
	_ = yym1768
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1769 := r.ContainerType()
		if yyct1769 == codecSelferValueTypeMap1234 {
			yyl1769 := r.ReadMapStart()
			if yyl1769 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1769, d)
			}
		} else if yyct1769 == codecSelferValueTypeArray1234 {
			yyl1769 := r.ReadArrayStart()
			if yyl1769 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1769, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1770Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1770Slc
	var yyhl1770 bool = l >= 0
	for yyj1770 := 0; ; yyj1770++ {
		if yyhl1770 {
			if yyj1770 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1770Slc = r.DecodeBytes(yys1770Slc, true, true)
		yys1770 := string(yys1770Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1770 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1770)
		} // end switch yys1770
	} // end for yyj1770
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1773 int
	var yyb1773 bool
	var yyhl1773 bool = l >= 0
	yyj1773++
	if yyhl1773 {
		yyb1773 = yyj1773 > l
	} else {
		yyb1773 = r.CheckBreak()
	}
	if yyb1773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1773++
	if yyhl1773 {
		yyb1773 = yyj1773 > l
	} else {
		yyb1773 = r.CheckBreak()
	}
	if yyb1773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1773++
		if yyhl1773 {
			yyb1773 = yyj1773 > l
		} else {
			yyb1773 = r.CheckBreak()
		}
		if yyb1773 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1773-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1776 := z.EncBinary()
		_ = yym1776
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1777 := !z.EncBinary()
			yy2arr1777 := z.EncBasicHandle().StructToArray
			var yyq1777 [5]bool
			_, _, _ = yysep1777, yyq1777, yy2arr1777
			const yyr1777 bool = false
			yyq1777[0] = x.Kind != ""
			yyq1777[1] = x.APIVersion != ""
			yyq1777[2] = true
			yyq1777[3] = true
			yyq1777[4] = true
			var yynn1777 int
			if yyr1777 || yy2arr1777 {
				r.EncodeArrayStart(5)
			} else {
				yynn1777 = 0
				for _, b := range yyq1777 {
					if b {
						yynn1777++
					}
				}
				r.EncodeMapStart(yynn1777)
				yynn1777 = 0
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1777[0] {
					yym1779 := z.EncBinary()
					_ = yym1779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1777[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1780 := z.EncBinary()
					_ = yym1780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1777[1] {
					yym1782 := z.EncBinary()
					_ = yym1782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1777[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1783 := z.EncBinary()
					_ = yym1783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1777[2] {
					yy1785 := &x.ObjectMeta
					yy1785.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1777[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1786 := &x.ObjectMeta
					yy1786.CodecEncodeSelf(e)
				}
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1777[3] {
					yy1788 := &x.Spec
					yy1788.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1777[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1789 := &x.Spec
					yy1789.CodecEncodeSelf(e)
				}
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1777[4] {
					yy1791 := &x.Status
					yy1791.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1777[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1792 := &x.Status
					yy1792.CodecEncodeSelf(e)
				}
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1793 := z.DecBinary()
	_ = yym1793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1794 := r.ContainerType()
		if yyct1794 == codecSelferValueTypeMap1234 {
			yyl1794 := r.ReadMapStart()
			if yyl1794 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1794, d)
			}
		} else if yyct1794 == codecSelferValueTypeArray1234 {
			yyl1794 := r.ReadArrayStart()
			if yyl1794 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1794, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1795Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1795Slc
	var yyhl1795 bool = l >= 0
	for yyj1795 := 0; ; yyj1795++ {
		if yyhl1795 {
			if yyj1795 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1795Slc = r.DecodeBytes(yys1795Slc, true, true)
		yys1795 := string(yys1795Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1795 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1798 := &x.ObjectMeta
				yyv1798.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1799 := &x.Spec
				yyv1799.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1800 := &x.Status
				yyv1800.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1795)
		} // end switch yys1795
	} // end for yyj1795
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1801 int
	var yyb1801 bool
	var yyhl1801 bool = l >= 0
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1804 := &x.ObjectMeta
		yyv1804.CodecDecodeSelf(d)
	}
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1805 := &x.Spec
		yyv1805.CodecDecodeSelf(d)
	}
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1806 := &x.Status
		yyv1806.CodecDecodeSelf(d)
	}
	for {
		yyj1801++
		if yyhl1801 {
			yyb1801 = yyj1801 > l
		} else {
			yyb1801 = r.CheckBreak()
		}
		if yyb1801 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1801-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1807 := z.EncBinary()
		_ = yym1807
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1808 := !z.EncBinary()
			yy2arr1808 := z.EncBasicHandle().StructToArray
			var yyq1808 [4]bool
			_, _, _ = yysep1808, yyq1808, yy2arr1808
			const yyr1808 bool = false
			yyq1808[0] = x.Kind != ""
			yyq1808[1] = x.APIVersion != ""
			yyq1808[2] = true
			var yynn1808 int
			if yyr1808 || yy2arr1808 {
				r.EncodeArrayStart(4)
			} else {
				yynn1808 = 1
				for _, b := range yyq1808 {
					if b {
						yynn1808++
					}
				}
				r.EncodeMapStart(yynn1808)
				yynn1808 = 0
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1808[0] {
					yym1810 := z.EncBinary()
					_ = yym1810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1808[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1811 := z.EncBinary()
					_ = yym1811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1808[1] {
					yym1813 := z.EncBinary()
					_ = yym1813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1808[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1814 := z.EncBinary()
					_ = yym1814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1808[2] {
					yy1816 := &x.ListMeta
					yym1817 := z.EncBinary()
					_ = yym1817
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1816) {
					} else {
						z.EncFallback(yy1816)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1808[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1818 := &x.ListMeta
					yym1819 := z.EncBinary()
					_ = yym1819
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1818) {
					} else {
						z.EncFallback(yy1818)
					}
				}
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1821 := z.EncBinary()
					_ = yym1821
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1822 := z.EncBinary()
					_ = yym1822
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1823 := z.DecBinary()
	_ = yym1823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1824 := r.ContainerType()
		if yyct1824 == codecSelferValueTypeMap1234 {
			yyl1824 := r.ReadMapStart()
			if yyl1824 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1824, d)
			}
		} else if yyct1824 == codecSelferValueTypeArray1234 {
			yyl1824 := r.ReadArrayStart()
			if yyl1824 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1825Slc
	var yyhl1825 bool = l >= 0
	for yyj1825 := 0; ; yyj1825++ {
		if yyhl1825 {
			if yyj1825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1825Slc = r.DecodeBytes(yys1825Slc, true, true)
		yys1825 := string(yys1825Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1825 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1828 := &x.ListMeta
				yym1829 := z.DecBinary()
				_ = yym1829
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1828) {
				} else {
					z.DecFallback(yyv1828, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1830 := &x.Items
				yym1831 := z.DecBinary()
				_ = yym1831
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1830), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1825)
		} // end switch yys1825
	} // end for yyj1825
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1832 int
	var yyb1832 bool
	var yyhl1832 bool = l >= 0
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1835 := &x.ListMeta
		yym1836 := z.DecBinary()
		_ = yym1836
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1835) {
		} else {
			z.DecFallback(yyv1835, false)
		}
	}
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1837 := &x.Items
		yym1838 := z.DecBinary()
		_ = yym1838
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1837), d)
		}
	}
	for {
		yyj1832++
		if yyhl1832 {
			yyb1832 = yyj1832 > l
		} else {
			yyb1832 = r.CheckBreak()
		}
		if yyb1832 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1832-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1839 := z.EncBinary()
		_ = yym1839
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1840 := !z.EncBinary()
			yy2arr1840 := z.EncBasicHandle().StructToArray
			var yyq1840 [4]bool
			_, _, _ = yysep1840, yyq1840, yy2arr1840
			const yyr1840 bool = false
			yyq1840[0] = x.Kind != ""
			yyq1840[1] = x.APIVersion != ""
			yyq1840[2] = true
			var yynn1840 int
			if yyr1840 || yy2arr1840 {
				r.EncodeArrayStart(4)
			} else {
				yynn1840 = 1
				for _, b := range yyq1840 {
					if b {
						yynn1840++
					}
				}
				r.EncodeMapStart(yynn1840)
				yynn1840 = 0
			}
			if yyr1840 || yy2arr1840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1840[0] {
					yym1842 := z.EncBinary()
					_ = yym1842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1840[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1843 := z.EncBinary()
					_ = yym1843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1840 || yy2arr1840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1840[1] {
					yym1845 := z.EncBinary()
					_ = yym1845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1840[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1846 := z.EncBinary()
					_ = yym1846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1840 || yy2arr1840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1840[2] {
					yy1848 := &x.ListMeta
					yym1849 := z.EncBinary()
					_ = yym1849
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1848) {
					} else {
						z.EncFallback(yy1848)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1840[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1850 := &x.ListMeta
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1850) {
					} else {
						z.EncFallback(yy1850)
					}
				}
			}
			if yyr1840 || yy2arr1840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1853 := z.EncBinary()
					_ = yym1853
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1854 := z.EncBinary()
					_ = yym1854
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr1840 || yy2arr1840 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1855 := z.DecBinary()
	_ = yym1855
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1856 := r.ContainerType()
		if yyct1856 == codecSelferValueTypeMap1234 {
			yyl1856 := r.ReadMapStart()
			if yyl1856 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1856, d)
			}
		} else if yyct1856 == codecSelferValueTypeArray1234 {
			yyl1856 := r.ReadArrayStart()
			if yyl1856 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1856, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1857Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1857Slc
	var yyhl1857 bool = l >= 0
	for yyj1857 := 0; ; yyj1857++ {
		if yyhl1857 {
			if yyj1857 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1857Slc = r.DecodeBytes(yys1857Slc, true, true)
		yys1857 := string(yys1857Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1857 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1860 := &x.ListMeta
				yym1861 := z.DecBinary()
				_ = yym1861
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1860) {
				} else {
					z.DecFallback(yyv1860, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1862 := &x.Items
				yym1863 := z.DecBinary()
				_ = yym1863
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1862), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1857)
		} // end switch yys1857
	} // end for yyj1857
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1864 int
	var yyb1864 bool
	var yyhl1864 bool = l >= 0
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1867 := &x.ListMeta
		yym1868 := z.DecBinary()
		_ = yym1868
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1867) {
		} else {
			z.DecFallback(yyv1867, false)
		}
	}
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1869 := &x.Items
		yym1870 := z.DecBinary()
		_ = yym1870
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1869), d)
		}
	}
	for {
		yyj1864++
		if yyhl1864 {
			yyb1864 = yyj1864 > l
		} else {
			yyb1864 = r.CheckBreak()
		}
		if yyb1864 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1864-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1871 := z.EncBinary()
	_ = yym1871
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1872 := z.DecBinary()
	_ = yym1872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1873 := z.EncBinary()
	_ = yym1873
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1874 := z.DecBinary()
	_ = yym1874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1875 := z.EncBinary()
		_ = yym1875
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1876 := !z.EncBinary()
			yy2arr1876 := z.EncBasicHandle().StructToArray
			var yyq1876 [1]bool
			_, _, _ = yysep1876, yyq1876, yy2arr1876
			const yyr1876 bool = false
			yyq1876[0] = true
			var yynn1876 int
			if yyr1876 || yy2arr1876 {
				r.EncodeArrayStart(1)
			} else {
				yynn1876 = 0
				for _, b := range yyq1876 {
					if b {
						yynn1876++
					}
				}
				r.EncodeMapStart(yynn1876)
				yynn1876 = 0
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[0] {
					yy1878 := &x.LoadBalancer
					yy1878.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1876[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1879 := &x.LoadBalancer
					yy1879.CodecEncodeSelf(e)
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1880 := z.DecBinary()
	_ = yym1880
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1881 := r.ContainerType()
		if yyct1881 == codecSelferValueTypeMap1234 {
			yyl1881 := r.ReadMapStart()
			if yyl1881 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1881, d)
			}
		} else if yyct1881 == codecSelferValueTypeArray1234 {
			yyl1881 := r.ReadArrayStart()
			if yyl1881 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1881, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1882Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1882Slc
	var yyhl1882 bool = l >= 0
	for yyj1882 := 0; ; yyj1882++ {
		if yyhl1882 {
			if yyj1882 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1882Slc = r.DecodeBytes(yys1882Slc, true, true)
		yys1882 := string(yys1882Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1882 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1883 := &x.LoadBalancer
				yyv1883.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1882)
		} // end switch yys1882
	} // end for yyj1882
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1884 int
	var yyb1884 bool
	var yyhl1884 bool = l >= 0
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1885 := &x.LoadBalancer
		yyv1885.CodecDecodeSelf(d)
	}
	for {
		yyj1884++
		if yyhl1884 {
			yyb1884 = yyj1884 > l
		} else {
			yyb1884 = r.CheckBreak()
		}
		if yyb1884 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1884-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1886 := z.EncBinary()
		_ = yym1886
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1887 := !z.EncBinary()
			yy2arr1887 := z.EncBasicHandle().StructToArray
			var yyq1887 [1]bool
			_, _, _ = yysep1887, yyq1887, yy2arr1887
			const yyr1887 bool = false
			yyq1887[0] = len(x.Ingress) != 0
			var yynn1887 int
			if yyr1887 || yy2arr1887 {
				r.EncodeArrayStart(1)
			} else {
				yynn1887 = 0
				for _, b := range yyq1887 {
					if b {
						yynn1887++
					}
				}
				r.EncodeMapStart(yynn1887)
				yynn1887 = 0
			}
			if yyr1887 || yy2arr1887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1887[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1889 := z.EncBinary()
						_ = yym1889
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1887[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1890 := z.EncBinary()
						_ = yym1890
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1887 || yy2arr1887 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1891 := z.DecBinary()
	_ = yym1891
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1892 := r.ContainerType()
		if yyct1892 == codecSelferValueTypeMap1234 {
			yyl1892 := r.ReadMapStart()
			if yyl1892 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1892, d)
			}
		} else if yyct1892 == codecSelferValueTypeArray1234 {
			yyl1892 := r.ReadArrayStart()
			if yyl1892 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1892, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1893Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1893Slc
	var yyhl1893 bool = l >= 0
	for yyj1893 := 0; ; yyj1893++ {
		if yyhl1893 {
			if yyj1893 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1893Slc = r.DecodeBytes(yys1893Slc, true, true)
		yys1893 := string(yys1893Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1893 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1894 := &x.Ingress
				yym1895 := z.DecBinary()
				_ = yym1895
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1894), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1893)
		} // end switch yys1893
	} // end for yyj1893
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1896 int
	var yyb1896 bool
	var yyhl1896 bool = l >= 0
	yyj1896++
	if yyhl1896 {
		yyb1896 = yyj1896 > l
	} else {
		yyb1896 = r.CheckBreak()
	}
	if yyb1896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1897 := &x.Ingress
		yym1898 := z.DecBinary()
		_ = yym1898
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1897), d)
		}
	}
	for {
		yyj1896++
		if yyhl1896 {
			yyb1896 = yyj1896 > l
		} else {
			yyb1896 = r.CheckBreak()
		}
		if yyb1896 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1896-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1899 := z.EncBinary()
		_ = yym1899
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1900 := !z.EncBinary()
			yy2arr1900 := z.EncBasicHandle().StructToArray
			var yyq1900 [2]bool
			_, _, _ = yysep1900, yyq1900, yy2arr1900
			const yyr1900 bool = false
			yyq1900[0] = x.IP != ""
			yyq1900[1] = x.Hostname != ""
			var yynn1900 int
			if yyr1900 || yy2arr1900 {
				r.EncodeArrayStart(2)
			} else {
				yynn1900 = 0
				for _, b := range yyq1900 {
					if b {
						yynn1900++
					}
				}
				r.EncodeMapStart(yynn1900)
				yynn1900 = 0
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1900[0] {
					yym1902 := z.EncBinary()
					_ = yym1902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1900[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1903 := z.EncBinary()
					_ = yym1903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1900[1] {
					yym1905 := z.EncBinary()
					_ = yym1905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1900[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1906 := z.EncBinary()
					_ = yym1906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1907 := z.DecBinary()
	_ = yym1907
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1908 := r.ContainerType()
		if yyct1908 == codecSelferValueTypeMap1234 {
			yyl1908 := r.ReadMapStart()
			if yyl1908 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1908, d)
			}
		} else if yyct1908 == codecSelferValueTypeArray1234 {
			yyl1908 := r.ReadArrayStart()
			if yyl1908 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1908, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1909Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1909Slc
	var yyhl1909 bool = l >= 0
	for yyj1909 := 0; ; yyj1909++ {
		if yyhl1909 {
			if yyj1909 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1909Slc = r.DecodeBytes(yys1909Slc, true, true)
		yys1909 := string(yys1909Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1909 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1909)
		} // end switch yys1909
	} // end for yyj1909
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1912 int
	var yyb1912 bool
	var yyhl1912 bool = l >= 0
	yyj1912++
	if yyhl1912 {
		yyb1912 = yyj1912 > l
	} else {
		yyb1912 = r.CheckBreak()
	}
	if yyb1912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1912++
	if yyhl1912 {
		yyb1912 = yyj1912 > l
	} else {
		yyb1912 = r.CheckBreak()
	}
	if yyb1912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1912++
		if yyhl1912 {
			yyb1912 = yyj1912 > l
		} else {
			yyb1912 = r.CheckBreak()
		}
		if yyb1912 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1912-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1915 := z.EncBinary()
		_ = yym1915
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1916 := !z.EncBinary()
			yy2arr1916 := z.EncBasicHandle().StructToArray
			var yyq1916 [7]bool
			_, _, _ = yysep1916, yyq1916, yy2arr1916
			const yyr1916 bool = false
			yyq1916[0] = x.Type != ""
			yyq1916[3] = x.ClusterIP != ""
			yyq1916[4] = len(x.ExternalIPs) != 0
			yyq1916[5] = x.LoadBalancerIP != ""
			yyq1916[6] = x.SessionAffinity != ""
			var yynn1916 int
			if yyr1916 || yy2arr1916 {
				r.EncodeArrayStart(7)
			} else {
				yynn1916 = 2
				for _, b := range yyq1916 {
					if b {
						yynn1916++
					}
				}
				r.EncodeMapStart(yynn1916)
				yynn1916 = 0
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1916[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1916[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1919 := z.EncBinary()
					_ = yym1919
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1920 := z.EncBinary()
					_ = yym1920
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1922 := z.EncBinary()
					_ = yym1922
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1923 := z.EncBinary()
					_ = yym1923
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1916[3] {
					yym1925 := z.EncBinary()
					_ = yym1925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1916[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1926 := z.EncBinary()
					_ = yym1926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1916[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1928 := z.EncBinary()
						_ = yym1928
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1916[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1929 := z.EncBinary()
						_ = yym1929
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1916[5] {
					yym1931 := z.EncBinary()
					_ = yym1931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1916[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1932 := z.EncBinary()
					_ = yym1932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1916[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1916[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1934 := z.DecBinary()
	_ = yym1934
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1935 := r.ContainerType()
		if yyct1935 == codecSelferValueTypeMap1234 {
			yyl1935 := r.ReadMapStart()
			if yyl1935 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1935, d)
			}
		} else if yyct1935 == codecSelferValueTypeArray1234 {
			yyl1935 := r.ReadArrayStart()
			if yyl1935 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1935, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1936Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1936Slc
	var yyhl1936 bool = l >= 0
	for yyj1936 := 0; ; yyj1936++ {
		if yyhl1936 {
			if yyj1936 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1936Slc = r.DecodeBytes(yys1936Slc, true, true)
		yys1936 := string(yys1936Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1936 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1938 := &x.Ports
				yym1939 := z.DecBinary()
				_ = yym1939
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1938), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1940 := &x.Selector
				yym1941 := z.DecBinary()
				_ = yym1941
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1940, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1943 := &x.ExternalIPs
				yym1944 := z.DecBinary()
				_ = yym1944
				if false {
				} else {
					z.F.DecSliceStringX(yyv1943, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1936)
		} // end switch yys1936
	} // end for yyj1936
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1947 int
	var yyb1947 bool
	var yyhl1947 bool = l >= 0
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1949 := &x.Ports
		yym1950 := z.DecBinary()
		_ = yym1950
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1949), d)
		}
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1951 := &x.Selector
		yym1952 := z.DecBinary()
		_ = yym1952
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1951, false, d)
		}
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1954 := &x.ExternalIPs
		yym1955 := z.DecBinary()
		_ = yym1955
		if false {
		} else {
			z.F.DecSliceStringX(yyv1954, false, d)
		}
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj1947++
		if yyhl1947 {
			yyb1947 = yyj1947 > l
		} else {
			yyb1947 = r.CheckBreak()
		}
		if yyb1947 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1947-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1958 := z.EncBinary()
		_ = yym1958
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1959 := !z.EncBinary()
			yy2arr1959 := z.EncBasicHandle().StructToArray
			var yyq1959 [5]bool
			_, _, _ = yysep1959, yyq1959, yy2arr1959
			const yyr1959 bool = false
			var yynn1959 int
			if yyr1959 || yy2arr1959 {
				r.EncodeArrayStart(5)
			} else {
				yynn1959 = 5
				for _, b := range yyq1959 {
					if b {
						yynn1959++
					}
				}
				r.EncodeMapStart(yynn1959)
				yynn1959 = 0
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1961 := z.EncBinary()
				_ = yym1961
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1962 := z.EncBinary()
				_ = yym1962
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1965 := z.EncBinary()
				_ = yym1965
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1966 := z.EncBinary()
				_ = yym1966
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1968 := &x.TargetPort
				yym1969 := z.EncBinary()
				_ = yym1969
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1968) {
				} else if !yym1969 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1968)
				} else {
					z.EncFallback(yy1968)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1970 := &x.TargetPort
				yym1971 := z.EncBinary()
				_ = yym1971
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1970) {
				} else if !yym1971 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1970)
				} else {
					z.EncFallback(yy1970)
				}
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1973 := z.EncBinary()
				_ = yym1973
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1974 := z.EncBinary()
				_ = yym1974
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1975 := z.DecBinary()
	_ = yym1975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1976 := r.ContainerType()
		if yyct1976 == codecSelferValueTypeMap1234 {
			yyl1976 := r.ReadMapStart()
			if yyl1976 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1976, d)
			}
		} else if yyct1976 == codecSelferValueTypeArray1234 {
			yyl1976 := r.ReadArrayStart()
			if yyl1976 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1977Slc
	var yyhl1977 bool = l >= 0
	for yyj1977 := 0; ; yyj1977++ {
		if yyhl1977 {
			if yyj1977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1977Slc = r.DecodeBytes(yys1977Slc, true, true)
		yys1977 := string(yys1977Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1977 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv1981 := &x.TargetPort
				yym1982 := z.DecBinary()
				_ = yym1982
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1981) {
				} else if !yym1982 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1981)
				} else {
					z.DecFallback(yyv1981, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1977)
		} // end switch yys1977
	} // end for yyj1977
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1984 int
	var yyb1984 bool
	var yyhl1984 bool = l >= 0
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv1988 := &x.TargetPort
		yym1989 := z.DecBinary()
		_ = yym1989
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1988) {
		} else if !yym1989 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1988)
		} else {
			z.DecFallback(yyv1988, false)
		}
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1984++
		if yyhl1984 {
			yyb1984 = yyj1984 > l
		} else {
			yyb1984 = r.CheckBreak()
		}
		if yyb1984 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1984-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1991 := z.EncBinary()
		_ = yym1991
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1992 := !z.EncBinary()
			yy2arr1992 := z.EncBasicHandle().StructToArray
			var yyq1992 [5]bool
			_, _, _ = yysep1992, yyq1992, yy2arr1992
			const yyr1992 bool = false
			yyq1992[0] = x.Kind != ""
			yyq1992[1] = x.APIVersion != ""
			yyq1992[2] = true
			yyq1992[3] = true
			yyq1992[4] = true
			var yynn1992 int
			if yyr1992 || yy2arr1992 {
				r.EncodeArrayStart(5)
			} else {
				yynn1992 = 0
				for _, b := range yyq1992 {
					if b {
						yynn1992++
					}
				}
				r.EncodeMapStart(yynn1992)
				yynn1992 = 0
			}
			if yyr1992 || yy2arr1992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1992[0] {
					yym1994 := z.EncBinary()
					_ = yym1994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1992[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1995 := z.EncBinary()
					_ = yym1995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1992 || yy2arr1992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1992[1] {
					yym1997 := z.EncBinary()
					_ = yym1997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1992[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1998 := z.EncBinary()
					_ = yym1998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1992 || yy2arr1992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1992[2] {
					yy2000 := &x.ObjectMeta
					yy2000.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1992[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2001 := &x.ObjectMeta
					yy2001.CodecEncodeSelf(e)
				}
			}
			if yyr1992 || yy2arr1992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1992[3] {
					yy2003 := &x.Spec
					yy2003.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1992[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2004 := &x.Spec
					yy2004.CodecEncodeSelf(e)
				}
			}
			if yyr1992 || yy2arr1992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1992[4] {
					yy2006 := &x.Status
					yy2006.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1992[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2007 := &x.Status
					yy2007.CodecEncodeSelf(e)
				}
			}
			if yyr1992 || yy2arr1992 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2008 := z.DecBinary()
	_ = yym2008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2009 := r.ContainerType()
		if yyct2009 == codecSelferValueTypeMap1234 {
			yyl2009 := r.ReadMapStart()
			if yyl2009 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2009, d)
			}
		} else if yyct2009 == codecSelferValueTypeArray1234 {
			yyl2009 := r.ReadArrayStart()
			if yyl2009 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2009, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2010Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2010Slc
	var yyhl2010 bool = l >= 0
	for yyj2010 := 0; ; yyj2010++ {
		if yyhl2010 {
			if yyj2010 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2010Slc = r.DecodeBytes(yys2010Slc, true, true)
		yys2010 := string(yys2010Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2010 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2013 := &x.ObjectMeta
				yyv2013.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2014 := &x.Spec
				yyv2014.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2015 := &x.Status
				yyv2015.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2010)
		} // end switch yys2010
	} // end for yyj2010
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2016 int
	var yyb2016 bool
	var yyhl2016 bool = l >= 0
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2019 := &x.ObjectMeta
		yyv2019.CodecDecodeSelf(d)
	}
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2020 := &x.Spec
		yyv2020.CodecDecodeSelf(d)
	}
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2021 := &x.Status
		yyv2021.CodecDecodeSelf(d)
	}
	for {
		yyj2016++
		if yyhl2016 {
			yyb2016 = yyj2016 > l
		} else {
			yyb2016 = r.CheckBreak()
		}
		if yyb2016 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2016-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2022 := z.EncBinary()
		_ = yym2022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2023 := !z.EncBinary()
			yy2arr2023 := z.EncBasicHandle().StructToArray
			var yyq2023 [5]bool
			_, _, _ = yysep2023, yyq2023, yy2arr2023
			const yyr2023 bool = false
			yyq2023[0] = x.Kind != ""
			yyq2023[1] = x.APIVersion != ""
			yyq2023[2] = true
			yyq2023[4] = len(x.ImagePullSecrets) != 0
			var yynn2023 int
			if yyr2023 || yy2arr2023 {
				r.EncodeArrayStart(5)
			} else {
				yynn2023 = 1
				for _, b := range yyq2023 {
					if b {
						yynn2023++
					}
				}
				r.EncodeMapStart(yynn2023)
				yynn2023 = 0
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[0] {
					yym2025 := z.EncBinary()
					_ = yym2025
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2023[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2026 := z.EncBinary()
					_ = yym2026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[1] {
					yym2028 := z.EncBinary()
					_ = yym2028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2023[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2029 := z.EncBinary()
					_ = yym2029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[2] {
					yy2031 := &x.ObjectMeta
					yy2031.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2023[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2032 := &x.ObjectMeta
					yy2032.CodecEncodeSelf(e)
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2035 := z.EncBinary()
					_ = yym2035
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2037 := z.EncBinary()
						_ = yym2037
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2023[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2038 := z.EncBinary()
						_ = yym2038
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2039 := z.DecBinary()
	_ = yym2039
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2040 := r.ContainerType()
		if yyct2040 == codecSelferValueTypeMap1234 {
			yyl2040 := r.ReadMapStart()
			if yyl2040 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2040, d)
			}
		} else if yyct2040 == codecSelferValueTypeArray1234 {
			yyl2040 := r.ReadArrayStart()
			if yyl2040 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2040, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2041Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2041Slc
	var yyhl2041 bool = l >= 0
	for yyj2041 := 0; ; yyj2041++ {
		if yyhl2041 {
			if yyj2041 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2041Slc = r.DecodeBytes(yys2041Slc, true, true)
		yys2041 := string(yys2041Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2041 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2044 := &x.ObjectMeta
				yyv2044.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2045 := &x.Secrets
				yym2046 := z.DecBinary()
				_ = yym2046
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2045), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2047 := &x.ImagePullSecrets
				yym2048 := z.DecBinary()
				_ = yym2048
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2047), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2041)
		} // end switch yys2041
	} // end for yyj2041
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2049 int
	var yyb2049 bool
	var yyhl2049 bool = l >= 0
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2052 := &x.ObjectMeta
		yyv2052.CodecDecodeSelf(d)
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2053 := &x.Secrets
		yym2054 := z.DecBinary()
		_ = yym2054
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2053), d)
		}
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2055 := &x.ImagePullSecrets
		yym2056 := z.DecBinary()
		_ = yym2056
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2055), d)
		}
	}
	for {
		yyj2049++
		if yyhl2049 {
			yyb2049 = yyj2049 > l
		} else {
			yyb2049 = r.CheckBreak()
		}
		if yyb2049 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2049-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2057 := z.EncBinary()
		_ = yym2057
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2058 := !z.EncBinary()
			yy2arr2058 := z.EncBasicHandle().StructToArray
			var yyq2058 [4]bool
			_, _, _ = yysep2058, yyq2058, yy2arr2058
			const yyr2058 bool = false
			yyq2058[0] = x.Kind != ""
			yyq2058[1] = x.APIVersion != ""
			yyq2058[2] = true
			var yynn2058 int
			if yyr2058 || yy2arr2058 {
				r.EncodeArrayStart(4)
			} else {
				yynn2058 = 1
				for _, b := range yyq2058 {
					if b {
						yynn2058++
					}
				}
				r.EncodeMapStart(yynn2058)
				yynn2058 = 0
			}
			if yyr2058 || yy2arr2058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2058[0] {
					yym2060 := z.EncBinary()
					_ = yym2060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2058[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2061 := z.EncBinary()
					_ = yym2061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2058 || yy2arr2058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2058[1] {
					yym2063 := z.EncBinary()
					_ = yym2063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2058[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2064 := z.EncBinary()
					_ = yym2064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2058 || yy2arr2058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2058[2] {
					yy2066 := &x.ListMeta
					yym2067 := z.EncBinary()
					_ = yym2067
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2066) {
					} else {
						z.EncFallback(yy2066)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2058[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2068 := &x.ListMeta
					yym2069 := z.EncBinary()
					_ = yym2069
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2068) {
					} else {
						z.EncFallback(yy2068)
					}
				}
			}
			if yyr2058 || yy2arr2058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2071 := z.EncBinary()
					_ = yym2071
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2072 := z.EncBinary()
					_ = yym2072
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2058 || yy2arr2058 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2073 := z.DecBinary()
	_ = yym2073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2074 := r.ContainerType()
		if yyct2074 == codecSelferValueTypeMap1234 {
			yyl2074 := r.ReadMapStart()
			if yyl2074 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2074, d)
			}
		} else if yyct2074 == codecSelferValueTypeArray1234 {
			yyl2074 := r.ReadArrayStart()
			if yyl2074 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2074, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2075Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2075Slc
	var yyhl2075 bool = l >= 0
	for yyj2075 := 0; ; yyj2075++ {
		if yyhl2075 {
			if yyj2075 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2075Slc = r.DecodeBytes(yys2075Slc, true, true)
		yys2075 := string(yys2075Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2075 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2078 := &x.ListMeta
				yym2079 := z.DecBinary()
				_ = yym2079
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2078) {
				} else {
					z.DecFallback(yyv2078, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2080 := &x.Items
				yym2081 := z.DecBinary()
				_ = yym2081
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2080), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2075)
		} // end switch yys2075
	} // end for yyj2075
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2082 int
	var yyb2082 bool
	var yyhl2082 bool = l >= 0
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2085 := &x.ListMeta
		yym2086 := z.DecBinary()
		_ = yym2086
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2085) {
		} else {
			z.DecFallback(yyv2085, false)
		}
	}
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2087 := &x.Items
		yym2088 := z.DecBinary()
		_ = yym2088
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2087), d)
		}
	}
	for {
		yyj2082++
		if yyhl2082 {
			yyb2082 = yyj2082 > l
		} else {
			yyb2082 = r.CheckBreak()
		}
		if yyb2082 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2082-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2089 := z.EncBinary()
		_ = yym2089
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2090 := !z.EncBinary()
			yy2arr2090 := z.EncBasicHandle().StructToArray
			var yyq2090 [4]bool
			_, _, _ = yysep2090, yyq2090, yy2arr2090
			const yyr2090 bool = false
			yyq2090[0] = x.Kind != ""
			yyq2090[1] = x.APIVersion != ""
			yyq2090[2] = true
			var yynn2090 int
			if yyr2090 || yy2arr2090 {
				r.EncodeArrayStart(4)
			} else {
				yynn2090 = 1
				for _, b := range yyq2090 {
					if b {
						yynn2090++
					}
				}
				r.EncodeMapStart(yynn2090)
				yynn2090 = 0
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[0] {
					yym2092 := z.EncBinary()
					_ = yym2092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2090[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2093 := z.EncBinary()
					_ = yym2093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[1] {
					yym2095 := z.EncBinary()
					_ = yym2095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2090[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2096 := z.EncBinary()
					_ = yym2096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[2] {
					yy2098 := &x.ObjectMeta
					yy2098.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2090[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2099 := &x.ObjectMeta
					yy2099.CodecEncodeSelf(e)
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2101 := z.EncBinary()
					_ = yym2101
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2103 := z.DecBinary()
	_ = yym2103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2104 := r.ContainerType()
		if yyct2104 == codecSelferValueTypeMap1234 {
			yyl2104 := r.ReadMapStart()
			if yyl2104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2104, d)
			}
		} else if yyct2104 == codecSelferValueTypeArray1234 {
			yyl2104 := r.ReadArrayStart()
			if yyl2104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2105Slc
	var yyhl2105 bool = l >= 0
	for yyj2105 := 0; ; yyj2105++ {
		if yyhl2105 {
			if yyj2105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2105Slc = r.DecodeBytes(yys2105Slc, true, true)
		yys2105 := string(yys2105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2105 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2108 := &x.ObjectMeta
				yyv2108.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2109 := &x.Subsets
				yym2110 := z.DecBinary()
				_ = yym2110
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2109), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2105)
		} // end switch yys2105
	} // end for yyj2105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2111 int
	var yyb2111 bool
	var yyhl2111 bool = l >= 0
	yyj2111++
	if yyhl2111 {
		yyb2111 = yyj2111 > l
	} else {
		yyb2111 = r.CheckBreak()
	}
	if yyb2111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2111++
	if yyhl2111 {
		yyb2111 = yyj2111 > l
	} else {
		yyb2111 = r.CheckBreak()
	}
	if yyb2111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2111++
	if yyhl2111 {
		yyb2111 = yyj2111 > l
	} else {
		yyb2111 = r.CheckBreak()
	}
	if yyb2111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2114 := &x.ObjectMeta
		yyv2114.CodecDecodeSelf(d)
	}
	yyj2111++
	if yyhl2111 {
		yyb2111 = yyj2111 > l
	} else {
		yyb2111 = r.CheckBreak()
	}
	if yyb2111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2115 := &x.Subsets
		yym2116 := z.DecBinary()
		_ = yym2116
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2115), d)
		}
	}
	for {
		yyj2111++
		if yyhl2111 {
			yyb2111 = yyj2111 > l
		} else {
			yyb2111 = r.CheckBreak()
		}
		if yyb2111 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2111-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2117 := z.EncBinary()
		_ = yym2117
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2118 := !z.EncBinary()
			yy2arr2118 := z.EncBasicHandle().StructToArray
			var yyq2118 [3]bool
			_, _, _ = yysep2118, yyq2118, yy2arr2118
			const yyr2118 bool = false
			var yynn2118 int
			if yyr2118 || yy2arr2118 {
				r.EncodeArrayStart(3)
			} else {
				yynn2118 = 3
				for _, b := range yyq2118 {
					if b {
						yynn2118++
					}
				}
				r.EncodeMapStart(yynn2118)
				yynn2118 = 0
			}
			if yyr2118 || yy2arr2118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2120 := z.EncBinary()
					_ = yym2120
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2121 := z.EncBinary()
					_ = yym2121
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2118 || yy2arr2118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2123 := z.EncBinary()
					_ = yym2123
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2124 := z.EncBinary()
					_ = yym2124
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2118 || yy2arr2118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2126 := z.EncBinary()
					_ = yym2126
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2127 := z.EncBinary()
					_ = yym2127
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2118 || yy2arr2118 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2128 := z.DecBinary()
	_ = yym2128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2129 := r.ContainerType()
		if yyct2129 == codecSelferValueTypeMap1234 {
			yyl2129 := r.ReadMapStart()
			if yyl2129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2129, d)
			}
		} else if yyct2129 == codecSelferValueTypeArray1234 {
			yyl2129 := r.ReadArrayStart()
			if yyl2129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2130Slc
	var yyhl2130 bool = l >= 0
	for yyj2130 := 0; ; yyj2130++ {
		if yyhl2130 {
			if yyj2130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2130Slc = r.DecodeBytes(yys2130Slc, true, true)
		yys2130 := string(yys2130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2130 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2131 := &x.Addresses
				yym2132 := z.DecBinary()
				_ = yym2132
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2131), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2133 := &x.NotReadyAddresses
				yym2134 := z.DecBinary()
				_ = yym2134
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2133), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2135 := &x.Ports
				yym2136 := z.DecBinary()
				_ = yym2136
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2135), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2130)
		} // end switch yys2130
	} // end for yyj2130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2137 int
	var yyb2137 bool
	var yyhl2137 bool = l >= 0
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2138 := &x.Addresses
		yym2139 := z.DecBinary()
		_ = yym2139
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2138), d)
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2140 := &x.NotReadyAddresses
		yym2141 := z.DecBinary()
		_ = yym2141
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2140), d)
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2142 := &x.Ports
		yym2143 := z.DecBinary()
		_ = yym2143
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2142), d)
		}
	}
	for {
		yyj2137++
		if yyhl2137 {
			yyb2137 = yyj2137 > l
		} else {
			yyb2137 = r.CheckBreak()
		}
		if yyb2137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2144 := z.EncBinary()
		_ = yym2144
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2145 := !z.EncBinary()
			yy2arr2145 := z.EncBasicHandle().StructToArray
			var yyq2145 [2]bool
			_, _, _ = yysep2145, yyq2145, yy2arr2145
			const yyr2145 bool = false
			var yynn2145 int
			if yyr2145 || yy2arr2145 {
				r.EncodeArrayStart(2)
			} else {
				yynn2145 = 2
				for _, b := range yyq2145 {
					if b {
						yynn2145++
					}
				}
				r.EncodeMapStart(yynn2145)
				yynn2145 = 0
			}
			if yyr2145 || yy2arr2145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2147 := z.EncBinary()
				_ = yym2147
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2148 := z.EncBinary()
				_ = yym2148
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2145 || yy2arr2145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2145 || yy2arr2145 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2150 := z.DecBinary()
	_ = yym2150
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2151 := r.ContainerType()
		if yyct2151 == codecSelferValueTypeMap1234 {
			yyl2151 := r.ReadMapStart()
			if yyl2151 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2151, d)
			}
		} else if yyct2151 == codecSelferValueTypeArray1234 {
			yyl2151 := r.ReadArrayStart()
			if yyl2151 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2151, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2152Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2152Slc
	var yyhl2152 bool = l >= 0
	for yyj2152 := 0; ; yyj2152++ {
		if yyhl2152 {
			if yyj2152 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2152Slc = r.DecodeBytes(yys2152Slc, true, true)
		yys2152 := string(yys2152Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2152 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2152)
		} // end switch yys2152
	} // end for yyj2152
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2155 int
	var yyb2155 bool
	var yyhl2155 bool = l >= 0
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2155++
		if yyhl2155 {
			yyb2155 = yyj2155 > l
		} else {
			yyb2155 = r.CheckBreak()
		}
		if yyb2155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2158 := z.EncBinary()
		_ = yym2158
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2159 := !z.EncBinary()
			yy2arr2159 := z.EncBasicHandle().StructToArray
			var yyq2159 [3]bool
			_, _, _ = yysep2159, yyq2159, yy2arr2159
			const yyr2159 bool = false
			var yynn2159 int
			if yyr2159 || yy2arr2159 {
				r.EncodeArrayStart(3)
			} else {
				yynn2159 = 3
				for _, b := range yyq2159 {
					if b {
						yynn2159++
					}
				}
				r.EncodeMapStart(yynn2159)
				yynn2159 = 0
			}
			if yyr2159 || yy2arr2159 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2161 := z.EncBinary()
				_ = yym2161
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2162 := z.EncBinary()
				_ = yym2162
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2159 || yy2arr2159 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2164 := z.EncBinary()
				_ = yym2164
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2165 := z.EncBinary()
				_ = yym2165
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2159 || yy2arr2159 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2159 || yy2arr2159 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2167 := z.DecBinary()
	_ = yym2167
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2168 := r.ContainerType()
		if yyct2168 == codecSelferValueTypeMap1234 {
			yyl2168 := r.ReadMapStart()
			if yyl2168 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2168, d)
			}
		} else if yyct2168 == codecSelferValueTypeArray1234 {
			yyl2168 := r.ReadArrayStart()
			if yyl2168 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2168, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2169Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2169Slc
	var yyhl2169 bool = l >= 0
	for yyj2169 := 0; ; yyj2169++ {
		if yyhl2169 {
			if yyj2169 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2169Slc = r.DecodeBytes(yys2169Slc, true, true)
		yys2169 := string(yys2169Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2169 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2169)
		} // end switch yys2169
	} // end for yyj2169
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2173 int
	var yyb2173 bool
	var yyhl2173 bool = l >= 0
	yyj2173++
	if yyhl2173 {
		yyb2173 = yyj2173 > l
	} else {
		yyb2173 = r.CheckBreak()
	}
	if yyb2173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2173++
	if yyhl2173 {
		yyb2173 = yyj2173 > l
	} else {
		yyb2173 = r.CheckBreak()
	}
	if yyb2173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2173++
	if yyhl2173 {
		yyb2173 = yyj2173 > l
	} else {
		yyb2173 = r.CheckBreak()
	}
	if yyb2173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2173++
		if yyhl2173 {
			yyb2173 = yyj2173 > l
		} else {
			yyb2173 = r.CheckBreak()
		}
		if yyb2173 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2173-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2177 := z.EncBinary()
		_ = yym2177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2178 := !z.EncBinary()
			yy2arr2178 := z.EncBasicHandle().StructToArray
			var yyq2178 [4]bool
			_, _, _ = yysep2178, yyq2178, yy2arr2178
			const yyr2178 bool = false
			yyq2178[0] = x.Kind != ""
			yyq2178[1] = x.APIVersion != ""
			yyq2178[2] = true
			var yynn2178 int
			if yyr2178 || yy2arr2178 {
				r.EncodeArrayStart(4)
			} else {
				yynn2178 = 1
				for _, b := range yyq2178 {
					if b {
						yynn2178++
					}
				}
				r.EncodeMapStart(yynn2178)
				yynn2178 = 0
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2178[0] {
					yym2180 := z.EncBinary()
					_ = yym2180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2178[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2181 := z.EncBinary()
					_ = yym2181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2178[1] {
					yym2183 := z.EncBinary()
					_ = yym2183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2178[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2178[2] {
					yy2186 := &x.ListMeta
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2186) {
					} else {
						z.EncFallback(yy2186)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2178[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2188 := &x.ListMeta
					yym2189 := z.EncBinary()
					_ = yym2189
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2188) {
					} else {
						z.EncFallback(yy2188)
					}
				}
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2191 := z.EncBinary()
					_ = yym2191
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2192 := z.EncBinary()
					_ = yym2192
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2193 := z.DecBinary()
	_ = yym2193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2194 := r.ContainerType()
		if yyct2194 == codecSelferValueTypeMap1234 {
			yyl2194 := r.ReadMapStart()
			if yyl2194 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2194, d)
			}
		} else if yyct2194 == codecSelferValueTypeArray1234 {
			yyl2194 := r.ReadArrayStart()
			if yyl2194 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2195Slc
	var yyhl2195 bool = l >= 0
	for yyj2195 := 0; ; yyj2195++ {
		if yyhl2195 {
			if yyj2195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2195Slc = r.DecodeBytes(yys2195Slc, true, true)
		yys2195 := string(yys2195Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2195 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2198 := &x.ListMeta
				yym2199 := z.DecBinary()
				_ = yym2199
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2198) {
				} else {
					z.DecFallback(yyv2198, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2200 := &x.Items
				yym2201 := z.DecBinary()
				_ = yym2201
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2200), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2195)
		} // end switch yys2195
	} // end for yyj2195
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2202 int
	var yyb2202 bool
	var yyhl2202 bool = l >= 0
	yyj2202++
	if yyhl2202 {
		yyb2202 = yyj2202 > l
	} else {
		yyb2202 = r.CheckBreak()
	}
	if yyb2202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2202++
	if yyhl2202 {
		yyb2202 = yyj2202 > l
	} else {
		yyb2202 = r.CheckBreak()
	}
	if yyb2202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2202++
	if yyhl2202 {
		yyb2202 = yyj2202 > l
	} else {
		yyb2202 = r.CheckBreak()
	}
	if yyb2202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2205 := &x.ListMeta
		yym2206 := z.DecBinary()
		_ = yym2206
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2205) {
		} else {
			z.DecFallback(yyv2205, false)
		}
	}
	yyj2202++
	if yyhl2202 {
		yyb2202 = yyj2202 > l
	} else {
		yyb2202 = r.CheckBreak()
	}
	if yyb2202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2207 := &x.Items
		yym2208 := z.DecBinary()
		_ = yym2208
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2207), d)
		}
	}
	for {
		yyj2202++
		if yyhl2202 {
			yyb2202 = yyj2202 > l
		} else {
			yyb2202 = r.CheckBreak()
		}
		if yyb2202 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2202-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2209 := z.EncBinary()
		_ = yym2209
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2210 := !z.EncBinary()
			yy2arr2210 := z.EncBasicHandle().StructToArray
			var yyq2210 [4]bool
			_, _, _ = yysep2210, yyq2210, yy2arr2210
			const yyr2210 bool = false
			yyq2210[0] = x.PodCIDR != ""
			yyq2210[1] = x.ExternalID != ""
			yyq2210[2] = x.ProviderID != ""
			yyq2210[3] = x.Unschedulable != false
			var yynn2210 int
			if yyr2210 || yy2arr2210 {
				r.EncodeArrayStart(4)
			} else {
				yynn2210 = 0
				for _, b := range yyq2210 {
					if b {
						yynn2210++
					}
				}
				r.EncodeMapStart(yynn2210)
				yynn2210 = 0
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[0] {
					yym2212 := z.EncBinary()
					_ = yym2212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2213 := z.EncBinary()
					_ = yym2213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[1] {
					yym2215 := z.EncBinary()
					_ = yym2215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2216 := z.EncBinary()
					_ = yym2216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[2] {
					yym2218 := z.EncBinary()
					_ = yym2218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2219 := z.EncBinary()
					_ = yym2219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[3] {
					yym2221 := z.EncBinary()
					_ = yym2221
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2210[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2222 := z.EncBinary()
					_ = yym2222
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2223 := z.DecBinary()
	_ = yym2223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2224 := r.ContainerType()
		if yyct2224 == codecSelferValueTypeMap1234 {
			yyl2224 := r.ReadMapStart()
			if yyl2224 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2224, d)
			}
		} else if yyct2224 == codecSelferValueTypeArray1234 {
			yyl2224 := r.ReadArrayStart()
			if yyl2224 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2225Slc
	var yyhl2225 bool = l >= 0
	for yyj2225 := 0; ; yyj2225++ {
		if yyhl2225 {
			if yyj2225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2225Slc = r.DecodeBytes(yys2225Slc, true, true)
		yys2225 := string(yys2225Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2225 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2225)
		} // end switch yys2225
	} // end for yyj2225
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2230 int
	var yyb2230 bool
	var yyhl2230 bool = l >= 0
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2230++
		if yyhl2230 {
			yyb2230 = yyj2230 > l
		} else {
			yyb2230 = r.CheckBreak()
		}
		if yyb2230 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2230-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2235 := z.EncBinary()
		_ = yym2235
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2236 := !z.EncBinary()
			yy2arr2236 := z.EncBasicHandle().StructToArray
			var yyq2236 [1]bool
			_, _, _ = yysep2236, yyq2236, yy2arr2236
			const yyr2236 bool = false
			var yynn2236 int
			if yyr2236 || yy2arr2236 {
				r.EncodeArrayStart(1)
			} else {
				yynn2236 = 1
				for _, b := range yyq2236 {
					if b {
						yynn2236++
					}
				}
				r.EncodeMapStart(yynn2236)
				yynn2236 = 0
			}
			if yyr2236 || yy2arr2236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2238 := z.EncBinary()
				_ = yym2238
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2239 := z.EncBinary()
				_ = yym2239
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2236 || yy2arr2236 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2240 := z.DecBinary()
	_ = yym2240
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2241 := r.ContainerType()
		if yyct2241 == codecSelferValueTypeMap1234 {
			yyl2241 := r.ReadMapStart()
			if yyl2241 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2241, d)
			}
		} else if yyct2241 == codecSelferValueTypeArray1234 {
			yyl2241 := r.ReadArrayStart()
			if yyl2241 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2241, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2242Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2242Slc
	var yyhl2242 bool = l >= 0
	for yyj2242 := 0; ; yyj2242++ {
		if yyhl2242 {
			if yyj2242 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2242Slc = r.DecodeBytes(yys2242Slc, true, true)
		yys2242 := string(yys2242Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2242 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2242)
		} // end switch yys2242
	} // end for yyj2242
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2244 int
	var yyb2244 bool
	var yyhl2244 bool = l >= 0
	yyj2244++
	if yyhl2244 {
		yyb2244 = yyj2244 > l
	} else {
		yyb2244 = r.CheckBreak()
	}
	if yyb2244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2244++
		if yyhl2244 {
			yyb2244 = yyj2244 > l
		} else {
			yyb2244 = r.CheckBreak()
		}
		if yyb2244 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2244-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2246 := z.EncBinary()
		_ = yym2246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2247 := !z.EncBinary()
			yy2arr2247 := z.EncBasicHandle().StructToArray
			var yyq2247 [1]bool
			_, _, _ = yysep2247, yyq2247, yy2arr2247
			const yyr2247 bool = false
			yyq2247[0] = true
			var yynn2247 int
			if yyr2247 || yy2arr2247 {
				r.EncodeArrayStart(1)
			} else {
				yynn2247 = 0
				for _, b := range yyq2247 {
					if b {
						yynn2247++
					}
				}
				r.EncodeMapStart(yynn2247)
				yynn2247 = 0
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2247[0] {
					yy2249 := &x.KubeletEndpoint
					yy2249.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2247[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2250 := &x.KubeletEndpoint
					yy2250.CodecEncodeSelf(e)
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2251 := z.DecBinary()
	_ = yym2251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2252 := r.ContainerType()
		if yyct2252 == codecSelferValueTypeMap1234 {
			yyl2252 := r.ReadMapStart()
			if yyl2252 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2252, d)
			}
		} else if yyct2252 == codecSelferValueTypeArray1234 {
			yyl2252 := r.ReadArrayStart()
			if yyl2252 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2253Slc
	var yyhl2253 bool = l >= 0
	for yyj2253 := 0; ; yyj2253++ {
		if yyhl2253 {
			if yyj2253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2253Slc = r.DecodeBytes(yys2253Slc, true, true)
		yys2253 := string(yys2253Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2253 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2254 := &x.KubeletEndpoint
				yyv2254.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2253)
		} // end switch yys2253
	} // end for yyj2253
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2255 int
	var yyb2255 bool
	var yyhl2255 bool = l >= 0
	yyj2255++
	if yyhl2255 {
		yyb2255 = yyj2255 > l
	} else {
		yyb2255 = r.CheckBreak()
	}
	if yyb2255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2256 := &x.KubeletEndpoint
		yyv2256.CodecDecodeSelf(d)
	}
	for {
		yyj2255++
		if yyhl2255 {
			yyb2255 = yyj2255 > l
		} else {
			yyb2255 = r.CheckBreak()
		}
		if yyb2255 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2255-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2257 := z.EncBinary()
		_ = yym2257
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2258 := !z.EncBinary()
			yy2arr2258 := z.EncBasicHandle().StructToArray
			var yyq2258 [8]bool
			_, _, _ = yysep2258, yyq2258, yy2arr2258
			const yyr2258 bool = false
			var yynn2258 int
			if yyr2258 || yy2arr2258 {
				r.EncodeArrayStart(8)
			} else {
				yynn2258 = 8
				for _, b := range yyq2258 {
					if b {
						yynn2258++
					}
				}
				r.EncodeMapStart(yynn2258)
				yynn2258 = 0
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2260 := z.EncBinary()
				_ = yym2260
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2261 := z.EncBinary()
				_ = yym2261
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2263 := z.EncBinary()
				_ = yym2263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2264 := z.EncBinary()
				_ = yym2264
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2266 := z.EncBinary()
				_ = yym2266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2267 := z.EncBinary()
				_ = yym2267
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2269 := z.EncBinary()
				_ = yym2269
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2270 := z.EncBinary()
				_ = yym2270
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2272 := z.EncBinary()
				_ = yym2272
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2273 := z.EncBinary()
				_ = yym2273
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2275 := z.EncBinary()
				_ = yym2275
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2276 := z.EncBinary()
				_ = yym2276
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2278 := z.EncBinary()
				_ = yym2278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2279 := z.EncBinary()
				_ = yym2279
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2281 := z.EncBinary()
				_ = yym2281
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2282 := z.EncBinary()
				_ = yym2282
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2283 := z.DecBinary()
	_ = yym2283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2284 := r.ContainerType()
		if yyct2284 == codecSelferValueTypeMap1234 {
			yyl2284 := r.ReadMapStart()
			if yyl2284 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2284, d)
			}
		} else if yyct2284 == codecSelferValueTypeArray1234 {
			yyl2284 := r.ReadArrayStart()
			if yyl2284 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2285Slc
	var yyhl2285 bool = l >= 0
	for yyj2285 := 0; ; yyj2285++ {
		if yyhl2285 {
			if yyj2285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2285Slc = r.DecodeBytes(yys2285Slc, true, true)
		yys2285 := string(yys2285Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2285 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2285)
		} // end switch yys2285
	} // end for yyj2285
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2294 int
	var yyb2294 bool
	var yyhl2294 bool = l >= 0
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2294++
		if yyhl2294 {
			yyb2294 = yyj2294 > l
		} else {
			yyb2294 = r.CheckBreak()
		}
		if yyb2294 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2294-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2303 := z.EncBinary()
		_ = yym2303
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2304 := !z.EncBinary()
			yy2arr2304 := z.EncBasicHandle().StructToArray
			var yyq2304 [7]bool
			_, _, _ = yysep2304, yyq2304, yy2arr2304
			const yyr2304 bool = false
			yyq2304[0] = len(x.Capacity) != 0
			yyq2304[1] = len(x.Allocatable) != 0
			yyq2304[2] = x.Phase != ""
			yyq2304[3] = len(x.Conditions) != 0
			yyq2304[4] = len(x.Addresses) != 0
			yyq2304[5] = true
			yyq2304[6] = true
			var yynn2304 int
			if yyr2304 || yy2arr2304 {
				r.EncodeArrayStart(7)
			} else {
				yynn2304 = 0
				for _, b := range yyq2304 {
					if b {
						yynn2304++
					}
				}
				r.EncodeMapStart(yynn2304)
				yynn2304 = 0
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2304[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2304[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2304[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2304[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2304[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2309 := z.EncBinary()
						_ = yym2309
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2310 := z.EncBinary()
						_ = yym2310
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2304[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2312 := z.EncBinary()
						_ = yym2312
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2313 := z.EncBinary()
						_ = yym2313
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2304[5] {
					yy2315 := &x.DaemonEndpoints
					yy2315.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2316 := &x.DaemonEndpoints
					yy2316.CodecEncodeSelf(e)
				}
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2304[6] {
					yy2318 := &x.NodeInfo
					yy2318.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2319 := &x.NodeInfo
					yy2319.CodecEncodeSelf(e)
				}
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2320 := z.DecBinary()
	_ = yym2320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2321 := r.ContainerType()
		if yyct2321 == codecSelferValueTypeMap1234 {
			yyl2321 := r.ReadMapStart()
			if yyl2321 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2321, d)
			}
		} else if yyct2321 == codecSelferValueTypeArray1234 {
			yyl2321 := r.ReadArrayStart()
			if yyl2321 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2321, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2322Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2322Slc
	var yyhl2322 bool = l >= 0
	for yyj2322 := 0; ; yyj2322++ {
		if yyhl2322 {
			if yyj2322 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2322Slc = r.DecodeBytes(yys2322Slc, true, true)
		yys2322 := string(yys2322Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2322 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2323 := &x.Capacity
				yyv2323.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2324 := &x.Allocatable
				yyv2324.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2326 := &x.Conditions
				yym2327 := z.DecBinary()
				_ = yym2327
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2326), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2328 := &x.Addresses
				yym2329 := z.DecBinary()
				_ = yym2329
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2328), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2330 := &x.DaemonEndpoints
				yyv2330.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2331 := &x.NodeInfo
				yyv2331.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2322)
		} // end switch yys2322
	} // end for yyj2322
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2332 int
	var yyb2332 bool
	var yyhl2332 bool = l >= 0
	yyj2332++
	if yyhl2332 {
		yyb2332 = yyj2332 > l
	} else {
		yyb2332 = r.CheckBreak()
	}
	if yyb2332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2333 := &x.Capacity
		yyv2333.CodecDecodeSelf(d)
	}
	yyj2332++
	if yyhl2332 {
		yyb2332 = yyj2332 > l
	} else {
		yyb2332 = r.CheckBreak()
	}
	if yyb2332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2334 := &x.Allocatable
		yyv2334.CodecDecodeSelf(d)
	}
	yyj2332++
	if yyhl2332 {
		yyb2332 = yyj2332 > l
	} else {
		yyb2332 = r.CheckBreak()
	}
	if yyb2332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2332++
	if yyhl2332 {
		yyb2332 = yyj2332 > l
	} else {
		yyb2332 = r.CheckBreak()
	}
	if yyb2332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2336 := &x.Conditions
		yym2337 := z.DecBinary()
		_ = yym2337
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2336), d)
		}
	}
	yyj2332++
	if yyhl2332 {
		yyb2332 = yyj2332 > l
	} else {
		yyb2332 = r.CheckBreak()
	}
	if yyb2332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2338 := &x.Addresses
		yym2339 := z.DecBinary()
		_ = yym2339
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2338), d)
		}
	}
	yyj2332++
	if yyhl2332 {
		yyb2332 = yyj2332 > l
	} else {
		yyb2332 = r.CheckBreak()
	}
	if yyb2332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2340 := &x.DaemonEndpoints
		yyv2340.CodecDecodeSelf(d)
	}
	yyj2332++
	if yyhl2332 {
		yyb2332 = yyj2332 > l
	} else {
		yyb2332 = r.CheckBreak()
	}
	if yyb2332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2341 := &x.NodeInfo
		yyv2341.CodecDecodeSelf(d)
	}
	for {
		yyj2332++
		if yyhl2332 {
			yyb2332 = yyj2332 > l
		} else {
			yyb2332 = r.CheckBreak()
		}
		if yyb2332 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2332-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2342 := z.EncBinary()
	_ = yym2342
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2343 := z.DecBinary()
	_ = yym2343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2344 := z.EncBinary()
	_ = yym2344
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2345 := z.DecBinary()
	_ = yym2345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2346 := z.EncBinary()
		_ = yym2346
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2347 := !z.EncBinary()
			yy2arr2347 := z.EncBasicHandle().StructToArray
			var yyq2347 [6]bool
			_, _, _ = yysep2347, yyq2347, yy2arr2347
			const yyr2347 bool = false
			yyq2347[2] = true
			yyq2347[3] = true
			yyq2347[4] = x.Reason != ""
			yyq2347[5] = x.Message != ""
			var yynn2347 int
			if yyr2347 || yy2arr2347 {
				r.EncodeArrayStart(6)
			} else {
				yynn2347 = 2
				for _, b := range yyq2347 {
					if b {
						yynn2347++
					}
				}
				r.EncodeMapStart(yynn2347)
				yynn2347 = 0
			}
			if yyr2347 || yy2arr2347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2347 || yy2arr2347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2347 || yy2arr2347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2347[2] {
					yy2351 := &x.LastHeartbeatTime
					yym2352 := z.EncBinary()
					_ = yym2352
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2351) {
					} else if yym2352 {
						z.EncBinaryMarshal(yy2351)
					} else if !yym2352 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2351)
					} else {
						z.EncFallback(yy2351)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2347[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2353 := &x.LastHeartbeatTime
					yym2354 := z.EncBinary()
					_ = yym2354
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2353) {
					} else if yym2354 {
						z.EncBinaryMarshal(yy2353)
					} else if !yym2354 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2353)
					} else {
						z.EncFallback(yy2353)
					}
				}
			}
			if yyr2347 || yy2arr2347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2347[3] {
					yy2356 := &x.LastTransitionTime
					yym2357 := z.EncBinary()
					_ = yym2357
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2356) {
					} else if yym2357 {
						z.EncBinaryMarshal(yy2356)
					} else if !yym2357 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2356)
					} else {
						z.EncFallback(yy2356)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2347[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2358 := &x.LastTransitionTime
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2358) {
					} else if yym2359 {
						z.EncBinaryMarshal(yy2358)
					} else if !yym2359 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2358)
					} else {
						z.EncFallback(yy2358)
					}
				}
			}
			if yyr2347 || yy2arr2347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2347[4] {
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2347[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2347 || yy2arr2347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2347[5] {
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2347[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2365 := z.EncBinary()
					_ = yym2365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2347 || yy2arr2347 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2366 := z.DecBinary()
	_ = yym2366
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2367 := r.ContainerType()
		if yyct2367 == codecSelferValueTypeMap1234 {
			yyl2367 := r.ReadMapStart()
			if yyl2367 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2367, d)
			}
		} else if yyct2367 == codecSelferValueTypeArray1234 {
			yyl2367 := r.ReadArrayStart()
			if yyl2367 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2367, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2368Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2368Slc
	var yyhl2368 bool = l >= 0
	for yyj2368 := 0; ; yyj2368++ {
		if yyhl2368 {
			if yyj2368 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2368Slc = r.DecodeBytes(yys2368Slc, true, true)
		yys2368 := string(yys2368Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2368 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2371 := &x.LastHeartbeatTime
				yym2372 := z.DecBinary()
				_ = yym2372
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2371) {
				} else if yym2372 {
					z.DecBinaryUnmarshal(yyv2371)
				} else if !yym2372 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2371)
				} else {
					z.DecFallback(yyv2371, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2373 := &x.LastTransitionTime
				yym2374 := z.DecBinary()
				_ = yym2374
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2373) {
				} else if yym2374 {
					z.DecBinaryUnmarshal(yyv2373)
				} else if !yym2374 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2373)
				} else {
					z.DecFallback(yyv2373, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2368)
		} // end switch yys2368
	} // end for yyj2368
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2377 int
	var yyb2377 bool
	var yyhl2377 bool = l >= 0
	yyj2377++
	if yyhl2377 {
		yyb2377 = yyj2377 > l
	} else {
		yyb2377 = r.CheckBreak()
	}
	if yyb2377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2377++
	if yyhl2377 {
		yyb2377 = yyj2377 > l
	} else {
		yyb2377 = r.CheckBreak()
	}
	if yyb2377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2377++
	if yyhl2377 {
		yyb2377 = yyj2377 > l
	} else {
		yyb2377 = r.CheckBreak()
	}
	if yyb2377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2380 := &x.LastHeartbeatTime
		yym2381 := z.DecBinary()
		_ = yym2381
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2380) {
		} else if yym2381 {
			z.DecBinaryUnmarshal(yyv2380)
		} else if !yym2381 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2380)
		} else {
			z.DecFallback(yyv2380, false)
		}
	}
	yyj2377++
	if yyhl2377 {
		yyb2377 = yyj2377 > l
	} else {
		yyb2377 = r.CheckBreak()
	}
	if yyb2377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2382 := &x.LastTransitionTime
		yym2383 := z.DecBinary()
		_ = yym2383
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2382) {
		} else if yym2383 {
			z.DecBinaryUnmarshal(yyv2382)
		} else if !yym2383 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2382)
		} else {
			z.DecFallback(yyv2382, false)
		}
	}
	yyj2377++
	if yyhl2377 {
		yyb2377 = yyj2377 > l
	} else {
		yyb2377 = r.CheckBreak()
	}
	if yyb2377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2377++
	if yyhl2377 {
		yyb2377 = yyj2377 > l
	} else {
		yyb2377 = r.CheckBreak()
	}
	if yyb2377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2377++
		if yyhl2377 {
			yyb2377 = yyj2377 > l
		} else {
			yyb2377 = r.CheckBreak()
		}
		if yyb2377 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2377-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2386 := z.EncBinary()
	_ = yym2386
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2387 := z.DecBinary()
	_ = yym2387
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2388 := z.EncBinary()
		_ = yym2388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2389 := !z.EncBinary()
			yy2arr2389 := z.EncBasicHandle().StructToArray
			var yyq2389 [2]bool
			_, _, _ = yysep2389, yyq2389, yy2arr2389
			const yyr2389 bool = false
			var yynn2389 int
			if yyr2389 || yy2arr2389 {
				r.EncodeArrayStart(2)
			} else {
				yynn2389 = 2
				for _, b := range yyq2389 {
					if b {
						yynn2389++
					}
				}
				r.EncodeMapStart(yynn2389)
				yynn2389 = 0
			}
			if yyr2389 || yy2arr2389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2389 || yy2arr2389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2392 := z.EncBinary()
				_ = yym2392
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2393 := z.EncBinary()
				_ = yym2393
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2389 || yy2arr2389 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2394 := z.DecBinary()
	_ = yym2394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2395 := r.ContainerType()
		if yyct2395 == codecSelferValueTypeMap1234 {
			yyl2395 := r.ReadMapStart()
			if yyl2395 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2395, d)
			}
		} else if yyct2395 == codecSelferValueTypeArray1234 {
			yyl2395 := r.ReadArrayStart()
			if yyl2395 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2395, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2396Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2396Slc
	var yyhl2396 bool = l >= 0
	for yyj2396 := 0; ; yyj2396++ {
		if yyhl2396 {
			if yyj2396 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2396Slc = r.DecodeBytes(yys2396Slc, true, true)
		yys2396 := string(yys2396Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2396 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2396)
		} // end switch yys2396
	} // end for yyj2396
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2399 int
	var yyb2399 bool
	var yyhl2399 bool = l >= 0
	yyj2399++
	if yyhl2399 {
		yyb2399 = yyj2399 > l
	} else {
		yyb2399 = r.CheckBreak()
	}
	if yyb2399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2399++
	if yyhl2399 {
		yyb2399 = yyj2399 > l
	} else {
		yyb2399 = r.CheckBreak()
	}
	if yyb2399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2399++
		if yyhl2399 {
			yyb2399 = yyj2399 > l
		} else {
			yyb2399 = r.CheckBreak()
		}
		if yyb2399 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2399-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2402 := z.EncBinary()
		_ = yym2402
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2403 := !z.EncBinary()
			yy2arr2403 := z.EncBasicHandle().StructToArray
			var yyq2403 [1]bool
			_, _, _ = yysep2403, yyq2403, yy2arr2403
			const yyr2403 bool = false
			yyq2403[0] = len(x.Capacity) != 0
			var yynn2403 int
			if yyr2403 || yy2arr2403 {
				r.EncodeArrayStart(1)
			} else {
				yynn2403 = 0
				for _, b := range yyq2403 {
					if b {
						yynn2403++
					}
				}
				r.EncodeMapStart(yynn2403)
				yynn2403 = 0
			}
			if yyr2403 || yy2arr2403 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2403[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2403[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2403 || yy2arr2403 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2405 := z.DecBinary()
	_ = yym2405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2406 := r.ContainerType()
		if yyct2406 == codecSelferValueTypeMap1234 {
			yyl2406 := r.ReadMapStart()
			if yyl2406 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2406, d)
			}
		} else if yyct2406 == codecSelferValueTypeArray1234 {
			yyl2406 := r.ReadArrayStart()
			if yyl2406 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2407Slc
	var yyhl2407 bool = l >= 0
	for yyj2407 := 0; ; yyj2407++ {
		if yyhl2407 {
			if yyj2407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2407Slc = r.DecodeBytes(yys2407Slc, true, true)
		yys2407 := string(yys2407Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2407 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2408 := &x.Capacity
				yyv2408.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2407)
		} // end switch yys2407
	} // end for yyj2407
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2409 int
	var yyb2409 bool
	var yyhl2409 bool = l >= 0
	yyj2409++
	if yyhl2409 {
		yyb2409 = yyj2409 > l
	} else {
		yyb2409 = r.CheckBreak()
	}
	if yyb2409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2410 := &x.Capacity
		yyv2410.CodecDecodeSelf(d)
	}
	for {
		yyj2409++
		if yyhl2409 {
			yyb2409 = yyj2409 > l
		} else {
			yyb2409 = r.CheckBreak()
		}
		if yyb2409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2411 := z.EncBinary()
	_ = yym2411
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2412 := z.DecBinary()
	_ = yym2412
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2413 := z.EncBinary()
		_ = yym2413
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2414 := z.DecBinary()
	_ = yym2414
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2415 := z.EncBinary()
		_ = yym2415
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2416 := !z.EncBinary()
			yy2arr2416 := z.EncBasicHandle().StructToArray
			var yyq2416 [5]bool
			_, _, _ = yysep2416, yyq2416, yy2arr2416
			const yyr2416 bool = false
			yyq2416[0] = x.Kind != ""
			yyq2416[1] = x.APIVersion != ""
			yyq2416[2] = true
			yyq2416[3] = true
			yyq2416[4] = true
			var yynn2416 int
			if yyr2416 || yy2arr2416 {
				r.EncodeArrayStart(5)
			} else {
				yynn2416 = 0
				for _, b := range yyq2416 {
					if b {
						yynn2416++
					}
				}
				r.EncodeMapStart(yynn2416)
				yynn2416 = 0
			}
			if yyr2416 || yy2arr2416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2416[0] {
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2416[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2416 || yy2arr2416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2416[1] {
					yym2421 := z.EncBinary()
					_ = yym2421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2416[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2422 := z.EncBinary()
					_ = yym2422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2416 || yy2arr2416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2416[2] {
					yy2424 := &x.ObjectMeta
					yy2424.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2416[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2425 := &x.ObjectMeta
					yy2425.CodecEncodeSelf(e)
				}
			}
			if yyr2416 || yy2arr2416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2416[3] {
					yy2427 := &x.Spec
					yy2427.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2416[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2428 := &x.Spec
					yy2428.CodecEncodeSelf(e)
				}
			}
			if yyr2416 || yy2arr2416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2416[4] {
					yy2430 := &x.Status
					yy2430.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2416[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2431 := &x.Status
					yy2431.CodecEncodeSelf(e)
				}
			}
			if yyr2416 || yy2arr2416 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2432 := z.DecBinary()
	_ = yym2432
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2433 := r.ContainerType()
		if yyct2433 == codecSelferValueTypeMap1234 {
			yyl2433 := r.ReadMapStart()
			if yyl2433 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2433, d)
			}
		} else if yyct2433 == codecSelferValueTypeArray1234 {
			yyl2433 := r.ReadArrayStart()
			if yyl2433 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2433, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2434Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2434Slc
	var yyhl2434 bool = l >= 0
	for yyj2434 := 0; ; yyj2434++ {
		if yyhl2434 {
			if yyj2434 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2434Slc = r.DecodeBytes(yys2434Slc, true, true)
		yys2434 := string(yys2434Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2434 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2437 := &x.ObjectMeta
				yyv2437.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2438 := &x.Spec
				yyv2438.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2439 := &x.Status
				yyv2439.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2434)
		} // end switch yys2434
	} // end for yyj2434
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2440 int
	var yyb2440 bool
	var yyhl2440 bool = l >= 0
	yyj2440++
	if yyhl2440 {
		yyb2440 = yyj2440 > l
	} else {
		yyb2440 = r.CheckBreak()
	}
	if yyb2440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2440++
	if yyhl2440 {
		yyb2440 = yyj2440 > l
	} else {
		yyb2440 = r.CheckBreak()
	}
	if yyb2440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2440++
	if yyhl2440 {
		yyb2440 = yyj2440 > l
	} else {
		yyb2440 = r.CheckBreak()
	}
	if yyb2440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2443 := &x.ObjectMeta
		yyv2443.CodecDecodeSelf(d)
	}
	yyj2440++
	if yyhl2440 {
		yyb2440 = yyj2440 > l
	} else {
		yyb2440 = r.CheckBreak()
	}
	if yyb2440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2444 := &x.Spec
		yyv2444.CodecDecodeSelf(d)
	}
	yyj2440++
	if yyhl2440 {
		yyb2440 = yyj2440 > l
	} else {
		yyb2440 = r.CheckBreak()
	}
	if yyb2440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2445 := &x.Status
		yyv2445.CodecDecodeSelf(d)
	}
	for {
		yyj2440++
		if yyhl2440 {
			yyb2440 = yyj2440 > l
		} else {
			yyb2440 = r.CheckBreak()
		}
		if yyb2440 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2440-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2446 := z.EncBinary()
		_ = yym2446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2447 := !z.EncBinary()
			yy2arr2447 := z.EncBasicHandle().StructToArray
			var yyq2447 [4]bool
			_, _, _ = yysep2447, yyq2447, yy2arr2447
			const yyr2447 bool = false
			yyq2447[0] = x.Kind != ""
			yyq2447[1] = x.APIVersion != ""
			yyq2447[2] = true
			var yynn2447 int
			if yyr2447 || yy2arr2447 {
				r.EncodeArrayStart(4)
			} else {
				yynn2447 = 1
				for _, b := range yyq2447 {
					if b {
						yynn2447++
					}
				}
				r.EncodeMapStart(yynn2447)
				yynn2447 = 0
			}
			if yyr2447 || yy2arr2447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2447[0] {
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2447[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2450 := z.EncBinary()
					_ = yym2450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2447 || yy2arr2447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2447[1] {
					yym2452 := z.EncBinary()
					_ = yym2452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2447[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2453 := z.EncBinary()
					_ = yym2453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2447 || yy2arr2447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2447[2] {
					yy2455 := &x.ListMeta
					yym2456 := z.EncBinary()
					_ = yym2456
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2455) {
					} else {
						z.EncFallback(yy2455)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2447[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2457 := &x.ListMeta
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2457) {
					} else {
						z.EncFallback(yy2457)
					}
				}
			}
			if yyr2447 || yy2arr2447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2460 := z.EncBinary()
					_ = yym2460
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2461 := z.EncBinary()
					_ = yym2461
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr2447 || yy2arr2447 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2462 := z.DecBinary()
	_ = yym2462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2463 := r.ContainerType()
		if yyct2463 == codecSelferValueTypeMap1234 {
			yyl2463 := r.ReadMapStart()
			if yyl2463 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2463, d)
			}
		} else if yyct2463 == codecSelferValueTypeArray1234 {
			yyl2463 := r.ReadArrayStart()
			if yyl2463 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2464Slc
	var yyhl2464 bool = l >= 0
	for yyj2464 := 0; ; yyj2464++ {
		if yyhl2464 {
			if yyj2464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2464Slc = r.DecodeBytes(yys2464Slc, true, true)
		yys2464 := string(yys2464Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2464 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2467 := &x.ListMeta
				yym2468 := z.DecBinary()
				_ = yym2468
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2467) {
				} else {
					z.DecFallback(yyv2467, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2469 := &x.Items
				yym2470 := z.DecBinary()
				_ = yym2470
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2469), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2464)
		} // end switch yys2464
	} // end for yyj2464
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2471 int
	var yyb2471 bool
	var yyhl2471 bool = l >= 0
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2474 := &x.ListMeta
		yym2475 := z.DecBinary()
		_ = yym2475
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2474) {
		} else {
			z.DecFallback(yyv2474, false)
		}
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2476 := &x.Items
		yym2477 := z.DecBinary()
		_ = yym2477
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2476), d)
		}
	}
	for {
		yyj2471++
		if yyhl2471 {
			yyb2471 = yyj2471 > l
		} else {
			yyb2471 = r.CheckBreak()
		}
		if yyb2471 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2471-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2478 := z.EncBinary()
		_ = yym2478
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2479 := !z.EncBinary()
			yy2arr2479 := z.EncBasicHandle().StructToArray
			var yyq2479 [1]bool
			_, _, _ = yysep2479, yyq2479, yy2arr2479
			const yyr2479 bool = false
			var yynn2479 int
			if yyr2479 || yy2arr2479 {
				r.EncodeArrayStart(1)
			} else {
				yynn2479 = 1
				for _, b := range yyq2479 {
					if b {
						yynn2479++
					}
				}
				r.EncodeMapStart(yynn2479)
				yynn2479 = 0
			}
			if yyr2479 || yy2arr2479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2481 := z.EncBinary()
					_ = yym2481
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2482 := z.EncBinary()
					_ = yym2482
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr2479 || yy2arr2479 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2483 := z.DecBinary()
	_ = yym2483
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2484 := r.ContainerType()
		if yyct2484 == codecSelferValueTypeMap1234 {
			yyl2484 := r.ReadMapStart()
			if yyl2484 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2484, d)
			}
		} else if yyct2484 == codecSelferValueTypeArray1234 {
			yyl2484 := r.ReadArrayStart()
			if yyl2484 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2484, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2485Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2485Slc
	var yyhl2485 bool = l >= 0
	for yyj2485 := 0; ; yyj2485++ {
		if yyhl2485 {
			if yyj2485 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2485Slc = r.DecodeBytes(yys2485Slc, true, true)
		yys2485 := string(yys2485Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2485 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2486 := &x.Finalizers
				yym2487 := z.DecBinary()
				_ = yym2487
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2486), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2485)
		} // end switch yys2485
	} // end for yyj2485
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2488 int
	var yyb2488 bool
	var yyhl2488 bool = l >= 0
	yyj2488++
	if yyhl2488 {
		yyb2488 = yyj2488 > l
	} else {
		yyb2488 = r.CheckBreak()
	}
	if yyb2488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2489 := &x.Finalizers
		yym2490 := z.DecBinary()
		_ = yym2490
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2489), d)
		}
	}
	for {
		yyj2488++
		if yyhl2488 {
			yyb2488 = yyj2488 > l
		} else {
			yyb2488 = r.CheckBreak()
		}
		if yyb2488 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2488-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2491 := z.EncBinary()
	_ = yym2491
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2492 := z.DecBinary()
	_ = yym2492
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2493 := z.EncBinary()
		_ = yym2493
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2494 := !z.EncBinary()
			yy2arr2494 := z.EncBasicHandle().StructToArray
			var yyq2494 [1]bool
			_, _, _ = yysep2494, yyq2494, yy2arr2494
			const yyr2494 bool = false
			yyq2494[0] = x.Phase != ""
			var yynn2494 int
			if yyr2494 || yy2arr2494 {
				r.EncodeArrayStart(1)
			} else {
				yynn2494 = 0
				for _, b := range yyq2494 {
					if b {
						yynn2494++
					}
				}
				r.EncodeMapStart(yynn2494)
				yynn2494 = 0
			}
			if yyr2494 || yy2arr2494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2494[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2494[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2494 || yy2arr2494 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2496 := z.DecBinary()
	_ = yym2496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2497 := r.ContainerType()
		if yyct2497 == codecSelferValueTypeMap1234 {
			yyl2497 := r.ReadMapStart()
			if yyl2497 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2497, d)
			}
		} else if yyct2497 == codecSelferValueTypeArray1234 {
			yyl2497 := r.ReadArrayStart()
			if yyl2497 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2497, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2498Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2498Slc
	var yyhl2498 bool = l >= 0
	for yyj2498 := 0; ; yyj2498++ {
		if yyhl2498 {
			if yyj2498 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2498Slc = r.DecodeBytes(yys2498Slc, true, true)
		yys2498 := string(yys2498Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2498 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2498)
		} // end switch yys2498
	} // end for yyj2498
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2500 int
	var yyb2500 bool
	var yyhl2500 bool = l >= 0
	yyj2500++
	if yyhl2500 {
		yyb2500 = yyj2500 > l
	} else {
		yyb2500 = r.CheckBreak()
	}
	if yyb2500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2500++
		if yyhl2500 {
			yyb2500 = yyj2500 > l
		} else {
			yyb2500 = r.CheckBreak()
		}
		if yyb2500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2502 := z.EncBinary()
	_ = yym2502
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2503 := z.DecBinary()
	_ = yym2503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2504 := z.EncBinary()
		_ = yym2504
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2505 := !z.EncBinary()
			yy2arr2505 := z.EncBasicHandle().StructToArray
			var yyq2505 [5]bool
			_, _, _ = yysep2505, yyq2505, yy2arr2505
			const yyr2505 bool = false
			yyq2505[0] = x.Kind != ""
			yyq2505[1] = x.APIVersion != ""
			yyq2505[2] = true
			yyq2505[3] = true
			yyq2505[4] = true
			var yynn2505 int
			if yyr2505 || yy2arr2505 {
				r.EncodeArrayStart(5)
			} else {
				yynn2505 = 0
				for _, b := range yyq2505 {
					if b {
						yynn2505++
					}
				}
				r.EncodeMapStart(yynn2505)
				yynn2505 = 0
			}
			if yyr2505 || yy2arr2505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2505[0] {
					yym2507 := z.EncBinary()
					_ = yym2507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2505[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2508 := z.EncBinary()
					_ = yym2508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2505 || yy2arr2505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2505[1] {
					yym2510 := z.EncBinary()
					_ = yym2510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2505[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2511 := z.EncBinary()
					_ = yym2511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2505 || yy2arr2505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2505[2] {
					yy2513 := &x.ObjectMeta
					yy2513.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2505[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2514 := &x.ObjectMeta
					yy2514.CodecEncodeSelf(e)
				}
			}
			if yyr2505 || yy2arr2505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2505[3] {
					yy2516 := &x.Spec
					yy2516.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2505[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2517 := &x.Spec
					yy2517.CodecEncodeSelf(e)
				}
			}
			if yyr2505 || yy2arr2505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2505[4] {
					yy2519 := &x.Status
					yy2519.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2505[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2520 := &x.Status
					yy2520.CodecEncodeSelf(e)
				}
			}
			if yyr2505 || yy2arr2505 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2521 := z.DecBinary()
	_ = yym2521
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2522 := r.ContainerType()
		if yyct2522 == codecSelferValueTypeMap1234 {
			yyl2522 := r.ReadMapStart()
			if yyl2522 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2522, d)
			}
		} else if yyct2522 == codecSelferValueTypeArray1234 {
			yyl2522 := r.ReadArrayStart()
			if yyl2522 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2522, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2523Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2523Slc
	var yyhl2523 bool = l >= 0
	for yyj2523 := 0; ; yyj2523++ {
		if yyhl2523 {
			if yyj2523 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2523Slc = r.DecodeBytes(yys2523Slc, true, true)
		yys2523 := string(yys2523Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2523 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2526 := &x.ObjectMeta
				yyv2526.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2527 := &x.Spec
				yyv2527.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2528 := &x.Status
				yyv2528.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2523)
		} // end switch yys2523
	} // end for yyj2523
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2529 int
	var yyb2529 bool
	var yyhl2529 bool = l >= 0
	yyj2529++
	if yyhl2529 {
		yyb2529 = yyj2529 > l
	} else {
		yyb2529 = r.CheckBreak()
	}
	if yyb2529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2529++
	if yyhl2529 {
		yyb2529 = yyj2529 > l
	} else {
		yyb2529 = r.CheckBreak()
	}
	if yyb2529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2529++
	if yyhl2529 {
		yyb2529 = yyj2529 > l
	} else {
		yyb2529 = r.CheckBreak()
	}
	if yyb2529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2532 := &x.ObjectMeta
		yyv2532.CodecDecodeSelf(d)
	}
	yyj2529++
	if yyhl2529 {
		yyb2529 = yyj2529 > l
	} else {
		yyb2529 = r.CheckBreak()
	}
	if yyb2529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2533 := &x.Spec
		yyv2533.CodecDecodeSelf(d)
	}
	yyj2529++
	if yyhl2529 {
		yyb2529 = yyj2529 > l
	} else {
		yyb2529 = r.CheckBreak()
	}
	if yyb2529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2534 := &x.Status
		yyv2534.CodecDecodeSelf(d)
	}
	for {
		yyj2529++
		if yyhl2529 {
			yyb2529 = yyj2529 > l
		} else {
			yyb2529 = r.CheckBreak()
		}
		if yyb2529 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2529-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2535 := z.EncBinary()
		_ = yym2535
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2536 := !z.EncBinary()
			yy2arr2536 := z.EncBasicHandle().StructToArray
			var yyq2536 [4]bool
			_, _, _ = yysep2536, yyq2536, yy2arr2536
			const yyr2536 bool = false
			yyq2536[0] = x.Kind != ""
			yyq2536[1] = x.APIVersion != ""
			yyq2536[2] = true
			var yynn2536 int
			if yyr2536 || yy2arr2536 {
				r.EncodeArrayStart(4)
			} else {
				yynn2536 = 1
				for _, b := range yyq2536 {
					if b {
						yynn2536++
					}
				}
				r.EncodeMapStart(yynn2536)
				yynn2536 = 0
			}
			if yyr2536 || yy2arr2536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2536[0] {
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2536[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2539 := z.EncBinary()
					_ = yym2539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2536 || yy2arr2536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2536[1] {
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2536[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2542 := z.EncBinary()
					_ = yym2542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2536 || yy2arr2536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2536[2] {
					yy2544 := &x.ListMeta
					yym2545 := z.EncBinary()
					_ = yym2545
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2544) {
					} else {
						z.EncFallback(yy2544)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2536[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2546 := &x.ListMeta
					yym2547 := z.EncBinary()
					_ = yym2547
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2546) {
					} else {
						z.EncFallback(yy2546)
					}
				}
			}
			if yyr2536 || yy2arr2536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2549 := z.EncBinary()
					_ = yym2549
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2550 := z.EncBinary()
					_ = yym2550
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr2536 || yy2arr2536 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2551 := z.DecBinary()
	_ = yym2551
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2552 := r.ContainerType()
		if yyct2552 == codecSelferValueTypeMap1234 {
			yyl2552 := r.ReadMapStart()
			if yyl2552 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2552, d)
			}
		} else if yyct2552 == codecSelferValueTypeArray1234 {
			yyl2552 := r.ReadArrayStart()
			if yyl2552 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2552, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2553Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2553Slc
	var yyhl2553 bool = l >= 0
	for yyj2553 := 0; ; yyj2553++ {
		if yyhl2553 {
			if yyj2553 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2553Slc = r.DecodeBytes(yys2553Slc, true, true)
		yys2553 := string(yys2553Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2553 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2556 := &x.ListMeta
				yym2557 := z.DecBinary()
				_ = yym2557
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2556) {
				} else {
					z.DecFallback(yyv2556, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2558 := &x.Items
				yym2559 := z.DecBinary()
				_ = yym2559
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2558), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2553)
		} // end switch yys2553
	} // end for yyj2553
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2560 int
	var yyb2560 bool
	var yyhl2560 bool = l >= 0
	yyj2560++
	if yyhl2560 {
		yyb2560 = yyj2560 > l
	} else {
		yyb2560 = r.CheckBreak()
	}
	if yyb2560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2560++
	if yyhl2560 {
		yyb2560 = yyj2560 > l
	} else {
		yyb2560 = r.CheckBreak()
	}
	if yyb2560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2560++
	if yyhl2560 {
		yyb2560 = yyj2560 > l
	} else {
		yyb2560 = r.CheckBreak()
	}
	if yyb2560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2563 := &x.ListMeta
		yym2564 := z.DecBinary()
		_ = yym2564
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2563) {
		} else {
			z.DecFallback(yyv2563, false)
		}
	}
	yyj2560++
	if yyhl2560 {
		yyb2560 = yyj2560 > l
	} else {
		yyb2560 = r.CheckBreak()
	}
	if yyb2560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2565 := &x.Items
		yym2566 := z.DecBinary()
		_ = yym2566
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2565), d)
		}
	}
	for {
		yyj2560++
		if yyhl2560 {
			yyb2560 = yyj2560 > l
		} else {
			yyb2560 = r.CheckBreak()
		}
		if yyb2560 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2560-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2567 := z.EncBinary()
		_ = yym2567
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2568 := !z.EncBinary()
			yy2arr2568 := z.EncBasicHandle().StructToArray
			var yyq2568 [4]bool
			_, _, _ = yysep2568, yyq2568, yy2arr2568
			const yyr2568 bool = false
			yyq2568[0] = x.Kind != ""
			yyq2568[1] = x.APIVersion != ""
			yyq2568[2] = true
			var yynn2568 int
			if yyr2568 || yy2arr2568 {
				r.EncodeArrayStart(4)
			} else {
				yynn2568 = 1
				for _, b := range yyq2568 {
					if b {
						yynn2568++
					}
				}
				r.EncodeMapStart(yynn2568)
				yynn2568 = 0
			}
			if yyr2568 || yy2arr2568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2568[0] {
					yym2570 := z.EncBinary()
					_ = yym2570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2568[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2568[1] {
					yym2573 := z.EncBinary()
					_ = yym2573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2568[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2568[2] {
					yy2576 := &x.ObjectMeta
					yy2576.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2568[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2577 := &x.ObjectMeta
					yy2577.CodecEncodeSelf(e)
				}
			}
			if yyr2568 || yy2arr2568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2579 := &x.Target
				yy2579.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2580 := &x.Target
				yy2580.CodecEncodeSelf(e)
			}
			if yyr2568 || yy2arr2568 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2581 := z.DecBinary()
	_ = yym2581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2582 := r.ContainerType()
		if yyct2582 == codecSelferValueTypeMap1234 {
			yyl2582 := r.ReadMapStart()
			if yyl2582 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2582, d)
			}
		} else if yyct2582 == codecSelferValueTypeArray1234 {
			yyl2582 := r.ReadArrayStart()
			if yyl2582 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2582, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2583Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2583Slc
	var yyhl2583 bool = l >= 0
	for yyj2583 := 0; ; yyj2583++ {
		if yyhl2583 {
			if yyj2583 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2583Slc = r.DecodeBytes(yys2583Slc, true, true)
		yys2583 := string(yys2583Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2583 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2586 := &x.ObjectMeta
				yyv2586.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2587 := &x.Target
				yyv2587.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2583)
		} // end switch yys2583
	} // end for yyj2583
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2588 int
	var yyb2588 bool
	var yyhl2588 bool = l >= 0
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2591 := &x.ObjectMeta
		yyv2591.CodecDecodeSelf(d)
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2592 := &x.Target
		yyv2592.CodecDecodeSelf(d)
	}
	for {
		yyj2588++
		if yyhl2588 {
			yyb2588 = yyj2588 > l
		} else {
			yyb2588 = r.CheckBreak()
		}
		if yyb2588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2593 := z.EncBinary()
		_ = yym2593
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2594 := !z.EncBinary()
			yy2arr2594 := z.EncBasicHandle().StructToArray
			var yyq2594 [3]bool
			_, _, _ = yysep2594, yyq2594, yy2arr2594
			const yyr2594 bool = false
			yyq2594[0] = x.Kind != ""
			yyq2594[1] = x.APIVersion != ""
			var yynn2594 int
			if yyr2594 || yy2arr2594 {
				r.EncodeArrayStart(3)
			} else {
				yynn2594 = 1
				for _, b := range yyq2594 {
					if b {
						yynn2594++
					}
				}
				r.EncodeMapStart(yynn2594)
				yynn2594 = 0
			}
			if yyr2594 || yy2arr2594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2594[0] {
					yym2596 := z.EncBinary()
					_ = yym2596
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2594[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2594 || yy2arr2594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2594[1] {
					yym2599 := z.EncBinary()
					_ = yym2599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2594[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2600 := z.EncBinary()
					_ = yym2600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2594 || yy2arr2594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2602 := *x.GracePeriodSeconds
					yym2603 := z.EncBinary()
					_ = yym2603
					if false {
					} else {
						r.EncodeInt(int64(yy2602))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2604 := *x.GracePeriodSeconds
					yym2605 := z.EncBinary()
					_ = yym2605
					if false {
					} else {
						r.EncodeInt(int64(yy2604))
					}
				}
			}
			if yyr2594 || yy2arr2594 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2606 := z.DecBinary()
	_ = yym2606
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2607 := r.ContainerType()
		if yyct2607 == codecSelferValueTypeMap1234 {
			yyl2607 := r.ReadMapStart()
			if yyl2607 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2607, d)
			}
		} else if yyct2607 == codecSelferValueTypeArray1234 {
			yyl2607 := r.ReadArrayStart()
			if yyl2607 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2607, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2608Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2608Slc
	var yyhl2608 bool = l >= 0
	for yyj2608 := 0; ; yyj2608++ {
		if yyhl2608 {
			if yyj2608 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2608Slc = r.DecodeBytes(yys2608Slc, true, true)
		yys2608 := string(yys2608Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2608 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2612 := z.DecBinary()
				_ = yym2612
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2608)
		} // end switch yys2608
	} // end for yyj2608
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2613 int
	var yyb2613 bool
	var yyhl2613 bool = l >= 0
	yyj2613++
	if yyhl2613 {
		yyb2613 = yyj2613 > l
	} else {
		yyb2613 = r.CheckBreak()
	}
	if yyb2613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2613++
	if yyhl2613 {
		yyb2613 = yyj2613 > l
	} else {
		yyb2613 = r.CheckBreak()
	}
	if yyb2613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2613++
	if yyhl2613 {
		yyb2613 = yyj2613 > l
	} else {
		yyb2613 = r.CheckBreak()
	}
	if yyb2613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2617 := z.DecBinary()
		_ = yym2617
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2613++
		if yyhl2613 {
			yyb2613 = yyj2613 > l
		} else {
			yyb2613 = r.CheckBreak()
		}
		if yyb2613 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2613-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2618 := z.EncBinary()
		_ = yym2618
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2619 := !z.EncBinary()
			yy2arr2619 := z.EncBasicHandle().StructToArray
			var yyq2619 [7]bool
			_, _, _ = yysep2619, yyq2619, yy2arr2619
			const yyr2619 bool = false
			yyq2619[0] = x.Kind != ""
			yyq2619[1] = x.APIVersion != ""
			var yynn2619 int
			if yyr2619 || yy2arr2619 {
				r.EncodeArrayStart(7)
			} else {
				yynn2619 = 5
				for _, b := range yyq2619 {
					if b {
						yynn2619++
					}
				}
				r.EncodeMapStart(yynn2619)
				yynn2619 = 0
			}
			if yyr2619 || yy2arr2619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2619[0] {
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2619[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2622 := z.EncBinary()
					_ = yym2622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2619 || yy2arr2619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2619[1] {
					yym2624 := z.EncBinary()
					_ = yym2624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2619[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2625 := z.EncBinary()
					_ = yym2625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2619 || yy2arr2619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2627 := z.EncBinary()
					_ = yym2627
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2628 := z.EncBinary()
					_ = yym2628
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr2619 || yy2arr2619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2630 := z.EncBinary()
					_ = yym2630
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2631 := z.EncBinary()
					_ = yym2631
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr2619 || yy2arr2619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2633 := z.EncBinary()
				_ = yym2633
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2634 := z.EncBinary()
				_ = yym2634
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr2619 || yy2arr2619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2636 := z.EncBinary()
				_ = yym2636
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2637 := z.EncBinary()
				_ = yym2637
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr2619 || yy2arr2619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2639 := *x.TimeoutSeconds
					yym2640 := z.EncBinary()
					_ = yym2640
					if false {
					} else {
						r.EncodeInt(int64(yy2639))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2641 := *x.TimeoutSeconds
					yym2642 := z.EncBinary()
					_ = yym2642
					if false {
					} else {
						r.EncodeInt(int64(yy2641))
					}
				}
			}
			if yyr2619 || yy2arr2619 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2643 := z.DecBinary()
	_ = yym2643
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2644 := r.ContainerType()
		if yyct2644 == codecSelferValueTypeMap1234 {
			yyl2644 := r.ReadMapStart()
			if yyl2644 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2644, d)
			}
		} else if yyct2644 == codecSelferValueTypeArray1234 {
			yyl2644 := r.ReadArrayStart()
			if yyl2644 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2644, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2645Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2645Slc
	var yyhl2645 bool = l >= 0
	for yyj2645 := 0; ; yyj2645++ {
		if yyhl2645 {
			if yyj2645 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2645Slc = r.DecodeBytes(yys2645Slc, true, true)
		yys2645 := string(yys2645Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2645 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv2648 := &x.LabelSelector
				yym2649 := z.DecBinary()
				_ = yym2649
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2648) {
				} else {
					z.DecFallback(yyv2648, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv2650 := &x.FieldSelector
				yym2651 := z.DecBinary()
				_ = yym2651
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2650) {
				} else {
					z.DecFallback(yyv2650, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2655 := z.DecBinary()
				_ = yym2655
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2645)
		} // end switch yys2645
	} // end for yyj2645
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2656 int
	var yyb2656 bool
	var yyhl2656 bool = l >= 0
	yyj2656++
	if yyhl2656 {
		yyb2656 = yyj2656 > l
	} else {
		yyb2656 = r.CheckBreak()
	}
	if yyb2656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2656++
	if yyhl2656 {
		yyb2656 = yyj2656 > l
	} else {
		yyb2656 = r.CheckBreak()
	}
	if yyb2656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2656++
	if yyhl2656 {
		yyb2656 = yyj2656 > l
	} else {
		yyb2656 = r.CheckBreak()
	}
	if yyb2656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv2659 := &x.LabelSelector
		yym2660 := z.DecBinary()
		_ = yym2660
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2659) {
		} else {
			z.DecFallback(yyv2659, true)
		}
	}
	yyj2656++
	if yyhl2656 {
		yyb2656 = yyj2656 > l
	} else {
		yyb2656 = r.CheckBreak()
	}
	if yyb2656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv2661 := &x.FieldSelector
		yym2662 := z.DecBinary()
		_ = yym2662
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2661) {
		} else {
			z.DecFallback(yyv2661, true)
		}
	}
	yyj2656++
	if yyhl2656 {
		yyb2656 = yyj2656 > l
	} else {
		yyb2656 = r.CheckBreak()
	}
	if yyb2656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2656++
	if yyhl2656 {
		yyb2656 = yyj2656 > l
	} else {
		yyb2656 = r.CheckBreak()
	}
	if yyb2656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2656++
	if yyhl2656 {
		yyb2656 = yyj2656 > l
	} else {
		yyb2656 = r.CheckBreak()
	}
	if yyb2656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2666 := z.DecBinary()
		_ = yym2666
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2656++
		if yyhl2656 {
			yyb2656 = yyj2656 > l
		} else {
			yyb2656 = r.CheckBreak()
		}
		if yyb2656 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2656-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2667 := z.EncBinary()
		_ = yym2667
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2668 := !z.EncBinary()
			yy2arr2668 := z.EncBasicHandle().StructToArray
			var yyq2668 [10]bool
			_, _, _ = yysep2668, yyq2668, yy2arr2668
			const yyr2668 bool = false
			yyq2668[0] = x.Kind != ""
			yyq2668[1] = x.APIVersion != ""
			var yynn2668 int
			if yyr2668 || yy2arr2668 {
				r.EncodeArrayStart(10)
			} else {
				yynn2668 = 8
				for _, b := range yyq2668 {
					if b {
						yynn2668++
					}
				}
				r.EncodeMapStart(yynn2668)
				yynn2668 = 0
			}
			if yyr2668 || yy2arr2668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2668[0] {
					yym2670 := z.EncBinary()
					_ = yym2670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2668[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2671 := z.EncBinary()
					_ = yym2671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2668 || yy2arr2668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2668[1] {
					yym2673 := z.EncBinary()
					_ = yym2673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2668[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2674 := z.EncBinary()
					_ = yym2674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2668 || yy2arr2668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2676 := z.EncBinary()
				_ = yym2676
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2677 := z.EncBinary()
				_ = yym2677
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2668 || yy2arr2668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2679 := z.EncBinary()
				_ = yym2679
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2680 := z.EncBinary()
				_ = yym2680
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2668 || yy2arr2668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2682 := z.EncBinary()
				_ = yym2682
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2683 := z.EncBinary()
				_ = yym2683
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr2668 || yy2arr2668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2685 := *x.SinceSeconds
					yym2686 := z.EncBinary()
					_ = yym2686
					if false {
					} else {
						r.EncodeInt(int64(yy2685))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2687 := *x.SinceSeconds
					yym2688 := z.EncBinary()
					_ = yym2688
					if false {
					} else {
						r.EncodeInt(int64(yy2687))
					}
				}
			}
			if yyr2668 || yy2arr2668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2690 := z.EncBinary()
					_ = yym2690
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2690 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2690 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2691 := z.EncBinary()
					_ = yym2691
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2691 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2691 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr2668 || yy2arr2668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2693 := z.EncBinary()
				_ = yym2693
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2694 := z.EncBinary()
				_ = yym2694
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr2668 || yy2arr2668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2696 := *x.TailLines
					yym2697 := z.EncBinary()
					_ = yym2697
					if false {
					} else {
						r.EncodeInt(int64(yy2696))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2698 := *x.TailLines
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						r.EncodeInt(int64(yy2698))
					}
				}
			}
			if yyr2668 || yy2arr2668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2701 := *x.LimitBytes
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else {
						r.EncodeInt(int64(yy2701))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2703 := *x.LimitBytes
					yym2704 := z.EncBinary()
					_ = yym2704
					if false {
					} else {
						r.EncodeInt(int64(yy2703))
					}
				}
			}
			if yyr2668 || yy2arr2668 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2705 := z.DecBinary()
	_ = yym2705
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2706 := r.ContainerType()
		if yyct2706 == codecSelferValueTypeMap1234 {
			yyl2706 := r.ReadMapStart()
			if yyl2706 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2706, d)
			}
		} else if yyct2706 == codecSelferValueTypeArray1234 {
			yyl2706 := r.ReadArrayStart()
			if yyl2706 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2706, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2707Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2707Slc
	var yyhl2707 bool = l >= 0
	for yyj2707 := 0; ; yyj2707++ {
		if yyhl2707 {
			if yyj2707 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2707Slc = r.DecodeBytes(yys2707Slc, true, true)
		yys2707 := string(yys2707Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2707 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2714 := z.DecBinary()
				_ = yym2714
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2716 := z.DecBinary()
				_ = yym2716
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2716 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2716 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2719 := z.DecBinary()
				_ = yym2719
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2721 := z.DecBinary()
				_ = yym2721
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2707)
		} // end switch yys2707
	} // end for yyj2707
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2722 int
	var yyb2722 bool
	var yyhl2722 bool = l >= 0
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2729 := z.DecBinary()
		_ = yym2729
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2731 := z.DecBinary()
		_ = yym2731
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2731 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2731 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2734 := z.DecBinary()
		_ = yym2734
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2736 := z.DecBinary()
		_ = yym2736
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2722++
		if yyhl2722 {
			yyb2722 = yyj2722 > l
		} else {
			yyb2722 = r.CheckBreak()
		}
		if yyb2722 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2722-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2737 := z.EncBinary()
		_ = yym2737
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2738 := !z.EncBinary()
			yy2arr2738 := z.EncBasicHandle().StructToArray
			var yyq2738 [7]bool
			_, _, _ = yysep2738, yyq2738, yy2arr2738
			const yyr2738 bool = false
			yyq2738[0] = x.Kind != ""
			yyq2738[1] = x.APIVersion != ""
			yyq2738[2] = x.Stdin != false
			yyq2738[3] = x.Stdout != false
			yyq2738[4] = x.Stderr != false
			yyq2738[5] = x.TTY != false
			yyq2738[6] = x.Container != ""
			var yynn2738 int
			if yyr2738 || yy2arr2738 {
				r.EncodeArrayStart(7)
			} else {
				yynn2738 = 0
				for _, b := range yyq2738 {
					if b {
						yynn2738++
					}
				}
				r.EncodeMapStart(yynn2738)
				yynn2738 = 0
			}
			if yyr2738 || yy2arr2738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2738[0] {
					yym2740 := z.EncBinary()
					_ = yym2740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2738[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2741 := z.EncBinary()
					_ = yym2741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2738 || yy2arr2738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2738[1] {
					yym2743 := z.EncBinary()
					_ = yym2743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2738[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2744 := z.EncBinary()
					_ = yym2744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2738 || yy2arr2738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2738[2] {
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2738[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2747 := z.EncBinary()
					_ = yym2747
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2738 || yy2arr2738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2738[3] {
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2738[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2750 := z.EncBinary()
					_ = yym2750
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2738 || yy2arr2738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2738[4] {
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2738[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2753 := z.EncBinary()
					_ = yym2753
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2738 || yy2arr2738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2738[5] {
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2738[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2738 || yy2arr2738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2738[6] {
					yym2758 := z.EncBinary()
					_ = yym2758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2738[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2759 := z.EncBinary()
					_ = yym2759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2738 || yy2arr2738 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2760 := z.DecBinary()
	_ = yym2760
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2761 := r.ContainerType()
		if yyct2761 == codecSelferValueTypeMap1234 {
			yyl2761 := r.ReadMapStart()
			if yyl2761 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2761, d)
			}
		} else if yyct2761 == codecSelferValueTypeArray1234 {
			yyl2761 := r.ReadArrayStart()
			if yyl2761 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2761, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2762Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2762Slc
	var yyhl2762 bool = l >= 0
	for yyj2762 := 0; ; yyj2762++ {
		if yyhl2762 {
			if yyj2762 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2762Slc = r.DecodeBytes(yys2762Slc, true, true)
		yys2762 := string(yys2762Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2762 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2762)
		} // end switch yys2762
	} // end for yyj2762
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2770 int
	var yyb2770 bool
	var yyhl2770 bool = l >= 0
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2770++
		if yyhl2770 {
			yyb2770 = yyj2770 > l
		} else {
			yyb2770 = r.CheckBreak()
		}
		if yyb2770 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2770-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2778 := z.EncBinary()
		_ = yym2778
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2779 := !z.EncBinary()
			yy2arr2779 := z.EncBasicHandle().StructToArray
			var yyq2779 [8]bool
			_, _, _ = yysep2779, yyq2779, yy2arr2779
			const yyr2779 bool = false
			yyq2779[0] = x.Kind != ""
			yyq2779[1] = x.APIVersion != ""
			var yynn2779 int
			if yyr2779 || yy2arr2779 {
				r.EncodeArrayStart(8)
			} else {
				yynn2779 = 6
				for _, b := range yyq2779 {
					if b {
						yynn2779++
					}
				}
				r.EncodeMapStart(yynn2779)
				yynn2779 = 0
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2779[0] {
					yym2781 := z.EncBinary()
					_ = yym2781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2779[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2782 := z.EncBinary()
					_ = yym2782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2779[1] {
					yym2784 := z.EncBinary()
					_ = yym2784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2779[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2785 := z.EncBinary()
					_ = yym2785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2787 := z.EncBinary()
				_ = yym2787
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2788 := z.EncBinary()
				_ = yym2788
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2790 := z.EncBinary()
				_ = yym2790
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2791 := z.EncBinary()
				_ = yym2791
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2793 := z.EncBinary()
				_ = yym2793
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2794 := z.EncBinary()
				_ = yym2794
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2796 := z.EncBinary()
				_ = yym2796
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2797 := z.EncBinary()
				_ = yym2797
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2799 := z.EncBinary()
				_ = yym2799
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2800 := z.EncBinary()
				_ = yym2800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2803 := z.EncBinary()
					_ = yym2803
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2804 := z.DecBinary()
	_ = yym2804
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2805 := r.ContainerType()
		if yyct2805 == codecSelferValueTypeMap1234 {
			yyl2805 := r.ReadMapStart()
			if yyl2805 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2805, d)
			}
		} else if yyct2805 == codecSelferValueTypeArray1234 {
			yyl2805 := r.ReadArrayStart()
			if yyl2805 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2805, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2806Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2806Slc
	var yyhl2806 bool = l >= 0
	for yyj2806 := 0; ; yyj2806++ {
		if yyhl2806 {
			if yyj2806 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2806Slc = r.DecodeBytes(yys2806Slc, true, true)
		yys2806 := string(yys2806Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2806 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2814 := &x.Command
				yym2815 := z.DecBinary()
				_ = yym2815
				if false {
				} else {
					z.F.DecSliceStringX(yyv2814, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2806)
		} // end switch yys2806
	} // end for yyj2806
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2816 int
	var yyb2816 bool
	var yyhl2816 bool = l >= 0
	yyj2816++
	if yyhl2816 {
		yyb2816 = yyj2816 > l
	} else {
		yyb2816 = r.CheckBreak()
	}
	if yyb2816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2816++
	if yyhl2816 {
		yyb2816 = yyj2816 > l
	} else {
		yyb2816 = r.CheckBreak()
	}
	if yyb2816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2816++
	if yyhl2816 {
		yyb2816 = yyj2816 > l
	} else {
		yyb2816 = r.CheckBreak()
	}
	if yyb2816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2816++
	if yyhl2816 {
		yyb2816 = yyj2816 > l
	} else {
		yyb2816 = r.CheckBreak()
	}
	if yyb2816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2816++
	if yyhl2816 {
		yyb2816 = yyj2816 > l
	} else {
		yyb2816 = r.CheckBreak()
	}
	if yyb2816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2816++
	if yyhl2816 {
		yyb2816 = yyj2816 > l
	} else {
		yyb2816 = r.CheckBreak()
	}
	if yyb2816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2816++
	if yyhl2816 {
		yyb2816 = yyj2816 > l
	} else {
		yyb2816 = r.CheckBreak()
	}
	if yyb2816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2816++
	if yyhl2816 {
		yyb2816 = yyj2816 > l
	} else {
		yyb2816 = r.CheckBreak()
	}
	if yyb2816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2824 := &x.Command
		yym2825 := z.DecBinary()
		_ = yym2825
		if false {
		} else {
			z.F.DecSliceStringX(yyv2824, false, d)
		}
	}
	for {
		yyj2816++
		if yyhl2816 {
			yyb2816 = yyj2816 > l
		} else {
			yyb2816 = r.CheckBreak()
		}
		if yyb2816 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2816-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2826 := z.EncBinary()
		_ = yym2826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2827 := !z.EncBinary()
			yy2arr2827 := z.EncBasicHandle().StructToArray
			var yyq2827 [3]bool
			_, _, _ = yysep2827, yyq2827, yy2arr2827
			const yyr2827 bool = false
			yyq2827[0] = x.Kind != ""
			yyq2827[1] = x.APIVersion != ""
			var yynn2827 int
			if yyr2827 || yy2arr2827 {
				r.EncodeArrayStart(3)
			} else {
				yynn2827 = 1
				for _, b := range yyq2827 {
					if b {
						yynn2827++
					}
				}
				r.EncodeMapStart(yynn2827)
				yynn2827 = 0
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2827[0] {
					yym2829 := z.EncBinary()
					_ = yym2829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2827[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2830 := z.EncBinary()
					_ = yym2830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2827[1] {
					yym2832 := z.EncBinary()
					_ = yym2832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2827[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2833 := z.EncBinary()
					_ = yym2833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2835 := z.EncBinary()
				_ = yym2835
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2836 := z.EncBinary()
				_ = yym2836
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2837 := z.DecBinary()
	_ = yym2837
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2838 := r.ContainerType()
		if yyct2838 == codecSelferValueTypeMap1234 {
			yyl2838 := r.ReadMapStart()
			if yyl2838 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2838, d)
			}
		} else if yyct2838 == codecSelferValueTypeArray1234 {
			yyl2838 := r.ReadArrayStart()
			if yyl2838 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2838, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2839Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2839Slc
	var yyhl2839 bool = l >= 0
	for yyj2839 := 0; ; yyj2839++ {
		if yyhl2839 {
			if yyj2839 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2839Slc = r.DecodeBytes(yys2839Slc, true, true)
		yys2839 := string(yys2839Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2839 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2839)
		} // end switch yys2839
	} // end for yyj2839
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2843 int
	var yyb2843 bool
	var yyhl2843 bool = l >= 0
	yyj2843++
	if yyhl2843 {
		yyb2843 = yyj2843 > l
	} else {
		yyb2843 = r.CheckBreak()
	}
	if yyb2843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2843++
	if yyhl2843 {
		yyb2843 = yyj2843 > l
	} else {
		yyb2843 = r.CheckBreak()
	}
	if yyb2843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2843++
	if yyhl2843 {
		yyb2843 = yyj2843 > l
	} else {
		yyb2843 = r.CheckBreak()
	}
	if yyb2843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2843++
		if yyhl2843 {
			yyb2843 = yyj2843 > l
		} else {
			yyb2843 = r.CheckBreak()
		}
		if yyb2843 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2843-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2847 := z.EncBinary()
		_ = yym2847
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2848 := !z.EncBinary()
			yy2arr2848 := z.EncBasicHandle().StructToArray
			var yyq2848 [7]bool
			_, _, _ = yysep2848, yyq2848, yy2arr2848
			const yyr2848 bool = false
			yyq2848[0] = x.Kind != ""
			yyq2848[1] = x.Namespace != ""
			yyq2848[2] = x.Name != ""
			yyq2848[3] = x.UID != ""
			yyq2848[4] = x.APIVersion != ""
			yyq2848[5] = x.ResourceVersion != ""
			yyq2848[6] = x.FieldPath != ""
			var yynn2848 int
			if yyr2848 || yy2arr2848 {
				r.EncodeArrayStart(7)
			} else {
				yynn2848 = 0
				for _, b := range yyq2848 {
					if b {
						yynn2848++
					}
				}
				r.EncodeMapStart(yynn2848)
				yynn2848 = 0
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2848[0] {
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2848[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2851 := z.EncBinary()
					_ = yym2851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2848[1] {
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2848[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2854 := z.EncBinary()
					_ = yym2854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2848[2] {
					yym2856 := z.EncBinary()
					_ = yym2856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2848[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2857 := z.EncBinary()
					_ = yym2857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2848[3] {
					yym2859 := z.EncBinary()
					_ = yym2859
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2848[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2860 := z.EncBinary()
					_ = yym2860
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2848[4] {
					yym2862 := z.EncBinary()
					_ = yym2862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2848[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2863 := z.EncBinary()
					_ = yym2863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2848[5] {
					yym2865 := z.EncBinary()
					_ = yym2865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2848[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2866 := z.EncBinary()
					_ = yym2866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2848[6] {
					yym2868 := z.EncBinary()
					_ = yym2868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2848[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2869 := z.EncBinary()
					_ = yym2869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2870 := z.DecBinary()
	_ = yym2870
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2871 := r.ContainerType()
		if yyct2871 == codecSelferValueTypeMap1234 {
			yyl2871 := r.ReadMapStart()
			if yyl2871 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2871, d)
			}
		} else if yyct2871 == codecSelferValueTypeArray1234 {
			yyl2871 := r.ReadArrayStart()
			if yyl2871 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2871, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2872Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2872Slc
	var yyhl2872 bool = l >= 0
	for yyj2872 := 0; ; yyj2872++ {
		if yyhl2872 {
			if yyj2872 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2872Slc = r.DecodeBytes(yys2872Slc, true, true)
		yys2872 := string(yys2872Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2872 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2872)
		} // end switch yys2872
	} // end for yyj2872
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2880 int
	var yyb2880 bool
	var yyhl2880 bool = l >= 0
	yyj2880++
	if yyhl2880 {
		yyb2880 = yyj2880 > l
	} else {
		yyb2880 = r.CheckBreak()
	}
	if yyb2880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2880++
	if yyhl2880 {
		yyb2880 = yyj2880 > l
	} else {
		yyb2880 = r.CheckBreak()
	}
	if yyb2880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2880++
	if yyhl2880 {
		yyb2880 = yyj2880 > l
	} else {
		yyb2880 = r.CheckBreak()
	}
	if yyb2880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2880++
	if yyhl2880 {
		yyb2880 = yyj2880 > l
	} else {
		yyb2880 = r.CheckBreak()
	}
	if yyb2880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2880++
	if yyhl2880 {
		yyb2880 = yyj2880 > l
	} else {
		yyb2880 = r.CheckBreak()
	}
	if yyb2880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2880++
	if yyhl2880 {
		yyb2880 = yyj2880 > l
	} else {
		yyb2880 = r.CheckBreak()
	}
	if yyb2880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2880++
	if yyhl2880 {
		yyb2880 = yyj2880 > l
	} else {
		yyb2880 = r.CheckBreak()
	}
	if yyb2880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2880++
		if yyhl2880 {
			yyb2880 = yyj2880 > l
		} else {
			yyb2880 = r.CheckBreak()
		}
		if yyb2880 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2880-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2888 := z.EncBinary()
		_ = yym2888
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2889 := !z.EncBinary()
			yy2arr2889 := z.EncBasicHandle().StructToArray
			var yyq2889 [1]bool
			_, _, _ = yysep2889, yyq2889, yy2arr2889
			const yyr2889 bool = false
			var yynn2889 int
			if yyr2889 || yy2arr2889 {
				r.EncodeArrayStart(1)
			} else {
				yynn2889 = 1
				for _, b := range yyq2889 {
					if b {
						yynn2889++
					}
				}
				r.EncodeMapStart(yynn2889)
				yynn2889 = 0
			}
			if yyr2889 || yy2arr2889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2891 := z.EncBinary()
				_ = yym2891
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2892 := z.EncBinary()
				_ = yym2892
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2889 || yy2arr2889 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2893 := z.DecBinary()
	_ = yym2893
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2894 := r.ContainerType()
		if yyct2894 == codecSelferValueTypeMap1234 {
			yyl2894 := r.ReadMapStart()
			if yyl2894 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2894, d)
			}
		} else if yyct2894 == codecSelferValueTypeArray1234 {
			yyl2894 := r.ReadArrayStart()
			if yyl2894 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2894, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2895Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2895Slc
	var yyhl2895 bool = l >= 0
	for yyj2895 := 0; ; yyj2895++ {
		if yyhl2895 {
			if yyj2895 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2895Slc = r.DecodeBytes(yys2895Slc, true, true)
		yys2895 := string(yys2895Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2895 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2895)
		} // end switch yys2895
	} // end for yyj2895
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2897 int
	var yyb2897 bool
	var yyhl2897 bool = l >= 0
	yyj2897++
	if yyhl2897 {
		yyb2897 = yyj2897 > l
	} else {
		yyb2897 = r.CheckBreak()
	}
	if yyb2897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2897++
		if yyhl2897 {
			yyb2897 = yyj2897 > l
		} else {
			yyb2897 = r.CheckBreak()
		}
		if yyb2897 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2897-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2899 := z.EncBinary()
		_ = yym2899
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2900 := !z.EncBinary()
			yy2arr2900 := z.EncBasicHandle().StructToArray
			var yyq2900 [3]bool
			_, _, _ = yysep2900, yyq2900, yy2arr2900
			const yyr2900 bool = false
			yyq2900[0] = x.Kind != ""
			yyq2900[1] = x.APIVersion != ""
			yyq2900[2] = true
			var yynn2900 int
			if yyr2900 || yy2arr2900 {
				r.EncodeArrayStart(3)
			} else {
				yynn2900 = 0
				for _, b := range yyq2900 {
					if b {
						yynn2900++
					}
				}
				r.EncodeMapStart(yynn2900)
				yynn2900 = 0
			}
			if yyr2900 || yy2arr2900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2900[0] {
					yym2902 := z.EncBinary()
					_ = yym2902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2900[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2903 := z.EncBinary()
					_ = yym2903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2900 || yy2arr2900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2900[1] {
					yym2905 := z.EncBinary()
					_ = yym2905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2900[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2906 := z.EncBinary()
					_ = yym2906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2900 || yy2arr2900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2900[2] {
					yy2908 := &x.Reference
					yy2908.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2900[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2909 := &x.Reference
					yy2909.CodecEncodeSelf(e)
				}
			}
			if yyr2900 || yy2arr2900 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2910 := z.DecBinary()
	_ = yym2910
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2911 := r.ContainerType()
		if yyct2911 == codecSelferValueTypeMap1234 {
			yyl2911 := r.ReadMapStart()
			if yyl2911 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2911, d)
			}
		} else if yyct2911 == codecSelferValueTypeArray1234 {
			yyl2911 := r.ReadArrayStart()
			if yyl2911 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2911, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2912Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2912Slc
	var yyhl2912 bool = l >= 0
	for yyj2912 := 0; ; yyj2912++ {
		if yyhl2912 {
			if yyj2912 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2912Slc = r.DecodeBytes(yys2912Slc, true, true)
		yys2912 := string(yys2912Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2912 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2915 := &x.Reference
				yyv2915.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2912)
		} // end switch yys2912
	} // end for yyj2912
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2916 int
	var yyb2916 bool
	var yyhl2916 bool = l >= 0
	yyj2916++
	if yyhl2916 {
		yyb2916 = yyj2916 > l
	} else {
		yyb2916 = r.CheckBreak()
	}
	if yyb2916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2916++
	if yyhl2916 {
		yyb2916 = yyj2916 > l
	} else {
		yyb2916 = r.CheckBreak()
	}
	if yyb2916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2916++
	if yyhl2916 {
		yyb2916 = yyj2916 > l
	} else {
		yyb2916 = r.CheckBreak()
	}
	if yyb2916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2919 := &x.Reference
		yyv2919.CodecDecodeSelf(d)
	}
	for {
		yyj2916++
		if yyhl2916 {
			yyb2916 = yyj2916 > l
		} else {
			yyb2916 = r.CheckBreak()
		}
		if yyb2916 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2916-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2920 := z.EncBinary()
		_ = yym2920
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2921 := !z.EncBinary()
			yy2arr2921 := z.EncBasicHandle().StructToArray
			var yyq2921 [2]bool
			_, _, _ = yysep2921, yyq2921, yy2arr2921
			const yyr2921 bool = false
			yyq2921[0] = x.Component != ""
			yyq2921[1] = x.Host != ""
			var yynn2921 int
			if yyr2921 || yy2arr2921 {
				r.EncodeArrayStart(2)
			} else {
				yynn2921 = 0
				for _, b := range yyq2921 {
					if b {
						yynn2921++
					}
				}
				r.EncodeMapStart(yynn2921)
				yynn2921 = 0
			}
			if yyr2921 || yy2arr2921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2921[0] {
					yym2923 := z.EncBinary()
					_ = yym2923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2921[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2921 || yy2arr2921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2921[1] {
					yym2926 := z.EncBinary()
					_ = yym2926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2921[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr2921 || yy2arr2921 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2928 := z.DecBinary()
	_ = yym2928
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2929 := r.ContainerType()
		if yyct2929 == codecSelferValueTypeMap1234 {
			yyl2929 := r.ReadMapStart()
			if yyl2929 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2929, d)
			}
		} else if yyct2929 == codecSelferValueTypeArray1234 {
			yyl2929 := r.ReadArrayStart()
			if yyl2929 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2929, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2930Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2930Slc
	var yyhl2930 bool = l >= 0
	for yyj2930 := 0; ; yyj2930++ {
		if yyhl2930 {
			if yyj2930 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2930Slc = r.DecodeBytes(yys2930Slc, true, true)
		yys2930 := string(yys2930Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2930 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2930)
		} // end switch yys2930
	} // end for yyj2930
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2933 int
	var yyb2933 bool
	var yyhl2933 bool = l >= 0
	yyj2933++
	if yyhl2933 {
		yyb2933 = yyj2933 > l
	} else {
		yyb2933 = r.CheckBreak()
	}
	if yyb2933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2933++
	if yyhl2933 {
		yyb2933 = yyj2933 > l
	} else {
		yyb2933 = r.CheckBreak()
	}
	if yyb2933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2933++
		if yyhl2933 {
			yyb2933 = yyj2933 > l
		} else {
			yyb2933 = r.CheckBreak()
		}
		if yyb2933 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2933-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2936 := z.EncBinary()
		_ = yym2936
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2937 := !z.EncBinary()
			yy2arr2937 := z.EncBasicHandle().StructToArray
			var yyq2937 [11]bool
			_, _, _ = yysep2937, yyq2937, yy2arr2937
			const yyr2937 bool = false
			yyq2937[0] = x.Kind != ""
			yyq2937[1] = x.APIVersion != ""
			yyq2937[2] = true
			yyq2937[3] = true
			yyq2937[4] = x.Reason != ""
			yyq2937[5] = x.Message != ""
			yyq2937[6] = true
			yyq2937[7] = true
			yyq2937[8] = true
			yyq2937[9] = x.Count != 0
			yyq2937[10] = x.Type != ""
			var yynn2937 int
			if yyr2937 || yy2arr2937 {
				r.EncodeArrayStart(11)
			} else {
				yynn2937 = 0
				for _, b := range yyq2937 {
					if b {
						yynn2937++
					}
				}
				r.EncodeMapStart(yynn2937)
				yynn2937 = 0
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2937[0] {
					yym2939 := z.EncBinary()
					_ = yym2939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2937[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2940 := z.EncBinary()
					_ = yym2940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2937[1] {
					yym2942 := z.EncBinary()
					_ = yym2942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2937[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2943 := z.EncBinary()
					_ = yym2943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2937[2] {
					yy2945 := &x.ObjectMeta
					yy2945.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2937[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2946 := &x.ObjectMeta
					yy2946.CodecEncodeSelf(e)
				}
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2937[3] {
					yy2948 := &x.InvolvedObject
					yy2948.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2937[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2949 := &x.InvolvedObject
					yy2949.CodecEncodeSelf(e)
				}
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2937[4] {
					yym2951 := z.EncBinary()
					_ = yym2951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2937[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2952 := z.EncBinary()
					_ = yym2952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2937[5] {
					yym2954 := z.EncBinary()
					_ = yym2954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2937[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2955 := z.EncBinary()
					_ = yym2955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2937[6] {
					yy2957 := &x.Source
					yy2957.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2937[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2958 := &x.Source
					yy2958.CodecEncodeSelf(e)
				}
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2937[7] {
					yy2960 := &x.FirstTimestamp
					yym2961 := z.EncBinary()
					_ = yym2961
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2960) {
					} else if yym2961 {
						z.EncBinaryMarshal(yy2960)
					} else if !yym2961 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2960)
					} else {
						z.EncFallback(yy2960)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2937[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2962 := &x.FirstTimestamp
					yym2963 := z.EncBinary()
					_ = yym2963
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2962) {
					} else if yym2963 {
						z.EncBinaryMarshal(yy2962)
					} else if !yym2963 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2962)
					} else {
						z.EncFallback(yy2962)
					}
				}
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2937[8] {
					yy2965 := &x.LastTimestamp
					yym2966 := z.EncBinary()
					_ = yym2966
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2965) {
					} else if yym2966 {
						z.EncBinaryMarshal(yy2965)
					} else if !yym2966 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2965)
					} else {
						z.EncFallback(yy2965)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2937[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2967 := &x.LastTimestamp
					yym2968 := z.EncBinary()
					_ = yym2968
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2967) {
					} else if yym2968 {
						z.EncBinaryMarshal(yy2967)
					} else if !yym2968 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2967)
					} else {
						z.EncFallback(yy2967)
					}
				}
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2937[9] {
					yym2970 := z.EncBinary()
					_ = yym2970
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2937[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2971 := z.EncBinary()
					_ = yym2971
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2937[10] {
					yym2973 := z.EncBinary()
					_ = yym2973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2937[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2974 := z.EncBinary()
					_ = yym2974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2975 := z.DecBinary()
	_ = yym2975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2976 := r.ContainerType()
		if yyct2976 == codecSelferValueTypeMap1234 {
			yyl2976 := r.ReadMapStart()
			if yyl2976 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2976, d)
			}
		} else if yyct2976 == codecSelferValueTypeArray1234 {
			yyl2976 := r.ReadArrayStart()
			if yyl2976 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2977Slc
	var yyhl2977 bool = l >= 0
	for yyj2977 := 0; ; yyj2977++ {
		if yyhl2977 {
			if yyj2977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2977Slc = r.DecodeBytes(yys2977Slc, true, true)
		yys2977 := string(yys2977Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2977 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2980 := &x.ObjectMeta
				yyv2980.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2981 := &x.InvolvedObject
				yyv2981.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2984 := &x.Source
				yyv2984.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2985 := &x.FirstTimestamp
				yym2986 := z.DecBinary()
				_ = yym2986
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2985) {
				} else if yym2986 {
					z.DecBinaryUnmarshal(yyv2985)
				} else if !yym2986 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2985)
				} else {
					z.DecFallback(yyv2985, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2987 := &x.LastTimestamp
				yym2988 := z.DecBinary()
				_ = yym2988
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2987) {
				} else if yym2988 {
					z.DecBinaryUnmarshal(yyv2987)
				} else if !yym2988 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2987)
				} else {
					z.DecFallback(yyv2987, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2977)
		} // end switch yys2977
	} // end for yyj2977
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2991 int
	var yyb2991 bool
	var yyhl2991 bool = l >= 0
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2994 := &x.ObjectMeta
		yyv2994.CodecDecodeSelf(d)
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2995 := &x.InvolvedObject
		yyv2995.CodecDecodeSelf(d)
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2998 := &x.Source
		yyv2998.CodecDecodeSelf(d)
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2999 := &x.FirstTimestamp
		yym3000 := z.DecBinary()
		_ = yym3000
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2999) {
		} else if yym3000 {
			z.DecBinaryUnmarshal(yyv2999)
		} else if !yym3000 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2999)
		} else {
			z.DecFallback(yyv2999, false)
		}
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3001 := &x.LastTimestamp
		yym3002 := z.DecBinary()
		_ = yym3002
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3001) {
		} else if yym3002 {
			z.DecBinaryUnmarshal(yyv3001)
		} else if !yym3002 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3001)
		} else {
			z.DecFallback(yyv3001, false)
		}
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj2991++
		if yyhl2991 {
			yyb2991 = yyj2991 > l
		} else {
			yyb2991 = r.CheckBreak()
		}
		if yyb2991 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2991-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3005 := z.EncBinary()
		_ = yym3005
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3006 := !z.EncBinary()
			yy2arr3006 := z.EncBasicHandle().StructToArray
			var yyq3006 [4]bool
			_, _, _ = yysep3006, yyq3006, yy2arr3006
			const yyr3006 bool = false
			yyq3006[0] = x.Kind != ""
			yyq3006[1] = x.APIVersion != ""
			yyq3006[2] = true
			var yynn3006 int
			if yyr3006 || yy2arr3006 {
				r.EncodeArrayStart(4)
			} else {
				yynn3006 = 1
				for _, b := range yyq3006 {
					if b {
						yynn3006++
					}
				}
				r.EncodeMapStart(yynn3006)
				yynn3006 = 0
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3006[0] {
					yym3008 := z.EncBinary()
					_ = yym3008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3006[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3009 := z.EncBinary()
					_ = yym3009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3006[1] {
					yym3011 := z.EncBinary()
					_ = yym3011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3006[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3012 := z.EncBinary()
					_ = yym3012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3006[2] {
					yy3014 := &x.ListMeta
					yym3015 := z.EncBinary()
					_ = yym3015
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3014) {
					} else {
						z.EncFallback(yy3014)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3006[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3016 := &x.ListMeta
					yym3017 := z.EncBinary()
					_ = yym3017
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3016) {
					} else {
						z.EncFallback(yy3016)
					}
				}
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3019 := z.EncBinary()
					_ = yym3019
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3020 := z.EncBinary()
					_ = yym3020
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3021 := z.DecBinary()
	_ = yym3021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3022 := r.ContainerType()
		if yyct3022 == codecSelferValueTypeMap1234 {
			yyl3022 := r.ReadMapStart()
			if yyl3022 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3022, d)
			}
		} else if yyct3022 == codecSelferValueTypeArray1234 {
			yyl3022 := r.ReadArrayStart()
			if yyl3022 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3022, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3023Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3023Slc
	var yyhl3023 bool = l >= 0
	for yyj3023 := 0; ; yyj3023++ {
		if yyhl3023 {
			if yyj3023 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3023Slc = r.DecodeBytes(yys3023Slc, true, true)
		yys3023 := string(yys3023Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3023 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3026 := &x.ListMeta
				yym3027 := z.DecBinary()
				_ = yym3027
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3026) {
				} else {
					z.DecFallback(yyv3026, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3028 := &x.Items
				yym3029 := z.DecBinary()
				_ = yym3029
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3028), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3023)
		} // end switch yys3023
	} // end for yyj3023
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3030 int
	var yyb3030 bool
	var yyhl3030 bool = l >= 0
	yyj3030++
	if yyhl3030 {
		yyb3030 = yyj3030 > l
	} else {
		yyb3030 = r.CheckBreak()
	}
	if yyb3030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3030++
	if yyhl3030 {
		yyb3030 = yyj3030 > l
	} else {
		yyb3030 = r.CheckBreak()
	}
	if yyb3030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3030++
	if yyhl3030 {
		yyb3030 = yyj3030 > l
	} else {
		yyb3030 = r.CheckBreak()
	}
	if yyb3030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3033 := &x.ListMeta
		yym3034 := z.DecBinary()
		_ = yym3034
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3033) {
		} else {
			z.DecFallback(yyv3033, false)
		}
	}
	yyj3030++
	if yyhl3030 {
		yyb3030 = yyj3030 > l
	} else {
		yyb3030 = r.CheckBreak()
	}
	if yyb3030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3035 := &x.Items
		yym3036 := z.DecBinary()
		_ = yym3036
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3035), d)
		}
	}
	for {
		yyj3030++
		if yyhl3030 {
			yyb3030 = yyj3030 > l
		} else {
			yyb3030 = r.CheckBreak()
		}
		if yyb3030 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3030-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3037 := z.EncBinary()
		_ = yym3037
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3038 := !z.EncBinary()
			yy2arr3038 := z.EncBasicHandle().StructToArray
			var yyq3038 [4]bool
			_, _, _ = yysep3038, yyq3038, yy2arr3038
			const yyr3038 bool = false
			yyq3038[0] = x.Kind != ""
			yyq3038[1] = x.APIVersion != ""
			yyq3038[2] = true
			var yynn3038 int
			if yyr3038 || yy2arr3038 {
				r.EncodeArrayStart(4)
			} else {
				yynn3038 = 1
				for _, b := range yyq3038 {
					if b {
						yynn3038++
					}
				}
				r.EncodeMapStart(yynn3038)
				yynn3038 = 0
			}
			if yyr3038 || yy2arr3038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3038[0] {
					yym3040 := z.EncBinary()
					_ = yym3040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3038[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3041 := z.EncBinary()
					_ = yym3041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3038 || yy2arr3038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3038[1] {
					yym3043 := z.EncBinary()
					_ = yym3043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3038[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3044 := z.EncBinary()
					_ = yym3044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3038 || yy2arr3038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3038[2] {
					yy3046 := &x.ListMeta
					yym3047 := z.EncBinary()
					_ = yym3047
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3046) {
					} else {
						z.EncFallback(yy3046)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3038[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3048 := &x.ListMeta
					yym3049 := z.EncBinary()
					_ = yym3049
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3048) {
					} else {
						z.EncFallback(yy3048)
					}
				}
			}
			if yyr3038 || yy2arr3038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3051 := z.EncBinary()
					_ = yym3051
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3052 := z.EncBinary()
					_ = yym3052
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3038 || yy2arr3038 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3053 := z.DecBinary()
	_ = yym3053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3054 := r.ContainerType()
		if yyct3054 == codecSelferValueTypeMap1234 {
			yyl3054 := r.ReadMapStart()
			if yyl3054 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3054, d)
			}
		} else if yyct3054 == codecSelferValueTypeArray1234 {
			yyl3054 := r.ReadArrayStart()
			if yyl3054 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3054, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3055Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3055Slc
	var yyhl3055 bool = l >= 0
	for yyj3055 := 0; ; yyj3055++ {
		if yyhl3055 {
			if yyj3055 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3055Slc = r.DecodeBytes(yys3055Slc, true, true)
		yys3055 := string(yys3055Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3055 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3058 := &x.ListMeta
				yym3059 := z.DecBinary()
				_ = yym3059
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3058) {
				} else {
					z.DecFallback(yyv3058, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3060 := &x.Items
				yym3061 := z.DecBinary()
				_ = yym3061
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3060), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3055)
		} // end switch yys3055
	} // end for yyj3055
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3062 int
	var yyb3062 bool
	var yyhl3062 bool = l >= 0
	yyj3062++
	if yyhl3062 {
		yyb3062 = yyj3062 > l
	} else {
		yyb3062 = r.CheckBreak()
	}
	if yyb3062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3062++
	if yyhl3062 {
		yyb3062 = yyj3062 > l
	} else {
		yyb3062 = r.CheckBreak()
	}
	if yyb3062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3062++
	if yyhl3062 {
		yyb3062 = yyj3062 > l
	} else {
		yyb3062 = r.CheckBreak()
	}
	if yyb3062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3065 := &x.ListMeta
		yym3066 := z.DecBinary()
		_ = yym3066
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3065) {
		} else {
			z.DecFallback(yyv3065, false)
		}
	}
	yyj3062++
	if yyhl3062 {
		yyb3062 = yyj3062 > l
	} else {
		yyb3062 = r.CheckBreak()
	}
	if yyb3062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3067 := &x.Items
		yym3068 := z.DecBinary()
		_ = yym3068
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3067), d)
		}
	}
	for {
		yyj3062++
		if yyhl3062 {
			yyb3062 = yyj3062 > l
		} else {
			yyb3062 = r.CheckBreak()
		}
		if yyb3062 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3062-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3069 := z.EncBinary()
	_ = yym3069
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3070 := z.DecBinary()
	_ = yym3070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3071 := z.EncBinary()
		_ = yym3071
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3072 := !z.EncBinary()
			yy2arr3072 := z.EncBasicHandle().StructToArray
			var yyq3072 [6]bool
			_, _, _ = yysep3072, yyq3072, yy2arr3072
			const yyr3072 bool = false
			yyq3072[0] = x.Type != ""
			yyq3072[1] = len(x.Max) != 0
			yyq3072[2] = len(x.Min) != 0
			yyq3072[3] = len(x.Default) != 0
			yyq3072[4] = len(x.DefaultRequest) != 0
			yyq3072[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3072 int
			if yyr3072 || yy2arr3072 {
				r.EncodeArrayStart(6)
			} else {
				yynn3072 = 0
				for _, b := range yyq3072 {
					if b {
						yynn3072++
					}
				}
				r.EncodeMapStart(yynn3072)
				yynn3072 = 0
			}
			if yyr3072 || yy2arr3072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3072[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3072[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3072 || yy2arr3072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3072[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3072[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3072 || yy2arr3072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3072[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3072[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3072 || yy2arr3072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3072[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3072[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3072 || yy2arr3072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3072[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3072[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3072 || yy2arr3072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3072[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3072[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3072 || yy2arr3072 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3079 := z.DecBinary()
	_ = yym3079
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3080 := r.ContainerType()
		if yyct3080 == codecSelferValueTypeMap1234 {
			yyl3080 := r.ReadMapStart()
			if yyl3080 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3080, d)
			}
		} else if yyct3080 == codecSelferValueTypeArray1234 {
			yyl3080 := r.ReadArrayStart()
			if yyl3080 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3080, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3081Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3081Slc
	var yyhl3081 bool = l >= 0
	for yyj3081 := 0; ; yyj3081++ {
		if yyhl3081 {
			if yyj3081 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3081Slc = r.DecodeBytes(yys3081Slc, true, true)
		yys3081 := string(yys3081Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3081 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3083 := &x.Max
				yyv3083.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3084 := &x.Min
				yyv3084.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3085 := &x.Default
				yyv3085.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3086 := &x.DefaultRequest
				yyv3086.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3087 := &x.MaxLimitRequestRatio
				yyv3087.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3081)
		} // end switch yys3081
	} // end for yyj3081
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3088 int
	var yyb3088 bool
	var yyhl3088 bool = l >= 0
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3090 := &x.Max
		yyv3090.CodecDecodeSelf(d)
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3091 := &x.Min
		yyv3091.CodecDecodeSelf(d)
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3092 := &x.Default
		yyv3092.CodecDecodeSelf(d)
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3093 := &x.DefaultRequest
		yyv3093.CodecDecodeSelf(d)
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3094 := &x.MaxLimitRequestRatio
		yyv3094.CodecDecodeSelf(d)
	}
	for {
		yyj3088++
		if yyhl3088 {
			yyb3088 = yyj3088 > l
		} else {
			yyb3088 = r.CheckBreak()
		}
		if yyb3088 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3088-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3095 := z.EncBinary()
		_ = yym3095
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3096 := !z.EncBinary()
			yy2arr3096 := z.EncBasicHandle().StructToArray
			var yyq3096 [1]bool
			_, _, _ = yysep3096, yyq3096, yy2arr3096
			const yyr3096 bool = false
			var yynn3096 int
			if yyr3096 || yy2arr3096 {
				r.EncodeArrayStart(1)
			} else {
				yynn3096 = 1
				for _, b := range yyq3096 {
					if b {
						yynn3096++
					}
				}
				r.EncodeMapStart(yynn3096)
				yynn3096 = 0
			}
			if yyr3096 || yy2arr3096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3098 := z.EncBinary()
					_ = yym3098
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3099 := z.EncBinary()
					_ = yym3099
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3096 || yy2arr3096 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3100 := z.DecBinary()
	_ = yym3100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3101 := r.ContainerType()
		if yyct3101 == codecSelferValueTypeMap1234 {
			yyl3101 := r.ReadMapStart()
			if yyl3101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3101, d)
			}
		} else if yyct3101 == codecSelferValueTypeArray1234 {
			yyl3101 := r.ReadArrayStart()
			if yyl3101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3102Slc
	var yyhl3102 bool = l >= 0
	for yyj3102 := 0; ; yyj3102++ {
		if yyhl3102 {
			if yyj3102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3102Slc = r.DecodeBytes(yys3102Slc, true, true)
		yys3102 := string(yys3102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3102 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3103 := &x.Limits
				yym3104 := z.DecBinary()
				_ = yym3104
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3103), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3102)
		} // end switch yys3102
	} // end for yyj3102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3105 int
	var yyb3105 bool
	var yyhl3105 bool = l >= 0
	yyj3105++
	if yyhl3105 {
		yyb3105 = yyj3105 > l
	} else {
		yyb3105 = r.CheckBreak()
	}
	if yyb3105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3106 := &x.Limits
		yym3107 := z.DecBinary()
		_ = yym3107
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3106), d)
		}
	}
	for {
		yyj3105++
		if yyhl3105 {
			yyb3105 = yyj3105 > l
		} else {
			yyb3105 = r.CheckBreak()
		}
		if yyb3105 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3105-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3108 := z.EncBinary()
		_ = yym3108
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3109 := !z.EncBinary()
			yy2arr3109 := z.EncBasicHandle().StructToArray
			var yyq3109 [4]bool
			_, _, _ = yysep3109, yyq3109, yy2arr3109
			const yyr3109 bool = false
			yyq3109[0] = x.Kind != ""
			yyq3109[1] = x.APIVersion != ""
			yyq3109[2] = true
			yyq3109[3] = true
			var yynn3109 int
			if yyr3109 || yy2arr3109 {
				r.EncodeArrayStart(4)
			} else {
				yynn3109 = 0
				for _, b := range yyq3109 {
					if b {
						yynn3109++
					}
				}
				r.EncodeMapStart(yynn3109)
				yynn3109 = 0
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[0] {
					yym3111 := z.EncBinary()
					_ = yym3111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3109[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3112 := z.EncBinary()
					_ = yym3112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[1] {
					yym3114 := z.EncBinary()
					_ = yym3114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3109[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3115 := z.EncBinary()
					_ = yym3115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[2] {
					yy3117 := &x.ObjectMeta
					yy3117.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3109[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3118 := &x.ObjectMeta
					yy3118.CodecEncodeSelf(e)
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[3] {
					yy3120 := &x.Spec
					yy3120.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3109[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3121 := &x.Spec
					yy3121.CodecEncodeSelf(e)
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3122 := z.DecBinary()
	_ = yym3122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3123 := r.ContainerType()
		if yyct3123 == codecSelferValueTypeMap1234 {
			yyl3123 := r.ReadMapStart()
			if yyl3123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3123, d)
			}
		} else if yyct3123 == codecSelferValueTypeArray1234 {
			yyl3123 := r.ReadArrayStart()
			if yyl3123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3124Slc
	var yyhl3124 bool = l >= 0
	for yyj3124 := 0; ; yyj3124++ {
		if yyhl3124 {
			if yyj3124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3124Slc = r.DecodeBytes(yys3124Slc, true, true)
		yys3124 := string(yys3124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3124 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3127 := &x.ObjectMeta
				yyv3127.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3128 := &x.Spec
				yyv3128.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3124)
		} // end switch yys3124
	} // end for yyj3124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3129 int
	var yyb3129 bool
	var yyhl3129 bool = l >= 0
	yyj3129++
	if yyhl3129 {
		yyb3129 = yyj3129 > l
	} else {
		yyb3129 = r.CheckBreak()
	}
	if yyb3129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3129++
	if yyhl3129 {
		yyb3129 = yyj3129 > l
	} else {
		yyb3129 = r.CheckBreak()
	}
	if yyb3129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3129++
	if yyhl3129 {
		yyb3129 = yyj3129 > l
	} else {
		yyb3129 = r.CheckBreak()
	}
	if yyb3129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3132 := &x.ObjectMeta
		yyv3132.CodecDecodeSelf(d)
	}
	yyj3129++
	if yyhl3129 {
		yyb3129 = yyj3129 > l
	} else {
		yyb3129 = r.CheckBreak()
	}
	if yyb3129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3133 := &x.Spec
		yyv3133.CodecDecodeSelf(d)
	}
	for {
		yyj3129++
		if yyhl3129 {
			yyb3129 = yyj3129 > l
		} else {
			yyb3129 = r.CheckBreak()
		}
		if yyb3129 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3129-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3134 := z.EncBinary()
		_ = yym3134
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3135 := !z.EncBinary()
			yy2arr3135 := z.EncBasicHandle().StructToArray
			var yyq3135 [4]bool
			_, _, _ = yysep3135, yyq3135, yy2arr3135
			const yyr3135 bool = false
			yyq3135[0] = x.Kind != ""
			yyq3135[1] = x.APIVersion != ""
			yyq3135[2] = true
			var yynn3135 int
			if yyr3135 || yy2arr3135 {
				r.EncodeArrayStart(4)
			} else {
				yynn3135 = 1
				for _, b := range yyq3135 {
					if b {
						yynn3135++
					}
				}
				r.EncodeMapStart(yynn3135)
				yynn3135 = 0
			}
			if yyr3135 || yy2arr3135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3135[0] {
					yym3137 := z.EncBinary()
					_ = yym3137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3135[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3138 := z.EncBinary()
					_ = yym3138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3135 || yy2arr3135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3135[1] {
					yym3140 := z.EncBinary()
					_ = yym3140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3135[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3141 := z.EncBinary()
					_ = yym3141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3135 || yy2arr3135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3135[2] {
					yy3143 := &x.ListMeta
					yym3144 := z.EncBinary()
					_ = yym3144
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3143) {
					} else {
						z.EncFallback(yy3143)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3135[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3145 := &x.ListMeta
					yym3146 := z.EncBinary()
					_ = yym3146
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3145) {
					} else {
						z.EncFallback(yy3145)
					}
				}
			}
			if yyr3135 || yy2arr3135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3148 := z.EncBinary()
					_ = yym3148
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3149 := z.EncBinary()
					_ = yym3149
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3135 || yy2arr3135 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3150 := z.DecBinary()
	_ = yym3150
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3151 := r.ContainerType()
		if yyct3151 == codecSelferValueTypeMap1234 {
			yyl3151 := r.ReadMapStart()
			if yyl3151 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3151, d)
			}
		} else if yyct3151 == codecSelferValueTypeArray1234 {
			yyl3151 := r.ReadArrayStart()
			if yyl3151 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3151, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3152Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3152Slc
	var yyhl3152 bool = l >= 0
	for yyj3152 := 0; ; yyj3152++ {
		if yyhl3152 {
			if yyj3152 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3152Slc = r.DecodeBytes(yys3152Slc, true, true)
		yys3152 := string(yys3152Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3152 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3155 := &x.ListMeta
				yym3156 := z.DecBinary()
				_ = yym3156
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3155) {
				} else {
					z.DecFallback(yyv3155, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3157 := &x.Items
				yym3158 := z.DecBinary()
				_ = yym3158
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3157), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3152)
		} // end switch yys3152
	} // end for yyj3152
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3159 int
	var yyb3159 bool
	var yyhl3159 bool = l >= 0
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3162 := &x.ListMeta
		yym3163 := z.DecBinary()
		_ = yym3163
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3162) {
		} else {
			z.DecFallback(yyv3162, false)
		}
	}
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3164 := &x.Items
		yym3165 := z.DecBinary()
		_ = yym3165
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3164), d)
		}
	}
	for {
		yyj3159++
		if yyhl3159 {
			yyb3159 = yyj3159 > l
		} else {
			yyb3159 = r.CheckBreak()
		}
		if yyb3159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3166 := z.EncBinary()
		_ = yym3166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3167 := !z.EncBinary()
			yy2arr3167 := z.EncBasicHandle().StructToArray
			var yyq3167 [1]bool
			_, _, _ = yysep3167, yyq3167, yy2arr3167
			const yyr3167 bool = false
			yyq3167[0] = len(x.Hard) != 0
			var yynn3167 int
			if yyr3167 || yy2arr3167 {
				r.EncodeArrayStart(1)
			} else {
				yynn3167 = 0
				for _, b := range yyq3167 {
					if b {
						yynn3167++
					}
				}
				r.EncodeMapStart(yynn3167)
				yynn3167 = 0
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3167[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3167[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3169 := z.DecBinary()
	_ = yym3169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3170 := r.ContainerType()
		if yyct3170 == codecSelferValueTypeMap1234 {
			yyl3170 := r.ReadMapStart()
			if yyl3170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3170, d)
			}
		} else if yyct3170 == codecSelferValueTypeArray1234 {
			yyl3170 := r.ReadArrayStart()
			if yyl3170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3171Slc
	var yyhl3171 bool = l >= 0
	for yyj3171 := 0; ; yyj3171++ {
		if yyhl3171 {
			if yyj3171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3171Slc = r.DecodeBytes(yys3171Slc, true, true)
		yys3171 := string(yys3171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3171 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3172 := &x.Hard
				yyv3172.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3171)
		} // end switch yys3171
	} // end for yyj3171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3173 int
	var yyb3173 bool
	var yyhl3173 bool = l >= 0
	yyj3173++
	if yyhl3173 {
		yyb3173 = yyj3173 > l
	} else {
		yyb3173 = r.CheckBreak()
	}
	if yyb3173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3174 := &x.Hard
		yyv3174.CodecDecodeSelf(d)
	}
	for {
		yyj3173++
		if yyhl3173 {
			yyb3173 = yyj3173 > l
		} else {
			yyb3173 = r.CheckBreak()
		}
		if yyb3173 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3173-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3175 := z.EncBinary()
		_ = yym3175
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3176 := !z.EncBinary()
			yy2arr3176 := z.EncBasicHandle().StructToArray
			var yyq3176 [2]bool
			_, _, _ = yysep3176, yyq3176, yy2arr3176
			const yyr3176 bool = false
			yyq3176[0] = len(x.Hard) != 0
			yyq3176[1] = len(x.Used) != 0
			var yynn3176 int
			if yyr3176 || yy2arr3176 {
				r.EncodeArrayStart(2)
			} else {
				yynn3176 = 0
				for _, b := range yyq3176 {
					if b {
						yynn3176++
					}
				}
				r.EncodeMapStart(yynn3176)
				yynn3176 = 0
			}
			if yyr3176 || yy2arr3176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3176[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3176[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3176 || yy2arr3176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3176[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3176[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3176 || yy2arr3176 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3179 := z.DecBinary()
	_ = yym3179
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3180 := r.ContainerType()
		if yyct3180 == codecSelferValueTypeMap1234 {
			yyl3180 := r.ReadMapStart()
			if yyl3180 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3180, d)
			}
		} else if yyct3180 == codecSelferValueTypeArray1234 {
			yyl3180 := r.ReadArrayStart()
			if yyl3180 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3180, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3181Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3181Slc
	var yyhl3181 bool = l >= 0
	for yyj3181 := 0; ; yyj3181++ {
		if yyhl3181 {
			if yyj3181 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3181Slc = r.DecodeBytes(yys3181Slc, true, true)
		yys3181 := string(yys3181Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3181 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3182 := &x.Hard
				yyv3182.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3183 := &x.Used
				yyv3183.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3181)
		} // end switch yys3181
	} // end for yyj3181
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3184 int
	var yyb3184 bool
	var yyhl3184 bool = l >= 0
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3185 := &x.Hard
		yyv3185.CodecDecodeSelf(d)
	}
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3186 := &x.Used
		yyv3186.CodecDecodeSelf(d)
	}
	for {
		yyj3184++
		if yyhl3184 {
			yyb3184 = yyj3184 > l
		} else {
			yyb3184 = r.CheckBreak()
		}
		if yyb3184 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3184-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3187 := z.EncBinary()
		_ = yym3187
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3188 := !z.EncBinary()
			yy2arr3188 := z.EncBasicHandle().StructToArray
			var yyq3188 [5]bool
			_, _, _ = yysep3188, yyq3188, yy2arr3188
			const yyr3188 bool = false
			yyq3188[0] = x.Kind != ""
			yyq3188[1] = x.APIVersion != ""
			yyq3188[2] = true
			yyq3188[3] = true
			yyq3188[4] = true
			var yynn3188 int
			if yyr3188 || yy2arr3188 {
				r.EncodeArrayStart(5)
			} else {
				yynn3188 = 0
				for _, b := range yyq3188 {
					if b {
						yynn3188++
					}
				}
				r.EncodeMapStart(yynn3188)
				yynn3188 = 0
			}
			if yyr3188 || yy2arr3188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3188[0] {
					yym3190 := z.EncBinary()
					_ = yym3190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3188[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3188 || yy2arr3188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3188[1] {
					yym3193 := z.EncBinary()
					_ = yym3193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3188[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3194 := z.EncBinary()
					_ = yym3194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3188 || yy2arr3188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3188[2] {
					yy3196 := &x.ObjectMeta
					yy3196.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3188[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3197 := &x.ObjectMeta
					yy3197.CodecEncodeSelf(e)
				}
			}
			if yyr3188 || yy2arr3188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3188[3] {
					yy3199 := &x.Spec
					yy3199.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3188[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3200 := &x.Spec
					yy3200.CodecEncodeSelf(e)
				}
			}
			if yyr3188 || yy2arr3188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3188[4] {
					yy3202 := &x.Status
					yy3202.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3188[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3203 := &x.Status
					yy3203.CodecEncodeSelf(e)
				}
			}
			if yyr3188 || yy2arr3188 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3204 := z.DecBinary()
	_ = yym3204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3205 := r.ContainerType()
		if yyct3205 == codecSelferValueTypeMap1234 {
			yyl3205 := r.ReadMapStart()
			if yyl3205 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3205, d)
			}
		} else if yyct3205 == codecSelferValueTypeArray1234 {
			yyl3205 := r.ReadArrayStart()
			if yyl3205 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3206Slc
	var yyhl3206 bool = l >= 0
	for yyj3206 := 0; ; yyj3206++ {
		if yyhl3206 {
			if yyj3206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3206Slc = r.DecodeBytes(yys3206Slc, true, true)
		yys3206 := string(yys3206Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3206 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3209 := &x.ObjectMeta
				yyv3209.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3210 := &x.Spec
				yyv3210.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3211 := &x.Status
				yyv3211.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3206)
		} // end switch yys3206
	} // end for yyj3206
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3212 int
	var yyb3212 bool
	var yyhl3212 bool = l >= 0
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3215 := &x.ObjectMeta
		yyv3215.CodecDecodeSelf(d)
	}
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3216 := &x.Spec
		yyv3216.CodecDecodeSelf(d)
	}
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3217 := &x.Status
		yyv3217.CodecDecodeSelf(d)
	}
	for {
		yyj3212++
		if yyhl3212 {
			yyb3212 = yyj3212 > l
		} else {
			yyb3212 = r.CheckBreak()
		}
		if yyb3212 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3212-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3218 := z.EncBinary()
		_ = yym3218
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3219 := !z.EncBinary()
			yy2arr3219 := z.EncBasicHandle().StructToArray
			var yyq3219 [4]bool
			_, _, _ = yysep3219, yyq3219, yy2arr3219
			const yyr3219 bool = false
			yyq3219[0] = x.Kind != ""
			yyq3219[1] = x.APIVersion != ""
			yyq3219[2] = true
			var yynn3219 int
			if yyr3219 || yy2arr3219 {
				r.EncodeArrayStart(4)
			} else {
				yynn3219 = 1
				for _, b := range yyq3219 {
					if b {
						yynn3219++
					}
				}
				r.EncodeMapStart(yynn3219)
				yynn3219 = 0
			}
			if yyr3219 || yy2arr3219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3219[0] {
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3219[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3219 || yy2arr3219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3219[1] {
					yym3224 := z.EncBinary()
					_ = yym3224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3219[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3225 := z.EncBinary()
					_ = yym3225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3219 || yy2arr3219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3219[2] {
					yy3227 := &x.ListMeta
					yym3228 := z.EncBinary()
					_ = yym3228
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3227) {
					} else {
						z.EncFallback(yy3227)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3219[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3229 := &x.ListMeta
					yym3230 := z.EncBinary()
					_ = yym3230
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3229) {
					} else {
						z.EncFallback(yy3229)
					}
				}
			}
			if yyr3219 || yy2arr3219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3232 := z.EncBinary()
					_ = yym3232
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3233 := z.EncBinary()
					_ = yym3233
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3219 || yy2arr3219 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3234 := z.DecBinary()
	_ = yym3234
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3235 := r.ContainerType()
		if yyct3235 == codecSelferValueTypeMap1234 {
			yyl3235 := r.ReadMapStart()
			if yyl3235 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3235, d)
			}
		} else if yyct3235 == codecSelferValueTypeArray1234 {
			yyl3235 := r.ReadArrayStart()
			if yyl3235 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3235, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3236Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3236Slc
	var yyhl3236 bool = l >= 0
	for yyj3236 := 0; ; yyj3236++ {
		if yyhl3236 {
			if yyj3236 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3236Slc = r.DecodeBytes(yys3236Slc, true, true)
		yys3236 := string(yys3236Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3236 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3239 := &x.ListMeta
				yym3240 := z.DecBinary()
				_ = yym3240
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3239) {
				} else {
					z.DecFallback(yyv3239, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3241 := &x.Items
				yym3242 := z.DecBinary()
				_ = yym3242
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3241), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3236)
		} // end switch yys3236
	} // end for yyj3236
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3243 int
	var yyb3243 bool
	var yyhl3243 bool = l >= 0
	yyj3243++
	if yyhl3243 {
		yyb3243 = yyj3243 > l
	} else {
		yyb3243 = r.CheckBreak()
	}
	if yyb3243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3243++
	if yyhl3243 {
		yyb3243 = yyj3243 > l
	} else {
		yyb3243 = r.CheckBreak()
	}
	if yyb3243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3243++
	if yyhl3243 {
		yyb3243 = yyj3243 > l
	} else {
		yyb3243 = r.CheckBreak()
	}
	if yyb3243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3246 := &x.ListMeta
		yym3247 := z.DecBinary()
		_ = yym3247
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3246) {
		} else {
			z.DecFallback(yyv3246, false)
		}
	}
	yyj3243++
	if yyhl3243 {
		yyb3243 = yyj3243 > l
	} else {
		yyb3243 = r.CheckBreak()
	}
	if yyb3243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3248 := &x.Items
		yym3249 := z.DecBinary()
		_ = yym3249
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3248), d)
		}
	}
	for {
		yyj3243++
		if yyhl3243 {
			yyb3243 = yyj3243 > l
		} else {
			yyb3243 = r.CheckBreak()
		}
		if yyb3243 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3243-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3250 := z.EncBinary()
		_ = yym3250
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3251 := !z.EncBinary()
			yy2arr3251 := z.EncBasicHandle().StructToArray
			var yyq3251 [5]bool
			_, _, _ = yysep3251, yyq3251, yy2arr3251
			const yyr3251 bool = false
			yyq3251[0] = x.Kind != ""
			yyq3251[1] = x.APIVersion != ""
			yyq3251[2] = true
			yyq3251[3] = len(x.Data) != 0
			yyq3251[4] = x.Type != ""
			var yynn3251 int
			if yyr3251 || yy2arr3251 {
				r.EncodeArrayStart(5)
			} else {
				yynn3251 = 0
				for _, b := range yyq3251 {
					if b {
						yynn3251++
					}
				}
				r.EncodeMapStart(yynn3251)
				yynn3251 = 0
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3251[0] {
					yym3253 := z.EncBinary()
					_ = yym3253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3251[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3254 := z.EncBinary()
					_ = yym3254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3251[1] {
					yym3256 := z.EncBinary()
					_ = yym3256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3251[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3257 := z.EncBinary()
					_ = yym3257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3251[2] {
					yy3259 := &x.ObjectMeta
					yy3259.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3251[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3260 := &x.ObjectMeta
					yy3260.CodecEncodeSelf(e)
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3251[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3262 := z.EncBinary()
						_ = yym3262
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3251[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3263 := z.EncBinary()
						_ = yym3263
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3251[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3251[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3265 := z.DecBinary()
	_ = yym3265
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3266 := r.ContainerType()
		if yyct3266 == codecSelferValueTypeMap1234 {
			yyl3266 := r.ReadMapStart()
			if yyl3266 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3266, d)
			}
		} else if yyct3266 == codecSelferValueTypeArray1234 {
			yyl3266 := r.ReadArrayStart()
			if yyl3266 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3266, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3267Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3267Slc
	var yyhl3267 bool = l >= 0
	for yyj3267 := 0; ; yyj3267++ {
		if yyhl3267 {
			if yyj3267 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3267Slc = r.DecodeBytes(yys3267Slc, true, true)
		yys3267 := string(yys3267Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3267 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3270 := &x.ObjectMeta
				yyv3270.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3271 := &x.Data
				yym3272 := z.DecBinary()
				_ = yym3272
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3271), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3267)
		} // end switch yys3267
	} // end for yyj3267
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3274 int
	var yyb3274 bool
	var yyhl3274 bool = l >= 0
	yyj3274++
	if yyhl3274 {
		yyb3274 = yyj3274 > l
	} else {
		yyb3274 = r.CheckBreak()
	}
	if yyb3274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3274++
	if yyhl3274 {
		yyb3274 = yyj3274 > l
	} else {
		yyb3274 = r.CheckBreak()
	}
	if yyb3274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3274++
	if yyhl3274 {
		yyb3274 = yyj3274 > l
	} else {
		yyb3274 = r.CheckBreak()
	}
	if yyb3274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3277 := &x.ObjectMeta
		yyv3277.CodecDecodeSelf(d)
	}
	yyj3274++
	if yyhl3274 {
		yyb3274 = yyj3274 > l
	} else {
		yyb3274 = r.CheckBreak()
	}
	if yyb3274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3278 := &x.Data
		yym3279 := z.DecBinary()
		_ = yym3279
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3278), d)
		}
	}
	yyj3274++
	if yyhl3274 {
		yyb3274 = yyj3274 > l
	} else {
		yyb3274 = r.CheckBreak()
	}
	if yyb3274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3274++
		if yyhl3274 {
			yyb3274 = yyj3274 > l
		} else {
			yyb3274 = r.CheckBreak()
		}
		if yyb3274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3281 := z.EncBinary()
	_ = yym3281
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3282 := z.DecBinary()
	_ = yym3282
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3283 := z.EncBinary()
		_ = yym3283
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3284 := !z.EncBinary()
			yy2arr3284 := z.EncBasicHandle().StructToArray
			var yyq3284 [4]bool
			_, _, _ = yysep3284, yyq3284, yy2arr3284
			const yyr3284 bool = false
			yyq3284[0] = x.Kind != ""
			yyq3284[1] = x.APIVersion != ""
			yyq3284[2] = true
			var yynn3284 int
			if yyr3284 || yy2arr3284 {
				r.EncodeArrayStart(4)
			} else {
				yynn3284 = 1
				for _, b := range yyq3284 {
					if b {
						yynn3284++
					}
				}
				r.EncodeMapStart(yynn3284)
				yynn3284 = 0
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3284[0] {
					yym3286 := z.EncBinary()
					_ = yym3286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3284[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3287 := z.EncBinary()
					_ = yym3287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3284[1] {
					yym3289 := z.EncBinary()
					_ = yym3289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3284[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3290 := z.EncBinary()
					_ = yym3290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3284[2] {
					yy3292 := &x.ListMeta
					yym3293 := z.EncBinary()
					_ = yym3293
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3292) {
					} else {
						z.EncFallback(yy3292)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3284[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3294 := &x.ListMeta
					yym3295 := z.EncBinary()
					_ = yym3295
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3294) {
					} else {
						z.EncFallback(yy3294)
					}
				}
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3297 := z.EncBinary()
					_ = yym3297
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3298 := z.EncBinary()
					_ = yym3298
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3299 := z.DecBinary()
	_ = yym3299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3300 := r.ContainerType()
		if yyct3300 == codecSelferValueTypeMap1234 {
			yyl3300 := r.ReadMapStart()
			if yyl3300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3300, d)
			}
		} else if yyct3300 == codecSelferValueTypeArray1234 {
			yyl3300 := r.ReadArrayStart()
			if yyl3300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3301Slc
	var yyhl3301 bool = l >= 0
	for yyj3301 := 0; ; yyj3301++ {
		if yyhl3301 {
			if yyj3301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3301Slc = r.DecodeBytes(yys3301Slc, true, true)
		yys3301 := string(yys3301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3301 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3304 := &x.ListMeta
				yym3305 := z.DecBinary()
				_ = yym3305
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3304) {
				} else {
					z.DecFallback(yyv3304, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3306 := &x.Items
				yym3307 := z.DecBinary()
				_ = yym3307
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3306), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3301)
		} // end switch yys3301
	} // end for yyj3301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3308 int
	var yyb3308 bool
	var yyhl3308 bool = l >= 0
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3311 := &x.ListMeta
		yym3312 := z.DecBinary()
		_ = yym3312
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3311) {
		} else {
			z.DecFallback(yyv3311, false)
		}
	}
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3313 := &x.Items
		yym3314 := z.DecBinary()
		_ = yym3314
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3313), d)
		}
	}
	for {
		yyj3308++
		if yyhl3308 {
			yyb3308 = yyj3308 > l
		} else {
			yyb3308 = r.CheckBreak()
		}
		if yyb3308 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3308-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3315 := z.EncBinary()
	_ = yym3315
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3316 := z.DecBinary()
	_ = yym3316
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3317 := z.EncBinary()
	_ = yym3317
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3318 := z.DecBinary()
	_ = yym3318
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3319 := z.EncBinary()
		_ = yym3319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3320 := !z.EncBinary()
			yy2arr3320 := z.EncBasicHandle().StructToArray
			var yyq3320 [4]bool
			_, _, _ = yysep3320, yyq3320, yy2arr3320
			const yyr3320 bool = false
			yyq3320[2] = x.Message != ""
			yyq3320[3] = x.Error != ""
			var yynn3320 int
			if yyr3320 || yy2arr3320 {
				r.EncodeArrayStart(4)
			} else {
				yynn3320 = 2
				for _, b := range yyq3320 {
					if b {
						yynn3320++
					}
				}
				r.EncodeMapStart(yynn3320)
				yynn3320 = 0
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3320[2] {
					yym3324 := z.EncBinary()
					_ = yym3324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3320[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3325 := z.EncBinary()
					_ = yym3325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3320[3] {
					yym3327 := z.EncBinary()
					_ = yym3327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3320[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3328 := z.EncBinary()
					_ = yym3328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3329 := z.DecBinary()
	_ = yym3329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3330 := r.ContainerType()
		if yyct3330 == codecSelferValueTypeMap1234 {
			yyl3330 := r.ReadMapStart()
			if yyl3330 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3330, d)
			}
		} else if yyct3330 == codecSelferValueTypeArray1234 {
			yyl3330 := r.ReadArrayStart()
			if yyl3330 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3331Slc
	var yyhl3331 bool = l >= 0
	for yyj3331 := 0; ; yyj3331++ {
		if yyhl3331 {
			if yyj3331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3331Slc = r.DecodeBytes(yys3331Slc, true, true)
		yys3331 := string(yys3331Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3331 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3331)
		} // end switch yys3331
	} // end for yyj3331
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3336 int
	var yyb3336 bool
	var yyhl3336 bool = l >= 0
	yyj3336++
	if yyhl3336 {
		yyb3336 = yyj3336 > l
	} else {
		yyb3336 = r.CheckBreak()
	}
	if yyb3336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3336++
	if yyhl3336 {
		yyb3336 = yyj3336 > l
	} else {
		yyb3336 = r.CheckBreak()
	}
	if yyb3336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3336++
	if yyhl3336 {
		yyb3336 = yyj3336 > l
	} else {
		yyb3336 = r.CheckBreak()
	}
	if yyb3336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3336++
	if yyhl3336 {
		yyb3336 = yyj3336 > l
	} else {
		yyb3336 = r.CheckBreak()
	}
	if yyb3336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3336++
		if yyhl3336 {
			yyb3336 = yyj3336 > l
		} else {
			yyb3336 = r.CheckBreak()
		}
		if yyb3336 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3336-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3341 := z.EncBinary()
		_ = yym3341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3342 := !z.EncBinary()
			yy2arr3342 := z.EncBasicHandle().StructToArray
			var yyq3342 [4]bool
			_, _, _ = yysep3342, yyq3342, yy2arr3342
			const yyr3342 bool = false
			yyq3342[0] = x.Kind != ""
			yyq3342[1] = x.APIVersion != ""
			yyq3342[2] = true
			yyq3342[3] = len(x.Conditions) != 0
			var yynn3342 int
			if yyr3342 || yy2arr3342 {
				r.EncodeArrayStart(4)
			} else {
				yynn3342 = 0
				for _, b := range yyq3342 {
					if b {
						yynn3342++
					}
				}
				r.EncodeMapStart(yynn3342)
				yynn3342 = 0
			}
			if yyr3342 || yy2arr3342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3342[0] {
					yym3344 := z.EncBinary()
					_ = yym3344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3342[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3345 := z.EncBinary()
					_ = yym3345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3342 || yy2arr3342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3342[1] {
					yym3347 := z.EncBinary()
					_ = yym3347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3342[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3348 := z.EncBinary()
					_ = yym3348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3342 || yy2arr3342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3342[2] {
					yy3350 := &x.ObjectMeta
					yy3350.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3342[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3351 := &x.ObjectMeta
					yy3351.CodecEncodeSelf(e)
				}
			}
			if yyr3342 || yy2arr3342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3342[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3353 := z.EncBinary()
						_ = yym3353
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3342[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3354 := z.EncBinary()
						_ = yym3354
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3342 || yy2arr3342 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3355 := z.DecBinary()
	_ = yym3355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3356 := r.ContainerType()
		if yyct3356 == codecSelferValueTypeMap1234 {
			yyl3356 := r.ReadMapStart()
			if yyl3356 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3356, d)
			}
		} else if yyct3356 == codecSelferValueTypeArray1234 {
			yyl3356 := r.ReadArrayStart()
			if yyl3356 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3356, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3357Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3357Slc
	var yyhl3357 bool = l >= 0
	for yyj3357 := 0; ; yyj3357++ {
		if yyhl3357 {
			if yyj3357 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3357Slc = r.DecodeBytes(yys3357Slc, true, true)
		yys3357 := string(yys3357Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3357 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3360 := &x.ObjectMeta
				yyv3360.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3361 := &x.Conditions
				yym3362 := z.DecBinary()
				_ = yym3362
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3361), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3357)
		} // end switch yys3357
	} // end for yyj3357
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3363 int
	var yyb3363 bool
	var yyhl3363 bool = l >= 0
	yyj3363++
	if yyhl3363 {
		yyb3363 = yyj3363 > l
	} else {
		yyb3363 = r.CheckBreak()
	}
	if yyb3363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3363++
	if yyhl3363 {
		yyb3363 = yyj3363 > l
	} else {
		yyb3363 = r.CheckBreak()
	}
	if yyb3363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3363++
	if yyhl3363 {
		yyb3363 = yyj3363 > l
	} else {
		yyb3363 = r.CheckBreak()
	}
	if yyb3363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3366 := &x.ObjectMeta
		yyv3366.CodecDecodeSelf(d)
	}
	yyj3363++
	if yyhl3363 {
		yyb3363 = yyj3363 > l
	} else {
		yyb3363 = r.CheckBreak()
	}
	if yyb3363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3367 := &x.Conditions
		yym3368 := z.DecBinary()
		_ = yym3368
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3367), d)
		}
	}
	for {
		yyj3363++
		if yyhl3363 {
			yyb3363 = yyj3363 > l
		} else {
			yyb3363 = r.CheckBreak()
		}
		if yyb3363 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3363-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3369 := z.EncBinary()
		_ = yym3369
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3370 := !z.EncBinary()
			yy2arr3370 := z.EncBasicHandle().StructToArray
			var yyq3370 [4]bool
			_, _, _ = yysep3370, yyq3370, yy2arr3370
			const yyr3370 bool = false
			yyq3370[0] = x.Kind != ""
			yyq3370[1] = x.APIVersion != ""
			yyq3370[2] = true
			var yynn3370 int
			if yyr3370 || yy2arr3370 {
				r.EncodeArrayStart(4)
			} else {
				yynn3370 = 1
				for _, b := range yyq3370 {
					if b {
						yynn3370++
					}
				}
				r.EncodeMapStart(yynn3370)
				yynn3370 = 0
			}
			if yyr3370 || yy2arr3370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3370[0] {
					yym3372 := z.EncBinary()
					_ = yym3372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3370[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3373 := z.EncBinary()
					_ = yym3373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3370 || yy2arr3370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3370[1] {
					yym3375 := z.EncBinary()
					_ = yym3375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3370[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3376 := z.EncBinary()
					_ = yym3376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3370 || yy2arr3370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3370[2] {
					yy3378 := &x.ListMeta
					yym3379 := z.EncBinary()
					_ = yym3379
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3378) {
					} else {
						z.EncFallback(yy3378)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3370[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3380 := &x.ListMeta
					yym3381 := z.EncBinary()
					_ = yym3381
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3380) {
					} else {
						z.EncFallback(yy3380)
					}
				}
			}
			if yyr3370 || yy2arr3370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3383 := z.EncBinary()
					_ = yym3383
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3384 := z.EncBinary()
					_ = yym3384
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr3370 || yy2arr3370 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3385 := z.DecBinary()
	_ = yym3385
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3386 := r.ContainerType()
		if yyct3386 == codecSelferValueTypeMap1234 {
			yyl3386 := r.ReadMapStart()
			if yyl3386 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3386, d)
			}
		} else if yyct3386 == codecSelferValueTypeArray1234 {
			yyl3386 := r.ReadArrayStart()
			if yyl3386 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3386, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3387Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3387Slc
	var yyhl3387 bool = l >= 0
	for yyj3387 := 0; ; yyj3387++ {
		if yyhl3387 {
			if yyj3387 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3387Slc = r.DecodeBytes(yys3387Slc, true, true)
		yys3387 := string(yys3387Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3387 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3390 := &x.ListMeta
				yym3391 := z.DecBinary()
				_ = yym3391
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3390) {
				} else {
					z.DecFallback(yyv3390, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3392 := &x.Items
				yym3393 := z.DecBinary()
				_ = yym3393
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3392), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3387)
		} // end switch yys3387
	} // end for yyj3387
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3394 int
	var yyb3394 bool
	var yyhl3394 bool = l >= 0
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3397 := &x.ListMeta
		yym3398 := z.DecBinary()
		_ = yym3398
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3397) {
		} else {
			z.DecFallback(yyv3397, false)
		}
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3399 := &x.Items
		yym3400 := z.DecBinary()
		_ = yym3400
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3399), d)
		}
	}
	for {
		yyj3394++
		if yyhl3394 {
			yyb3394 = yyj3394 > l
		} else {
			yyb3394 = r.CheckBreak()
		}
		if yyb3394 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3394-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3401 := z.EncBinary()
		_ = yym3401
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3402 := !z.EncBinary()
			yy2arr3402 := z.EncBasicHandle().StructToArray
			var yyq3402 [5]bool
			_, _, _ = yysep3402, yyq3402, yy2arr3402
			const yyr3402 bool = false
			yyq3402[0] = x.Capabilities != nil
			yyq3402[1] = x.Privileged != nil
			yyq3402[2] = x.SELinuxOptions != nil
			yyq3402[3] = x.RunAsUser != nil
			yyq3402[4] = x.RunAsNonRoot != nil
			var yynn3402 int
			if yyr3402 || yy2arr3402 {
				r.EncodeArrayStart(5)
			} else {
				yynn3402 = 0
				for _, b := range yyq3402 {
					if b {
						yynn3402++
					}
				}
				r.EncodeMapStart(yynn3402)
				yynn3402 = 0
			}
			if yyr3402 || yy2arr3402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3402[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3402[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3402 || yy2arr3402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3402[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3405 := *x.Privileged
						yym3406 := z.EncBinary()
						_ = yym3406
						if false {
						} else {
							r.EncodeBool(bool(yy3405))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3402[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3407 := *x.Privileged
						yym3408 := z.EncBinary()
						_ = yym3408
						if false {
						} else {
							r.EncodeBool(bool(yy3407))
						}
					}
				}
			}
			if yyr3402 || yy2arr3402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3402[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3402[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3402 || yy2arr3402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3402[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3411 := *x.RunAsUser
						yym3412 := z.EncBinary()
						_ = yym3412
						if false {
						} else {
							r.EncodeInt(int64(yy3411))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3402[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3413 := *x.RunAsUser
						yym3414 := z.EncBinary()
						_ = yym3414
						if false {
						} else {
							r.EncodeInt(int64(yy3413))
						}
					}
				}
			}
			if yyr3402 || yy2arr3402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3402[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3416 := *x.RunAsNonRoot
						yym3417 := z.EncBinary()
						_ = yym3417
						if false {
						} else {
							r.EncodeBool(bool(yy3416))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3402[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3418 := *x.RunAsNonRoot
						yym3419 := z.EncBinary()
						_ = yym3419
						if false {
						} else {
							r.EncodeBool(bool(yy3418))
						}
					}
				}
			}
			if yyr3402 || yy2arr3402 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3420 := z.DecBinary()
	_ = yym3420
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3421 := r.ContainerType()
		if yyct3421 == codecSelferValueTypeMap1234 {
			yyl3421 := r.ReadMapStart()
			if yyl3421 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3421, d)
			}
		} else if yyct3421 == codecSelferValueTypeArray1234 {
			yyl3421 := r.ReadArrayStart()
			if yyl3421 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3421, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3422Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3422Slc
	var yyhl3422 bool = l >= 0
	for yyj3422 := 0; ; yyj3422++ {
		if yyhl3422 {
			if yyj3422 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3422Slc = r.DecodeBytes(yys3422Slc, true, true)
		yys3422 := string(yys3422Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3422 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3425 := z.DecBinary()
				_ = yym3425
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3428 := z.DecBinary()
				_ = yym3428
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3430 := z.DecBinary()
				_ = yym3430
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3422)
		} // end switch yys3422
	} // end for yyj3422
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3431 int
	var yyb3431 bool
	var yyhl3431 bool = l >= 0
	yyj3431++
	if yyhl3431 {
		yyb3431 = yyj3431 > l
	} else {
		yyb3431 = r.CheckBreak()
	}
	if yyb3431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3431++
	if yyhl3431 {
		yyb3431 = yyj3431 > l
	} else {
		yyb3431 = r.CheckBreak()
	}
	if yyb3431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3434 := z.DecBinary()
		_ = yym3434
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3431++
	if yyhl3431 {
		yyb3431 = yyj3431 > l
	} else {
		yyb3431 = r.CheckBreak()
	}
	if yyb3431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3431++
	if yyhl3431 {
		yyb3431 = yyj3431 > l
	} else {
		yyb3431 = r.CheckBreak()
	}
	if yyb3431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3437 := z.DecBinary()
		_ = yym3437
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3431++
	if yyhl3431 {
		yyb3431 = yyj3431 > l
	} else {
		yyb3431 = r.CheckBreak()
	}
	if yyb3431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3439 := z.DecBinary()
		_ = yym3439
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3431++
		if yyhl3431 {
			yyb3431 = yyj3431 > l
		} else {
			yyb3431 = r.CheckBreak()
		}
		if yyb3431 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3431-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3440 := z.EncBinary()
		_ = yym3440
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3441 := !z.EncBinary()
			yy2arr3441 := z.EncBasicHandle().StructToArray
			var yyq3441 [4]bool
			_, _, _ = yysep3441, yyq3441, yy2arr3441
			const yyr3441 bool = false
			yyq3441[0] = x.User != ""
			yyq3441[1] = x.Role != ""
			yyq3441[2] = x.Type != ""
			yyq3441[3] = x.Level != ""
			var yynn3441 int
			if yyr3441 || yy2arr3441 {
				r.EncodeArrayStart(4)
			} else {
				yynn3441 = 0
				for _, b := range yyq3441 {
					if b {
						yynn3441++
					}
				}
				r.EncodeMapStart(yynn3441)
				yynn3441 = 0
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3441[0] {
					yym3443 := z.EncBinary()
					_ = yym3443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3441[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3444 := z.EncBinary()
					_ = yym3444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3441[1] {
					yym3446 := z.EncBinary()
					_ = yym3446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3441[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3447 := z.EncBinary()
					_ = yym3447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3441[2] {
					yym3449 := z.EncBinary()
					_ = yym3449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3441[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3450 := z.EncBinary()
					_ = yym3450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3441[3] {
					yym3452 := z.EncBinary()
					_ = yym3452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3441[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3453 := z.EncBinary()
					_ = yym3453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3454 := z.DecBinary()
	_ = yym3454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3455 := r.ContainerType()
		if yyct3455 == codecSelferValueTypeMap1234 {
			yyl3455 := r.ReadMapStart()
			if yyl3455 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3455, d)
			}
		} else if yyct3455 == codecSelferValueTypeArray1234 {
			yyl3455 := r.ReadArrayStart()
			if yyl3455 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3455, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3456Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3456Slc
	var yyhl3456 bool = l >= 0
	for yyj3456 := 0; ; yyj3456++ {
		if yyhl3456 {
			if yyj3456 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3456Slc = r.DecodeBytes(yys3456Slc, true, true)
		yys3456 := string(yys3456Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3456 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3456)
		} // end switch yys3456
	} // end for yyj3456
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3461 int
	var yyb3461 bool
	var yyhl3461 bool = l >= 0
	yyj3461++
	if yyhl3461 {
		yyb3461 = yyj3461 > l
	} else {
		yyb3461 = r.CheckBreak()
	}
	if yyb3461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3461++
	if yyhl3461 {
		yyb3461 = yyj3461 > l
	} else {
		yyb3461 = r.CheckBreak()
	}
	if yyb3461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3461++
	if yyhl3461 {
		yyb3461 = yyj3461 > l
	} else {
		yyb3461 = r.CheckBreak()
	}
	if yyb3461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3461++
	if yyhl3461 {
		yyb3461 = yyj3461 > l
	} else {
		yyb3461 = r.CheckBreak()
	}
	if yyb3461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3461++
		if yyhl3461 {
			yyb3461 = yyj3461 > l
		} else {
			yyb3461 = r.CheckBreak()
		}
		if yyb3461 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3461-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3466 := z.EncBinary()
		_ = yym3466
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3467 := !z.EncBinary()
			yy2arr3467 := z.EncBasicHandle().StructToArray
			var yyq3467 [5]bool
			_, _, _ = yysep3467, yyq3467, yy2arr3467
			const yyr3467 bool = false
			yyq3467[0] = x.Kind != ""
			yyq3467[1] = x.APIVersion != ""
			yyq3467[2] = true
			var yynn3467 int
			if yyr3467 || yy2arr3467 {
				r.EncodeArrayStart(5)
			} else {
				yynn3467 = 2
				for _, b := range yyq3467 {
					if b {
						yynn3467++
					}
				}
				r.EncodeMapStart(yynn3467)
				yynn3467 = 0
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3467[0] {
					yym3469 := z.EncBinary()
					_ = yym3469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3467[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3470 := z.EncBinary()
					_ = yym3470
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3467[1] {
					yym3472 := z.EncBinary()
					_ = yym3472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3467[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3473 := z.EncBinary()
					_ = yym3473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3467[2] {
					yy3475 := &x.ObjectMeta
					yy3475.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3467[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3476 := &x.ObjectMeta
					yy3476.CodecEncodeSelf(e)
				}
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3478 := z.EncBinary()
				_ = yym3478
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3479 := z.EncBinary()
				_ = yym3479
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3481 := z.EncBinary()
					_ = yym3481
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3483 := z.DecBinary()
	_ = yym3483
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3484 := r.ContainerType()
		if yyct3484 == codecSelferValueTypeMap1234 {
			yyl3484 := r.ReadMapStart()
			if yyl3484 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3484, d)
			}
		} else if yyct3484 == codecSelferValueTypeArray1234 {
			yyl3484 := r.ReadArrayStart()
			if yyl3484 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3484, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3485Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3485Slc
	var yyhl3485 bool = l >= 0
	for yyj3485 := 0; ; yyj3485++ {
		if yyhl3485 {
			if yyj3485 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3485Slc = r.DecodeBytes(yys3485Slc, true, true)
		yys3485 := string(yys3485Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3485 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3488 := &x.ObjectMeta
				yyv3488.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3490 := &x.Data
				yym3491 := z.DecBinary()
				_ = yym3491
				if false {
				} else {
					*yyv3490 = r.DecodeBytes(*(*[]byte)(yyv3490), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3485)
		} // end switch yys3485
	} // end for yyj3485
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3492 int
	var yyb3492 bool
	var yyhl3492 bool = l >= 0
	yyj3492++
	if yyhl3492 {
		yyb3492 = yyj3492 > l
	} else {
		yyb3492 = r.CheckBreak()
	}
	if yyb3492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3492++
	if yyhl3492 {
		yyb3492 = yyj3492 > l
	} else {
		yyb3492 = r.CheckBreak()
	}
	if yyb3492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3492++
	if yyhl3492 {
		yyb3492 = yyj3492 > l
	} else {
		yyb3492 = r.CheckBreak()
	}
	if yyb3492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3495 := &x.ObjectMeta
		yyv3495.CodecDecodeSelf(d)
	}
	yyj3492++
	if yyhl3492 {
		yyb3492 = yyj3492 > l
	} else {
		yyb3492 = r.CheckBreak()
	}
	if yyb3492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3492++
	if yyhl3492 {
		yyb3492 = yyj3492 > l
	} else {
		yyb3492 = r.CheckBreak()
	}
	if yyb3492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3497 := &x.Data
		yym3498 := z.DecBinary()
		_ = yym3498
		if false {
		} else {
			*yyv3497 = r.DecodeBytes(*(*[]byte)(yyv3497), false, false)
		}
	}
	for {
		yyj3492++
		if yyhl3492 {
			yyb3492 = yyj3492 > l
		} else {
			yyb3492 = r.CheckBreak()
		}
		if yyb3492 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3492-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3499 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3499.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3500 := *v
	yyh3500, yyl3500 := z.DecSliceHelperStart()
	var yyc3500 bool
	if yyl3500 == 0 {
		if yyv3500 == nil {
			yyv3500 = []PersistentVolumeAccessMode{}
			yyc3500 = true
		} else if len(yyv3500) != 0 {
			yyv3500 = yyv3500[:0]
			yyc3500 = true
		}
	} else if yyl3500 > 0 {
		var yyrr3500, yyrl3500 int
		var yyrt3500 bool
		if yyl3500 > cap(yyv3500) {

			yyrl3500, yyrt3500 = z.DecInferLen(yyl3500, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3500 {
				if yyrl3500 <= cap(yyv3500) {
					yyv3500 = yyv3500[:yyrl3500]
				} else {
					yyv3500 = make([]PersistentVolumeAccessMode, yyrl3500)
				}
			} else {
				yyv3500 = make([]PersistentVolumeAccessMode, yyrl3500)
			}
			yyc3500 = true
			yyrr3500 = len(yyv3500)
		} else if yyl3500 != len(yyv3500) {
			yyv3500 = yyv3500[:yyl3500]
			yyc3500 = true
		}
		yyj3500 := 0
		for ; yyj3500 < yyrr3500; yyj3500++ {
			yyh3500.ElemContainerState(yyj3500)
			if r.TryDecodeAsNil() {
				yyv3500[yyj3500] = ""
			} else {
				yyv3500[yyj3500] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3500 {
			for ; yyj3500 < yyl3500; yyj3500++ {
				yyv3500 = append(yyv3500, "")
				yyh3500.ElemContainerState(yyj3500)
				if r.TryDecodeAsNil() {
					yyv3500[yyj3500] = ""
				} else {
					yyv3500[yyj3500] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj3500 := 0
		for ; !r.CheckBreak(); yyj3500++ {

			if yyj3500 >= len(yyv3500) {
				yyv3500 = append(yyv3500, "") // var yyz3500 PersistentVolumeAccessMode
				yyc3500 = true
			}
			yyh3500.ElemContainerState(yyj3500)
			if yyj3500 < len(yyv3500) {
				if r.TryDecodeAsNil() {
					yyv3500[yyj3500] = ""
				} else {
					yyv3500[yyj3500] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3500 < len(yyv3500) {
			yyv3500 = yyv3500[:yyj3500]
			yyc3500 = true
		} else if yyj3500 == 0 && yyv3500 == nil {
			yyv3500 = []PersistentVolumeAccessMode{}
			yyc3500 = true
		}
	}
	yyh3500.End()
	if yyc3500 {
		*v = yyv3500
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3504 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3505 := &yyv3504
		yy3505.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3506 := *v
	yyh3506, yyl3506 := z.DecSliceHelperStart()
	var yyc3506 bool
	if yyl3506 == 0 {
		if yyv3506 == nil {
			yyv3506 = []PersistentVolume{}
			yyc3506 = true
		} else if len(yyv3506) != 0 {
			yyv3506 = yyv3506[:0]
			yyc3506 = true
		}
	} else if yyl3506 > 0 {
		var yyrr3506, yyrl3506 int
		var yyrt3506 bool
		if yyl3506 > cap(yyv3506) {

			yyrg3506 := len(yyv3506) > 0
			yyv23506 := yyv3506
			yyrl3506, yyrt3506 = z.DecInferLen(yyl3506, z.DecBasicHandle().MaxInitLen, 384)
			if yyrt3506 {
				if yyrl3506 <= cap(yyv3506) {
					yyv3506 = yyv3506[:yyrl3506]
				} else {
					yyv3506 = make([]PersistentVolume, yyrl3506)
				}
			} else {
				yyv3506 = make([]PersistentVolume, yyrl3506)
			}
			yyc3506 = true
			yyrr3506 = len(yyv3506)
			if yyrg3506 {
				copy(yyv3506, yyv23506)
			}
		} else if yyl3506 != len(yyv3506) {
			yyv3506 = yyv3506[:yyl3506]
			yyc3506 = true
		}
		yyj3506 := 0
		for ; yyj3506 < yyrr3506; yyj3506++ {
			yyh3506.ElemContainerState(yyj3506)
			if r.TryDecodeAsNil() {
				yyv3506[yyj3506] = PersistentVolume{}
			} else {
				yyv3507 := &yyv3506[yyj3506]
				yyv3507.CodecDecodeSelf(d)
			}

		}
		if yyrt3506 {
			for ; yyj3506 < yyl3506; yyj3506++ {
				yyv3506 = append(yyv3506, PersistentVolume{})
				yyh3506.ElemContainerState(yyj3506)
				if r.TryDecodeAsNil() {
					yyv3506[yyj3506] = PersistentVolume{}
				} else {
					yyv3508 := &yyv3506[yyj3506]
					yyv3508.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3506 := 0
		for ; !r.CheckBreak(); yyj3506++ {

			if yyj3506 >= len(yyv3506) {
				yyv3506 = append(yyv3506, PersistentVolume{}) // var yyz3506 PersistentVolume
				yyc3506 = true
			}
			yyh3506.ElemContainerState(yyj3506)
			if yyj3506 < len(yyv3506) {
				if r.TryDecodeAsNil() {
					yyv3506[yyj3506] = PersistentVolume{}
				} else {
					yyv3509 := &yyv3506[yyj3506]
					yyv3509.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3506 < len(yyv3506) {
			yyv3506 = yyv3506[:yyj3506]
			yyc3506 = true
		} else if yyj3506 == 0 && yyv3506 == nil {
			yyv3506 = []PersistentVolume{}
			yyc3506 = true
		}
	}
	yyh3506.End()
	if yyc3506 {
		*v = yyv3506
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3510 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3511 := &yyv3510
		yy3511.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3512 := *v
	yyh3512, yyl3512 := z.DecSliceHelperStart()
	var yyc3512 bool
	if yyl3512 == 0 {
		if yyv3512 == nil {
			yyv3512 = []PersistentVolumeClaim{}
			yyc3512 = true
		} else if len(yyv3512) != 0 {
			yyv3512 = yyv3512[:0]
			yyc3512 = true
		}
	} else if yyl3512 > 0 {
		var yyrr3512, yyrl3512 int
		var yyrt3512 bool
		if yyl3512 > cap(yyv3512) {

			yyrg3512 := len(yyv3512) > 0
			yyv23512 := yyv3512
			yyrl3512, yyrt3512 = z.DecInferLen(yyl3512, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt3512 {
				if yyrl3512 <= cap(yyv3512) {
					yyv3512 = yyv3512[:yyrl3512]
				} else {
					yyv3512 = make([]PersistentVolumeClaim, yyrl3512)
				}
			} else {
				yyv3512 = make([]PersistentVolumeClaim, yyrl3512)
			}
			yyc3512 = true
			yyrr3512 = len(yyv3512)
			if yyrg3512 {
				copy(yyv3512, yyv23512)
			}
		} else if yyl3512 != len(yyv3512) {
			yyv3512 = yyv3512[:yyl3512]
			yyc3512 = true
		}
		yyj3512 := 0
		for ; yyj3512 < yyrr3512; yyj3512++ {
			yyh3512.ElemContainerState(yyj3512)
			if r.TryDecodeAsNil() {
				yyv3512[yyj3512] = PersistentVolumeClaim{}
			} else {
				yyv3513 := &yyv3512[yyj3512]
				yyv3513.CodecDecodeSelf(d)
			}

		}
		if yyrt3512 {
			for ; yyj3512 < yyl3512; yyj3512++ {
				yyv3512 = append(yyv3512, PersistentVolumeClaim{})
				yyh3512.ElemContainerState(yyj3512)
				if r.TryDecodeAsNil() {
					yyv3512[yyj3512] = PersistentVolumeClaim{}
				} else {
					yyv3514 := &yyv3512[yyj3512]
					yyv3514.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3512 := 0
		for ; !r.CheckBreak(); yyj3512++ {

			if yyj3512 >= len(yyv3512) {
				yyv3512 = append(yyv3512, PersistentVolumeClaim{}) // var yyz3512 PersistentVolumeClaim
				yyc3512 = true
			}
			yyh3512.ElemContainerState(yyj3512)
			if yyj3512 < len(yyv3512) {
				if r.TryDecodeAsNil() {
					yyv3512[yyj3512] = PersistentVolumeClaim{}
				} else {
					yyv3515 := &yyv3512[yyj3512]
					yyv3515.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3512 < len(yyv3512) {
			yyv3512 = yyv3512[:yyj3512]
			yyc3512 = true
		} else if yyj3512 == 0 && yyv3512 == nil {
			yyv3512 = []PersistentVolumeClaim{}
			yyc3512 = true
		}
	}
	yyh3512.End()
	if yyc3512 {
		*v = yyv3512
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3516 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3517 := &yyv3516
		yy3517.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3518 := *v
	yyh3518, yyl3518 := z.DecSliceHelperStart()
	var yyc3518 bool
	if yyl3518 == 0 {
		if yyv3518 == nil {
			yyv3518 = []DownwardAPIVolumeFile{}
			yyc3518 = true
		} else if len(yyv3518) != 0 {
			yyv3518 = yyv3518[:0]
			yyc3518 = true
		}
	} else if yyl3518 > 0 {
		var yyrr3518, yyrl3518 int
		var yyrt3518 bool
		if yyl3518 > cap(yyv3518) {

			yyrg3518 := len(yyv3518) > 0
			yyv23518 := yyv3518
			yyrl3518, yyrt3518 = z.DecInferLen(yyl3518, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt3518 {
				if yyrl3518 <= cap(yyv3518) {
					yyv3518 = yyv3518[:yyrl3518]
				} else {
					yyv3518 = make([]DownwardAPIVolumeFile, yyrl3518)
				}
			} else {
				yyv3518 = make([]DownwardAPIVolumeFile, yyrl3518)
			}
			yyc3518 = true
			yyrr3518 = len(yyv3518)
			if yyrg3518 {
				copy(yyv3518, yyv23518)
			}
		} else if yyl3518 != len(yyv3518) {
			yyv3518 = yyv3518[:yyl3518]
			yyc3518 = true
		}
		yyj3518 := 0
		for ; yyj3518 < yyrr3518; yyj3518++ {
			yyh3518.ElemContainerState(yyj3518)
			if r.TryDecodeAsNil() {
				yyv3518[yyj3518] = DownwardAPIVolumeFile{}
			} else {
				yyv3519 := &yyv3518[yyj3518]
				yyv3519.CodecDecodeSelf(d)
			}

		}
		if yyrt3518 {
			for ; yyj3518 < yyl3518; yyj3518++ {
				yyv3518 = append(yyv3518, DownwardAPIVolumeFile{})
				yyh3518.ElemContainerState(yyj3518)
				if r.TryDecodeAsNil() {
					yyv3518[yyj3518] = DownwardAPIVolumeFile{}
				} else {
					yyv3520 := &yyv3518[yyj3518]
					yyv3520.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3518 := 0
		for ; !r.CheckBreak(); yyj3518++ {

			if yyj3518 >= len(yyv3518) {
				yyv3518 = append(yyv3518, DownwardAPIVolumeFile{}) // var yyz3518 DownwardAPIVolumeFile
				yyc3518 = true
			}
			yyh3518.ElemContainerState(yyj3518)
			if yyj3518 < len(yyv3518) {
				if r.TryDecodeAsNil() {
					yyv3518[yyj3518] = DownwardAPIVolumeFile{}
				} else {
					yyv3521 := &yyv3518[yyj3518]
					yyv3521.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3518 < len(yyv3518) {
			yyv3518 = yyv3518[:yyj3518]
			yyc3518 = true
		} else if yyj3518 == 0 && yyv3518 == nil {
			yyv3518 = []DownwardAPIVolumeFile{}
			yyc3518 = true
		}
	}
	yyh3518.End()
	if yyc3518 {
		*v = yyv3518
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3522 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3522.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3523 := *v
	yyh3523, yyl3523 := z.DecSliceHelperStart()
	var yyc3523 bool
	if yyl3523 == 0 {
		if yyv3523 == nil {
			yyv3523 = []Capability{}
			yyc3523 = true
		} else if len(yyv3523) != 0 {
			yyv3523 = yyv3523[:0]
			yyc3523 = true
		}
	} else if yyl3523 > 0 {
		var yyrr3523, yyrl3523 int
		var yyrt3523 bool
		if yyl3523 > cap(yyv3523) {

			yyrl3523, yyrt3523 = z.DecInferLen(yyl3523, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3523 {
				if yyrl3523 <= cap(yyv3523) {
					yyv3523 = yyv3523[:yyrl3523]
				} else {
					yyv3523 = make([]Capability, yyrl3523)
				}
			} else {
				yyv3523 = make([]Capability, yyrl3523)
			}
			yyc3523 = true
			yyrr3523 = len(yyv3523)
		} else if yyl3523 != len(yyv3523) {
			yyv3523 = yyv3523[:yyl3523]
			yyc3523 = true
		}
		yyj3523 := 0
		for ; yyj3523 < yyrr3523; yyj3523++ {
			yyh3523.ElemContainerState(yyj3523)
			if r.TryDecodeAsNil() {
				yyv3523[yyj3523] = ""
			} else {
				yyv3523[yyj3523] = Capability(r.DecodeString())
			}

		}
		if yyrt3523 {
			for ; yyj3523 < yyl3523; yyj3523++ {
				yyv3523 = append(yyv3523, "")
				yyh3523.ElemContainerState(yyj3523)
				if r.TryDecodeAsNil() {
					yyv3523[yyj3523] = ""
				} else {
					yyv3523[yyj3523] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj3523 := 0
		for ; !r.CheckBreak(); yyj3523++ {

			if yyj3523 >= len(yyv3523) {
				yyv3523 = append(yyv3523, "") // var yyz3523 Capability
				yyc3523 = true
			}
			yyh3523.ElemContainerState(yyj3523)
			if yyj3523 < len(yyv3523) {
				if r.TryDecodeAsNil() {
					yyv3523[yyj3523] = ""
				} else {
					yyv3523[yyj3523] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3523 < len(yyv3523) {
			yyv3523 = yyv3523[:yyj3523]
			yyc3523 = true
		} else if yyj3523 == 0 && yyv3523 == nil {
			yyv3523 = []Capability{}
			yyc3523 = true
		}
	}
	yyh3523.End()
	if yyc3523 {
		*v = yyv3523
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3527 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3528 := &yyv3527
		yy3528.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3529 := *v
	yyh3529, yyl3529 := z.DecSliceHelperStart()
	var yyc3529 bool
	if yyl3529 == 0 {
		if yyv3529 == nil {
			yyv3529 = []ContainerPort{}
			yyc3529 = true
		} else if len(yyv3529) != 0 {
			yyv3529 = yyv3529[:0]
			yyc3529 = true
		}
	} else if yyl3529 > 0 {
		var yyrr3529, yyrl3529 int
		var yyrt3529 bool
		if yyl3529 > cap(yyv3529) {

			yyrg3529 := len(yyv3529) > 0
			yyv23529 := yyv3529
			yyrl3529, yyrt3529 = z.DecInferLen(yyl3529, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3529 {
				if yyrl3529 <= cap(yyv3529) {
					yyv3529 = yyv3529[:yyrl3529]
				} else {
					yyv3529 = make([]ContainerPort, yyrl3529)
				}
			} else {
				yyv3529 = make([]ContainerPort, yyrl3529)
			}
			yyc3529 = true
			yyrr3529 = len(yyv3529)
			if yyrg3529 {
				copy(yyv3529, yyv23529)
			}
		} else if yyl3529 != len(yyv3529) {
			yyv3529 = yyv3529[:yyl3529]
			yyc3529 = true
		}
		yyj3529 := 0
		for ; yyj3529 < yyrr3529; yyj3529++ {
			yyh3529.ElemContainerState(yyj3529)
			if r.TryDecodeAsNil() {
				yyv3529[yyj3529] = ContainerPort{}
			} else {
				yyv3530 := &yyv3529[yyj3529]
				yyv3530.CodecDecodeSelf(d)
			}

		}
		if yyrt3529 {
			for ; yyj3529 < yyl3529; yyj3529++ {
				yyv3529 = append(yyv3529, ContainerPort{})
				yyh3529.ElemContainerState(yyj3529)
				if r.TryDecodeAsNil() {
					yyv3529[yyj3529] = ContainerPort{}
				} else {
					yyv3531 := &yyv3529[yyj3529]
					yyv3531.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3529 := 0
		for ; !r.CheckBreak(); yyj3529++ {

			if yyj3529 >= len(yyv3529) {
				yyv3529 = append(yyv3529, ContainerPort{}) // var yyz3529 ContainerPort
				yyc3529 = true
			}
			yyh3529.ElemContainerState(yyj3529)
			if yyj3529 < len(yyv3529) {
				if r.TryDecodeAsNil() {
					yyv3529[yyj3529] = ContainerPort{}
				} else {
					yyv3532 := &yyv3529[yyj3529]
					yyv3532.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3529 < len(yyv3529) {
			yyv3529 = yyv3529[:yyj3529]
			yyc3529 = true
		} else if yyj3529 == 0 && yyv3529 == nil {
			yyv3529 = []ContainerPort{}
			yyc3529 = true
		}
	}
	yyh3529.End()
	if yyc3529 {
		*v = yyv3529
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3533 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3534 := &yyv3533
		yy3534.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3535 := *v
	yyh3535, yyl3535 := z.DecSliceHelperStart()
	var yyc3535 bool
	if yyl3535 == 0 {
		if yyv3535 == nil {
			yyv3535 = []EnvVar{}
			yyc3535 = true
		} else if len(yyv3535) != 0 {
			yyv3535 = yyv3535[:0]
			yyc3535 = true
		}
	} else if yyl3535 > 0 {
		var yyrr3535, yyrl3535 int
		var yyrt3535 bool
		if yyl3535 > cap(yyv3535) {

			yyrg3535 := len(yyv3535) > 0
			yyv23535 := yyv3535
			yyrl3535, yyrt3535 = z.DecInferLen(yyl3535, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3535 {
				if yyrl3535 <= cap(yyv3535) {
					yyv3535 = yyv3535[:yyrl3535]
				} else {
					yyv3535 = make([]EnvVar, yyrl3535)
				}
			} else {
				yyv3535 = make([]EnvVar, yyrl3535)
			}
			yyc3535 = true
			yyrr3535 = len(yyv3535)
			if yyrg3535 {
				copy(yyv3535, yyv23535)
			}
		} else if yyl3535 != len(yyv3535) {
			yyv3535 = yyv3535[:yyl3535]
			yyc3535 = true
		}
		yyj3535 := 0
		for ; yyj3535 < yyrr3535; yyj3535++ {
			yyh3535.ElemContainerState(yyj3535)
			if r.TryDecodeAsNil() {
				yyv3535[yyj3535] = EnvVar{}
			} else {
				yyv3536 := &yyv3535[yyj3535]
				yyv3536.CodecDecodeSelf(d)
			}

		}
		if yyrt3535 {
			for ; yyj3535 < yyl3535; yyj3535++ {
				yyv3535 = append(yyv3535, EnvVar{})
				yyh3535.ElemContainerState(yyj3535)
				if r.TryDecodeAsNil() {
					yyv3535[yyj3535] = EnvVar{}
				} else {
					yyv3537 := &yyv3535[yyj3535]
					yyv3537.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3535 := 0
		for ; !r.CheckBreak(); yyj3535++ {

			if yyj3535 >= len(yyv3535) {
				yyv3535 = append(yyv3535, EnvVar{}) // var yyz3535 EnvVar
				yyc3535 = true
			}
			yyh3535.ElemContainerState(yyj3535)
			if yyj3535 < len(yyv3535) {
				if r.TryDecodeAsNil() {
					yyv3535[yyj3535] = EnvVar{}
				} else {
					yyv3538 := &yyv3535[yyj3535]
					yyv3538.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3535 < len(yyv3535) {
			yyv3535 = yyv3535[:yyj3535]
			yyc3535 = true
		} else if yyj3535 == 0 && yyv3535 == nil {
			yyv3535 = []EnvVar{}
			yyc3535 = true
		}
	}
	yyh3535.End()
	if yyc3535 {
		*v = yyv3535
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3539 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3540 := &yyv3539
		yy3540.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3541 := *v
	yyh3541, yyl3541 := z.DecSliceHelperStart()
	var yyc3541 bool
	if yyl3541 == 0 {
		if yyv3541 == nil {
			yyv3541 = []VolumeMount{}
			yyc3541 = true
		} else if len(yyv3541) != 0 {
			yyv3541 = yyv3541[:0]
			yyc3541 = true
		}
	} else if yyl3541 > 0 {
		var yyrr3541, yyrl3541 int
		var yyrt3541 bool
		if yyl3541 > cap(yyv3541) {

			yyrg3541 := len(yyv3541) > 0
			yyv23541 := yyv3541
			yyrl3541, yyrt3541 = z.DecInferLen(yyl3541, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3541 {
				if yyrl3541 <= cap(yyv3541) {
					yyv3541 = yyv3541[:yyrl3541]
				} else {
					yyv3541 = make([]VolumeMount, yyrl3541)
				}
			} else {
				yyv3541 = make([]VolumeMount, yyrl3541)
			}
			yyc3541 = true
			yyrr3541 = len(yyv3541)
			if yyrg3541 {
				copy(yyv3541, yyv23541)
			}
		} else if yyl3541 != len(yyv3541) {
			yyv3541 = yyv3541[:yyl3541]
			yyc3541 = true
		}
		yyj3541 := 0
		for ; yyj3541 < yyrr3541; yyj3541++ {
			yyh3541.ElemContainerState(yyj3541)
			if r.TryDecodeAsNil() {
				yyv3541[yyj3541] = VolumeMount{}
			} else {
				yyv3542 := &yyv3541[yyj3541]
				yyv3542.CodecDecodeSelf(d)
			}

		}
		if yyrt3541 {
			for ; yyj3541 < yyl3541; yyj3541++ {
				yyv3541 = append(yyv3541, VolumeMount{})
				yyh3541.ElemContainerState(yyj3541)
				if r.TryDecodeAsNil() {
					yyv3541[yyj3541] = VolumeMount{}
				} else {
					yyv3543 := &yyv3541[yyj3541]
					yyv3543.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3541 := 0
		for ; !r.CheckBreak(); yyj3541++ {

			if yyj3541 >= len(yyv3541) {
				yyv3541 = append(yyv3541, VolumeMount{}) // var yyz3541 VolumeMount
				yyc3541 = true
			}
			yyh3541.ElemContainerState(yyj3541)
			if yyj3541 < len(yyv3541) {
				if r.TryDecodeAsNil() {
					yyv3541[yyj3541] = VolumeMount{}
				} else {
					yyv3544 := &yyv3541[yyj3541]
					yyv3544.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3541 < len(yyv3541) {
			yyv3541 = yyv3541[:yyj3541]
			yyc3541 = true
		} else if yyj3541 == 0 && yyv3541 == nil {
			yyv3541 = []VolumeMount{}
			yyc3541 = true
		}
	}
	yyh3541.End()
	if yyc3541 {
		*v = yyv3541
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3545 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3546 := &yyv3545
		yy3546.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3547 := *v
	yyh3547, yyl3547 := z.DecSliceHelperStart()
	var yyc3547 bool
	if yyl3547 == 0 {
		if yyv3547 == nil {
			yyv3547 = []Pod{}
			yyc3547 = true
		} else if len(yyv3547) != 0 {
			yyv3547 = yyv3547[:0]
			yyc3547 = true
		}
	} else if yyl3547 > 0 {
		var yyrr3547, yyrl3547 int
		var yyrt3547 bool
		if yyl3547 > cap(yyv3547) {

			yyrg3547 := len(yyv3547) > 0
			yyv23547 := yyv3547
			yyrl3547, yyrt3547 = z.DecInferLen(yyl3547, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt3547 {
				if yyrl3547 <= cap(yyv3547) {
					yyv3547 = yyv3547[:yyrl3547]
				} else {
					yyv3547 = make([]Pod, yyrl3547)
				}
			} else {
				yyv3547 = make([]Pod, yyrl3547)
			}
			yyc3547 = true
			yyrr3547 = len(yyv3547)
			if yyrg3547 {
				copy(yyv3547, yyv23547)
			}
		} else if yyl3547 != len(yyv3547) {
			yyv3547 = yyv3547[:yyl3547]
			yyc3547 = true
		}
		yyj3547 := 0
		for ; yyj3547 < yyrr3547; yyj3547++ {
			yyh3547.ElemContainerState(yyj3547)
			if r.TryDecodeAsNil() {
				yyv3547[yyj3547] = Pod{}
			} else {
				yyv3548 := &yyv3547[yyj3547]
				yyv3548.CodecDecodeSelf(d)
			}

		}
		if yyrt3547 {
			for ; yyj3547 < yyl3547; yyj3547++ {
				yyv3547 = append(yyv3547, Pod{})
				yyh3547.ElemContainerState(yyj3547)
				if r.TryDecodeAsNil() {
					yyv3547[yyj3547] = Pod{}
				} else {
					yyv3549 := &yyv3547[yyj3547]
					yyv3549.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3547 := 0
		for ; !r.CheckBreak(); yyj3547++ {

			if yyj3547 >= len(yyv3547) {
				yyv3547 = append(yyv3547, Pod{}) // var yyz3547 Pod
				yyc3547 = true
			}
			yyh3547.ElemContainerState(yyj3547)
			if yyj3547 < len(yyv3547) {
				if r.TryDecodeAsNil() {
					yyv3547[yyj3547] = Pod{}
				} else {
					yyv3550 := &yyv3547[yyj3547]
					yyv3550.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3547 < len(yyv3547) {
			yyv3547 = yyv3547[:yyj3547]
			yyc3547 = true
		} else if yyj3547 == 0 && yyv3547 == nil {
			yyv3547 = []Pod{}
			yyc3547 = true
		}
	}
	yyh3547.End()
	if yyc3547 {
		*v = yyv3547
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3551 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3552 := &yyv3551
		yy3552.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3553 := *v
	yyh3553, yyl3553 := z.DecSliceHelperStart()
	var yyc3553 bool
	if yyl3553 == 0 {
		if yyv3553 == nil {
			yyv3553 = []Volume{}
			yyc3553 = true
		} else if len(yyv3553) != 0 {
			yyv3553 = yyv3553[:0]
			yyc3553 = true
		}
	} else if yyl3553 > 0 {
		var yyrr3553, yyrl3553 int
		var yyrt3553 bool
		if yyl3553 > cap(yyv3553) {

			yyrg3553 := len(yyv3553) > 0
			yyv23553 := yyv3553
			yyrl3553, yyrt3553 = z.DecInferLen(yyl3553, z.DecBasicHandle().MaxInitLen, 144)
			if yyrt3553 {
				if yyrl3553 <= cap(yyv3553) {
					yyv3553 = yyv3553[:yyrl3553]
				} else {
					yyv3553 = make([]Volume, yyrl3553)
				}
			} else {
				yyv3553 = make([]Volume, yyrl3553)
			}
			yyc3553 = true
			yyrr3553 = len(yyv3553)
			if yyrg3553 {
				copy(yyv3553, yyv23553)
			}
		} else if yyl3553 != len(yyv3553) {
			yyv3553 = yyv3553[:yyl3553]
			yyc3553 = true
		}
		yyj3553 := 0
		for ; yyj3553 < yyrr3553; yyj3553++ {
			yyh3553.ElemContainerState(yyj3553)
			if r.TryDecodeAsNil() {
				yyv3553[yyj3553] = Volume{}
			} else {
				yyv3554 := &yyv3553[yyj3553]
				yyv3554.CodecDecodeSelf(d)
			}

		}
		if yyrt3553 {
			for ; yyj3553 < yyl3553; yyj3553++ {
				yyv3553 = append(yyv3553, Volume{})
				yyh3553.ElemContainerState(yyj3553)
				if r.TryDecodeAsNil() {
					yyv3553[yyj3553] = Volume{}
				} else {
					yyv3555 := &yyv3553[yyj3553]
					yyv3555.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3553 := 0
		for ; !r.CheckBreak(); yyj3553++ {

			if yyj3553 >= len(yyv3553) {
				yyv3553 = append(yyv3553, Volume{}) // var yyz3553 Volume
				yyc3553 = true
			}
			yyh3553.ElemContainerState(yyj3553)
			if yyj3553 < len(yyv3553) {
				if r.TryDecodeAsNil() {
					yyv3553[yyj3553] = Volume{}
				} else {
					yyv3556 := &yyv3553[yyj3553]
					yyv3556.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3553 < len(yyv3553) {
			yyv3553 = yyv3553[:yyj3553]
			yyc3553 = true
		} else if yyj3553 == 0 && yyv3553 == nil {
			yyv3553 = []Volume{}
			yyc3553 = true
		}
	}
	yyh3553.End()
	if yyc3553 {
		*v = yyv3553
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3557 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3558 := &yyv3557
		yy3558.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3559 := *v
	yyh3559, yyl3559 := z.DecSliceHelperStart()
	var yyc3559 bool
	if yyl3559 == 0 {
		if yyv3559 == nil {
			yyv3559 = []Container{}
			yyc3559 = true
		} else if len(yyv3559) != 0 {
			yyv3559 = yyv3559[:0]
			yyc3559 = true
		}
	} else if yyl3559 > 0 {
		var yyrr3559, yyrl3559 int
		var yyrt3559 bool
		if yyl3559 > cap(yyv3559) {

			yyrg3559 := len(yyv3559) > 0
			yyv23559 := yyv3559
			yyrl3559, yyrt3559 = z.DecInferLen(yyl3559, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt3559 {
				if yyrl3559 <= cap(yyv3559) {
					yyv3559 = yyv3559[:yyrl3559]
				} else {
					yyv3559 = make([]Container, yyrl3559)
				}
			} else {
				yyv3559 = make([]Container, yyrl3559)
			}
			yyc3559 = true
			yyrr3559 = len(yyv3559)
			if yyrg3559 {
				copy(yyv3559, yyv23559)
			}
		} else if yyl3559 != len(yyv3559) {
			yyv3559 = yyv3559[:yyl3559]
			yyc3559 = true
		}
		yyj3559 := 0
		for ; yyj3559 < yyrr3559; yyj3559++ {
			yyh3559.ElemContainerState(yyj3559)
			if r.TryDecodeAsNil() {
				yyv3559[yyj3559] = Container{}
			} else {
				yyv3560 := &yyv3559[yyj3559]
				yyv3560.CodecDecodeSelf(d)
			}

		}
		if yyrt3559 {
			for ; yyj3559 < yyl3559; yyj3559++ {
				yyv3559 = append(yyv3559, Container{})
				yyh3559.ElemContainerState(yyj3559)
				if r.TryDecodeAsNil() {
					yyv3559[yyj3559] = Container{}
				} else {
					yyv3561 := &yyv3559[yyj3559]
					yyv3561.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3559 := 0
		for ; !r.CheckBreak(); yyj3559++ {

			if yyj3559 >= len(yyv3559) {
				yyv3559 = append(yyv3559, Container{}) // var yyz3559 Container
				yyc3559 = true
			}
			yyh3559.ElemContainerState(yyj3559)
			if yyj3559 < len(yyv3559) {
				if r.TryDecodeAsNil() {
					yyv3559[yyj3559] = Container{}
				} else {
					yyv3562 := &yyv3559[yyj3559]
					yyv3562.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3559 < len(yyv3559) {
			yyv3559 = yyv3559[:yyj3559]
			yyc3559 = true
		} else if yyj3559 == 0 && yyv3559 == nil {
			yyv3559 = []Container{}
			yyc3559 = true
		}
	}
	yyh3559.End()
	if yyc3559 {
		*v = yyv3559
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3563 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3564 := &yyv3563
		yy3564.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3565 := *v
	yyh3565, yyl3565 := z.DecSliceHelperStart()
	var yyc3565 bool
	if yyl3565 == 0 {
		if yyv3565 == nil {
			yyv3565 = []LocalObjectReference{}
			yyc3565 = true
		} else if len(yyv3565) != 0 {
			yyv3565 = yyv3565[:0]
			yyc3565 = true
		}
	} else if yyl3565 > 0 {
		var yyrr3565, yyrl3565 int
		var yyrt3565 bool
		if yyl3565 > cap(yyv3565) {

			yyrg3565 := len(yyv3565) > 0
			yyv23565 := yyv3565
			yyrl3565, yyrt3565 = z.DecInferLen(yyl3565, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3565 {
				if yyrl3565 <= cap(yyv3565) {
					yyv3565 = yyv3565[:yyrl3565]
				} else {
					yyv3565 = make([]LocalObjectReference, yyrl3565)
				}
			} else {
				yyv3565 = make([]LocalObjectReference, yyrl3565)
			}
			yyc3565 = true
			yyrr3565 = len(yyv3565)
			if yyrg3565 {
				copy(yyv3565, yyv23565)
			}
		} else if yyl3565 != len(yyv3565) {
			yyv3565 = yyv3565[:yyl3565]
			yyc3565 = true
		}
		yyj3565 := 0
		for ; yyj3565 < yyrr3565; yyj3565++ {
			yyh3565.ElemContainerState(yyj3565)
			if r.TryDecodeAsNil() {
				yyv3565[yyj3565] = LocalObjectReference{}
			} else {
				yyv3566 := &yyv3565[yyj3565]
				yyv3566.CodecDecodeSelf(d)
			}

		}
		if yyrt3565 {
			for ; yyj3565 < yyl3565; yyj3565++ {
				yyv3565 = append(yyv3565, LocalObjectReference{})
				yyh3565.ElemContainerState(yyj3565)
				if r.TryDecodeAsNil() {
					yyv3565[yyj3565] = LocalObjectReference{}
				} else {
					yyv3567 := &yyv3565[yyj3565]
					yyv3567.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3565 := 0
		for ; !r.CheckBreak(); yyj3565++ {

			if yyj3565 >= len(yyv3565) {
				yyv3565 = append(yyv3565, LocalObjectReference{}) // var yyz3565 LocalObjectReference
				yyc3565 = true
			}
			yyh3565.ElemContainerState(yyj3565)
			if yyj3565 < len(yyv3565) {
				if r.TryDecodeAsNil() {
					yyv3565[yyj3565] = LocalObjectReference{}
				} else {
					yyv3568 := &yyv3565[yyj3565]
					yyv3568.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3565 < len(yyv3565) {
			yyv3565 = yyv3565[:yyj3565]
			yyc3565 = true
		} else if yyj3565 == 0 && yyv3565 == nil {
			yyv3565 = []LocalObjectReference{}
			yyc3565 = true
		}
	}
	yyh3565.End()
	if yyc3565 {
		*v = yyv3565
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3569 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3570 := &yyv3569
		yy3570.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3571 := *v
	yyh3571, yyl3571 := z.DecSliceHelperStart()
	var yyc3571 bool
	if yyl3571 == 0 {
		if yyv3571 == nil {
			yyv3571 = []PodCondition{}
			yyc3571 = true
		} else if len(yyv3571) != 0 {
			yyv3571 = yyv3571[:0]
			yyc3571 = true
		}
	} else if yyl3571 > 0 {
		var yyrr3571, yyrl3571 int
		var yyrt3571 bool
		if yyl3571 > cap(yyv3571) {

			yyrg3571 := len(yyv3571) > 0
			yyv23571 := yyv3571
			yyrl3571, yyrt3571 = z.DecInferLen(yyl3571, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3571 {
				if yyrl3571 <= cap(yyv3571) {
					yyv3571 = yyv3571[:yyrl3571]
				} else {
					yyv3571 = make([]PodCondition, yyrl3571)
				}
			} else {
				yyv3571 = make([]PodCondition, yyrl3571)
			}
			yyc3571 = true
			yyrr3571 = len(yyv3571)
			if yyrg3571 {
				copy(yyv3571, yyv23571)
			}
		} else if yyl3571 != len(yyv3571) {
			yyv3571 = yyv3571[:yyl3571]
			yyc3571 = true
		}
		yyj3571 := 0
		for ; yyj3571 < yyrr3571; yyj3571++ {
			yyh3571.ElemContainerState(yyj3571)
			if r.TryDecodeAsNil() {
				yyv3571[yyj3571] = PodCondition{}
			} else {
				yyv3572 := &yyv3571[yyj3571]
				yyv3572.CodecDecodeSelf(d)
			}

		}
		if yyrt3571 {
			for ; yyj3571 < yyl3571; yyj3571++ {
				yyv3571 = append(yyv3571, PodCondition{})
				yyh3571.ElemContainerState(yyj3571)
				if r.TryDecodeAsNil() {
					yyv3571[yyj3571] = PodCondition{}
				} else {
					yyv3573 := &yyv3571[yyj3571]
					yyv3573.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3571 := 0
		for ; !r.CheckBreak(); yyj3571++ {

			if yyj3571 >= len(yyv3571) {
				yyv3571 = append(yyv3571, PodCondition{}) // var yyz3571 PodCondition
				yyc3571 = true
			}
			yyh3571.ElemContainerState(yyj3571)
			if yyj3571 < len(yyv3571) {
				if r.TryDecodeAsNil() {
					yyv3571[yyj3571] = PodCondition{}
				} else {
					yyv3574 := &yyv3571[yyj3571]
					yyv3574.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3571 < len(yyv3571) {
			yyv3571 = yyv3571[:yyj3571]
			yyc3571 = true
		} else if yyj3571 == 0 && yyv3571 == nil {
			yyv3571 = []PodCondition{}
			yyc3571 = true
		}
	}
	yyh3571.End()
	if yyc3571 {
		*v = yyv3571
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3575 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3576 := &yyv3575
		yy3576.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3577 := *v
	yyh3577, yyl3577 := z.DecSliceHelperStart()
	var yyc3577 bool
	if yyl3577 == 0 {
		if yyv3577 == nil {
			yyv3577 = []ContainerStatus{}
			yyc3577 = true
		} else if len(yyv3577) != 0 {
			yyv3577 = yyv3577[:0]
			yyc3577 = true
		}
	} else if yyl3577 > 0 {
		var yyrr3577, yyrl3577 int
		var yyrt3577 bool
		if yyl3577 > cap(yyv3577) {

			yyrg3577 := len(yyv3577) > 0
			yyv23577 := yyv3577
			yyrl3577, yyrt3577 = z.DecInferLen(yyl3577, z.DecBasicHandle().MaxInitLen, 128)
			if yyrt3577 {
				if yyrl3577 <= cap(yyv3577) {
					yyv3577 = yyv3577[:yyrl3577]
				} else {
					yyv3577 = make([]ContainerStatus, yyrl3577)
				}
			} else {
				yyv3577 = make([]ContainerStatus, yyrl3577)
			}
			yyc3577 = true
			yyrr3577 = len(yyv3577)
			if yyrg3577 {
				copy(yyv3577, yyv23577)
			}
		} else if yyl3577 != len(yyv3577) {
			yyv3577 = yyv3577[:yyl3577]
			yyc3577 = true
		}
		yyj3577 := 0
		for ; yyj3577 < yyrr3577; yyj3577++ {
			yyh3577.ElemContainerState(yyj3577)
			if r.TryDecodeAsNil() {
				yyv3577[yyj3577] = ContainerStatus{}
			} else {
				yyv3578 := &yyv3577[yyj3577]
				yyv3578.CodecDecodeSelf(d)
			}

		}
		if yyrt3577 {
			for ; yyj3577 < yyl3577; yyj3577++ {
				yyv3577 = append(yyv3577, ContainerStatus{})
				yyh3577.ElemContainerState(yyj3577)
				if r.TryDecodeAsNil() {
					yyv3577[yyj3577] = ContainerStatus{}
				} else {
					yyv3579 := &yyv3577[yyj3577]
					yyv3579.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3577 := 0
		for ; !r.CheckBreak(); yyj3577++ {

			if yyj3577 >= len(yyv3577) {
				yyv3577 = append(yyv3577, ContainerStatus{}) // var yyz3577 ContainerStatus
				yyc3577 = true
			}
			yyh3577.ElemContainerState(yyj3577)
			if yyj3577 < len(yyv3577) {
				if r.TryDecodeAsNil() {
					yyv3577[yyj3577] = ContainerStatus{}
				} else {
					yyv3580 := &yyv3577[yyj3577]
					yyv3580.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3577 < len(yyv3577) {
			yyv3577 = yyv3577[:yyj3577]
			yyc3577 = true
		} else if yyj3577 == 0 && yyv3577 == nil {
			yyv3577 = []ContainerStatus{}
			yyc3577 = true
		}
	}
	yyh3577.End()
	if yyc3577 {
		*v = yyv3577
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3581 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3582 := &yyv3581
		yy3582.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3583 := *v
	yyh3583, yyl3583 := z.DecSliceHelperStart()
	var yyc3583 bool
	if yyl3583 == 0 {
		if yyv3583 == nil {
			yyv3583 = []PodTemplate{}
			yyc3583 = true
		} else if len(yyv3583) != 0 {
			yyv3583 = yyv3583[:0]
			yyc3583 = true
		}
	} else if yyl3583 > 0 {
		var yyrr3583, yyrl3583 int
		var yyrt3583 bool
		if yyl3583 > cap(yyv3583) {

			yyrg3583 := len(yyv3583) > 0
			yyv23583 := yyv3583
			yyrl3583, yyrt3583 = z.DecInferLen(yyl3583, z.DecBasicHandle().MaxInitLen, 520)
			if yyrt3583 {
				if yyrl3583 <= cap(yyv3583) {
					yyv3583 = yyv3583[:yyrl3583]
				} else {
					yyv3583 = make([]PodTemplate, yyrl3583)
				}
			} else {
				yyv3583 = make([]PodTemplate, yyrl3583)
			}
			yyc3583 = true
			yyrr3583 = len(yyv3583)
			if yyrg3583 {
				copy(yyv3583, yyv23583)
			}
		} else if yyl3583 != len(yyv3583) {
			yyv3583 = yyv3583[:yyl3583]
			yyc3583 = true
		}
		yyj3583 := 0
		for ; yyj3583 < yyrr3583; yyj3583++ {
			yyh3583.ElemContainerState(yyj3583)
			if r.TryDecodeAsNil() {
				yyv3583[yyj3583] = PodTemplate{}
			} else {
				yyv3584 := &yyv3583[yyj3583]
				yyv3584.CodecDecodeSelf(d)
			}

		}
		if yyrt3583 {
			for ; yyj3583 < yyl3583; yyj3583++ {
				yyv3583 = append(yyv3583, PodTemplate{})
				yyh3583.ElemContainerState(yyj3583)
				if r.TryDecodeAsNil() {
					yyv3583[yyj3583] = PodTemplate{}
				} else {
					yyv3585 := &yyv3583[yyj3583]
					yyv3585.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3583 := 0
		for ; !r.CheckBreak(); yyj3583++ {

			if yyj3583 >= len(yyv3583) {
				yyv3583 = append(yyv3583, PodTemplate{}) // var yyz3583 PodTemplate
				yyc3583 = true
			}
			yyh3583.ElemContainerState(yyj3583)
			if yyj3583 < len(yyv3583) {
				if r.TryDecodeAsNil() {
					yyv3583[yyj3583] = PodTemplate{}
				} else {
					yyv3586 := &yyv3583[yyj3583]
					yyv3586.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3583 < len(yyv3583) {
			yyv3583 = yyv3583[:yyj3583]
			yyc3583 = true
		} else if yyj3583 == 0 && yyv3583 == nil {
			yyv3583 = []PodTemplate{}
			yyc3583 = true
		}
	}
	yyh3583.End()
	if yyc3583 {
		*v = yyv3583
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3587 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3588 := &yyv3587
		yy3588.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3589 := *v
	yyh3589, yyl3589 := z.DecSliceHelperStart()
	var yyc3589 bool
	if yyl3589 == 0 {
		if yyv3589 == nil {
			yyv3589 = []ReplicationController{}
			yyc3589 = true
		} else if len(yyv3589) != 0 {
			yyv3589 = yyv3589[:0]
			yyc3589 = true
		}
	} else if yyl3589 > 0 {
		var yyrr3589, yyrl3589 int
		var yyrt3589 bool
		if yyl3589 > cap(yyv3589) {

			yyrg3589 := len(yyv3589) > 0
			yyv23589 := yyv3589
			yyrl3589, yyrt3589 = z.DecInferLen(yyl3589, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3589 {
				if yyrl3589 <= cap(yyv3589) {
					yyv3589 = yyv3589[:yyrl3589]
				} else {
					yyv3589 = make([]ReplicationController, yyrl3589)
				}
			} else {
				yyv3589 = make([]ReplicationController, yyrl3589)
			}
			yyc3589 = true
			yyrr3589 = len(yyv3589)
			if yyrg3589 {
				copy(yyv3589, yyv23589)
			}
		} else if yyl3589 != len(yyv3589) {
			yyv3589 = yyv3589[:yyl3589]
			yyc3589 = true
		}
		yyj3589 := 0
		for ; yyj3589 < yyrr3589; yyj3589++ {
			yyh3589.ElemContainerState(yyj3589)
			if r.TryDecodeAsNil() {
				yyv3589[yyj3589] = ReplicationController{}
			} else {
				yyv3590 := &yyv3589[yyj3589]
				yyv3590.CodecDecodeSelf(d)
			}

		}
		if yyrt3589 {
			for ; yyj3589 < yyl3589; yyj3589++ {
				yyv3589 = append(yyv3589, ReplicationController{})
				yyh3589.ElemContainerState(yyj3589)
				if r.TryDecodeAsNil() {
					yyv3589[yyj3589] = ReplicationController{}
				} else {
					yyv3591 := &yyv3589[yyj3589]
					yyv3591.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3589 := 0
		for ; !r.CheckBreak(); yyj3589++ {

			if yyj3589 >= len(yyv3589) {
				yyv3589 = append(yyv3589, ReplicationController{}) // var yyz3589 ReplicationController
				yyc3589 = true
			}
			yyh3589.ElemContainerState(yyj3589)
			if yyj3589 < len(yyv3589) {
				if r.TryDecodeAsNil() {
					yyv3589[yyj3589] = ReplicationController{}
				} else {
					yyv3592 := &yyv3589[yyj3589]
					yyv3592.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3589 < len(yyv3589) {
			yyv3589 = yyv3589[:yyj3589]
			yyc3589 = true
		} else if yyj3589 == 0 && yyv3589 == nil {
			yyv3589 = []ReplicationController{}
			yyc3589 = true
		}
	}
	yyh3589.End()
	if yyc3589 {
		*v = yyv3589
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3593 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3594 := &yyv3593
		yy3594.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3595 := *v
	yyh3595, yyl3595 := z.DecSliceHelperStart()
	var yyc3595 bool
	if yyl3595 == 0 {
		if yyv3595 == nil {
			yyv3595 = []Service{}
			yyc3595 = true
		} else if len(yyv3595) != 0 {
			yyv3595 = yyv3595[:0]
			yyc3595 = true
		}
	} else if yyl3595 > 0 {
		var yyrr3595, yyrl3595 int
		var yyrt3595 bool
		if yyl3595 > cap(yyv3595) {

			yyrg3595 := len(yyv3595) > 0
			yyv23595 := yyv3595
			yyrl3595, yyrt3595 = z.DecInferLen(yyl3595, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt3595 {
				if yyrl3595 <= cap(yyv3595) {
					yyv3595 = yyv3595[:yyrl3595]
				} else {
					yyv3595 = make([]Service, yyrl3595)
				}
			} else {
				yyv3595 = make([]Service, yyrl3595)
			}
			yyc3595 = true
			yyrr3595 = len(yyv3595)
			if yyrg3595 {
				copy(yyv3595, yyv23595)
			}
		} else if yyl3595 != len(yyv3595) {
			yyv3595 = yyv3595[:yyl3595]
			yyc3595 = true
		}
		yyj3595 := 0
		for ; yyj3595 < yyrr3595; yyj3595++ {
			yyh3595.ElemContainerState(yyj3595)
			if r.TryDecodeAsNil() {
				yyv3595[yyj3595] = Service{}
			} else {
				yyv3596 := &yyv3595[yyj3595]
				yyv3596.CodecDecodeSelf(d)
			}

		}
		if yyrt3595 {
			for ; yyj3595 < yyl3595; yyj3595++ {
				yyv3595 = append(yyv3595, Service{})
				yyh3595.ElemContainerState(yyj3595)
				if r.TryDecodeAsNil() {
					yyv3595[yyj3595] = Service{}
				} else {
					yyv3597 := &yyv3595[yyj3595]
					yyv3597.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3595 := 0
		for ; !r.CheckBreak(); yyj3595++ {

			if yyj3595 >= len(yyv3595) {
				yyv3595 = append(yyv3595, Service{}) // var yyz3595 Service
				yyc3595 = true
			}
			yyh3595.ElemContainerState(yyj3595)
			if yyj3595 < len(yyv3595) {
				if r.TryDecodeAsNil() {
					yyv3595[yyj3595] = Service{}
				} else {
					yyv3598 := &yyv3595[yyj3595]
					yyv3598.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3595 < len(yyv3595) {
			yyv3595 = yyv3595[:yyj3595]
			yyc3595 = true
		} else if yyj3595 == 0 && yyv3595 == nil {
			yyv3595 = []Service{}
			yyc3595 = true
		}
	}
	yyh3595.End()
	if yyc3595 {
		*v = yyv3595
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3599 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3600 := &yyv3599
		yy3600.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3601 := *v
	yyh3601, yyl3601 := z.DecSliceHelperStart()
	var yyc3601 bool
	if yyl3601 == 0 {
		if yyv3601 == nil {
			yyv3601 = []LoadBalancerIngress{}
			yyc3601 = true
		} else if len(yyv3601) != 0 {
			yyv3601 = yyv3601[:0]
			yyc3601 = true
		}
	} else if yyl3601 > 0 {
		var yyrr3601, yyrl3601 int
		var yyrt3601 bool
		if yyl3601 > cap(yyv3601) {

			yyrg3601 := len(yyv3601) > 0
			yyv23601 := yyv3601
			yyrl3601, yyrt3601 = z.DecInferLen(yyl3601, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3601 {
				if yyrl3601 <= cap(yyv3601) {
					yyv3601 = yyv3601[:yyrl3601]
				} else {
					yyv3601 = make([]LoadBalancerIngress, yyrl3601)
				}
			} else {
				yyv3601 = make([]LoadBalancerIngress, yyrl3601)
			}
			yyc3601 = true
			yyrr3601 = len(yyv3601)
			if yyrg3601 {
				copy(yyv3601, yyv23601)
			}
		} else if yyl3601 != len(yyv3601) {
			yyv3601 = yyv3601[:yyl3601]
			yyc3601 = true
		}
		yyj3601 := 0
		for ; yyj3601 < yyrr3601; yyj3601++ {
			yyh3601.ElemContainerState(yyj3601)
			if r.TryDecodeAsNil() {
				yyv3601[yyj3601] = LoadBalancerIngress{}
			} else {
				yyv3602 := &yyv3601[yyj3601]
				yyv3602.CodecDecodeSelf(d)
			}

		}
		if yyrt3601 {
			for ; yyj3601 < yyl3601; yyj3601++ {
				yyv3601 = append(yyv3601, LoadBalancerIngress{})
				yyh3601.ElemContainerState(yyj3601)
				if r.TryDecodeAsNil() {
					yyv3601[yyj3601] = LoadBalancerIngress{}
				} else {
					yyv3603 := &yyv3601[yyj3601]
					yyv3603.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3601 := 0
		for ; !r.CheckBreak(); yyj3601++ {

			if yyj3601 >= len(yyv3601) {
				yyv3601 = append(yyv3601, LoadBalancerIngress{}) // var yyz3601 LoadBalancerIngress
				yyc3601 = true
			}
			yyh3601.ElemContainerState(yyj3601)
			if yyj3601 < len(yyv3601) {
				if r.TryDecodeAsNil() {
					yyv3601[yyj3601] = LoadBalancerIngress{}
				} else {
					yyv3604 := &yyv3601[yyj3601]
					yyv3604.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3601 < len(yyv3601) {
			yyv3601 = yyv3601[:yyj3601]
			yyc3601 = true
		} else if yyj3601 == 0 && yyv3601 == nil {
			yyv3601 = []LoadBalancerIngress{}
			yyc3601 = true
		}
	}
	yyh3601.End()
	if yyc3601 {
		*v = yyv3601
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3605 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3606 := &yyv3605
		yy3606.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3607 := *v
	yyh3607, yyl3607 := z.DecSliceHelperStart()
	var yyc3607 bool
	if yyl3607 == 0 {
		if yyv3607 == nil {
			yyv3607 = []ServicePort{}
			yyc3607 = true
		} else if len(yyv3607) != 0 {
			yyv3607 = yyv3607[:0]
			yyc3607 = true
		}
	} else if yyl3607 > 0 {
		var yyrr3607, yyrl3607 int
		var yyrt3607 bool
		if yyl3607 > cap(yyv3607) {

			yyrg3607 := len(yyv3607) > 0
			yyv23607 := yyv3607
			yyrl3607, yyrt3607 = z.DecInferLen(yyl3607, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt3607 {
				if yyrl3607 <= cap(yyv3607) {
					yyv3607 = yyv3607[:yyrl3607]
				} else {
					yyv3607 = make([]ServicePort, yyrl3607)
				}
			} else {
				yyv3607 = make([]ServicePort, yyrl3607)
			}
			yyc3607 = true
			yyrr3607 = len(yyv3607)
			if yyrg3607 {
				copy(yyv3607, yyv23607)
			}
		} else if yyl3607 != len(yyv3607) {
			yyv3607 = yyv3607[:yyl3607]
			yyc3607 = true
		}
		yyj3607 := 0
		for ; yyj3607 < yyrr3607; yyj3607++ {
			yyh3607.ElemContainerState(yyj3607)
			if r.TryDecodeAsNil() {
				yyv3607[yyj3607] = ServicePort{}
			} else {
				yyv3608 := &yyv3607[yyj3607]
				yyv3608.CodecDecodeSelf(d)
			}

		}
		if yyrt3607 {
			for ; yyj3607 < yyl3607; yyj3607++ {
				yyv3607 = append(yyv3607, ServicePort{})
				yyh3607.ElemContainerState(yyj3607)
				if r.TryDecodeAsNil() {
					yyv3607[yyj3607] = ServicePort{}
				} else {
					yyv3609 := &yyv3607[yyj3607]
					yyv3609.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3607 := 0
		for ; !r.CheckBreak(); yyj3607++ {

			if yyj3607 >= len(yyv3607) {
				yyv3607 = append(yyv3607, ServicePort{}) // var yyz3607 ServicePort
				yyc3607 = true
			}
			yyh3607.ElemContainerState(yyj3607)
			if yyj3607 < len(yyv3607) {
				if r.TryDecodeAsNil() {
					yyv3607[yyj3607] = ServicePort{}
				} else {
					yyv3610 := &yyv3607[yyj3607]
					yyv3610.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3607 < len(yyv3607) {
			yyv3607 = yyv3607[:yyj3607]
			yyc3607 = true
		} else if yyj3607 == 0 && yyv3607 == nil {
			yyv3607 = []ServicePort{}
			yyc3607 = true
		}
	}
	yyh3607.End()
	if yyc3607 {
		*v = yyv3607
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3611 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3612 := &yyv3611
		yy3612.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3613 := *v
	yyh3613, yyl3613 := z.DecSliceHelperStart()
	var yyc3613 bool
	if yyl3613 == 0 {
		if yyv3613 == nil {
			yyv3613 = []ObjectReference{}
			yyc3613 = true
		} else if len(yyv3613) != 0 {
			yyv3613 = yyv3613[:0]
			yyc3613 = true
		}
	} else if yyl3613 > 0 {
		var yyrr3613, yyrl3613 int
		var yyrt3613 bool
		if yyl3613 > cap(yyv3613) {

			yyrg3613 := len(yyv3613) > 0
			yyv23613 := yyv3613
			yyrl3613, yyrt3613 = z.DecInferLen(yyl3613, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3613 {
				if yyrl3613 <= cap(yyv3613) {
					yyv3613 = yyv3613[:yyrl3613]
				} else {
					yyv3613 = make([]ObjectReference, yyrl3613)
				}
			} else {
				yyv3613 = make([]ObjectReference, yyrl3613)
			}
			yyc3613 = true
			yyrr3613 = len(yyv3613)
			if yyrg3613 {
				copy(yyv3613, yyv23613)
			}
		} else if yyl3613 != len(yyv3613) {
			yyv3613 = yyv3613[:yyl3613]
			yyc3613 = true
		}
		yyj3613 := 0
		for ; yyj3613 < yyrr3613; yyj3613++ {
			yyh3613.ElemContainerState(yyj3613)
			if r.TryDecodeAsNil() {
				yyv3613[yyj3613] = ObjectReference{}
			} else {
				yyv3614 := &yyv3613[yyj3613]
				yyv3614.CodecDecodeSelf(d)
			}

		}
		if yyrt3613 {
			for ; yyj3613 < yyl3613; yyj3613++ {
				yyv3613 = append(yyv3613, ObjectReference{})
				yyh3613.ElemContainerState(yyj3613)
				if r.TryDecodeAsNil() {
					yyv3613[yyj3613] = ObjectReference{}
				} else {
					yyv3615 := &yyv3613[yyj3613]
					yyv3615.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3613 := 0
		for ; !r.CheckBreak(); yyj3613++ {

			if yyj3613 >= len(yyv3613) {
				yyv3613 = append(yyv3613, ObjectReference{}) // var yyz3613 ObjectReference
				yyc3613 = true
			}
			yyh3613.ElemContainerState(yyj3613)
			if yyj3613 < len(yyv3613) {
				if r.TryDecodeAsNil() {
					yyv3613[yyj3613] = ObjectReference{}
				} else {
					yyv3616 := &yyv3613[yyj3613]
					yyv3616.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3613 < len(yyv3613) {
			yyv3613 = yyv3613[:yyj3613]
			yyc3613 = true
		} else if yyj3613 == 0 && yyv3613 == nil {
			yyv3613 = []ObjectReference{}
			yyc3613 = true
		}
	}
	yyh3613.End()
	if yyc3613 {
		*v = yyv3613
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3617 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3618 := &yyv3617
		yy3618.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3619 := *v
	yyh3619, yyl3619 := z.DecSliceHelperStart()
	var yyc3619 bool
	if yyl3619 == 0 {
		if yyv3619 == nil {
			yyv3619 = []ServiceAccount{}
			yyc3619 = true
		} else if len(yyv3619) != 0 {
			yyv3619 = yyv3619[:0]
			yyc3619 = true
		}
	} else if yyl3619 > 0 {
		var yyrr3619, yyrl3619 int
		var yyrt3619 bool
		if yyl3619 > cap(yyv3619) {

			yyrg3619 := len(yyv3619) > 0
			yyv23619 := yyv3619
			yyrl3619, yyrt3619 = z.DecInferLen(yyl3619, z.DecBasicHandle().MaxInitLen, 240)
			if yyrt3619 {
				if yyrl3619 <= cap(yyv3619) {
					yyv3619 = yyv3619[:yyrl3619]
				} else {
					yyv3619 = make([]ServiceAccount, yyrl3619)
				}
			} else {
				yyv3619 = make([]ServiceAccount, yyrl3619)
			}
			yyc3619 = true
			yyrr3619 = len(yyv3619)
			if yyrg3619 {
				copy(yyv3619, yyv23619)
			}
		} else if yyl3619 != len(yyv3619) {
			yyv3619 = yyv3619[:yyl3619]
			yyc3619 = true
		}
		yyj3619 := 0
		for ; yyj3619 < yyrr3619; yyj3619++ {
			yyh3619.ElemContainerState(yyj3619)
			if r.TryDecodeAsNil() {
				yyv3619[yyj3619] = ServiceAccount{}
			} else {
				yyv3620 := &yyv3619[yyj3619]
				yyv3620.CodecDecodeSelf(d)
			}

		}
		if yyrt3619 {
			for ; yyj3619 < yyl3619; yyj3619++ {
				yyv3619 = append(yyv3619, ServiceAccount{})
				yyh3619.ElemContainerState(yyj3619)
				if r.TryDecodeAsNil() {
					yyv3619[yyj3619] = ServiceAccount{}
				} else {
					yyv3621 := &yyv3619[yyj3619]
					yyv3621.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3619 := 0
		for ; !r.CheckBreak(); yyj3619++ {

			if yyj3619 >= len(yyv3619) {
				yyv3619 = append(yyv3619, ServiceAccount{}) // var yyz3619 ServiceAccount
				yyc3619 = true
			}
			yyh3619.ElemContainerState(yyj3619)
			if yyj3619 < len(yyv3619) {
				if r.TryDecodeAsNil() {
					yyv3619[yyj3619] = ServiceAccount{}
				} else {
					yyv3622 := &yyv3619[yyj3619]
					yyv3622.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3619 < len(yyv3619) {
			yyv3619 = yyv3619[:yyj3619]
			yyc3619 = true
		} else if yyj3619 == 0 && yyv3619 == nil {
			yyv3619 = []ServiceAccount{}
			yyc3619 = true
		}
	}
	yyh3619.End()
	if yyc3619 {
		*v = yyv3619
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3623 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3624 := &yyv3623
		yy3624.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3625 := *v
	yyh3625, yyl3625 := z.DecSliceHelperStart()
	var yyc3625 bool
	if yyl3625 == 0 {
		if yyv3625 == nil {
			yyv3625 = []EndpointSubset{}
			yyc3625 = true
		} else if len(yyv3625) != 0 {
			yyv3625 = yyv3625[:0]
			yyc3625 = true
		}
	} else if yyl3625 > 0 {
		var yyrr3625, yyrl3625 int
		var yyrt3625 bool
		if yyl3625 > cap(yyv3625) {

			yyrg3625 := len(yyv3625) > 0
			yyv23625 := yyv3625
			yyrl3625, yyrt3625 = z.DecInferLen(yyl3625, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt3625 {
				if yyrl3625 <= cap(yyv3625) {
					yyv3625 = yyv3625[:yyrl3625]
				} else {
					yyv3625 = make([]EndpointSubset, yyrl3625)
				}
			} else {
				yyv3625 = make([]EndpointSubset, yyrl3625)
			}
			yyc3625 = true
			yyrr3625 = len(yyv3625)
			if yyrg3625 {
				copy(yyv3625, yyv23625)
			}
		} else if yyl3625 != len(yyv3625) {
			yyv3625 = yyv3625[:yyl3625]
			yyc3625 = true
		}
		yyj3625 := 0
		for ; yyj3625 < yyrr3625; yyj3625++ {
			yyh3625.ElemContainerState(yyj3625)
			if r.TryDecodeAsNil() {
				yyv3625[yyj3625] = EndpointSubset{}
			} else {
				yyv3626 := &yyv3625[yyj3625]
				yyv3626.CodecDecodeSelf(d)
			}

		}
		if yyrt3625 {
			for ; yyj3625 < yyl3625; yyj3625++ {
				yyv3625 = append(yyv3625, EndpointSubset{})
				yyh3625.ElemContainerState(yyj3625)
				if r.TryDecodeAsNil() {
					yyv3625[yyj3625] = EndpointSubset{}
				} else {
					yyv3627 := &yyv3625[yyj3625]
					yyv3627.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3625 := 0
		for ; !r.CheckBreak(); yyj3625++ {

			if yyj3625 >= len(yyv3625) {
				yyv3625 = append(yyv3625, EndpointSubset{}) // var yyz3625 EndpointSubset
				yyc3625 = true
			}
			yyh3625.ElemContainerState(yyj3625)
			if yyj3625 < len(yyv3625) {
				if r.TryDecodeAsNil() {
					yyv3625[yyj3625] = EndpointSubset{}
				} else {
					yyv3628 := &yyv3625[yyj3625]
					yyv3628.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3625 < len(yyv3625) {
			yyv3625 = yyv3625[:yyj3625]
			yyc3625 = true
		} else if yyj3625 == 0 && yyv3625 == nil {
			yyv3625 = []EndpointSubset{}
			yyc3625 = true
		}
	}
	yyh3625.End()
	if yyc3625 {
		*v = yyv3625
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3629 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3630 := &yyv3629
		yy3630.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3631 := *v
	yyh3631, yyl3631 := z.DecSliceHelperStart()
	var yyc3631 bool
	if yyl3631 == 0 {
		if yyv3631 == nil {
			yyv3631 = []EndpointAddress{}
			yyc3631 = true
		} else if len(yyv3631) != 0 {
			yyv3631 = yyv3631[:0]
			yyc3631 = true
		}
	} else if yyl3631 > 0 {
		var yyrr3631, yyrl3631 int
		var yyrt3631 bool
		if yyl3631 > cap(yyv3631) {

			yyrg3631 := len(yyv3631) > 0
			yyv23631 := yyv3631
			yyrl3631, yyrt3631 = z.DecInferLen(yyl3631, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3631 {
				if yyrl3631 <= cap(yyv3631) {
					yyv3631 = yyv3631[:yyrl3631]
				} else {
					yyv3631 = make([]EndpointAddress, yyrl3631)
				}
			} else {
				yyv3631 = make([]EndpointAddress, yyrl3631)
			}
			yyc3631 = true
			yyrr3631 = len(yyv3631)
			if yyrg3631 {
				copy(yyv3631, yyv23631)
			}
		} else if yyl3631 != len(yyv3631) {
			yyv3631 = yyv3631[:yyl3631]
			yyc3631 = true
		}
		yyj3631 := 0
		for ; yyj3631 < yyrr3631; yyj3631++ {
			yyh3631.ElemContainerState(yyj3631)
			if r.TryDecodeAsNil() {
				yyv3631[yyj3631] = EndpointAddress{}
			} else {
				yyv3632 := &yyv3631[yyj3631]
				yyv3632.CodecDecodeSelf(d)
			}

		}
		if yyrt3631 {
			for ; yyj3631 < yyl3631; yyj3631++ {
				yyv3631 = append(yyv3631, EndpointAddress{})
				yyh3631.ElemContainerState(yyj3631)
				if r.TryDecodeAsNil() {
					yyv3631[yyj3631] = EndpointAddress{}
				} else {
					yyv3633 := &yyv3631[yyj3631]
					yyv3633.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3631 := 0
		for ; !r.CheckBreak(); yyj3631++ {

			if yyj3631 >= len(yyv3631) {
				yyv3631 = append(yyv3631, EndpointAddress{}) // var yyz3631 EndpointAddress
				yyc3631 = true
			}
			yyh3631.ElemContainerState(yyj3631)
			if yyj3631 < len(yyv3631) {
				if r.TryDecodeAsNil() {
					yyv3631[yyj3631] = EndpointAddress{}
				} else {
					yyv3634 := &yyv3631[yyj3631]
					yyv3634.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3631 < len(yyv3631) {
			yyv3631 = yyv3631[:yyj3631]
			yyc3631 = true
		} else if yyj3631 == 0 && yyv3631 == nil {
			yyv3631 = []EndpointAddress{}
			yyc3631 = true
		}
	}
	yyh3631.End()
	if yyc3631 {
		*v = yyv3631
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3635 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3636 := &yyv3635
		yy3636.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3637 := *v
	yyh3637, yyl3637 := z.DecSliceHelperStart()
	var yyc3637 bool
	if yyl3637 == 0 {
		if yyv3637 == nil {
			yyv3637 = []EndpointPort{}
			yyc3637 = true
		} else if len(yyv3637) != 0 {
			yyv3637 = yyv3637[:0]
			yyc3637 = true
		}
	} else if yyl3637 > 0 {
		var yyrr3637, yyrl3637 int
		var yyrt3637 bool
		if yyl3637 > cap(yyv3637) {

			yyrg3637 := len(yyv3637) > 0
			yyv23637 := yyv3637
			yyrl3637, yyrt3637 = z.DecInferLen(yyl3637, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3637 {
				if yyrl3637 <= cap(yyv3637) {
					yyv3637 = yyv3637[:yyrl3637]
				} else {
					yyv3637 = make([]EndpointPort, yyrl3637)
				}
			} else {
				yyv3637 = make([]EndpointPort, yyrl3637)
			}
			yyc3637 = true
			yyrr3637 = len(yyv3637)
			if yyrg3637 {
				copy(yyv3637, yyv23637)
			}
		} else if yyl3637 != len(yyv3637) {
			yyv3637 = yyv3637[:yyl3637]
			yyc3637 = true
		}
		yyj3637 := 0
		for ; yyj3637 < yyrr3637; yyj3637++ {
			yyh3637.ElemContainerState(yyj3637)
			if r.TryDecodeAsNil() {
				yyv3637[yyj3637] = EndpointPort{}
			} else {
				yyv3638 := &yyv3637[yyj3637]
				yyv3638.CodecDecodeSelf(d)
			}

		}
		if yyrt3637 {
			for ; yyj3637 < yyl3637; yyj3637++ {
				yyv3637 = append(yyv3637, EndpointPort{})
				yyh3637.ElemContainerState(yyj3637)
				if r.TryDecodeAsNil() {
					yyv3637[yyj3637] = EndpointPort{}
				} else {
					yyv3639 := &yyv3637[yyj3637]
					yyv3639.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3637 := 0
		for ; !r.CheckBreak(); yyj3637++ {

			if yyj3637 >= len(yyv3637) {
				yyv3637 = append(yyv3637, EndpointPort{}) // var yyz3637 EndpointPort
				yyc3637 = true
			}
			yyh3637.ElemContainerState(yyj3637)
			if yyj3637 < len(yyv3637) {
				if r.TryDecodeAsNil() {
					yyv3637[yyj3637] = EndpointPort{}
				} else {
					yyv3640 := &yyv3637[yyj3637]
					yyv3640.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3637 < len(yyv3637) {
			yyv3637 = yyv3637[:yyj3637]
			yyc3637 = true
		} else if yyj3637 == 0 && yyv3637 == nil {
			yyv3637 = []EndpointPort{}
			yyc3637 = true
		}
	}
	yyh3637.End()
	if yyc3637 {
		*v = yyv3637
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3641 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3642 := &yyv3641
		yy3642.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3643 := *v
	yyh3643, yyl3643 := z.DecSliceHelperStart()
	var yyc3643 bool
	if yyl3643 == 0 {
		if yyv3643 == nil {
			yyv3643 = []Endpoints{}
			yyc3643 = true
		} else if len(yyv3643) != 0 {
			yyv3643 = yyv3643[:0]
			yyc3643 = true
		}
	} else if yyl3643 > 0 {
		var yyrr3643, yyrl3643 int
		var yyrt3643 bool
		if yyl3643 > cap(yyv3643) {

			yyrg3643 := len(yyv3643) > 0
			yyv23643 := yyv3643
			yyrl3643, yyrt3643 = z.DecInferLen(yyl3643, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3643 {
				if yyrl3643 <= cap(yyv3643) {
					yyv3643 = yyv3643[:yyrl3643]
				} else {
					yyv3643 = make([]Endpoints, yyrl3643)
				}
			} else {
				yyv3643 = make([]Endpoints, yyrl3643)
			}
			yyc3643 = true
			yyrr3643 = len(yyv3643)
			if yyrg3643 {
				copy(yyv3643, yyv23643)
			}
		} else if yyl3643 != len(yyv3643) {
			yyv3643 = yyv3643[:yyl3643]
			yyc3643 = true
		}
		yyj3643 := 0
		for ; yyj3643 < yyrr3643; yyj3643++ {
			yyh3643.ElemContainerState(yyj3643)
			if r.TryDecodeAsNil() {
				yyv3643[yyj3643] = Endpoints{}
			} else {
				yyv3644 := &yyv3643[yyj3643]
				yyv3644.CodecDecodeSelf(d)
			}

		}
		if yyrt3643 {
			for ; yyj3643 < yyl3643; yyj3643++ {
				yyv3643 = append(yyv3643, Endpoints{})
				yyh3643.ElemContainerState(yyj3643)
				if r.TryDecodeAsNil() {
					yyv3643[yyj3643] = Endpoints{}
				} else {
					yyv3645 := &yyv3643[yyj3643]
					yyv3645.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3643 := 0
		for ; !r.CheckBreak(); yyj3643++ {

			if yyj3643 >= len(yyv3643) {
				yyv3643 = append(yyv3643, Endpoints{}) // var yyz3643 Endpoints
				yyc3643 = true
			}
			yyh3643.ElemContainerState(yyj3643)
			if yyj3643 < len(yyv3643) {
				if r.TryDecodeAsNil() {
					yyv3643[yyj3643] = Endpoints{}
				} else {
					yyv3646 := &yyv3643[yyj3643]
					yyv3646.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3643 < len(yyv3643) {
			yyv3643 = yyv3643[:yyj3643]
			yyc3643 = true
		} else if yyj3643 == 0 && yyv3643 == nil {
			yyv3643 = []Endpoints{}
			yyc3643 = true
		}
	}
	yyh3643.End()
	if yyc3643 {
		*v = yyv3643
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3647 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3648 := &yyv3647
		yy3648.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3649 := *v
	yyh3649, yyl3649 := z.DecSliceHelperStart()
	var yyc3649 bool
	if yyl3649 == 0 {
		if yyv3649 == nil {
			yyv3649 = []NodeCondition{}
			yyc3649 = true
		} else if len(yyv3649) != 0 {
			yyv3649 = yyv3649[:0]
			yyc3649 = true
		}
	} else if yyl3649 > 0 {
		var yyrr3649, yyrl3649 int
		var yyrt3649 bool
		if yyl3649 > cap(yyv3649) {

			yyrg3649 := len(yyv3649) > 0
			yyv23649 := yyv3649
			yyrl3649, yyrt3649 = z.DecInferLen(yyl3649, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3649 {
				if yyrl3649 <= cap(yyv3649) {
					yyv3649 = yyv3649[:yyrl3649]
				} else {
					yyv3649 = make([]NodeCondition, yyrl3649)
				}
			} else {
				yyv3649 = make([]NodeCondition, yyrl3649)
			}
			yyc3649 = true
			yyrr3649 = len(yyv3649)
			if yyrg3649 {
				copy(yyv3649, yyv23649)
			}
		} else if yyl3649 != len(yyv3649) {
			yyv3649 = yyv3649[:yyl3649]
			yyc3649 = true
		}
		yyj3649 := 0
		for ; yyj3649 < yyrr3649; yyj3649++ {
			yyh3649.ElemContainerState(yyj3649)
			if r.TryDecodeAsNil() {
				yyv3649[yyj3649] = NodeCondition{}
			} else {
				yyv3650 := &yyv3649[yyj3649]
				yyv3650.CodecDecodeSelf(d)
			}

		}
		if yyrt3649 {
			for ; yyj3649 < yyl3649; yyj3649++ {
				yyv3649 = append(yyv3649, NodeCondition{})
				yyh3649.ElemContainerState(yyj3649)
				if r.TryDecodeAsNil() {
					yyv3649[yyj3649] = NodeCondition{}
				} else {
					yyv3651 := &yyv3649[yyj3649]
					yyv3651.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3649 := 0
		for ; !r.CheckBreak(); yyj3649++ {

			if yyj3649 >= len(yyv3649) {
				yyv3649 = append(yyv3649, NodeCondition{}) // var yyz3649 NodeCondition
				yyc3649 = true
			}
			yyh3649.ElemContainerState(yyj3649)
			if yyj3649 < len(yyv3649) {
				if r.TryDecodeAsNil() {
					yyv3649[yyj3649] = NodeCondition{}
				} else {
					yyv3652 := &yyv3649[yyj3649]
					yyv3652.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3649 < len(yyv3649) {
			yyv3649 = yyv3649[:yyj3649]
			yyc3649 = true
		} else if yyj3649 == 0 && yyv3649 == nil {
			yyv3649 = []NodeCondition{}
			yyc3649 = true
		}
	}
	yyh3649.End()
	if yyc3649 {
		*v = yyv3649
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3653 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3654 := &yyv3653
		yy3654.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3655 := *v
	yyh3655, yyl3655 := z.DecSliceHelperStart()
	var yyc3655 bool
	if yyl3655 == 0 {
		if yyv3655 == nil {
			yyv3655 = []NodeAddress{}
			yyc3655 = true
		} else if len(yyv3655) != 0 {
			yyv3655 = yyv3655[:0]
			yyc3655 = true
		}
	} else if yyl3655 > 0 {
		var yyrr3655, yyrl3655 int
		var yyrt3655 bool
		if yyl3655 > cap(yyv3655) {

			yyrg3655 := len(yyv3655) > 0
			yyv23655 := yyv3655
			yyrl3655, yyrt3655 = z.DecInferLen(yyl3655, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3655 {
				if yyrl3655 <= cap(yyv3655) {
					yyv3655 = yyv3655[:yyrl3655]
				} else {
					yyv3655 = make([]NodeAddress, yyrl3655)
				}
			} else {
				yyv3655 = make([]NodeAddress, yyrl3655)
			}
			yyc3655 = true
			yyrr3655 = len(yyv3655)
			if yyrg3655 {
				copy(yyv3655, yyv23655)
			}
		} else if yyl3655 != len(yyv3655) {
			yyv3655 = yyv3655[:yyl3655]
			yyc3655 = true
		}
		yyj3655 := 0
		for ; yyj3655 < yyrr3655; yyj3655++ {
			yyh3655.ElemContainerState(yyj3655)
			if r.TryDecodeAsNil() {
				yyv3655[yyj3655] = NodeAddress{}
			} else {
				yyv3656 := &yyv3655[yyj3655]
				yyv3656.CodecDecodeSelf(d)
			}

		}
		if yyrt3655 {
			for ; yyj3655 < yyl3655; yyj3655++ {
				yyv3655 = append(yyv3655, NodeAddress{})
				yyh3655.ElemContainerState(yyj3655)
				if r.TryDecodeAsNil() {
					yyv3655[yyj3655] = NodeAddress{}
				} else {
					yyv3657 := &yyv3655[yyj3655]
					yyv3657.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3655 := 0
		for ; !r.CheckBreak(); yyj3655++ {

			if yyj3655 >= len(yyv3655) {
				yyv3655 = append(yyv3655, NodeAddress{}) // var yyz3655 NodeAddress
				yyc3655 = true
			}
			yyh3655.ElemContainerState(yyj3655)
			if yyj3655 < len(yyv3655) {
				if r.TryDecodeAsNil() {
					yyv3655[yyj3655] = NodeAddress{}
				} else {
					yyv3658 := &yyv3655[yyj3655]
					yyv3658.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3655 < len(yyv3655) {
			yyv3655 = yyv3655[:yyj3655]
			yyc3655 = true
		} else if yyj3655 == 0 && yyv3655 == nil {
			yyv3655 = []NodeAddress{}
			yyc3655 = true
		}
	}
	yyh3655.End()
	if yyc3655 {
		*v = yyv3655
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3659, yyv3659 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk3659.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy3660 := &yyv3659
		yym3661 := z.EncBinary()
		_ = yym3661
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3660) {
		} else if !yym3661 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3660)
		} else {
			z.EncFallback(yy3660)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3662 := *v
	yyl3662 := r.ReadMapStart()
	yybh3662 := z.DecBasicHandle()
	if yyv3662 == nil {
		yyrl3662, _ := z.DecInferLen(yyl3662, yybh3662.MaxInitLen, 40)
		yyv3662 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3662)
		*v = yyv3662
	}
	var yymk3662 ResourceName
	var yymv3662 pkg3_resource.Quantity
	var yymg3662 bool
	if yybh3662.MapValueReset {
		yymg3662 = true
	}
	if yyl3662 > 0 {
		for yyj3662 := 0; yyj3662 < yyl3662; yyj3662++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3662 = ""
			} else {
				yymk3662 = ResourceName(r.DecodeString())
			}

			if yymg3662 {
				yymv3662 = yyv3662[yymk3662]
			} else {
				yymv3662 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3662 = pkg3_resource.Quantity{}
			} else {
				yyv3664 := &yymv3662
				yym3665 := z.DecBinary()
				_ = yym3665
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3664) {
				} else if !yym3665 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3664)
				} else {
					z.DecFallback(yyv3664, false)
				}
			}

			if yyv3662 != nil {
				yyv3662[yymk3662] = yymv3662
			}
		}
	} else if yyl3662 < 0 {
		for yyj3662 := 0; !r.CheckBreak(); yyj3662++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3662 = ""
			} else {
				yymk3662 = ResourceName(r.DecodeString())
			}

			if yymg3662 {
				yymv3662 = yyv3662[yymk3662]
			} else {
				yymv3662 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3662 = pkg3_resource.Quantity{}
			} else {
				yyv3667 := &yymv3662
				yym3668 := z.DecBinary()
				_ = yym3668
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3667) {
				} else if !yym3668 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3667)
				} else {
					z.DecFallback(yyv3667, false)
				}
			}

			if yyv3662 != nil {
				yyv3662[yymk3662] = yymv3662
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3669 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3670 := &yyv3669
		yy3670.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3671 := *v
	yyh3671, yyl3671 := z.DecSliceHelperStart()
	var yyc3671 bool
	if yyl3671 == 0 {
		if yyv3671 == nil {
			yyv3671 = []Node{}
			yyc3671 = true
		} else if len(yyv3671) != 0 {
			yyv3671 = yyv3671[:0]
			yyc3671 = true
		}
	} else if yyl3671 > 0 {
		var yyrr3671, yyrl3671 int
		var yyrt3671 bool
		if yyl3671 > cap(yyv3671) {

			yyrg3671 := len(yyv3671) > 0
			yyv23671 := yyv3671
			yyrl3671, yyrt3671 = z.DecInferLen(yyl3671, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt3671 {
				if yyrl3671 <= cap(yyv3671) {
					yyv3671 = yyv3671[:yyrl3671]
				} else {
					yyv3671 = make([]Node, yyrl3671)
				}
			} else {
				yyv3671 = make([]Node, yyrl3671)
			}
			yyc3671 = true
			yyrr3671 = len(yyv3671)
			if yyrg3671 {
				copy(yyv3671, yyv23671)
			}
		} else if yyl3671 != len(yyv3671) {
			yyv3671 = yyv3671[:yyl3671]
			yyc3671 = true
		}
		yyj3671 := 0
		for ; yyj3671 < yyrr3671; yyj3671++ {
			yyh3671.ElemContainerState(yyj3671)
			if r.TryDecodeAsNil() {
				yyv3671[yyj3671] = Node{}
			} else {
				yyv3672 := &yyv3671[yyj3671]
				yyv3672.CodecDecodeSelf(d)
			}

		}
		if yyrt3671 {
			for ; yyj3671 < yyl3671; yyj3671++ {
				yyv3671 = append(yyv3671, Node{})
				yyh3671.ElemContainerState(yyj3671)
				if r.TryDecodeAsNil() {
					yyv3671[yyj3671] = Node{}
				} else {
					yyv3673 := &yyv3671[yyj3671]
					yyv3673.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3671 := 0
		for ; !r.CheckBreak(); yyj3671++ {

			if yyj3671 >= len(yyv3671) {
				yyv3671 = append(yyv3671, Node{}) // var yyz3671 Node
				yyc3671 = true
			}
			yyh3671.ElemContainerState(yyj3671)
			if yyj3671 < len(yyv3671) {
				if r.TryDecodeAsNil() {
					yyv3671[yyj3671] = Node{}
				} else {
					yyv3674 := &yyv3671[yyj3671]
					yyv3674.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3671 < len(yyv3671) {
			yyv3671 = yyv3671[:yyj3671]
			yyc3671 = true
		} else if yyj3671 == 0 && yyv3671 == nil {
			yyv3671 = []Node{}
			yyc3671 = true
		}
	}
	yyh3671.End()
	if yyc3671 {
		*v = yyv3671
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3675 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3675.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3676 := *v
	yyh3676, yyl3676 := z.DecSliceHelperStart()
	var yyc3676 bool
	if yyl3676 == 0 {
		if yyv3676 == nil {
			yyv3676 = []FinalizerName{}
			yyc3676 = true
		} else if len(yyv3676) != 0 {
			yyv3676 = yyv3676[:0]
			yyc3676 = true
		}
	} else if yyl3676 > 0 {
		var yyrr3676, yyrl3676 int
		var yyrt3676 bool
		if yyl3676 > cap(yyv3676) {

			yyrl3676, yyrt3676 = z.DecInferLen(yyl3676, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3676 {
				if yyrl3676 <= cap(yyv3676) {
					yyv3676 = yyv3676[:yyrl3676]
				} else {
					yyv3676 = make([]FinalizerName, yyrl3676)
				}
			} else {
				yyv3676 = make([]FinalizerName, yyrl3676)
			}
			yyc3676 = true
			yyrr3676 = len(yyv3676)
		} else if yyl3676 != len(yyv3676) {
			yyv3676 = yyv3676[:yyl3676]
			yyc3676 = true
		}
		yyj3676 := 0
		for ; yyj3676 < yyrr3676; yyj3676++ {
			yyh3676.ElemContainerState(yyj3676)
			if r.TryDecodeAsNil() {
				yyv3676[yyj3676] = ""
			} else {
				yyv3676[yyj3676] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3676 {
			for ; yyj3676 < yyl3676; yyj3676++ {
				yyv3676 = append(yyv3676, "")
				yyh3676.ElemContainerState(yyj3676)
				if r.TryDecodeAsNil() {
					yyv3676[yyj3676] = ""
				} else {
					yyv3676[yyj3676] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj3676 := 0
		for ; !r.CheckBreak(); yyj3676++ {

			if yyj3676 >= len(yyv3676) {
				yyv3676 = append(yyv3676, "") // var yyz3676 FinalizerName
				yyc3676 = true
			}
			yyh3676.ElemContainerState(yyj3676)
			if yyj3676 < len(yyv3676) {
				if r.TryDecodeAsNil() {
					yyv3676[yyj3676] = ""
				} else {
					yyv3676[yyj3676] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3676 < len(yyv3676) {
			yyv3676 = yyv3676[:yyj3676]
			yyc3676 = true
		} else if yyj3676 == 0 && yyv3676 == nil {
			yyv3676 = []FinalizerName{}
			yyc3676 = true
		}
	}
	yyh3676.End()
	if yyc3676 {
		*v = yyv3676
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3680 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3681 := &yyv3680
		yy3681.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3682 := *v
	yyh3682, yyl3682 := z.DecSliceHelperStart()
	var yyc3682 bool
	if yyl3682 == 0 {
		if yyv3682 == nil {
			yyv3682 = []Namespace{}
			yyc3682 = true
		} else if len(yyv3682) != 0 {
			yyv3682 = yyv3682[:0]
			yyc3682 = true
		}
	} else if yyl3682 > 0 {
		var yyrr3682, yyrl3682 int
		var yyrt3682 bool
		if yyl3682 > cap(yyv3682) {

			yyrg3682 := len(yyv3682) > 0
			yyv23682 := yyv3682
			yyrl3682, yyrt3682 = z.DecInferLen(yyl3682, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3682 {
				if yyrl3682 <= cap(yyv3682) {
					yyv3682 = yyv3682[:yyrl3682]
				} else {
					yyv3682 = make([]Namespace, yyrl3682)
				}
			} else {
				yyv3682 = make([]Namespace, yyrl3682)
			}
			yyc3682 = true
			yyrr3682 = len(yyv3682)
			if yyrg3682 {
				copy(yyv3682, yyv23682)
			}
		} else if yyl3682 != len(yyv3682) {
			yyv3682 = yyv3682[:yyl3682]
			yyc3682 = true
		}
		yyj3682 := 0
		for ; yyj3682 < yyrr3682; yyj3682++ {
			yyh3682.ElemContainerState(yyj3682)
			if r.TryDecodeAsNil() {
				yyv3682[yyj3682] = Namespace{}
			} else {
				yyv3683 := &yyv3682[yyj3682]
				yyv3683.CodecDecodeSelf(d)
			}

		}
		if yyrt3682 {
			for ; yyj3682 < yyl3682; yyj3682++ {
				yyv3682 = append(yyv3682, Namespace{})
				yyh3682.ElemContainerState(yyj3682)
				if r.TryDecodeAsNil() {
					yyv3682[yyj3682] = Namespace{}
				} else {
					yyv3684 := &yyv3682[yyj3682]
					yyv3684.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3682 := 0
		for ; !r.CheckBreak(); yyj3682++ {

			if yyj3682 >= len(yyv3682) {
				yyv3682 = append(yyv3682, Namespace{}) // var yyz3682 Namespace
				yyc3682 = true
			}
			yyh3682.ElemContainerState(yyj3682)
			if yyj3682 < len(yyv3682) {
				if r.TryDecodeAsNil() {
					yyv3682[yyj3682] = Namespace{}
				} else {
					yyv3685 := &yyv3682[yyj3682]
					yyv3685.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3682 < len(yyv3682) {
			yyv3682 = yyv3682[:yyj3682]
			yyc3682 = true
		} else if yyj3682 == 0 && yyv3682 == nil {
			yyv3682 = []Namespace{}
			yyc3682 = true
		}
	}
	yyh3682.End()
	if yyc3682 {
		*v = yyv3682
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3686 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3687 := &yyv3686
		yy3687.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3688 := *v
	yyh3688, yyl3688 := z.DecSliceHelperStart()
	var yyc3688 bool
	if yyl3688 == 0 {
		if yyv3688 == nil {
			yyv3688 = []Event{}
			yyc3688 = true
		} else if len(yyv3688) != 0 {
			yyv3688 = yyv3688[:0]
			yyc3688 = true
		}
	} else if yyl3688 > 0 {
		var yyrr3688, yyrl3688 int
		var yyrt3688 bool
		if yyl3688 > cap(yyv3688) {

			yyrg3688 := len(yyv3688) > 0
			yyv23688 := yyv3688
			yyrl3688, yyrt3688 = z.DecInferLen(yyl3688, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt3688 {
				if yyrl3688 <= cap(yyv3688) {
					yyv3688 = yyv3688[:yyrl3688]
				} else {
					yyv3688 = make([]Event, yyrl3688)
				}
			} else {
				yyv3688 = make([]Event, yyrl3688)
			}
			yyc3688 = true
			yyrr3688 = len(yyv3688)
			if yyrg3688 {
				copy(yyv3688, yyv23688)
			}
		} else if yyl3688 != len(yyv3688) {
			yyv3688 = yyv3688[:yyl3688]
			yyc3688 = true
		}
		yyj3688 := 0
		for ; yyj3688 < yyrr3688; yyj3688++ {
			yyh3688.ElemContainerState(yyj3688)
			if r.TryDecodeAsNil() {
				yyv3688[yyj3688] = Event{}
			} else {
				yyv3689 := &yyv3688[yyj3688]
				yyv3689.CodecDecodeSelf(d)
			}

		}
		if yyrt3688 {
			for ; yyj3688 < yyl3688; yyj3688++ {
				yyv3688 = append(yyv3688, Event{})
				yyh3688.ElemContainerState(yyj3688)
				if r.TryDecodeAsNil() {
					yyv3688[yyj3688] = Event{}
				} else {
					yyv3690 := &yyv3688[yyj3688]
					yyv3690.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3688 := 0
		for ; !r.CheckBreak(); yyj3688++ {

			if yyj3688 >= len(yyv3688) {
				yyv3688 = append(yyv3688, Event{}) // var yyz3688 Event
				yyc3688 = true
			}
			yyh3688.ElemContainerState(yyj3688)
			if yyj3688 < len(yyv3688) {
				if r.TryDecodeAsNil() {
					yyv3688[yyj3688] = Event{}
				} else {
					yyv3691 := &yyv3688[yyj3688]
					yyv3691.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3688 < len(yyv3688) {
			yyv3688 = yyv3688[:yyj3688]
			yyc3688 = true
		} else if yyj3688 == 0 && yyv3688 == nil {
			yyv3688 = []Event{}
			yyc3688 = true
		}
	}
	yyh3688.End()
	if yyc3688 {
		*v = yyv3688
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg8_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3692 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv3692 == nil {
			r.EncodeNil()
		} else {
			yym3693 := z.EncBinary()
			_ = yym3693
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv3692) {
			} else {
				z.EncFallback(yyv3692)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg8_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3694 := *v
	yyh3694, yyl3694 := z.DecSliceHelperStart()
	var yyc3694 bool
	if yyl3694 == 0 {
		if yyv3694 == nil {
			yyv3694 = []pkg8_runtime.Object{}
			yyc3694 = true
		} else if len(yyv3694) != 0 {
			yyv3694 = yyv3694[:0]
			yyc3694 = true
		}
	} else if yyl3694 > 0 {
		var yyrr3694, yyrl3694 int
		var yyrt3694 bool
		if yyl3694 > cap(yyv3694) {

			yyrg3694 := len(yyv3694) > 0
			yyv23694 := yyv3694
			yyrl3694, yyrt3694 = z.DecInferLen(yyl3694, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3694 {
				if yyrl3694 <= cap(yyv3694) {
					yyv3694 = yyv3694[:yyrl3694]
				} else {
					yyv3694 = make([]pkg8_runtime.Object, yyrl3694)
				}
			} else {
				yyv3694 = make([]pkg8_runtime.Object, yyrl3694)
			}
			yyc3694 = true
			yyrr3694 = len(yyv3694)
			if yyrg3694 {
				copy(yyv3694, yyv23694)
			}
		} else if yyl3694 != len(yyv3694) {
			yyv3694 = yyv3694[:yyl3694]
			yyc3694 = true
		}
		yyj3694 := 0
		for ; yyj3694 < yyrr3694; yyj3694++ {
			yyh3694.ElemContainerState(yyj3694)
			if r.TryDecodeAsNil() {
				yyv3694[yyj3694] = nil
			} else {
				yyv3695 := &yyv3694[yyj3694]
				yym3696 := z.DecBinary()
				_ = yym3696
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3695) {
				} else {
					z.DecFallback(yyv3695, true)
				}
			}

		}
		if yyrt3694 {
			for ; yyj3694 < yyl3694; yyj3694++ {
				yyv3694 = append(yyv3694, nil)
				yyh3694.ElemContainerState(yyj3694)
				if r.TryDecodeAsNil() {
					yyv3694[yyj3694] = nil
				} else {
					yyv3697 := &yyv3694[yyj3694]
					yym3698 := z.DecBinary()
					_ = yym3698
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3697) {
					} else {
						z.DecFallback(yyv3697, true)
					}
				}

			}
		}

	} else {
		yyj3694 := 0
		for ; !r.CheckBreak(); yyj3694++ {

			if yyj3694 >= len(yyv3694) {
				yyv3694 = append(yyv3694, nil) // var yyz3694 pkg8_runtime.Object
				yyc3694 = true
			}
			yyh3694.ElemContainerState(yyj3694)
			if yyj3694 < len(yyv3694) {
				if r.TryDecodeAsNil() {
					yyv3694[yyj3694] = nil
				} else {
					yyv3699 := &yyv3694[yyj3694]
					yym3700 := z.DecBinary()
					_ = yym3700
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3699) {
					} else {
						z.DecFallback(yyv3699, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3694 < len(yyv3694) {
			yyv3694 = yyv3694[:yyj3694]
			yyc3694 = true
		} else if yyj3694 == 0 && yyv3694 == nil {
			yyv3694 = []pkg8_runtime.Object{}
			yyc3694 = true
		}
	}
	yyh3694.End()
	if yyc3694 {
		*v = yyv3694
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3701 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3702 := &yyv3701
		yy3702.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3703 := *v
	yyh3703, yyl3703 := z.DecSliceHelperStart()
	var yyc3703 bool
	if yyl3703 == 0 {
		if yyv3703 == nil {
			yyv3703 = []LimitRangeItem{}
			yyc3703 = true
		} else if len(yyv3703) != 0 {
			yyv3703 = yyv3703[:0]
			yyc3703 = true
		}
	} else if yyl3703 > 0 {
		var yyrr3703, yyrl3703 int
		var yyrt3703 bool
		if yyl3703 > cap(yyv3703) {

			yyrg3703 := len(yyv3703) > 0
			yyv23703 := yyv3703
			yyrl3703, yyrt3703 = z.DecInferLen(yyl3703, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3703 {
				if yyrl3703 <= cap(yyv3703) {
					yyv3703 = yyv3703[:yyrl3703]
				} else {
					yyv3703 = make([]LimitRangeItem, yyrl3703)
				}
			} else {
				yyv3703 = make([]LimitRangeItem, yyrl3703)
			}
			yyc3703 = true
			yyrr3703 = len(yyv3703)
			if yyrg3703 {
				copy(yyv3703, yyv23703)
			}
		} else if yyl3703 != len(yyv3703) {
			yyv3703 = yyv3703[:yyl3703]
			yyc3703 = true
		}
		yyj3703 := 0
		for ; yyj3703 < yyrr3703; yyj3703++ {
			yyh3703.ElemContainerState(yyj3703)
			if r.TryDecodeAsNil() {
				yyv3703[yyj3703] = LimitRangeItem{}
			} else {
				yyv3704 := &yyv3703[yyj3703]
				yyv3704.CodecDecodeSelf(d)
			}

		}
		if yyrt3703 {
			for ; yyj3703 < yyl3703; yyj3703++ {
				yyv3703 = append(yyv3703, LimitRangeItem{})
				yyh3703.ElemContainerState(yyj3703)
				if r.TryDecodeAsNil() {
					yyv3703[yyj3703] = LimitRangeItem{}
				} else {
					yyv3705 := &yyv3703[yyj3703]
					yyv3705.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3703 := 0
		for ; !r.CheckBreak(); yyj3703++ {

			if yyj3703 >= len(yyv3703) {
				yyv3703 = append(yyv3703, LimitRangeItem{}) // var yyz3703 LimitRangeItem
				yyc3703 = true
			}
			yyh3703.ElemContainerState(yyj3703)
			if yyj3703 < len(yyv3703) {
				if r.TryDecodeAsNil() {
					yyv3703[yyj3703] = LimitRangeItem{}
				} else {
					yyv3706 := &yyv3703[yyj3703]
					yyv3706.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3703 < len(yyv3703) {
			yyv3703 = yyv3703[:yyj3703]
			yyc3703 = true
		} else if yyj3703 == 0 && yyv3703 == nil {
			yyv3703 = []LimitRangeItem{}
			yyc3703 = true
		}
	}
	yyh3703.End()
	if yyc3703 {
		*v = yyv3703
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3707 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3708 := &yyv3707
		yy3708.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3709 := *v
	yyh3709, yyl3709 := z.DecSliceHelperStart()
	var yyc3709 bool
	if yyl3709 == 0 {
		if yyv3709 == nil {
			yyv3709 = []LimitRange{}
			yyc3709 = true
		} else if len(yyv3709) != 0 {
			yyv3709 = yyv3709[:0]
			yyc3709 = true
		}
	} else if yyl3709 > 0 {
		var yyrr3709, yyrl3709 int
		var yyrt3709 bool
		if yyl3709 > cap(yyv3709) {

			yyrg3709 := len(yyv3709) > 0
			yyv23709 := yyv3709
			yyrl3709, yyrt3709 = z.DecInferLen(yyl3709, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3709 {
				if yyrl3709 <= cap(yyv3709) {
					yyv3709 = yyv3709[:yyrl3709]
				} else {
					yyv3709 = make([]LimitRange, yyrl3709)
				}
			} else {
				yyv3709 = make([]LimitRange, yyrl3709)
			}
			yyc3709 = true
			yyrr3709 = len(yyv3709)
			if yyrg3709 {
				copy(yyv3709, yyv23709)
			}
		} else if yyl3709 != len(yyv3709) {
			yyv3709 = yyv3709[:yyl3709]
			yyc3709 = true
		}
		yyj3709 := 0
		for ; yyj3709 < yyrr3709; yyj3709++ {
			yyh3709.ElemContainerState(yyj3709)
			if r.TryDecodeAsNil() {
				yyv3709[yyj3709] = LimitRange{}
			} else {
				yyv3710 := &yyv3709[yyj3709]
				yyv3710.CodecDecodeSelf(d)
			}

		}
		if yyrt3709 {
			for ; yyj3709 < yyl3709; yyj3709++ {
				yyv3709 = append(yyv3709, LimitRange{})
				yyh3709.ElemContainerState(yyj3709)
				if r.TryDecodeAsNil() {
					yyv3709[yyj3709] = LimitRange{}
				} else {
					yyv3711 := &yyv3709[yyj3709]
					yyv3711.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3709 := 0
		for ; !r.CheckBreak(); yyj3709++ {

			if yyj3709 >= len(yyv3709) {
				yyv3709 = append(yyv3709, LimitRange{}) // var yyz3709 LimitRange
				yyc3709 = true
			}
			yyh3709.ElemContainerState(yyj3709)
			if yyj3709 < len(yyv3709) {
				if r.TryDecodeAsNil() {
					yyv3709[yyj3709] = LimitRange{}
				} else {
					yyv3712 := &yyv3709[yyj3709]
					yyv3712.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3709 < len(yyv3709) {
			yyv3709 = yyv3709[:yyj3709]
			yyc3709 = true
		} else if yyj3709 == 0 && yyv3709 == nil {
			yyv3709 = []LimitRange{}
			yyc3709 = true
		}
	}
	yyh3709.End()
	if yyc3709 {
		*v = yyv3709
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3713 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3714 := &yyv3713
		yy3714.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3715 := *v
	yyh3715, yyl3715 := z.DecSliceHelperStart()
	var yyc3715 bool
	if yyl3715 == 0 {
		if yyv3715 == nil {
			yyv3715 = []ResourceQuota{}
			yyc3715 = true
		} else if len(yyv3715) != 0 {
			yyv3715 = yyv3715[:0]
			yyc3715 = true
		}
	} else if yyl3715 > 0 {
		var yyrr3715, yyrl3715 int
		var yyrt3715 bool
		if yyl3715 > cap(yyv3715) {

			yyrg3715 := len(yyv3715) > 0
			yyv23715 := yyv3715
			yyrl3715, yyrt3715 = z.DecInferLen(yyl3715, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3715 {
				if yyrl3715 <= cap(yyv3715) {
					yyv3715 = yyv3715[:yyrl3715]
				} else {
					yyv3715 = make([]ResourceQuota, yyrl3715)
				}
			} else {
				yyv3715 = make([]ResourceQuota, yyrl3715)
			}
			yyc3715 = true
			yyrr3715 = len(yyv3715)
			if yyrg3715 {
				copy(yyv3715, yyv23715)
			}
		} else if yyl3715 != len(yyv3715) {
			yyv3715 = yyv3715[:yyl3715]
			yyc3715 = true
		}
		yyj3715 := 0
		for ; yyj3715 < yyrr3715; yyj3715++ {
			yyh3715.ElemContainerState(yyj3715)
			if r.TryDecodeAsNil() {
				yyv3715[yyj3715] = ResourceQuota{}
			} else {
				yyv3716 := &yyv3715[yyj3715]
				yyv3716.CodecDecodeSelf(d)
			}

		}
		if yyrt3715 {
			for ; yyj3715 < yyl3715; yyj3715++ {
				yyv3715 = append(yyv3715, ResourceQuota{})
				yyh3715.ElemContainerState(yyj3715)
				if r.TryDecodeAsNil() {
					yyv3715[yyj3715] = ResourceQuota{}
				} else {
					yyv3717 := &yyv3715[yyj3715]
					yyv3717.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3715 := 0
		for ; !r.CheckBreak(); yyj3715++ {

			if yyj3715 >= len(yyv3715) {
				yyv3715 = append(yyv3715, ResourceQuota{}) // var yyz3715 ResourceQuota
				yyc3715 = true
			}
			yyh3715.ElemContainerState(yyj3715)
			if yyj3715 < len(yyv3715) {
				if r.TryDecodeAsNil() {
					yyv3715[yyj3715] = ResourceQuota{}
				} else {
					yyv3718 := &yyv3715[yyj3715]
					yyv3718.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3715 < len(yyv3715) {
			yyv3715 = yyv3715[:yyj3715]
			yyc3715 = true
		} else if yyj3715 == 0 && yyv3715 == nil {
			yyv3715 = []ResourceQuota{}
			yyc3715 = true
		}
	}
	yyh3715.End()
	if yyc3715 {
		*v = yyv3715
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3719, yyv3719 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym3720 := z.EncBinary()
		_ = yym3720
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3719))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv3719 == nil {
			r.EncodeNil()
		} else {
			yym3721 := z.EncBinary()
			_ = yym3721
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3719))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3722 := *v
	yyl3722 := r.ReadMapStart()
	yybh3722 := z.DecBasicHandle()
	if yyv3722 == nil {
		yyrl3722, _ := z.DecInferLen(yyl3722, yybh3722.MaxInitLen, 40)
		yyv3722 = make(map[string][]uint8, yyrl3722)
		*v = yyv3722
	}
	var yymk3722 string
	var yymv3722 []uint8
	var yymg3722 bool
	if yybh3722.MapValueReset {
		yymg3722 = true
	}
	if yyl3722 > 0 {
		for yyj3722 := 0; yyj3722 < yyl3722; yyj3722++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3722 = ""
			} else {
				yymk3722 = string(r.DecodeString())
			}

			if yymg3722 {
				yymv3722 = yyv3722[yymk3722]
			} else {
				yymv3722 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3722 = nil
			} else {
				yyv3724 := &yymv3722
				yym3725 := z.DecBinary()
				_ = yym3725
				if false {
				} else {
					*yyv3724 = r.DecodeBytes(*(*[]byte)(yyv3724), false, false)
				}
			}

			if yyv3722 != nil {
				yyv3722[yymk3722] = yymv3722
			}
		}
	} else if yyl3722 < 0 {
		for yyj3722 := 0; !r.CheckBreak(); yyj3722++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3722 = ""
			} else {
				yymk3722 = string(r.DecodeString())
			}

			if yymg3722 {
				yymv3722 = yyv3722[yymk3722]
			} else {
				yymv3722 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3722 = nil
			} else {
				yyv3727 := &yymv3722
				yym3728 := z.DecBinary()
				_ = yym3728
				if false {
				} else {
					*yyv3727 = r.DecodeBytes(*(*[]byte)(yyv3727), false, false)
				}
			}

			if yyv3722 != nil {
				yyv3722[yymk3722] = yymv3722
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3729 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3730 := &yyv3729
		yy3730.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3731 := *v
	yyh3731, yyl3731 := z.DecSliceHelperStart()
	var yyc3731 bool
	if yyl3731 == 0 {
		if yyv3731 == nil {
			yyv3731 = []Secret{}
			yyc3731 = true
		} else if len(yyv3731) != 0 {
			yyv3731 = yyv3731[:0]
			yyc3731 = true
		}
	} else if yyl3731 > 0 {
		var yyrr3731, yyrl3731 int
		var yyrt3731 bool
		if yyl3731 > cap(yyv3731) {

			yyrg3731 := len(yyv3731) > 0
			yyv23731 := yyv3731
			yyrl3731, yyrt3731 = z.DecInferLen(yyl3731, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3731 {
				if yyrl3731 <= cap(yyv3731) {
					yyv3731 = yyv3731[:yyrl3731]
				} else {
					yyv3731 = make([]Secret, yyrl3731)
				}
			} else {
				yyv3731 = make([]Secret, yyrl3731)
			}
			yyc3731 = true
			yyrr3731 = len(yyv3731)
			if yyrg3731 {
				copy(yyv3731, yyv23731)
			}
		} else if yyl3731 != len(yyv3731) {
			yyv3731 = yyv3731[:yyl3731]
			yyc3731 = true
		}
		yyj3731 := 0
		for ; yyj3731 < yyrr3731; yyj3731++ {
			yyh3731.ElemContainerState(yyj3731)
			if r.TryDecodeAsNil() {
				yyv3731[yyj3731] = Secret{}
			} else {
				yyv3732 := &yyv3731[yyj3731]
				yyv3732.CodecDecodeSelf(d)
			}

		}
		if yyrt3731 {
			for ; yyj3731 < yyl3731; yyj3731++ {
				yyv3731 = append(yyv3731, Secret{})
				yyh3731.ElemContainerState(yyj3731)
				if r.TryDecodeAsNil() {
					yyv3731[yyj3731] = Secret{}
				} else {
					yyv3733 := &yyv3731[yyj3731]
					yyv3733.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3731 := 0
		for ; !r.CheckBreak(); yyj3731++ {

			if yyj3731 >= len(yyv3731) {
				yyv3731 = append(yyv3731, Secret{}) // var yyz3731 Secret
				yyc3731 = true
			}
			yyh3731.ElemContainerState(yyj3731)
			if yyj3731 < len(yyv3731) {
				if r.TryDecodeAsNil() {
					yyv3731[yyj3731] = Secret{}
				} else {
					yyv3734 := &yyv3731[yyj3731]
					yyv3734.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3731 < len(yyv3731) {
			yyv3731 = yyv3731[:yyj3731]
			yyc3731 = true
		} else if yyj3731 == 0 && yyv3731 == nil {
			yyv3731 = []Secret{}
			yyc3731 = true
		}
	}
	yyh3731.End()
	if yyc3731 {
		*v = yyv3731
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3735 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3736 := &yyv3735
		yy3736.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3737 := *v
	yyh3737, yyl3737 := z.DecSliceHelperStart()
	var yyc3737 bool
	if yyl3737 == 0 {
		if yyv3737 == nil {
			yyv3737 = []ComponentCondition{}
			yyc3737 = true
		} else if len(yyv3737) != 0 {
			yyv3737 = yyv3737[:0]
			yyc3737 = true
		}
	} else if yyl3737 > 0 {
		var yyrr3737, yyrl3737 int
		var yyrt3737 bool
		if yyl3737 > cap(yyv3737) {

			yyrg3737 := len(yyv3737) > 0
			yyv23737 := yyv3737
			yyrl3737, yyrt3737 = z.DecInferLen(yyl3737, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3737 {
				if yyrl3737 <= cap(yyv3737) {
					yyv3737 = yyv3737[:yyrl3737]
				} else {
					yyv3737 = make([]ComponentCondition, yyrl3737)
				}
			} else {
				yyv3737 = make([]ComponentCondition, yyrl3737)
			}
			yyc3737 = true
			yyrr3737 = len(yyv3737)
			if yyrg3737 {
				copy(yyv3737, yyv23737)
			}
		} else if yyl3737 != len(yyv3737) {
			yyv3737 = yyv3737[:yyl3737]
			yyc3737 = true
		}
		yyj3737 := 0
		for ; yyj3737 < yyrr3737; yyj3737++ {
			yyh3737.ElemContainerState(yyj3737)
			if r.TryDecodeAsNil() {
				yyv3737[yyj3737] = ComponentCondition{}
			} else {
				yyv3738 := &yyv3737[yyj3737]
				yyv3738.CodecDecodeSelf(d)
			}

		}
		if yyrt3737 {
			for ; yyj3737 < yyl3737; yyj3737++ {
				yyv3737 = append(yyv3737, ComponentCondition{})
				yyh3737.ElemContainerState(yyj3737)
				if r.TryDecodeAsNil() {
					yyv3737[yyj3737] = ComponentCondition{}
				} else {
					yyv3739 := &yyv3737[yyj3737]
					yyv3739.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3737 := 0
		for ; !r.CheckBreak(); yyj3737++ {

			if yyj3737 >= len(yyv3737) {
				yyv3737 = append(yyv3737, ComponentCondition{}) // var yyz3737 ComponentCondition
				yyc3737 = true
			}
			yyh3737.ElemContainerState(yyj3737)
			if yyj3737 < len(yyv3737) {
				if r.TryDecodeAsNil() {
					yyv3737[yyj3737] = ComponentCondition{}
				} else {
					yyv3740 := &yyv3737[yyj3737]
					yyv3740.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3737 < len(yyv3737) {
			yyv3737 = yyv3737[:yyj3737]
			yyc3737 = true
		} else if yyj3737 == 0 && yyv3737 == nil {
			yyv3737 = []ComponentCondition{}
			yyc3737 = true
		}
	}
	yyh3737.End()
	if yyc3737 {
		*v = yyv3737
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3741 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3742 := &yyv3741
		yy3742.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3743 := *v
	yyh3743, yyl3743 := z.DecSliceHelperStart()
	var yyc3743 bool
	if yyl3743 == 0 {
		if yyv3743 == nil {
			yyv3743 = []ComponentStatus{}
			yyc3743 = true
		} else if len(yyv3743) != 0 {
			yyv3743 = yyv3743[:0]
			yyc3743 = true
		}
	} else if yyl3743 > 0 {
		var yyrr3743, yyrl3743 int
		var yyrt3743 bool
		if yyl3743 > cap(yyv3743) {

			yyrg3743 := len(yyv3743) > 0
			yyv23743 := yyv3743
			yyrl3743, yyrt3743 = z.DecInferLen(yyl3743, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3743 {
				if yyrl3743 <= cap(yyv3743) {
					yyv3743 = yyv3743[:yyrl3743]
				} else {
					yyv3743 = make([]ComponentStatus, yyrl3743)
				}
			} else {
				yyv3743 = make([]ComponentStatus, yyrl3743)
			}
			yyc3743 = true
			yyrr3743 = len(yyv3743)
			if yyrg3743 {
				copy(yyv3743, yyv23743)
			}
		} else if yyl3743 != len(yyv3743) {
			yyv3743 = yyv3743[:yyl3743]
			yyc3743 = true
		}
		yyj3743 := 0
		for ; yyj3743 < yyrr3743; yyj3743++ {
			yyh3743.ElemContainerState(yyj3743)
			if r.TryDecodeAsNil() {
				yyv3743[yyj3743] = ComponentStatus{}
			} else {
				yyv3744 := &yyv3743[yyj3743]
				yyv3744.CodecDecodeSelf(d)
			}

		}
		if yyrt3743 {
			for ; yyj3743 < yyl3743; yyj3743++ {
				yyv3743 = append(yyv3743, ComponentStatus{})
				yyh3743.ElemContainerState(yyj3743)
				if r.TryDecodeAsNil() {
					yyv3743[yyj3743] = ComponentStatus{}
				} else {
					yyv3745 := &yyv3743[yyj3743]
					yyv3745.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3743 := 0
		for ; !r.CheckBreak(); yyj3743++ {

			if yyj3743 >= len(yyv3743) {
				yyv3743 = append(yyv3743, ComponentStatus{}) // var yyz3743 ComponentStatus
				yyc3743 = true
			}
			yyh3743.ElemContainerState(yyj3743)
			if yyj3743 < len(yyv3743) {
				if r.TryDecodeAsNil() {
					yyv3743[yyj3743] = ComponentStatus{}
				} else {
					yyv3746 := &yyv3743[yyj3743]
					yyv3746.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3743 < len(yyv3743) {
			yyv3743 = yyv3743[:yyj3743]
			yyc3743 = true
		} else if yyj3743 == 0 && yyv3743 == nil {
			yyv3743 = []ComponentStatus{}
			yyc3743 = true
		}
	}
	yyh3743.End()
	if yyc3743 {
		*v = yyv3743
	}
}
