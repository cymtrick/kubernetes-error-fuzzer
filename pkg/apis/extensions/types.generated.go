/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package extensions

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.TypeMeta
		var v3 pkg3_types.UID
		var v4 pkg6_intstr.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv24 := &x.Selector
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv28 := &x.Selector
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			var yynn31 int
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				yynn31 = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
				yynn31 = 0
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yy39.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy40 := &x.ObjectMeta
					yy40.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[3] {
					yy42 := &x.Spec
					yy42.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy43 := &x.Spec
					yy43.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[4] {
					yy45 := &x.Status
					yy45.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy46 := &x.Status
					yy46.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym47 := z.DecBinary()
	_ = yym47
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct48 := r.ContainerType()
		if yyct48 == codecSelferValueTypeMap1234 {
			yyl48 := r.ReadMapStart()
			if yyl48 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl48, d)
			}
		} else if yyct48 == codecSelferValueTypeArray1234 {
			yyl48 := r.ReadArrayStart()
			if yyl48 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl48, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys49Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys49Slc
	var yyhl49 bool = l >= 0
	for yyj49 := 0; ; yyj49++ {
		if yyhl49 {
			if yyj49 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys49Slc = r.DecodeBytes(yys49Slc, true, true)
		yys49 := string(yys49Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys49 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv52 := &x.ObjectMeta
				yyv52.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv53 := &x.Spec
				yyv53.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv54 := &x.Status
				yyv54.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys49)
		} // end switch yys49
	} // end for yyj49
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj55 int
	var yyb55 bool
	var yyhl55 bool = l >= 0
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv58 := &x.ObjectMeta
		yyv58.CodecDecodeSelf(d)
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv59 := &x.Spec
		yyv59.CodecDecodeSelf(d)
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv60 := &x.Status
		yyv60.CodecDecodeSelf(d)
	}
	for {
		yyj55++
		if yyhl55 {
			yyb55 = yyj55 > l
		} else {
			yyb55 = r.CheckBreak()
		}
		if yyb55 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj55-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym61 := z.EncBinary()
		_ = yym61
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep62 := !z.EncBinary()
			yy2arr62 := z.EncBasicHandle().StructToArray
			var yyq62 [2]bool
			_, _, _ = yysep62, yyq62, yy2arr62
			const yyr62 bool = false
			yyq62[0] = x.Kind != ""
			yyq62[1] = x.APIVersion != ""
			var yynn62 int
			if yyr62 || yy2arr62 {
				r.EncodeArrayStart(2)
			} else {
				yynn62 = 0
				for _, b := range yyq62 {
					if b {
						yynn62++
					}
				}
				r.EncodeMapStart(yynn62)
				yynn62 = 0
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[0] {
					yym64 := z.EncBinary()
					_ = yym64
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq62[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym65 := z.EncBinary()
					_ = yym65
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[1] {
					yym67 := z.EncBinary()
					_ = yym67
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq62[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym69 := z.DecBinary()
	_ = yym69
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct70 := r.ContainerType()
		if yyct70 == codecSelferValueTypeMap1234 {
			yyl70 := r.ReadMapStart()
			if yyl70 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl70, d)
			}
		} else if yyct70 == codecSelferValueTypeArray1234 {
			yyl70 := r.ReadArrayStart()
			if yyl70 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl70, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys71Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys71Slc
	var yyhl71 bool = l >= 0
	for yyj71 := 0; ; yyj71++ {
		if yyhl71 {
			if yyj71 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys71Slc = r.DecodeBytes(yys71Slc, true, true)
		yys71 := string(yys71Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys71 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys71)
		} // end switch yys71
	} // end for yyj71
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj74 int
	var yyb74 bool
	var yyhl74 bool = l >= 0
	yyj74++
	if yyhl74 {
		yyb74 = yyj74 > l
	} else {
		yyb74 = r.CheckBreak()
	}
	if yyb74 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj74++
	if yyhl74 {
		yyb74 = yyj74 > l
	} else {
		yyb74 = r.CheckBreak()
	}
	if yyb74 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj74++
		if yyhl74 {
			yyb74 = yyj74 > l
		} else {
			yyb74 = r.CheckBreak()
		}
		if yyb74 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj74-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym77 := z.EncBinary()
		_ = yym77
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep78 := !z.EncBinary()
			yy2arr78 := z.EncBasicHandle().StructToArray
			var yyq78 [4]bool
			_, _, _ = yysep78, yyq78, yy2arr78
			const yyr78 bool = false
			yyq78[0] = x.Kind != ""
			yyq78[1] = x.Name != ""
			yyq78[2] = x.APIVersion != ""
			yyq78[3] = x.Subresource != ""
			var yynn78 int
			if yyr78 || yy2arr78 {
				r.EncodeArrayStart(4)
			} else {
				yynn78 = 0
				for _, b := range yyq78 {
					if b {
						yynn78++
					}
				}
				r.EncodeMapStart(yynn78)
				yynn78 = 0
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq78[0] {
					yym80 := z.EncBinary()
					_ = yym80
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq78[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym81 := z.EncBinary()
					_ = yym81
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq78[1] {
					yym83 := z.EncBinary()
					_ = yym83
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq78[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym84 := z.EncBinary()
					_ = yym84
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq78[2] {
					yym86 := z.EncBinary()
					_ = yym86
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq78[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq78[3] {
					yym89 := z.EncBinary()
					_ = yym89
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq78[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym91 := z.DecBinary()
	_ = yym91
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct92 := r.ContainerType()
		if yyct92 == codecSelferValueTypeMap1234 {
			yyl92 := r.ReadMapStart()
			if yyl92 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl92, d)
			}
		} else if yyct92 == codecSelferValueTypeArray1234 {
			yyl92 := r.ReadArrayStart()
			if yyl92 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl92, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys93Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys93Slc
	var yyhl93 bool = l >= 0
	for yyj93 := 0; ; yyj93++ {
		if yyhl93 {
			if yyj93 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys93Slc = r.DecodeBytes(yys93Slc, true, true)
		yys93 := string(yys93Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys93 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys93)
		} // end switch yys93
	} // end for yyj93
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj98 int
	var yyb98 bool
	var yyhl98 bool = l >= 0
	yyj98++
	if yyhl98 {
		yyb98 = yyj98 > l
	} else {
		yyb98 = r.CheckBreak()
	}
	if yyb98 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj98++
	if yyhl98 {
		yyb98 = yyj98 > l
	} else {
		yyb98 = r.CheckBreak()
	}
	if yyb98 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj98++
	if yyhl98 {
		yyb98 = yyj98 > l
	} else {
		yyb98 = r.CheckBreak()
	}
	if yyb98 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj98++
	if yyhl98 {
		yyb98 = yyj98 > l
	} else {
		yyb98 = r.CheckBreak()
	}
	if yyb98 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj98++
		if yyhl98 {
			yyb98 = yyj98 > l
		} else {
			yyb98 = r.CheckBreak()
		}
		if yyb98 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj98-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym103 := z.EncBinary()
		_ = yym103
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep104 := !z.EncBinary()
			yy2arr104 := z.EncBasicHandle().StructToArray
			var yyq104 [1]bool
			_, _, _ = yysep104, yyq104, yy2arr104
			const yyr104 bool = false
			var yynn104 int
			if yyr104 || yy2arr104 {
				r.EncodeArrayStart(1)
			} else {
				yynn104 = 1
				for _, b := range yyq104 {
					if b {
						yynn104++
					}
				}
				r.EncodeMapStart(yynn104)
				yynn104 = 0
			}
			if yyr104 || yy2arr104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym106 := z.EncBinary()
				_ = yym106
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym107 := z.EncBinary()
				_ = yym107
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yyr104 || yy2arr104 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym108 := z.DecBinary()
	_ = yym108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct109 := r.ContainerType()
		if yyct109 == codecSelferValueTypeMap1234 {
			yyl109 := r.ReadMapStart()
			if yyl109 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl109, d)
			}
		} else if yyct109 == codecSelferValueTypeArray1234 {
			yyl109 := r.ReadArrayStart()
			if yyl109 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys110Slc
	var yyhl110 bool = l >= 0
	for yyj110 := 0; ; yyj110++ {
		if yyhl110 {
			if yyj110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys110Slc = r.DecodeBytes(yys110Slc, true, true)
		yys110 := string(yys110Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys110 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys110)
		} // end switch yys110
	} // end for yyj110
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj112 int
	var yyb112 bool
	var yyhl112 bool = l >= 0
	yyj112++
	if yyhl112 {
		yyb112 = yyj112 > l
	} else {
		yyb112 = r.CheckBreak()
	}
	if yyb112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj112++
		if yyhl112 {
			yyb112 = yyj112 > l
		} else {
			yyb112 = r.CheckBreak()
		}
		if yyb112 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj112-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym114 := z.EncBinary()
		_ = yym114
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep115 := !z.EncBinary()
			yy2arr115 := z.EncBasicHandle().StructToArray
			var yyq115 [2]bool
			_, _, _ = yysep115, yyq115, yy2arr115
			const yyr115 bool = false
			var yynn115 int
			if yyr115 || yy2arr115 {
				r.EncodeArrayStart(2)
			} else {
				yynn115 = 2
				for _, b := range yyq115 {
					if b {
						yynn115++
					}
				}
				r.EncodeMapStart(yynn115)
				yynn115 = 0
			}
			if yyr115 || yy2arr115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym117 := z.EncBinary()
				_ = yym117
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym118 := z.EncBinary()
				_ = yym118
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr115 || yy2arr115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy120 := &x.TargetValue
				yym121 := z.EncBinary()
				_ = yym121
				if false {
				} else if z.HasExtensions() && z.EncExt(yy120) {
				} else if !yym121 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy120)
				} else {
					z.EncFallback(yy120)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy122 := &x.TargetValue
				yym123 := z.EncBinary()
				_ = yym123
				if false {
				} else if z.HasExtensions() && z.EncExt(yy122) {
				} else if !yym123 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy122)
				} else {
					z.EncFallback(yy122)
				}
			}
			if yyr115 || yy2arr115 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym124 := z.DecBinary()
	_ = yym124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct125 := r.ContainerType()
		if yyct125 == codecSelferValueTypeMap1234 {
			yyl125 := r.ReadMapStart()
			if yyl125 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl125, d)
			}
		} else if yyct125 == codecSelferValueTypeArray1234 {
			yyl125 := r.ReadArrayStart()
			if yyl125 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys126Slc
	var yyhl126 bool = l >= 0
	for yyj126 := 0; ; yyj126++ {
		if yyhl126 {
			if yyj126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys126Slc = r.DecodeBytes(yys126Slc, true, true)
		yys126 := string(yys126Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys126 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg4_resource.Quantity{}
			} else {
				yyv128 := &x.TargetValue
				yym129 := z.DecBinary()
				_ = yym129
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv128) {
				} else if !yym129 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv128)
				} else {
					z.DecFallback(yyv128, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys126)
		} // end switch yys126
	} // end for yyj126
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj130 int
	var yyb130 bool
	var yyhl130 bool = l >= 0
	yyj130++
	if yyhl130 {
		yyb130 = yyj130 > l
	} else {
		yyb130 = r.CheckBreak()
	}
	if yyb130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj130++
	if yyhl130 {
		yyb130 = yyj130 > l
	} else {
		yyb130 = r.CheckBreak()
	}
	if yyb130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg4_resource.Quantity{}
	} else {
		yyv132 := &x.TargetValue
		yym133 := z.DecBinary()
		_ = yym133
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv132) {
		} else if !yym133 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv132)
		} else {
			z.DecFallback(yyv132, false)
		}
	}
	for {
		yyj130++
		if yyhl130 {
			yyb130 = yyj130 > l
		} else {
			yyb130 = r.CheckBreak()
		}
		if yyb130 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj130-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym134 := z.EncBinary()
		_ = yym134
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep135 := !z.EncBinary()
			yy2arr135 := z.EncBasicHandle().StructToArray
			var yyq135 [1]bool
			_, _, _ = yysep135, yyq135, yy2arr135
			const yyr135 bool = false
			var yynn135 int
			if yyr135 || yy2arr135 {
				r.EncodeArrayStart(1)
			} else {
				yynn135 = 1
				for _, b := range yyq135 {
					if b {
						yynn135++
					}
				}
				r.EncodeMapStart(yynn135)
				yynn135 = 0
			}
			if yyr135 || yy2arr135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym137 := z.EncBinary()
					_ = yym137
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym138 := z.EncBinary()
					_ = yym138
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr135 || yy2arr135 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym139 := z.DecBinary()
	_ = yym139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct140 := r.ContainerType()
		if yyct140 == codecSelferValueTypeMap1234 {
			yyl140 := r.ReadMapStart()
			if yyl140 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl140, d)
			}
		} else if yyct140 == codecSelferValueTypeArray1234 {
			yyl140 := r.ReadArrayStart()
			if yyl140 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl140, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys141Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys141Slc
	var yyhl141 bool = l >= 0
	for yyj141 := 0; ; yyj141++ {
		if yyhl141 {
			if yyj141 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys141Slc = r.DecodeBytes(yys141Slc, true, true)
		yys141 := string(yys141Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys141 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv142 := &x.Items
				yym143 := z.DecBinary()
				_ = yym143
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv142), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys141)
		} // end switch yys141
	} // end for yyj141
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj144 int
	var yyb144 bool
	var yyhl144 bool = l >= 0
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv145 := &x.Items
		yym146 := z.DecBinary()
		_ = yym146
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv145), d)
		}
	}
	for {
		yyj144++
		if yyhl144 {
			yyb144 = yyj144 > l
		} else {
			yyb144 = r.CheckBreak()
		}
		if yyb144 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj144-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym147 := z.EncBinary()
		_ = yym147
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep148 := !z.EncBinary()
			yy2arr148 := z.EncBasicHandle().StructToArray
			var yyq148 [2]bool
			_, _, _ = yysep148, yyq148, yy2arr148
			const yyr148 bool = false
			var yynn148 int
			if yyr148 || yy2arr148 {
				r.EncodeArrayStart(2)
			} else {
				yynn148 = 2
				for _, b := range yyq148 {
					if b {
						yynn148++
					}
				}
				r.EncodeMapStart(yynn148)
				yynn148 = 0
			}
			if yyr148 || yy2arr148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym150 := z.EncBinary()
				_ = yym150
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym151 := z.EncBinary()
				_ = yym151
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr148 || yy2arr148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy153 := &x.CurrentValue
				yym154 := z.EncBinary()
				_ = yym154
				if false {
				} else if z.HasExtensions() && z.EncExt(yy153) {
				} else if !yym154 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy153)
				} else {
					z.EncFallback(yy153)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy155 := &x.CurrentValue
				yym156 := z.EncBinary()
				_ = yym156
				if false {
				} else if z.HasExtensions() && z.EncExt(yy155) {
				} else if !yym156 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy155)
				} else {
					z.EncFallback(yy155)
				}
			}
			if yyr148 || yy2arr148 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym157 := z.DecBinary()
	_ = yym157
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct158 := r.ContainerType()
		if yyct158 == codecSelferValueTypeMap1234 {
			yyl158 := r.ReadMapStart()
			if yyl158 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl158, d)
			}
		} else if yyct158 == codecSelferValueTypeArray1234 {
			yyl158 := r.ReadArrayStart()
			if yyl158 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl158, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys159Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys159Slc
	var yyhl159 bool = l >= 0
	for yyj159 := 0; ; yyj159++ {
		if yyhl159 {
			if yyj159 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys159Slc = r.DecodeBytes(yys159Slc, true, true)
		yys159 := string(yys159Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys159 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg4_resource.Quantity{}
			} else {
				yyv161 := &x.CurrentValue
				yym162 := z.DecBinary()
				_ = yym162
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv161) {
				} else if !yym162 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv161)
				} else {
					z.DecFallback(yyv161, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys159)
		} // end switch yys159
	} // end for yyj159
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj163 int
	var yyb163 bool
	var yyhl163 bool = l >= 0
	yyj163++
	if yyhl163 {
		yyb163 = yyj163 > l
	} else {
		yyb163 = r.CheckBreak()
	}
	if yyb163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj163++
	if yyhl163 {
		yyb163 = yyj163 > l
	} else {
		yyb163 = r.CheckBreak()
	}
	if yyb163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg4_resource.Quantity{}
	} else {
		yyv165 := &x.CurrentValue
		yym166 := z.DecBinary()
		_ = yym166
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv165) {
		} else if !yym166 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv165)
		} else {
			z.DecFallback(yyv165, false)
		}
	}
	for {
		yyj163++
		if yyhl163 {
			yyb163 = yyj163 > l
		} else {
			yyb163 = r.CheckBreak()
		}
		if yyb163 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj163-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym167 := z.EncBinary()
		_ = yym167
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep168 := !z.EncBinary()
			yy2arr168 := z.EncBasicHandle().StructToArray
			var yyq168 [1]bool
			_, _, _ = yysep168, yyq168, yy2arr168
			const yyr168 bool = false
			var yynn168 int
			if yyr168 || yy2arr168 {
				r.EncodeArrayStart(1)
			} else {
				yynn168 = 1
				for _, b := range yyq168 {
					if b {
						yynn168++
					}
				}
				r.EncodeMapStart(yynn168)
				yynn168 = 0
			}
			if yyr168 || yy2arr168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym170 := z.EncBinary()
					_ = yym170
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym171 := z.EncBinary()
					_ = yym171
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr168 || yy2arr168 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym172 := z.DecBinary()
	_ = yym172
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct173 := r.ContainerType()
		if yyct173 == codecSelferValueTypeMap1234 {
			yyl173 := r.ReadMapStart()
			if yyl173 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl173, d)
			}
		} else if yyct173 == codecSelferValueTypeArray1234 {
			yyl173 := r.ReadArrayStart()
			if yyl173 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl173, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys174Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys174Slc
	var yyhl174 bool = l >= 0
	for yyj174 := 0; ; yyj174++ {
		if yyhl174 {
			if yyj174 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys174Slc = r.DecodeBytes(yys174Slc, true, true)
		yys174 := string(yys174Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys174 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv175 := &x.Items
				yym176 := z.DecBinary()
				_ = yym176
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv175), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys174)
		} // end switch yys174
	} // end for yyj174
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv178 := &x.Items
		yym179 := z.DecBinary()
		_ = yym179
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv178), d)
		}
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym180 := z.EncBinary()
		_ = yym180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep181 := !z.EncBinary()
			yy2arr181 := z.EncBasicHandle().StructToArray
			var yyq181 [4]bool
			_, _, _ = yysep181, yyq181, yy2arr181
			const yyr181 bool = false
			yyq181[1] = x.MinReplicas != nil
			yyq181[3] = x.CPUUtilization != nil
			var yynn181 int
			if yyr181 || yy2arr181 {
				r.EncodeArrayStart(4)
			} else {
				yynn181 = 2
				for _, b := range yyq181 {
					if b {
						yynn181++
					}
				}
				r.EncodeMapStart(yynn181)
				yynn181 = 0
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy183 := &x.ScaleRef
				yy183.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy184 := &x.ScaleRef
				yy184.CodecEncodeSelf(e)
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy186 := *x.MinReplicas
						yym187 := z.EncBinary()
						_ = yym187
						if false {
						} else {
							r.EncodeInt(int64(yy186))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy188 := *x.MinReplicas
						yym189 := z.EncBinary()
						_ = yym189
						if false {
						} else {
							r.EncodeInt(int64(yy188))
						}
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym191 := z.EncBinary()
				_ = yym191
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym192 := z.EncBinary()
				_ = yym192
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym194 := z.DecBinary()
	_ = yym194
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct195 := r.ContainerType()
		if yyct195 == codecSelferValueTypeMap1234 {
			yyl195 := r.ReadMapStart()
			if yyl195 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl195, d)
			}
		} else if yyct195 == codecSelferValueTypeArray1234 {
			yyl195 := r.ReadArrayStart()
			if yyl195 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl195, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys196Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys196Slc
	var yyhl196 bool = l >= 0
	for yyj196 := 0; ; yyj196++ {
		if yyhl196 {
			if yyj196 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys196Slc = r.DecodeBytes(yys196Slc, true, true)
		yys196 := string(yys196Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys196 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv197 := &x.ScaleRef
				yyv197.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int)
				}
				yym199 := z.DecBinary()
				_ = yym199
				if false {
				} else {
					*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys196)
		} // end switch yys196
	} // end for yyj196
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj202 int
	var yyb202 bool
	var yyhl202 bool = l >= 0
	yyj202++
	if yyhl202 {
		yyb202 = yyj202 > l
	} else {
		yyb202 = r.CheckBreak()
	}
	if yyb202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv203 := &x.ScaleRef
		yyv203.CodecDecodeSelf(d)
	}
	yyj202++
	if yyhl202 {
		yyb202 = yyj202 > l
	} else {
		yyb202 = r.CheckBreak()
	}
	if yyb202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int)
		}
		yym205 := z.DecBinary()
		_ = yym205
		if false {
		} else {
			*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj202++
	if yyhl202 {
		yyb202 = yyj202 > l
	} else {
		yyb202 = r.CheckBreak()
	}
	if yyb202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj202++
	if yyhl202 {
		yyb202 = yyj202 > l
	} else {
		yyb202 = r.CheckBreak()
	}
	if yyb202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj202++
		if yyhl202 {
			yyb202 = yyj202 > l
		} else {
			yyb202 = r.CheckBreak()
		}
		if yyb202 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj202-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym208 := z.EncBinary()
		_ = yym208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep209 := !z.EncBinary()
			yy2arr209 := z.EncBasicHandle().StructToArray
			var yyq209 [5]bool
			_, _, _ = yysep209, yyq209, yy2arr209
			const yyr209 bool = false
			yyq209[0] = x.ObservedGeneration != nil
			yyq209[1] = x.LastScaleTime != nil
			yyq209[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn209 int
			if yyr209 || yy2arr209 {
				r.EncodeArrayStart(5)
			} else {
				yynn209 = 2
				for _, b := range yyq209 {
					if b {
						yynn209++
					}
				}
				r.EncodeMapStart(yynn209)
				yynn209 = 0
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq209[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy211 := *x.ObservedGeneration
						yym212 := z.EncBinary()
						_ = yym212
						if false {
						} else {
							r.EncodeInt(int64(yy211))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq209[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy213 := *x.ObservedGeneration
						yym214 := z.EncBinary()
						_ = yym214
						if false {
						} else {
							r.EncodeInt(int64(yy213))
						}
					}
				}
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq209[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym216 := z.EncBinary()
						_ = yym216
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym216 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym216 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq209[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym217 := z.EncBinary()
						_ = yym217
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym217 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym217 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym219 := z.EncBinary()
				_ = yym219
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym220 := z.EncBinary()
				_ = yym220
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym222 := z.EncBinary()
				_ = yym222
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym223 := z.EncBinary()
				_ = yym223
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq209[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy225 := *x.CurrentCPUUtilizationPercentage
						yym226 := z.EncBinary()
						_ = yym226
						if false {
						} else {
							r.EncodeInt(int64(yy225))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq209[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy227 := *x.CurrentCPUUtilizationPercentage
						yym228 := z.EncBinary()
						_ = yym228
						if false {
						} else {
							r.EncodeInt(int64(yy227))
						}
					}
				}
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym229 := z.DecBinary()
	_ = yym229
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct230 := r.ContainerType()
		if yyct230 == codecSelferValueTypeMap1234 {
			yyl230 := r.ReadMapStart()
			if yyl230 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl230, d)
			}
		} else if yyct230 == codecSelferValueTypeArray1234 {
			yyl230 := r.ReadArrayStart()
			if yyl230 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl230, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys231Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys231Slc
	var yyhl231 bool = l >= 0
	for yyj231 := 0; ; yyj231++ {
		if yyhl231 {
			if yyj231 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys231Slc = r.DecodeBytes(yys231Slc, true, true)
		yys231 := string(yys231Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys231 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym233 := z.DecBinary()
				_ = yym233
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym235 := z.DecBinary()
				_ = yym235
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym235 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym235 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int)
				}
				yym239 := z.DecBinary()
				_ = yym239
				if false {
				} else {
					*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys231)
		} // end switch yys231
	} // end for yyj231
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj240 int
	var yyb240 bool
	var yyhl240 bool = l >= 0
	yyj240++
	if yyhl240 {
		yyb240 = yyj240 > l
	} else {
		yyb240 = r.CheckBreak()
	}
	if yyb240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym242 := z.DecBinary()
		_ = yym242
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj240++
	if yyhl240 {
		yyb240 = yyj240 > l
	} else {
		yyb240 = r.CheckBreak()
	}
	if yyb240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym244 := z.DecBinary()
		_ = yym244
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym244 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym244 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj240++
	if yyhl240 {
		yyb240 = yyj240 > l
	} else {
		yyb240 = r.CheckBreak()
	}
	if yyb240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj240++
	if yyhl240 {
		yyb240 = yyj240 > l
	} else {
		yyb240 = r.CheckBreak()
	}
	if yyb240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj240++
	if yyhl240 {
		yyb240 = yyj240 > l
	} else {
		yyb240 = r.CheckBreak()
	}
	if yyb240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int)
		}
		yym248 := z.DecBinary()
		_ = yym248
		if false {
		} else {
			*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	for {
		yyj240++
		if yyhl240 {
			yyb240 = yyj240 > l
		} else {
			yyb240 = r.CheckBreak()
		}
		if yyb240 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj240-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			var yynn250 int
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				yynn250 = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
				yynn250 = 0
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct267 := r.ContainerType()
		if yyct267 == codecSelferValueTypeMap1234 {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if yyct267 == codecSelferValueTypeArray1234 {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [4]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[0] = x.Kind != ""
			yyq281[1] = x.APIVersion != ""
			yyq281[2] = true
			var yynn281 int
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(4)
			} else {
				yynn281 = 1
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
				yynn281 = 0
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[0] {
					yym283 := z.EncBinary()
					_ = yym283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym284 := z.EncBinary()
					_ = yym284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[1] {
					yym286 := z.EncBinary()
					_ = yym286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym287 := z.EncBinary()
					_ = yym287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[2] {
					yy289 := &x.ListMeta
					yym290 := z.EncBinary()
					_ = yym290
					if false {
					} else if z.HasExtensions() && z.EncExt(yy289) {
					} else {
						z.EncFallback(yy289)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy291 := &x.ListMeta
					yym292 := z.EncBinary()
					_ = yym292
					if false {
					} else if z.HasExtensions() && z.EncExt(yy291) {
					} else {
						z.EncFallback(yy291)
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym294 := z.EncBinary()
					_ = yym294
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym295 := z.EncBinary()
					_ = yym295
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym296 := z.DecBinary()
	_ = yym296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct297 := r.ContainerType()
		if yyct297 == codecSelferValueTypeMap1234 {
			yyl297 := r.ReadMapStart()
			if yyl297 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl297, d)
			}
		} else if yyct297 == codecSelferValueTypeArray1234 {
			yyl297 := r.ReadArrayStart()
			if yyl297 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl297, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys298Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys298Slc
	var yyhl298 bool = l >= 0
	for yyj298 := 0; ; yyj298++ {
		if yyhl298 {
			if yyj298 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys298Slc = r.DecodeBytes(yys298Slc, true, true)
		yys298 := string(yys298Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys298 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv301 := &x.ListMeta
				yym302 := z.DecBinary()
				_ = yym302
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv301) {
				} else {
					z.DecFallback(yyv301, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv303 := &x.Items
				yym304 := z.DecBinary()
				_ = yym304
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv303), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys298)
		} // end switch yys298
	} // end for yyj298
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj305 int
	var yyb305 bool
	var yyhl305 bool = l >= 0
	yyj305++
	if yyhl305 {
		yyb305 = yyj305 > l
	} else {
		yyb305 = r.CheckBreak()
	}
	if yyb305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj305++
	if yyhl305 {
		yyb305 = yyj305 > l
	} else {
		yyb305 = r.CheckBreak()
	}
	if yyb305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj305++
	if yyhl305 {
		yyb305 = yyj305 > l
	} else {
		yyb305 = r.CheckBreak()
	}
	if yyb305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv308 := &x.ListMeta
		yym309 := z.DecBinary()
		_ = yym309
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv308) {
		} else {
			z.DecFallback(yyv308, false)
		}
	}
	yyj305++
	if yyhl305 {
		yyb305 = yyj305 > l
	} else {
		yyb305 = r.CheckBreak()
	}
	if yyb305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv310 := &x.Items
		yym311 := z.DecBinary()
		_ = yym311
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv310), d)
		}
	}
	for {
		yyj305++
		if yyhl305 {
			yyb305 = yyj305 > l
		} else {
			yyb305 = r.CheckBreak()
		}
		if yyb305 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj305-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym312 := z.EncBinary()
		_ = yym312
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep313 := !z.EncBinary()
			yy2arr313 := z.EncBasicHandle().StructToArray
			var yyq313 [5]bool
			_, _, _ = yysep313, yyq313, yy2arr313
			const yyr313 bool = false
			yyq313[0] = x.Kind != ""
			yyq313[1] = x.APIVersion != ""
			yyq313[2] = true
			yyq313[3] = x.Description != ""
			yyq313[4] = len(x.Versions) != 0
			var yynn313 int
			if yyr313 || yy2arr313 {
				r.EncodeArrayStart(5)
			} else {
				yynn313 = 0
				for _, b := range yyq313 {
					if b {
						yynn313++
					}
				}
				r.EncodeMapStart(yynn313)
				yynn313 = 0
			}
			if yyr313 || yy2arr313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq313[0] {
					yym315 := z.EncBinary()
					_ = yym315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq313[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym316 := z.EncBinary()
					_ = yym316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr313 || yy2arr313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq313[1] {
					yym318 := z.EncBinary()
					_ = yym318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq313[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym319 := z.EncBinary()
					_ = yym319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr313 || yy2arr313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq313[2] {
					yy321 := &x.ObjectMeta
					yy321.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq313[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy322 := &x.ObjectMeta
					yy322.CodecEncodeSelf(e)
				}
			}
			if yyr313 || yy2arr313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq313[3] {
					yym324 := z.EncBinary()
					_ = yym324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq313[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym325 := z.EncBinary()
					_ = yym325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr313 || yy2arr313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq313[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym327 := z.EncBinary()
						_ = yym327
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq313[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym328 := z.EncBinary()
						_ = yym328
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr313 || yy2arr313 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym329 := z.DecBinary()
	_ = yym329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct330 := r.ContainerType()
		if yyct330 == codecSelferValueTypeMap1234 {
			yyl330 := r.ReadMapStart()
			if yyl330 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl330, d)
			}
		} else if yyct330 == codecSelferValueTypeArray1234 {
			yyl330 := r.ReadArrayStart()
			if yyl330 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys331Slc
	var yyhl331 bool = l >= 0
	for yyj331 := 0; ; yyj331++ {
		if yyhl331 {
			if yyj331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys331Slc = r.DecodeBytes(yys331Slc, true, true)
		yys331 := string(yys331Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys331 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv334 := &x.ObjectMeta
				yyv334.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv336 := &x.Versions
				yym337 := z.DecBinary()
				_ = yym337
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv336), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys331)
		} // end switch yys331
	} // end for yyj331
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj338 int
	var yyb338 bool
	var yyhl338 bool = l >= 0
	yyj338++
	if yyhl338 {
		yyb338 = yyj338 > l
	} else {
		yyb338 = r.CheckBreak()
	}
	if yyb338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj338++
	if yyhl338 {
		yyb338 = yyj338 > l
	} else {
		yyb338 = r.CheckBreak()
	}
	if yyb338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj338++
	if yyhl338 {
		yyb338 = yyj338 > l
	} else {
		yyb338 = r.CheckBreak()
	}
	if yyb338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv341 := &x.ObjectMeta
		yyv341.CodecDecodeSelf(d)
	}
	yyj338++
	if yyhl338 {
		yyb338 = yyj338 > l
	} else {
		yyb338 = r.CheckBreak()
	}
	if yyb338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj338++
	if yyhl338 {
		yyb338 = yyj338 > l
	} else {
		yyb338 = r.CheckBreak()
	}
	if yyb338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv343 := &x.Versions
		yym344 := z.DecBinary()
		_ = yym344
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv343), d)
		}
	}
	for {
		yyj338++
		if yyhl338 {
			yyb338 = yyj338 > l
		} else {
			yyb338 = r.CheckBreak()
		}
		if yyb338 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj338-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym345 := z.EncBinary()
		_ = yym345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep346 := !z.EncBinary()
			yy2arr346 := z.EncBasicHandle().StructToArray
			var yyq346 [4]bool
			_, _, _ = yysep346, yyq346, yy2arr346
			const yyr346 bool = false
			yyq346[0] = x.Kind != ""
			yyq346[1] = x.APIVersion != ""
			yyq346[2] = true
			var yynn346 int
			if yyr346 || yy2arr346 {
				r.EncodeArrayStart(4)
			} else {
				yynn346 = 1
				for _, b := range yyq346 {
					if b {
						yynn346++
					}
				}
				r.EncodeMapStart(yynn346)
				yynn346 = 0
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq346[0] {
					yym348 := z.EncBinary()
					_ = yym348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq346[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym349 := z.EncBinary()
					_ = yym349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq346[1] {
					yym351 := z.EncBinary()
					_ = yym351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq346[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym352 := z.EncBinary()
					_ = yym352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq346[2] {
					yy354 := &x.ListMeta
					yym355 := z.EncBinary()
					_ = yym355
					if false {
					} else if z.HasExtensions() && z.EncExt(yy354) {
					} else {
						z.EncFallback(yy354)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq346[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy356 := &x.ListMeta
					yym357 := z.EncBinary()
					_ = yym357
					if false {
					} else if z.HasExtensions() && z.EncExt(yy356) {
					} else {
						z.EncFallback(yy356)
					}
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym361 := z.DecBinary()
	_ = yym361
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct362 := r.ContainerType()
		if yyct362 == codecSelferValueTypeMap1234 {
			yyl362 := r.ReadMapStart()
			if yyl362 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl362, d)
			}
		} else if yyct362 == codecSelferValueTypeArray1234 {
			yyl362 := r.ReadArrayStart()
			if yyl362 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl362, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys363Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys363Slc
	var yyhl363 bool = l >= 0
	for yyj363 := 0; ; yyj363++ {
		if yyhl363 {
			if yyj363 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys363Slc = r.DecodeBytes(yys363Slc, true, true)
		yys363 := string(yys363Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys363 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv366 := &x.ListMeta
				yym367 := z.DecBinary()
				_ = yym367
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv366) {
				} else {
					z.DecFallback(yyv366, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv368 := &x.Items
				yym369 := z.DecBinary()
				_ = yym369
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv368), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys363)
		} // end switch yys363
	} // end for yyj363
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj370 int
	var yyb370 bool
	var yyhl370 bool = l >= 0
	yyj370++
	if yyhl370 {
		yyb370 = yyj370 > l
	} else {
		yyb370 = r.CheckBreak()
	}
	if yyb370 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj370++
	if yyhl370 {
		yyb370 = yyj370 > l
	} else {
		yyb370 = r.CheckBreak()
	}
	if yyb370 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj370++
	if yyhl370 {
		yyb370 = yyj370 > l
	} else {
		yyb370 = r.CheckBreak()
	}
	if yyb370 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv373 := &x.ListMeta
		yym374 := z.DecBinary()
		_ = yym374
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv373) {
		} else {
			z.DecFallback(yyv373, false)
		}
	}
	yyj370++
	if yyhl370 {
		yyb370 = yyj370 > l
	} else {
		yyb370 = r.CheckBreak()
	}
	if yyb370 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv375 := &x.Items
		yym376 := z.DecBinary()
		_ = yym376
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv375), d)
		}
	}
	for {
		yyj370++
		if yyhl370 {
			yyb370 = yyj370 > l
		} else {
			yyb370 = r.CheckBreak()
		}
		if yyb370 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj370-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym377 := z.EncBinary()
		_ = yym377
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep378 := !z.EncBinary()
			yy2arr378 := z.EncBasicHandle().StructToArray
			var yyq378 [2]bool
			_, _, _ = yysep378, yyq378, yy2arr378
			const yyr378 bool = false
			yyq378[0] = x.Name != ""
			yyq378[1] = x.APIGroup != ""
			var yynn378 int
			if yyr378 || yy2arr378 {
				r.EncodeArrayStart(2)
			} else {
				yynn378 = 0
				for _, b := range yyq378 {
					if b {
						yynn378++
					}
				}
				r.EncodeMapStart(yynn378)
				yynn378 = 0
			}
			if yyr378 || yy2arr378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq378[0] {
					yym380 := z.EncBinary()
					_ = yym380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq378[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym381 := z.EncBinary()
					_ = yym381
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr378 || yy2arr378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq378[1] {
					yym383 := z.EncBinary()
					_ = yym383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq378[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym384 := z.EncBinary()
					_ = yym384
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yyr378 || yy2arr378 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym385 := z.DecBinary()
	_ = yym385
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct386 := r.ContainerType()
		if yyct386 == codecSelferValueTypeMap1234 {
			yyl386 := r.ReadMapStart()
			if yyl386 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl386, d)
			}
		} else if yyct386 == codecSelferValueTypeArray1234 {
			yyl386 := r.ReadArrayStart()
			if yyl386 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl386, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys387Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys387Slc
	var yyhl387 bool = l >= 0
	for yyj387 := 0; ; yyj387++ {
		if yyhl387 {
			if yyj387 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys387Slc = r.DecodeBytes(yys387Slc, true, true)
		yys387 := string(yys387Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys387 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys387)
		} // end switch yys387
	} // end for yyj387
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj390 int
	var yyb390 bool
	var yyhl390 bool = l >= 0
	yyj390++
	if yyhl390 {
		yyb390 = yyj390 > l
	} else {
		yyb390 = r.CheckBreak()
	}
	if yyb390 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj390++
	if yyhl390 {
		yyb390 = yyj390 > l
	} else {
		yyb390 = r.CheckBreak()
	}
	if yyb390 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj390++
		if yyhl390 {
			yyb390 = yyj390 > l
		} else {
			yyb390 = r.CheckBreak()
		}
		if yyb390 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj390-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym393 := z.EncBinary()
		_ = yym393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep394 := !z.EncBinary()
			yy2arr394 := z.EncBasicHandle().StructToArray
			var yyq394 [4]bool
			_, _, _ = yysep394, yyq394, yy2arr394
			const yyr394 bool = false
			yyq394[0] = x.Kind != ""
			yyq394[1] = x.APIVersion != ""
			yyq394[2] = true
			yyq394[3] = len(x.Data) != 0
			var yynn394 int
			if yyr394 || yy2arr394 {
				r.EncodeArrayStart(4)
			} else {
				yynn394 = 0
				for _, b := range yyq394 {
					if b {
						yynn394++
					}
				}
				r.EncodeMapStart(yynn394)
				yynn394 = 0
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[0] {
					yym396 := z.EncBinary()
					_ = yym396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym397 := z.EncBinary()
					_ = yym397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[1] {
					yym399 := z.EncBinary()
					_ = yym399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym400 := z.EncBinary()
					_ = yym400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[2] {
					yy402 := &x.ObjectMeta
					yy402.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq394[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy403 := &x.ObjectMeta
					yy403.CodecEncodeSelf(e)
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym405 := z.EncBinary()
						_ = yym405
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq394[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym406 := z.EncBinary()
						_ = yym406
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym407 := z.DecBinary()
	_ = yym407
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct408 := r.ContainerType()
		if yyct408 == codecSelferValueTypeMap1234 {
			yyl408 := r.ReadMapStart()
			if yyl408 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl408, d)
			}
		} else if yyct408 == codecSelferValueTypeArray1234 {
			yyl408 := r.ReadArrayStart()
			if yyl408 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl408, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys409Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys409Slc
	var yyhl409 bool = l >= 0
	for yyj409 := 0; ; yyj409++ {
		if yyhl409 {
			if yyj409 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys409Slc = r.DecodeBytes(yys409Slc, true, true)
		yys409 := string(yys409Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys409 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv412 := &x.ObjectMeta
				yyv412.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv413 := &x.Data
				yym414 := z.DecBinary()
				_ = yym414
				if false {
				} else {
					*yyv413 = r.DecodeBytes(*(*[]byte)(yyv413), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys409)
		} // end switch yys409
	} // end for yyj409
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj415 int
	var yyb415 bool
	var yyhl415 bool = l >= 0
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv418 := &x.ObjectMeta
		yyv418.CodecDecodeSelf(d)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv419 := &x.Data
		yym420 := z.DecBinary()
		_ = yym420
		if false {
		} else {
			*yyv419 = r.DecodeBytes(*(*[]byte)(yyv419), false, false)
		}
	}
	for {
		yyj415++
		if yyhl415 {
			yyb415 = yyj415 > l
		} else {
			yyb415 = r.CheckBreak()
		}
		if yyb415 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj415-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym421 := z.EncBinary()
		_ = yym421
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep422 := !z.EncBinary()
			yy2arr422 := z.EncBasicHandle().StructToArray
			var yyq422 [5]bool
			_, _, _ = yysep422, yyq422, yy2arr422
			const yyr422 bool = false
			yyq422[0] = x.Kind != ""
			yyq422[1] = x.APIVersion != ""
			yyq422[2] = true
			yyq422[3] = true
			yyq422[4] = true
			var yynn422 int
			if yyr422 || yy2arr422 {
				r.EncodeArrayStart(5)
			} else {
				yynn422 = 0
				for _, b := range yyq422 {
					if b {
						yynn422++
					}
				}
				r.EncodeMapStart(yynn422)
				yynn422 = 0
			}
			if yyr422 || yy2arr422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq422[0] {
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq422[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr422 || yy2arr422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq422[1] {
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq422[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym428 := z.EncBinary()
					_ = yym428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr422 || yy2arr422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq422[2] {
					yy430 := &x.ObjectMeta
					yy430.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq422[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy431 := &x.ObjectMeta
					yy431.CodecEncodeSelf(e)
				}
			}
			if yyr422 || yy2arr422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq422[3] {
					yy433 := &x.Spec
					yy433.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq422[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy434 := &x.Spec
					yy434.CodecEncodeSelf(e)
				}
			}
			if yyr422 || yy2arr422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq422[4] {
					yy436 := &x.Status
					yy436.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq422[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy437 := &x.Status
					yy437.CodecEncodeSelf(e)
				}
			}
			if yyr422 || yy2arr422 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym438 := z.DecBinary()
	_ = yym438
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct439 := r.ContainerType()
		if yyct439 == codecSelferValueTypeMap1234 {
			yyl439 := r.ReadMapStart()
			if yyl439 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl439, d)
			}
		} else if yyct439 == codecSelferValueTypeArray1234 {
			yyl439 := r.ReadArrayStart()
			if yyl439 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl439, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys440Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys440Slc
	var yyhl440 bool = l >= 0
	for yyj440 := 0; ; yyj440++ {
		if yyhl440 {
			if yyj440 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys440Slc = r.DecodeBytes(yys440Slc, true, true)
		yys440 := string(yys440Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys440 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv443 := &x.ObjectMeta
				yyv443.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv444 := &x.Spec
				yyv444.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv445 := &x.Status
				yyv445.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys440)
		} // end switch yys440
	} // end for yyj440
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj446 int
	var yyb446 bool
	var yyhl446 bool = l >= 0
	yyj446++
	if yyhl446 {
		yyb446 = yyj446 > l
	} else {
		yyb446 = r.CheckBreak()
	}
	if yyb446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj446++
	if yyhl446 {
		yyb446 = yyj446 > l
	} else {
		yyb446 = r.CheckBreak()
	}
	if yyb446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj446++
	if yyhl446 {
		yyb446 = yyj446 > l
	} else {
		yyb446 = r.CheckBreak()
	}
	if yyb446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv449 := &x.ObjectMeta
		yyv449.CodecDecodeSelf(d)
	}
	yyj446++
	if yyhl446 {
		yyb446 = yyj446 > l
	} else {
		yyb446 = r.CheckBreak()
	}
	if yyb446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv450 := &x.Spec
		yyv450.CodecDecodeSelf(d)
	}
	yyj446++
	if yyhl446 {
		yyb446 = yyj446 > l
	} else {
		yyb446 = r.CheckBreak()
	}
	if yyb446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv451 := &x.Status
		yyv451.CodecDecodeSelf(d)
	}
	for {
		yyj446++
		if yyhl446 {
			yyb446 = yyj446 > l
		} else {
			yyb446 = r.CheckBreak()
		}
		if yyb446 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj446-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym452 := z.EncBinary()
		_ = yym452
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep453 := !z.EncBinary()
			yy2arr453 := z.EncBasicHandle().StructToArray
			var yyq453 [9]bool
			_, _, _ = yysep453, yyq453, yy2arr453
			const yyr453 bool = false
			yyq453[0] = x.Replicas != 0
			yyq453[1] = len(x.Selector) != 0
			yyq453[3] = true
			yyq453[4] = x.MinReadySeconds != 0
			yyq453[5] = x.RevisionHistoryLimit != nil
			yyq453[6] = x.UniqueLabelKey != ""
			yyq453[7] = x.Paused != false
			yyq453[8] = x.RollbackTo != nil
			var yynn453 int
			if yyr453 || yy2arr453 {
				r.EncodeArrayStart(9)
			} else {
				yynn453 = 1
				for _, b := range yyq453 {
					if b {
						yynn453++
					}
				}
				r.EncodeMapStart(yynn453)
				yynn453 = 0
			}
			if yyr453 || yy2arr453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq453[0] {
					yym455 := z.EncBinary()
					_ = yym455
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq453[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr453 || yy2arr453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq453[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym458 := z.EncBinary()
						_ = yym458
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq453[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym459 := z.EncBinary()
						_ = yym459
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr453 || yy2arr453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy461 := &x.Template
				yy461.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy462 := &x.Template
				yy462.CodecEncodeSelf(e)
			}
			if yyr453 || yy2arr453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq453[3] {
					yy464 := &x.Strategy
					yy464.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq453[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy465 := &x.Strategy
					yy465.CodecEncodeSelf(e)
				}
			}
			if yyr453 || yy2arr453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq453[4] {
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq453[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr453 || yy2arr453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq453[5] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy470 := *x.RevisionHistoryLimit
						yym471 := z.EncBinary()
						_ = yym471
						if false {
						} else {
							r.EncodeInt(int64(yy470))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq453[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy472 := *x.RevisionHistoryLimit
						yym473 := z.EncBinary()
						_ = yym473
						if false {
						} else {
							r.EncodeInt(int64(yy472))
						}
					}
				}
			}
			if yyr453 || yy2arr453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq453[6] {
					yym475 := z.EncBinary()
					_ = yym475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq453[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym476 := z.EncBinary()
					_ = yym476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yyr453 || yy2arr453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq453[7] {
					yym478 := z.EncBinary()
					_ = yym478
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq453[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr453 || yy2arr453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq453[8] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq453[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr453 || yy2arr453 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct482 := r.ContainerType()
		if yyct482 == codecSelferValueTypeMap1234 {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if yyct482 == codecSelferValueTypeArray1234 {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys483 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv485 := &x.Selector
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					z.F.DecMapStringStringX(yyv485, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv487 := &x.Template
				yyv487.CodecDecodeSelf(d)
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv488 := &x.Strategy
				yyv488.CodecDecodeSelf(d)
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int)
				}
				yym491 := z.DecBinary()
				_ = yym491
				if false {
				} else {
					*((*int)(x.RevisionHistoryLimit)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj495 int
	var yyb495 bool
	var yyhl495 bool = l >= 0
	yyj495++
	if yyhl495 {
		yyb495 = yyj495 > l
	} else {
		yyb495 = r.CheckBreak()
	}
	if yyb495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj495++
	if yyhl495 {
		yyb495 = yyj495 > l
	} else {
		yyb495 = r.CheckBreak()
	}
	if yyb495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv497 := &x.Selector
		yym498 := z.DecBinary()
		_ = yym498
		if false {
		} else {
			z.F.DecMapStringStringX(yyv497, false, d)
		}
	}
	yyj495++
	if yyhl495 {
		yyb495 = yyj495 > l
	} else {
		yyb495 = r.CheckBreak()
	}
	if yyb495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv499 := &x.Template
		yyv499.CodecDecodeSelf(d)
	}
	yyj495++
	if yyhl495 {
		yyb495 = yyj495 > l
	} else {
		yyb495 = r.CheckBreak()
	}
	if yyb495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv500 := &x.Strategy
		yyv500.CodecDecodeSelf(d)
	}
	yyj495++
	if yyhl495 {
		yyb495 = yyj495 > l
	} else {
		yyb495 = r.CheckBreak()
	}
	if yyb495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj495++
	if yyhl495 {
		yyb495 = yyj495 > l
	} else {
		yyb495 = r.CheckBreak()
	}
	if yyb495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int)
		}
		yym503 := z.DecBinary()
		_ = yym503
		if false {
		} else {
			*((*int)(x.RevisionHistoryLimit)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj495++
	if yyhl495 {
		yyb495 = yyj495 > l
	} else {
		yyb495 = r.CheckBreak()
	}
	if yyb495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	yyj495++
	if yyhl495 {
		yyb495 = yyj495 > l
	} else {
		yyb495 = r.CheckBreak()
	}
	if yyb495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj495++
	if yyhl495 {
		yyb495 = yyj495 > l
	} else {
		yyb495 = r.CheckBreak()
	}
	if yyb495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	for {
		yyj495++
		if yyhl495 {
			yyb495 = yyj495 > l
		} else {
			yyb495 = r.CheckBreak()
		}
		if yyb495 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj495-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym507 := z.EncBinary()
		_ = yym507
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep508 := !z.EncBinary()
			yy2arr508 := z.EncBasicHandle().StructToArray
			var yyq508 [5]bool
			_, _, _ = yysep508, yyq508, yy2arr508
			const yyr508 bool = false
			yyq508[0] = x.Kind != ""
			yyq508[1] = x.APIVersion != ""
			yyq508[3] = len(x.UpdatedAnnotations) != 0
			var yynn508 int
			if yyr508 || yy2arr508 {
				r.EncodeArrayStart(5)
			} else {
				yynn508 = 2
				for _, b := range yyq508 {
					if b {
						yynn508++
					}
				}
				r.EncodeMapStart(yynn508)
				yynn508 = 0
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[0] {
					yym510 := z.EncBinary()
					_ = yym510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq508[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym511 := z.EncBinary()
					_ = yym511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[1] {
					yym513 := z.EncBinary()
					_ = yym513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq508[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym514 := z.EncBinary()
					_ = yym514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym516 := z.EncBinary()
				_ = yym516
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym517 := z.EncBinary()
				_ = yym517
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym519 := z.EncBinary()
						_ = yym519
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq508[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym520 := z.EncBinary()
						_ = yym520
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy522 := &x.RollbackTo
				yy522.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy523 := &x.RollbackTo
				yy523.CodecEncodeSelf(e)
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym524 := z.DecBinary()
	_ = yym524
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct525 := r.ContainerType()
		if yyct525 == codecSelferValueTypeMap1234 {
			yyl525 := r.ReadMapStart()
			if yyl525 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl525, d)
			}
		} else if yyct525 == codecSelferValueTypeArray1234 {
			yyl525 := r.ReadArrayStart()
			if yyl525 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl525, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys526Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys526Slc
	var yyhl526 bool = l >= 0
	for yyj526 := 0; ; yyj526++ {
		if yyhl526 {
			if yyj526 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys526Slc = r.DecodeBytes(yys526Slc, true, true)
		yys526 := string(yys526Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys526 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv530 := &x.UpdatedAnnotations
				yym531 := z.DecBinary()
				_ = yym531
				if false {
				} else {
					z.F.DecMapStringStringX(yyv530, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv532 := &x.RollbackTo
				yyv532.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys526)
		} // end switch yys526
	} // end for yyj526
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj533 int
	var yyb533 bool
	var yyhl533 bool = l >= 0
	yyj533++
	if yyhl533 {
		yyb533 = yyj533 > l
	} else {
		yyb533 = r.CheckBreak()
	}
	if yyb533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj533++
	if yyhl533 {
		yyb533 = yyj533 > l
	} else {
		yyb533 = r.CheckBreak()
	}
	if yyb533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj533++
	if yyhl533 {
		yyb533 = yyj533 > l
	} else {
		yyb533 = r.CheckBreak()
	}
	if yyb533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj533++
	if yyhl533 {
		yyb533 = yyj533 > l
	} else {
		yyb533 = r.CheckBreak()
	}
	if yyb533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv537 := &x.UpdatedAnnotations
		yym538 := z.DecBinary()
		_ = yym538
		if false {
		} else {
			z.F.DecMapStringStringX(yyv537, false, d)
		}
	}
	yyj533++
	if yyhl533 {
		yyb533 = yyj533 > l
	} else {
		yyb533 = r.CheckBreak()
	}
	if yyb533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv539 := &x.RollbackTo
		yyv539.CodecDecodeSelf(d)
	}
	for {
		yyj533++
		if yyhl533 {
			yyb533 = yyj533 > l
		} else {
			yyb533 = r.CheckBreak()
		}
		if yyb533 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj533-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym540 := z.EncBinary()
		_ = yym540
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep541 := !z.EncBinary()
			yy2arr541 := z.EncBasicHandle().StructToArray
			var yyq541 [1]bool
			_, _, _ = yysep541, yyq541, yy2arr541
			const yyr541 bool = false
			yyq541[0] = x.Revision != 0
			var yynn541 int
			if yyr541 || yy2arr541 {
				r.EncodeArrayStart(1)
			} else {
				yynn541 = 0
				for _, b := range yyq541 {
					if b {
						yynn541++
					}
				}
				r.EncodeMapStart(yynn541)
				yynn541 = 0
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq541[0] {
					yym543 := z.EncBinary()
					_ = yym543
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq541[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym544 := z.EncBinary()
					_ = yym544
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym545 := z.DecBinary()
	_ = yym545
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct546 := r.ContainerType()
		if yyct546 == codecSelferValueTypeMap1234 {
			yyl546 := r.ReadMapStart()
			if yyl546 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl546, d)
			}
		} else if yyct546 == codecSelferValueTypeArray1234 {
			yyl546 := r.ReadArrayStart()
			if yyl546 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl546, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys547Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys547Slc
	var yyhl547 bool = l >= 0
	for yyj547 := 0; ; yyj547++ {
		if yyhl547 {
			if yyj547 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys547Slc = r.DecodeBytes(yys547Slc, true, true)
		yys547 := string(yys547Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys547 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys547)
		} // end switch yys547
	} // end for yyj547
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj549 int
	var yyb549 bool
	var yyhl549 bool = l >= 0
	yyj549++
	if yyhl549 {
		yyb549 = yyj549 > l
	} else {
		yyb549 = r.CheckBreak()
	}
	if yyb549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj549++
		if yyhl549 {
			yyb549 = yyj549 > l
		} else {
			yyb549 = r.CheckBreak()
		}
		if yyb549 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj549-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym551 := z.EncBinary()
		_ = yym551
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep552 := !z.EncBinary()
			yy2arr552 := z.EncBasicHandle().StructToArray
			var yyq552 [2]bool
			_, _, _ = yysep552, yyq552, yy2arr552
			const yyr552 bool = false
			yyq552[0] = x.Type != ""
			yyq552[1] = x.RollingUpdate != nil
			var yynn552 int
			if yyr552 || yy2arr552 {
				r.EncodeArrayStart(2)
			} else {
				yynn552 = 0
				for _, b := range yyq552 {
					if b {
						yynn552++
					}
				}
				r.EncodeMapStart(yynn552)
				yynn552 = 0
			}
			if yyr552 || yy2arr552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq552[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq552[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr552 || yy2arr552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq552[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq552[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr552 || yy2arr552 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym555 := z.DecBinary()
	_ = yym555
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct556 := r.ContainerType()
		if yyct556 == codecSelferValueTypeMap1234 {
			yyl556 := r.ReadMapStart()
			if yyl556 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl556, d)
			}
		} else if yyct556 == codecSelferValueTypeArray1234 {
			yyl556 := r.ReadArrayStart()
			if yyl556 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl556, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys557Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys557Slc
	var yyhl557 bool = l >= 0
	for yyj557 := 0; ; yyj557++ {
		if yyhl557 {
			if yyj557 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys557Slc = r.DecodeBytes(yys557Slc, true, true)
		yys557 := string(yys557Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys557 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys557)
		} // end switch yys557
	} // end for yyj557
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj560 int
	var yyb560 bool
	var yyhl560 bool = l >= 0
	yyj560++
	if yyhl560 {
		yyb560 = yyj560 > l
	} else {
		yyb560 = r.CheckBreak()
	}
	if yyb560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj560++
	if yyhl560 {
		yyb560 = yyj560 > l
	} else {
		yyb560 = r.CheckBreak()
	}
	if yyb560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj560++
		if yyhl560 {
			yyb560 = yyj560 > l
		} else {
			yyb560 = r.CheckBreak()
		}
		if yyb560 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj560-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym563 := z.EncBinary()
	_ = yym563
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym564 := z.DecBinary()
	_ = yym564
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym565 := z.EncBinary()
		_ = yym565
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep566 := !z.EncBinary()
			yy2arr566 := z.EncBasicHandle().StructToArray
			var yyq566 [2]bool
			_, _, _ = yysep566, yyq566, yy2arr566
			const yyr566 bool = false
			yyq566[0] = true
			yyq566[1] = true
			var yynn566 int
			if yyr566 || yy2arr566 {
				r.EncodeArrayStart(2)
			} else {
				yynn566 = 0
				for _, b := range yyq566 {
					if b {
						yynn566++
					}
				}
				r.EncodeMapStart(yynn566)
				yynn566 = 0
			}
			if yyr566 || yy2arr566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq566[0] {
					yy568 := &x.MaxUnavailable
					yym569 := z.EncBinary()
					_ = yym569
					if false {
					} else if z.HasExtensions() && z.EncExt(yy568) {
					} else if !yym569 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy568)
					} else {
						z.EncFallback(yy568)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq566[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy570 := &x.MaxUnavailable
					yym571 := z.EncBinary()
					_ = yym571
					if false {
					} else if z.HasExtensions() && z.EncExt(yy570) {
					} else if !yym571 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy570)
					} else {
						z.EncFallback(yy570)
					}
				}
			}
			if yyr566 || yy2arr566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq566[1] {
					yy573 := &x.MaxSurge
					yym574 := z.EncBinary()
					_ = yym574
					if false {
					} else if z.HasExtensions() && z.EncExt(yy573) {
					} else if !yym574 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy573)
					} else {
						z.EncFallback(yy573)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq566[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy575 := &x.MaxSurge
					yym576 := z.EncBinary()
					_ = yym576
					if false {
					} else if z.HasExtensions() && z.EncExt(yy575) {
					} else if !yym576 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy575)
					} else {
						z.EncFallback(yy575)
					}
				}
			}
			if yyr566 || yy2arr566 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym577 := z.DecBinary()
	_ = yym577
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct578 := r.ContainerType()
		if yyct578 == codecSelferValueTypeMap1234 {
			yyl578 := r.ReadMapStart()
			if yyl578 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl578, d)
			}
		} else if yyct578 == codecSelferValueTypeArray1234 {
			yyl578 := r.ReadArrayStart()
			if yyl578 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl578, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys579Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys579Slc
	var yyhl579 bool = l >= 0
	for yyj579 := 0; ; yyj579++ {
		if yyhl579 {
			if yyj579 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys579Slc = r.DecodeBytes(yys579Slc, true, true)
		yys579 := string(yys579Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys579 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_intstr.IntOrString{}
			} else {
				yyv580 := &x.MaxUnavailable
				yym581 := z.DecBinary()
				_ = yym581
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv580) {
				} else if !yym581 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv580)
				} else {
					z.DecFallback(yyv580, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				x.MaxSurge = pkg6_intstr.IntOrString{}
			} else {
				yyv582 := &x.MaxSurge
				yym583 := z.DecBinary()
				_ = yym583
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv582) {
				} else if !yym583 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv582)
				} else {
					z.DecFallback(yyv582, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys579)
		} // end switch yys579
	} // end for yyj579
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj584 int
	var yyb584 bool
	var yyhl584 bool = l >= 0
	yyj584++
	if yyhl584 {
		yyb584 = yyj584 > l
	} else {
		yyb584 = r.CheckBreak()
	}
	if yyb584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_intstr.IntOrString{}
	} else {
		yyv585 := &x.MaxUnavailable
		yym586 := z.DecBinary()
		_ = yym586
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv585) {
		} else if !yym586 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv585)
		} else {
			z.DecFallback(yyv585, false)
		}
	}
	yyj584++
	if yyhl584 {
		yyb584 = yyj584 > l
	} else {
		yyb584 = r.CheckBreak()
	}
	if yyb584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxSurge = pkg6_intstr.IntOrString{}
	} else {
		yyv587 := &x.MaxSurge
		yym588 := z.DecBinary()
		_ = yym588
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv587) {
		} else if !yym588 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv587)
		} else {
			z.DecFallback(yyv587, false)
		}
	}
	for {
		yyj584++
		if yyhl584 {
			yyb584 = yyj584 > l
		} else {
			yyb584 = r.CheckBreak()
		}
		if yyb584 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj584-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym589 := z.EncBinary()
		_ = yym589
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep590 := !z.EncBinary()
			yy2arr590 := z.EncBasicHandle().StructToArray
			var yyq590 [4]bool
			_, _, _ = yysep590, yyq590, yy2arr590
			const yyr590 bool = false
			yyq590[0] = x.Replicas != 0
			yyq590[1] = x.UpdatedReplicas != 0
			yyq590[2] = x.AvailableReplicas != 0
			yyq590[3] = x.UnavailableReplicas != 0
			var yynn590 int
			if yyr590 || yy2arr590 {
				r.EncodeArrayStart(4)
			} else {
				yynn590 = 0
				for _, b := range yyq590 {
					if b {
						yynn590++
					}
				}
				r.EncodeMapStart(yynn590)
				yynn590 = 0
			}
			if yyr590 || yy2arr590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq590[0] {
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq590[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym593 := z.EncBinary()
					_ = yym593
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr590 || yy2arr590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq590[1] {
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq590[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym596 := z.EncBinary()
					_ = yym596
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr590 || yy2arr590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq590[2] {
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq590[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym599 := z.EncBinary()
					_ = yym599
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr590 || yy2arr590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq590[3] {
					yym601 := z.EncBinary()
					_ = yym601
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq590[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym602 := z.EncBinary()
					_ = yym602
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr590 || yy2arr590 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym603 := z.DecBinary()
	_ = yym603
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct604 := r.ContainerType()
		if yyct604 == codecSelferValueTypeMap1234 {
			yyl604 := r.ReadMapStart()
			if yyl604 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl604, d)
			}
		} else if yyct604 == codecSelferValueTypeArray1234 {
			yyl604 := r.ReadArrayStart()
			if yyl604 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl604, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys605Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys605Slc
	var yyhl605 bool = l >= 0
	for yyj605 := 0; ; yyj605++ {
		if yyhl605 {
			if yyj605 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys605Slc = r.DecodeBytes(yys605Slc, true, true)
		yys605 := string(yys605Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys605 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys605)
		} // end switch yys605
	} // end for yyj605
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj610 int
	var yyb610 bool
	var yyhl610 bool = l >= 0
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj610++
		if yyhl610 {
			yyb610 = yyj610 > l
		} else {
			yyb610 = r.CheckBreak()
		}
		if yyb610 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj610-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym615 := z.EncBinary()
		_ = yym615
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep616 := !z.EncBinary()
			yy2arr616 := z.EncBasicHandle().StructToArray
			var yyq616 [4]bool
			_, _, _ = yysep616, yyq616, yy2arr616
			const yyr616 bool = false
			yyq616[0] = x.Kind != ""
			yyq616[1] = x.APIVersion != ""
			yyq616[2] = true
			var yynn616 int
			if yyr616 || yy2arr616 {
				r.EncodeArrayStart(4)
			} else {
				yynn616 = 1
				for _, b := range yyq616 {
					if b {
						yynn616++
					}
				}
				r.EncodeMapStart(yynn616)
				yynn616 = 0
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[0] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq616[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[1] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq616[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[2] {
					yy624 := &x.ListMeta
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else if z.HasExtensions() && z.EncExt(yy624) {
					} else {
						z.EncFallback(yy624)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq616[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy626 := &x.ListMeta
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else if z.HasExtensions() && z.EncExt(yy626) {
					} else {
						z.EncFallback(yy626)
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym631 := z.DecBinary()
	_ = yym631
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct632 := r.ContainerType()
		if yyct632 == codecSelferValueTypeMap1234 {
			yyl632 := r.ReadMapStart()
			if yyl632 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl632, d)
			}
		} else if yyct632 == codecSelferValueTypeArray1234 {
			yyl632 := r.ReadArrayStart()
			if yyl632 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl632, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys633Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys633Slc
	var yyhl633 bool = l >= 0
	for yyj633 := 0; ; yyj633++ {
		if yyhl633 {
			if yyj633 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys633Slc = r.DecodeBytes(yys633Slc, true, true)
		yys633 := string(yys633Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys633 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv636 := &x.ListMeta
				yym637 := z.DecBinary()
				_ = yym637
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv636) {
				} else {
					z.DecFallback(yyv636, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv638 := &x.Items
				yym639 := z.DecBinary()
				_ = yym639
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv638), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys633)
		} // end switch yys633
	} // end for yyj633
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj640 int
	var yyb640 bool
	var yyhl640 bool = l >= 0
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv643 := &x.ListMeta
		yym644 := z.DecBinary()
		_ = yym644
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv643) {
		} else {
			z.DecFallback(yyv643, false)
		}
	}
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv645 := &x.Items
		yym646 := z.DecBinary()
		_ = yym646
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv645), d)
		}
	}
	for {
		yyj640++
		if yyhl640 {
			yyb640 = yyj640 > l
		} else {
			yyb640 = r.CheckBreak()
		}
		if yyb640 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj640-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetUpdateStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym647 := z.EncBinary()
		_ = yym647
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep648 := !z.EncBinary()
			yy2arr648 := z.EncBasicHandle().StructToArray
			var yyq648 [2]bool
			_, _, _ = yysep648, yyq648, yy2arr648
			const yyr648 bool = false
			yyq648[0] = x.Type != ""
			yyq648[1] = x.RollingUpdate != nil
			var yynn648 int
			if yyr648 || yy2arr648 {
				r.EncodeArrayStart(2)
			} else {
				yynn648 = 0
				for _, b := range yyq648 {
					if b {
						yynn648++
					}
				}
				r.EncodeMapStart(yynn648)
				yynn648 = 0
			}
			if yyr648 || yy2arr648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq648[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq648[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr648 || yy2arr648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq648[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq648[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr648 || yy2arr648 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetUpdateStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym651 := z.DecBinary()
	_ = yym651
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct652 := r.ContainerType()
		if yyct652 == codecSelferValueTypeMap1234 {
			yyl652 := r.ReadMapStart()
			if yyl652 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl652, d)
			}
		} else if yyct652 == codecSelferValueTypeArray1234 {
			yyl652 := r.ReadArrayStart()
			if yyl652 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl652, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys653Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys653Slc
	var yyhl653 bool = l >= 0
	for yyj653 := 0; ; yyj653++ {
		if yyhl653 {
			if yyj653 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys653Slc = r.DecodeBytes(yys653Slc, true, true)
		yys653 := string(yys653Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys653 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDaemonSet)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys653)
		} // end switch yys653
	} // end for yyj653
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj656 int
	var yyb656 bool
	var yyhl656 bool = l >= 0
	yyj656++
	if yyhl656 {
		yyb656 = yyj656 > l
	} else {
		yyb656 = r.CheckBreak()
	}
	if yyb656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
	}
	yyj656++
	if yyhl656 {
		yyb656 = yyj656 > l
	} else {
		yyb656 = r.CheckBreak()
	}
	if yyb656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDaemonSet)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj656++
		if yyhl656 {
			yyb656 = yyj656 > l
		} else {
			yyb656 = r.CheckBreak()
		}
		if yyb656 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj656-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DaemonSetUpdateStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym659 := z.EncBinary()
	_ = yym659
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DaemonSetUpdateStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym660 := z.DecBinary()
	_ = yym660
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym661 := z.EncBinary()
		_ = yym661
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep662 := !z.EncBinary()
			yy2arr662 := z.EncBasicHandle().StructToArray
			var yyq662 [2]bool
			_, _, _ = yysep662, yyq662, yy2arr662
			const yyr662 bool = false
			yyq662[0] = true
			yyq662[1] = x.MinReadySeconds != 0
			var yynn662 int
			if yyr662 || yy2arr662 {
				r.EncodeArrayStart(2)
			} else {
				yynn662 = 0
				for _, b := range yyq662 {
					if b {
						yynn662++
					}
				}
				r.EncodeMapStart(yynn662)
				yynn662 = 0
			}
			if yyr662 || yy2arr662 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq662[0] {
					yy664 := &x.MaxUnavailable
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else if z.HasExtensions() && z.EncExt(yy664) {
					} else if !yym665 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy664)
					} else {
						z.EncFallback(yy664)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq662[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy666 := &x.MaxUnavailable
					yym667 := z.EncBinary()
					_ = yym667
					if false {
					} else if z.HasExtensions() && z.EncExt(yy666) {
					} else if !yym667 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy666)
					} else {
						z.EncFallback(yy666)
					}
				}
			}
			if yyr662 || yy2arr662 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq662[1] {
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq662[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym670 := z.EncBinary()
					_ = yym670
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr662 || yy2arr662 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym671 := z.DecBinary()
	_ = yym671
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct672 := r.ContainerType()
		if yyct672 == codecSelferValueTypeMap1234 {
			yyl672 := r.ReadMapStart()
			if yyl672 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl672, d)
			}
		} else if yyct672 == codecSelferValueTypeArray1234 {
			yyl672 := r.ReadArrayStart()
			if yyl672 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl672, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys673Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys673Slc
	var yyhl673 bool = l >= 0
	for yyj673 := 0; ; yyj673++ {
		if yyhl673 {
			if yyj673 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys673Slc = r.DecodeBytes(yys673Slc, true, true)
		yys673 := string(yys673Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys673 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_intstr.IntOrString{}
			} else {
				yyv674 := &x.MaxUnavailable
				yym675 := z.DecBinary()
				_ = yym675
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv674) {
				} else if !yym675 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv674)
				} else {
					z.DecFallback(yyv674, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys673)
		} // end switch yys673
	} // end for yyj673
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj677 int
	var yyb677 bool
	var yyhl677 bool = l >= 0
	yyj677++
	if yyhl677 {
		yyb677 = yyj677 > l
	} else {
		yyb677 = r.CheckBreak()
	}
	if yyb677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_intstr.IntOrString{}
	} else {
		yyv678 := &x.MaxUnavailable
		yym679 := z.DecBinary()
		_ = yym679
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv678) {
		} else if !yym679 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv678)
		} else {
			z.DecFallback(yyv678, false)
		}
	}
	yyj677++
	if yyhl677 {
		yyb677 = yyj677 > l
	} else {
		yyb677 = r.CheckBreak()
	}
	if yyb677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj677++
		if yyhl677 {
			yyb677 = yyj677 > l
		} else {
			yyb677 = r.CheckBreak()
		}
		if yyb677 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj677-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym681 := z.EncBinary()
		_ = yym681
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep682 := !z.EncBinary()
			yy2arr682 := z.EncBasicHandle().StructToArray
			var yyq682 [4]bool
			_, _, _ = yysep682, yyq682, yy2arr682
			const yyr682 bool = false
			yyq682[0] = x.Selector != nil
			yyq682[2] = true
			yyq682[3] = x.UniqueLabelKey != ""
			var yynn682 int
			if yyr682 || yy2arr682 {
				r.EncodeArrayStart(4)
			} else {
				yynn682 = 1
				for _, b := range yyq682 {
					if b {
						yynn682++
					}
				}
				r.EncodeMapStart(yynn682)
				yynn682 = 0
			}
			if yyr682 || yy2arr682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq682[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym684 := z.EncBinary()
						_ = yym684
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq682[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym685 := z.EncBinary()
						_ = yym685
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr682 || yy2arr682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy687 := &x.Template
				yy687.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy688 := &x.Template
				yy688.CodecEncodeSelf(e)
			}
			if yyr682 || yy2arr682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq682[2] {
					yy690 := &x.UpdateStrategy
					yy690.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq682[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updateStrategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy691 := &x.UpdateStrategy
					yy691.CodecEncodeSelf(e)
				}
			}
			if yyr682 || yy2arr682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq682[3] {
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq682[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym694 := z.EncBinary()
					_ = yym694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yyr682 || yy2arr682 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym695 := z.DecBinary()
	_ = yym695
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct696 := r.ContainerType()
		if yyct696 == codecSelferValueTypeMap1234 {
			yyl696 := r.ReadMapStart()
			if yyl696 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl696, d)
			}
		} else if yyct696 == codecSelferValueTypeArray1234 {
			yyl696 := r.ReadArrayStart()
			if yyl696 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl696, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys697Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys697Slc
	var yyhl697 bool = l >= 0
	for yyj697 := 0; ; yyj697++ {
		if yyhl697 {
			if yyj697 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys697Slc = r.DecodeBytes(yys697Slc, true, true)
		yys697 := string(yys697Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys697 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym699 := z.DecBinary()
				_ = yym699
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv700 := &x.Template
				yyv700.CodecDecodeSelf(d)
			}
		case "updateStrategy":
			if r.TryDecodeAsNil() {
				x.UpdateStrategy = DaemonSetUpdateStrategy{}
			} else {
				yyv701 := &x.UpdateStrategy
				yyv701.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys697)
		} // end switch yys697
	} // end for yyj697
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj703 int
	var yyb703 bool
	var yyhl703 bool = l >= 0
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym705 := z.DecBinary()
		_ = yym705
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv706 := &x.Template
		yyv706.CodecDecodeSelf(d)
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdateStrategy = DaemonSetUpdateStrategy{}
	} else {
		yyv707 := &x.UpdateStrategy
		yyv707.CodecDecodeSelf(d)
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	for {
		yyj703++
		if yyhl703 {
			yyb703 = yyj703 > l
		} else {
			yyb703 = r.CheckBreak()
		}
		if yyb703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym709 := z.EncBinary()
		_ = yym709
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep710 := !z.EncBinary()
			yy2arr710 := z.EncBasicHandle().StructToArray
			var yyq710 [3]bool
			_, _, _ = yysep710, yyq710, yy2arr710
			const yyr710 bool = false
			var yynn710 int
			if yyr710 || yy2arr710 {
				r.EncodeArrayStart(3)
			} else {
				yynn710 = 3
				for _, b := range yyq710 {
					if b {
						yynn710++
					}
				}
				r.EncodeMapStart(yynn710)
				yynn710 = 0
			}
			if yyr710 || yy2arr710 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym712 := z.EncBinary()
				_ = yym712
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym713 := z.EncBinary()
				_ = yym713
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr710 || yy2arr710 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym715 := z.EncBinary()
				_ = yym715
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym716 := z.EncBinary()
				_ = yym716
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr710 || yy2arr710 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym718 := z.EncBinary()
				_ = yym718
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym719 := z.EncBinary()
				_ = yym719
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr710 || yy2arr710 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym720 := z.DecBinary()
	_ = yym720
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct721 := r.ContainerType()
		if yyct721 == codecSelferValueTypeMap1234 {
			yyl721 := r.ReadMapStart()
			if yyl721 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl721, d)
			}
		} else if yyct721 == codecSelferValueTypeArray1234 {
			yyl721 := r.ReadArrayStart()
			if yyl721 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl721, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys722Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys722Slc
	var yyhl722 bool = l >= 0
	for yyj722 := 0; ; yyj722++ {
		if yyhl722 {
			if yyj722 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys722Slc = r.DecodeBytes(yys722Slc, true, true)
		yys722 := string(yys722Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys722 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys722)
		} // end switch yys722
	} // end for yyj722
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj726 int
	var yyb726 bool
	var yyhl726 bool = l >= 0
	yyj726++
	if yyhl726 {
		yyb726 = yyj726 > l
	} else {
		yyb726 = r.CheckBreak()
	}
	if yyb726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj726++
	if yyhl726 {
		yyb726 = yyj726 > l
	} else {
		yyb726 = r.CheckBreak()
	}
	if yyb726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj726++
	if yyhl726 {
		yyb726 = yyj726 > l
	} else {
		yyb726 = r.CheckBreak()
	}
	if yyb726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj726++
		if yyhl726 {
			yyb726 = yyj726 > l
		} else {
			yyb726 = r.CheckBreak()
		}
		if yyb726 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj726-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym730 := z.EncBinary()
		_ = yym730
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep731 := !z.EncBinary()
			yy2arr731 := z.EncBasicHandle().StructToArray
			var yyq731 [5]bool
			_, _, _ = yysep731, yyq731, yy2arr731
			const yyr731 bool = false
			yyq731[0] = x.Kind != ""
			yyq731[1] = x.APIVersion != ""
			yyq731[2] = true
			yyq731[3] = true
			yyq731[4] = true
			var yynn731 int
			if yyr731 || yy2arr731 {
				r.EncodeArrayStart(5)
			} else {
				yynn731 = 0
				for _, b := range yyq731 {
					if b {
						yynn731++
					}
				}
				r.EncodeMapStart(yynn731)
				yynn731 = 0
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq731[0] {
					yym733 := z.EncBinary()
					_ = yym733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq731[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq731[1] {
					yym736 := z.EncBinary()
					_ = yym736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq731[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym737 := z.EncBinary()
					_ = yym737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq731[2] {
					yy739 := &x.ObjectMeta
					yy739.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq731[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy740 := &x.ObjectMeta
					yy740.CodecEncodeSelf(e)
				}
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq731[3] {
					yy742 := &x.Spec
					yy742.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq731[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy743 := &x.Spec
					yy743.CodecEncodeSelf(e)
				}
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq731[4] {
					yy745 := &x.Status
					yy745.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq731[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy746 := &x.Status
					yy746.CodecEncodeSelf(e)
				}
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym747 := z.DecBinary()
	_ = yym747
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct748 := r.ContainerType()
		if yyct748 == codecSelferValueTypeMap1234 {
			yyl748 := r.ReadMapStart()
			if yyl748 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl748, d)
			}
		} else if yyct748 == codecSelferValueTypeArray1234 {
			yyl748 := r.ReadArrayStart()
			if yyl748 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl748, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys749Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys749Slc
	var yyhl749 bool = l >= 0
	for yyj749 := 0; ; yyj749++ {
		if yyhl749 {
			if yyj749 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys749Slc = r.DecodeBytes(yys749Slc, true, true)
		yys749 := string(yys749Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys749 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv752 := &x.ObjectMeta
				yyv752.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv753 := &x.Spec
				yyv753.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv754 := &x.Status
				yyv754.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys749)
		} // end switch yys749
	} // end for yyj749
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj755 int
	var yyb755 bool
	var yyhl755 bool = l >= 0
	yyj755++
	if yyhl755 {
		yyb755 = yyj755 > l
	} else {
		yyb755 = r.CheckBreak()
	}
	if yyb755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj755++
	if yyhl755 {
		yyb755 = yyj755 > l
	} else {
		yyb755 = r.CheckBreak()
	}
	if yyb755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj755++
	if yyhl755 {
		yyb755 = yyj755 > l
	} else {
		yyb755 = r.CheckBreak()
	}
	if yyb755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv758 := &x.ObjectMeta
		yyv758.CodecDecodeSelf(d)
	}
	yyj755++
	if yyhl755 {
		yyb755 = yyj755 > l
	} else {
		yyb755 = r.CheckBreak()
	}
	if yyb755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv759 := &x.Spec
		yyv759.CodecDecodeSelf(d)
	}
	yyj755++
	if yyhl755 {
		yyb755 = yyj755 > l
	} else {
		yyb755 = r.CheckBreak()
	}
	if yyb755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv760 := &x.Status
		yyv760.CodecDecodeSelf(d)
	}
	for {
		yyj755++
		if yyhl755 {
			yyb755 = yyj755 > l
		} else {
			yyb755 = r.CheckBreak()
		}
		if yyb755 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj755-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym761 := z.EncBinary()
		_ = yym761
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep762 := !z.EncBinary()
			yy2arr762 := z.EncBasicHandle().StructToArray
			var yyq762 [4]bool
			_, _, _ = yysep762, yyq762, yy2arr762
			const yyr762 bool = false
			yyq762[0] = x.Kind != ""
			yyq762[1] = x.APIVersion != ""
			yyq762[2] = true
			var yynn762 int
			if yyr762 || yy2arr762 {
				r.EncodeArrayStart(4)
			} else {
				yynn762 = 1
				for _, b := range yyq762 {
					if b {
						yynn762++
					}
				}
				r.EncodeMapStart(yynn762)
				yynn762 = 0
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq762[0] {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq762[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq762[1] {
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq762[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq762[2] {
					yy770 := &x.ListMeta
					yym771 := z.EncBinary()
					_ = yym771
					if false {
					} else if z.HasExtensions() && z.EncExt(yy770) {
					} else {
						z.EncFallback(yy770)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq762[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy772 := &x.ListMeta
					yym773 := z.EncBinary()
					_ = yym773
					if false {
					} else if z.HasExtensions() && z.EncExt(yy772) {
					} else {
						z.EncFallback(yy772)
					}
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym775 := z.EncBinary()
					_ = yym775
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym777 := z.DecBinary()
	_ = yym777
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct778 := r.ContainerType()
		if yyct778 == codecSelferValueTypeMap1234 {
			yyl778 := r.ReadMapStart()
			if yyl778 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl778, d)
			}
		} else if yyct778 == codecSelferValueTypeArray1234 {
			yyl778 := r.ReadArrayStart()
			if yyl778 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl778, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys779Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys779Slc
	var yyhl779 bool = l >= 0
	for yyj779 := 0; ; yyj779++ {
		if yyhl779 {
			if yyj779 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys779Slc = r.DecodeBytes(yys779Slc, true, true)
		yys779 := string(yys779Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys779 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv782 := &x.ListMeta
				yym783 := z.DecBinary()
				_ = yym783
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv782) {
				} else {
					z.DecFallback(yyv782, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv784 := &x.Items
				yym785 := z.DecBinary()
				_ = yym785
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv784), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys779)
		} // end switch yys779
	} // end for yyj779
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj786 int
	var yyb786 bool
	var yyhl786 bool = l >= 0
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv789 := &x.ListMeta
		yym790 := z.DecBinary()
		_ = yym790
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv789) {
		} else {
			z.DecFallback(yyv789, false)
		}
	}
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv791 := &x.Items
		yym792 := z.DecBinary()
		_ = yym792
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv791), d)
		}
	}
	for {
		yyj786++
		if yyhl786 {
			yyb786 = yyj786 > l
		} else {
			yyb786 = r.CheckBreak()
		}
		if yyb786 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj786-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym793 := z.EncBinary()
		_ = yym793
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep794 := !z.EncBinary()
			yy2arr794 := z.EncBasicHandle().StructToArray
			var yyq794 [4]bool
			_, _, _ = yysep794, yyq794, yy2arr794
			const yyr794 bool = false
			yyq794[0] = x.Kind != ""
			yyq794[1] = x.APIVersion != ""
			yyq794[2] = true
			var yynn794 int
			if yyr794 || yy2arr794 {
				r.EncodeArrayStart(4)
			} else {
				yynn794 = 1
				for _, b := range yyq794 {
					if b {
						yynn794++
					}
				}
				r.EncodeMapStart(yynn794)
				yynn794 = 0
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq794[0] {
					yym796 := z.EncBinary()
					_ = yym796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq794[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq794[1] {
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq794[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym800 := z.EncBinary()
					_ = yym800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq794[2] {
					yy802 := &x.ListMeta
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else if z.HasExtensions() && z.EncExt(yy802) {
					} else {
						z.EncFallback(yy802)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq794[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy804 := &x.ListMeta
					yym805 := z.EncBinary()
					_ = yym805
					if false {
					} else if z.HasExtensions() && z.EncExt(yy804) {
					} else {
						z.EncFallback(yy804)
					}
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym807 := z.EncBinary()
					_ = yym807
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym808 := z.EncBinary()
					_ = yym808
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym809 := z.DecBinary()
	_ = yym809
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct810 := r.ContainerType()
		if yyct810 == codecSelferValueTypeMap1234 {
			yyl810 := r.ReadMapStart()
			if yyl810 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl810, d)
			}
		} else if yyct810 == codecSelferValueTypeArray1234 {
			yyl810 := r.ReadArrayStart()
			if yyl810 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl810, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys811Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys811Slc
	var yyhl811 bool = l >= 0
	for yyj811 := 0; ; yyj811++ {
		if yyhl811 {
			if yyj811 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys811Slc = r.DecodeBytes(yys811Slc, true, true)
		yys811 := string(yys811Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys811 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv814 := &x.ListMeta
				yym815 := z.DecBinary()
				_ = yym815
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv814) {
				} else {
					z.DecFallback(yyv814, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv816 := &x.Items
				yym817 := z.DecBinary()
				_ = yym817
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv816), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys811)
		} // end switch yys811
	} // end for yyj811
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj818 int
	var yyb818 bool
	var yyhl818 bool = l >= 0
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv821 := &x.ListMeta
		yym822 := z.DecBinary()
		_ = yym822
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv821) {
		} else {
			z.DecFallback(yyv821, false)
		}
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv823 := &x.Items
		yym824 := z.DecBinary()
		_ = yym824
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv823), d)
		}
	}
	for {
		yyj818++
		if yyhl818 {
			yyb818 = yyj818 > l
		} else {
			yyb818 = r.CheckBreak()
		}
		if yyb818 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj818-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym825 := z.EncBinary()
		_ = yym825
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep826 := !z.EncBinary()
			yy2arr826 := z.EncBasicHandle().StructToArray
			var yyq826 [5]bool
			_, _, _ = yysep826, yyq826, yy2arr826
			const yyr826 bool = false
			yyq826[0] = x.Kind != ""
			yyq826[1] = x.APIVersion != ""
			yyq826[2] = true
			yyq826[3] = true
			yyq826[4] = true
			var yynn826 int
			if yyr826 || yy2arr826 {
				r.EncodeArrayStart(5)
			} else {
				yynn826 = 0
				for _, b := range yyq826 {
					if b {
						yynn826++
					}
				}
				r.EncodeMapStart(yynn826)
				yynn826 = 0
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq826[0] {
					yym828 := z.EncBinary()
					_ = yym828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq826[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq826[1] {
					yym831 := z.EncBinary()
					_ = yym831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq826[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym832 := z.EncBinary()
					_ = yym832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq826[2] {
					yy834 := &x.ObjectMeta
					yy834.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq826[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy835 := &x.ObjectMeta
					yy835.CodecEncodeSelf(e)
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq826[3] {
					yy837 := &x.Spec
					yy837.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq826[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy838 := &x.Spec
					yy838.CodecEncodeSelf(e)
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq826[4] {
					yy840 := &x.Status
					yy840.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq826[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy841 := &x.Status
					yy841.CodecEncodeSelf(e)
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym842 := z.DecBinary()
	_ = yym842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct843 := r.ContainerType()
		if yyct843 == codecSelferValueTypeMap1234 {
			yyl843 := r.ReadMapStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl843, d)
			}
		} else if yyct843 == codecSelferValueTypeArray1234 {
			yyl843 := r.ReadArrayStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys844Slc
	var yyhl844 bool = l >= 0
	for yyj844 := 0; ; yyj844++ {
		if yyhl844 {
			if yyj844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys844Slc = r.DecodeBytes(yys844Slc, true, true)
		yys844 := string(yys844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys844 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv847 := &x.ObjectMeta
				yyv847.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv848 := &x.Spec
				yyv848.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv849 := &x.Status
				yyv849.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys844)
		} // end switch yys844
	} // end for yyj844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj850 int
	var yyb850 bool
	var yyhl850 bool = l >= 0
	yyj850++
	if yyhl850 {
		yyb850 = yyj850 > l
	} else {
		yyb850 = r.CheckBreak()
	}
	if yyb850 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj850++
	if yyhl850 {
		yyb850 = yyj850 > l
	} else {
		yyb850 = r.CheckBreak()
	}
	if yyb850 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj850++
	if yyhl850 {
		yyb850 = yyj850 > l
	} else {
		yyb850 = r.CheckBreak()
	}
	if yyb850 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv853 := &x.ObjectMeta
		yyv853.CodecDecodeSelf(d)
	}
	yyj850++
	if yyhl850 {
		yyb850 = yyj850 > l
	} else {
		yyb850 = r.CheckBreak()
	}
	if yyb850 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv854 := &x.Spec
		yyv854.CodecDecodeSelf(d)
	}
	yyj850++
	if yyhl850 {
		yyb850 = yyj850 > l
	} else {
		yyb850 = r.CheckBreak()
	}
	if yyb850 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv855 := &x.Status
		yyv855.CodecDecodeSelf(d)
	}
	for {
		yyj850++
		if yyhl850 {
			yyb850 = yyj850 > l
		} else {
			yyb850 = r.CheckBreak()
		}
		if yyb850 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj850-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym856 := z.EncBinary()
		_ = yym856
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep857 := !z.EncBinary()
			yy2arr857 := z.EncBasicHandle().StructToArray
			var yyq857 [4]bool
			_, _, _ = yysep857, yyq857, yy2arr857
			const yyr857 bool = false
			yyq857[0] = x.Kind != ""
			yyq857[1] = x.APIVersion != ""
			yyq857[2] = true
			var yynn857 int
			if yyr857 || yy2arr857 {
				r.EncodeArrayStart(4)
			} else {
				yynn857 = 1
				for _, b := range yyq857 {
					if b {
						yynn857++
					}
				}
				r.EncodeMapStart(yynn857)
				yynn857 = 0
			}
			if yyr857 || yy2arr857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq857[0] {
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq857[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym860 := z.EncBinary()
					_ = yym860
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr857 || yy2arr857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq857[1] {
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq857[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr857 || yy2arr857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq857[2] {
					yy865 := &x.ListMeta
					yym866 := z.EncBinary()
					_ = yym866
					if false {
					} else if z.HasExtensions() && z.EncExt(yy865) {
					} else {
						z.EncFallback(yy865)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq857[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy867 := &x.ListMeta
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else if z.HasExtensions() && z.EncExt(yy867) {
					} else {
						z.EncFallback(yy867)
					}
				}
			}
			if yyr857 || yy2arr857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym870 := z.EncBinary()
					_ = yym870
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym871 := z.EncBinary()
					_ = yym871
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr857 || yy2arr857 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym872 := z.DecBinary()
	_ = yym872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct873 := r.ContainerType()
		if yyct873 == codecSelferValueTypeMap1234 {
			yyl873 := r.ReadMapStart()
			if yyl873 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl873, d)
			}
		} else if yyct873 == codecSelferValueTypeArray1234 {
			yyl873 := r.ReadArrayStart()
			if yyl873 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl873, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys874Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys874Slc
	var yyhl874 bool = l >= 0
	for yyj874 := 0; ; yyj874++ {
		if yyhl874 {
			if yyj874 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys874Slc = r.DecodeBytes(yys874Slc, true, true)
		yys874 := string(yys874Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys874 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv877 := &x.ListMeta
				yym878 := z.DecBinary()
				_ = yym878
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv877) {
				} else {
					z.DecFallback(yyv877, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv879 := &x.Items
				yym880 := z.DecBinary()
				_ = yym880
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv879), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys874)
		} // end switch yys874
	} // end for yyj874
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj881 int
	var yyb881 bool
	var yyhl881 bool = l >= 0
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv884 := &x.ListMeta
		yym885 := z.DecBinary()
		_ = yym885
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv884) {
		} else {
			z.DecFallback(yyv884, false)
		}
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv886 := &x.Items
		yym887 := z.DecBinary()
		_ = yym887
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv886), d)
		}
	}
	for {
		yyj881++
		if yyhl881 {
			yyb881 = yyj881 > l
		} else {
			yyb881 = r.CheckBreak()
		}
		if yyb881 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj881-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym888 := z.EncBinary()
		_ = yym888
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep889 := !z.EncBinary()
			yy2arr889 := z.EncBasicHandle().StructToArray
			var yyq889 [5]bool
			_, _, _ = yysep889, yyq889, yy2arr889
			const yyr889 bool = false
			yyq889[0] = x.Parallelism != nil
			yyq889[1] = x.Completions != nil
			yyq889[2] = x.ActiveDeadlineSeconds != nil
			yyq889[3] = x.Selector != nil
			var yynn889 int
			if yyr889 || yy2arr889 {
				r.EncodeArrayStart(5)
			} else {
				yynn889 = 1
				for _, b := range yyq889 {
					if b {
						yynn889++
					}
				}
				r.EncodeMapStart(yynn889)
				yynn889 = 0
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq889[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy891 := *x.Parallelism
						yym892 := z.EncBinary()
						_ = yym892
						if false {
						} else {
							r.EncodeInt(int64(yy891))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq889[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy893 := *x.Parallelism
						yym894 := z.EncBinary()
						_ = yym894
						if false {
						} else {
							r.EncodeInt(int64(yy893))
						}
					}
				}
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq889[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy896 := *x.Completions
						yym897 := z.EncBinary()
						_ = yym897
						if false {
						} else {
							r.EncodeInt(int64(yy896))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq889[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy898 := *x.Completions
						yym899 := z.EncBinary()
						_ = yym899
						if false {
						} else {
							r.EncodeInt(int64(yy898))
						}
					}
				}
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq889[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy901 := *x.ActiveDeadlineSeconds
						yym902 := z.EncBinary()
						_ = yym902
						if false {
						} else {
							r.EncodeInt(int64(yy901))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq889[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy903 := *x.ActiveDeadlineSeconds
						yym904 := z.EncBinary()
						_ = yym904
						if false {
						} else {
							r.EncodeInt(int64(yy903))
						}
					}
				}
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq889[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym906 := z.EncBinary()
						_ = yym906
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq889[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym907 := z.EncBinary()
						_ = yym907
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy909 := &x.Template
				yy909.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy910 := &x.Template
				yy910.CodecEncodeSelf(e)
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym911 := z.DecBinary()
	_ = yym911
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct912 := r.ContainerType()
		if yyct912 == codecSelferValueTypeMap1234 {
			yyl912 := r.ReadMapStart()
			if yyl912 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl912, d)
			}
		} else if yyct912 == codecSelferValueTypeArray1234 {
			yyl912 := r.ReadArrayStart()
			if yyl912 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl912, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys913Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys913Slc
	var yyhl913 bool = l >= 0
	for yyj913 := 0; ; yyj913++ {
		if yyhl913 {
			if yyj913 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys913Slc = r.DecodeBytes(yys913Slc, true, true)
		yys913 := string(yys913Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys913 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int)
				}
				yym915 := z.DecBinary()
				_ = yym915
				if false {
				} else {
					*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int)
				}
				yym917 := z.DecBinary()
				_ = yym917
				if false {
				} else {
					*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym919 := z.DecBinary()
				_ = yym919
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym921 := z.DecBinary()
				_ = yym921
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv922 := &x.Template
				yyv922.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys913)
		} // end switch yys913
	} // end for yyj913
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj923 int
	var yyb923 bool
	var yyhl923 bool = l >= 0
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int)
		}
		yym925 := z.DecBinary()
		_ = yym925
		if false {
		} else {
			*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int)
		}
		yym927 := z.DecBinary()
		_ = yym927
		if false {
		} else {
			*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym929 := z.DecBinary()
		_ = yym929
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym931 := z.DecBinary()
		_ = yym931
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv932 := &x.Template
		yyv932.CodecDecodeSelf(d)
	}
	for {
		yyj923++
		if yyhl923 {
			yyb923 = yyj923 > l
		} else {
			yyb923 = r.CheckBreak()
		}
		if yyb923 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj923-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym933 := z.EncBinary()
		_ = yym933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep934 := !z.EncBinary()
			yy2arr934 := z.EncBasicHandle().StructToArray
			var yyq934 [6]bool
			_, _, _ = yysep934, yyq934, yy2arr934
			const yyr934 bool = false
			yyq934[0] = len(x.Conditions) != 0
			yyq934[1] = x.StartTime != nil
			yyq934[2] = x.CompletionTime != nil
			yyq934[3] = x.Active != 0
			yyq934[4] = x.Succeeded != 0
			yyq934[5] = x.Failed != 0
			var yynn934 int
			if yyr934 || yy2arr934 {
				r.EncodeArrayStart(6)
			} else {
				yynn934 = 0
				for _, b := range yyq934 {
					if b {
						yynn934++
					}
				}
				r.EncodeMapStart(yynn934)
				yynn934 = 0
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq934[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym936 := z.EncBinary()
						_ = yym936
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq934[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym937 := z.EncBinary()
						_ = yym937
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq934[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym939 := z.EncBinary()
						_ = yym939
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym939 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym939 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq934[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym940 := z.EncBinary()
						_ = yym940
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym940 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym940 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq934[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym942 := z.EncBinary()
						_ = yym942
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym942 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym942 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq934[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym943 := z.EncBinary()
						_ = yym943
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym943 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym943 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq934[3] {
					yym945 := z.EncBinary()
					_ = yym945
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq934[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq934[4] {
					yym948 := z.EncBinary()
					_ = yym948
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq934[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym949 := z.EncBinary()
					_ = yym949
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq934[5] {
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq934[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym952 := z.EncBinary()
					_ = yym952
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym953 := z.DecBinary()
	_ = yym953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct954 := r.ContainerType()
		if yyct954 == codecSelferValueTypeMap1234 {
			yyl954 := r.ReadMapStart()
			if yyl954 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl954, d)
			}
		} else if yyct954 == codecSelferValueTypeArray1234 {
			yyl954 := r.ReadArrayStart()
			if yyl954 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl954, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys955Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys955Slc
	var yyhl955 bool = l >= 0
	for yyj955 := 0; ; yyj955++ {
		if yyhl955 {
			if yyj955 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys955Slc = r.DecodeBytes(yys955Slc, true, true)
		yys955 := string(yys955Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys955 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv956 := &x.Conditions
				yym957 := z.DecBinary()
				_ = yym957
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv956), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym959 := z.DecBinary()
				_ = yym959
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym959 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym959 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym961 := z.DecBinary()
				_ = yym961
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym961 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym961 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys955)
		} // end switch yys955
	} // end for yyj955
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj965 int
	var yyb965 bool
	var yyhl965 bool = l >= 0
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv966 := &x.Conditions
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv966), d)
		}
	}
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym969 := z.DecBinary()
		_ = yym969
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym969 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym969 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym971 := z.DecBinary()
		_ = yym971
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym971 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym971 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj965++
		if yyhl965 {
			yyb965 = yyj965 > l
		} else {
			yyb965 = r.CheckBreak()
		}
		if yyb965 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj965-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym975 := z.EncBinary()
	_ = yym975
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym976 := z.DecBinary()
	_ = yym976
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym977 := z.EncBinary()
		_ = yym977
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep978 := !z.EncBinary()
			yy2arr978 := z.EncBasicHandle().StructToArray
			var yyq978 [6]bool
			_, _, _ = yysep978, yyq978, yy2arr978
			const yyr978 bool = false
			yyq978[2] = true
			yyq978[3] = true
			yyq978[4] = x.Reason != ""
			yyq978[5] = x.Message != ""
			var yynn978 int
			if yyr978 || yy2arr978 {
				r.EncodeArrayStart(6)
			} else {
				yynn978 = 2
				for _, b := range yyq978 {
					if b {
						yynn978++
					}
				}
				r.EncodeMapStart(yynn978)
				yynn978 = 0
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym981 := z.EncBinary()
				_ = yym981
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym982 := z.EncBinary()
				_ = yym982
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq978[2] {
					yy984 := &x.LastProbeTime
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else if z.HasExtensions() && z.EncExt(yy984) {
					} else if yym985 {
						z.EncBinaryMarshal(yy984)
					} else if !yym985 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy984)
					} else {
						z.EncFallback(yy984)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq978[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy986 := &x.LastProbeTime
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else if z.HasExtensions() && z.EncExt(yy986) {
					} else if yym987 {
						z.EncBinaryMarshal(yy986)
					} else if !yym987 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy986)
					} else {
						z.EncFallback(yy986)
					}
				}
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq978[3] {
					yy989 := &x.LastTransitionTime
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else if z.HasExtensions() && z.EncExt(yy989) {
					} else if yym990 {
						z.EncBinaryMarshal(yy989)
					} else if !yym990 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy989)
					} else {
						z.EncFallback(yy989)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq978[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy991 := &x.LastTransitionTime
					yym992 := z.EncBinary()
					_ = yym992
					if false {
					} else if z.HasExtensions() && z.EncExt(yy991) {
					} else if yym992 {
						z.EncBinaryMarshal(yy991)
					} else if !yym992 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy991)
					} else {
						z.EncFallback(yy991)
					}
				}
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq978[4] {
					yym994 := z.EncBinary()
					_ = yym994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq978[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym995 := z.EncBinary()
					_ = yym995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq978[5] {
					yym997 := z.EncBinary()
					_ = yym997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq978[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym998 := z.EncBinary()
					_ = yym998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym999 := z.DecBinary()
	_ = yym999
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1000 := r.ContainerType()
		if yyct1000 == codecSelferValueTypeMap1234 {
			yyl1000 := r.ReadMapStart()
			if yyl1000 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1000, d)
			}
		} else if yyct1000 == codecSelferValueTypeArray1234 {
			yyl1000 := r.ReadArrayStart()
			if yyl1000 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1000, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1001Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1001Slc
	var yyhl1001 bool = l >= 0
	for yyj1001 := 0; ; yyj1001++ {
		if yyhl1001 {
			if yyj1001 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1001Slc = r.DecodeBytes(yys1001Slc, true, true)
		yys1001 := string(yys1001Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1001 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv1004 := &x.LastProbeTime
				yym1005 := z.DecBinary()
				_ = yym1005
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1004) {
				} else if yym1005 {
					z.DecBinaryUnmarshal(yyv1004)
				} else if !yym1005 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1004)
				} else {
					z.DecFallback(yyv1004, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv1006 := &x.LastTransitionTime
				yym1007 := z.DecBinary()
				_ = yym1007
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1006) {
				} else if yym1007 {
					z.DecBinaryUnmarshal(yyv1006)
				} else if !yym1007 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1006)
				} else {
					z.DecFallback(yyv1006, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1001)
		} // end switch yys1001
	} // end for yyj1001
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1010 int
	var yyb1010 bool
	var yyhl1010 bool = l >= 0
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv1013 := &x.LastProbeTime
		yym1014 := z.DecBinary()
		_ = yym1014
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1013) {
		} else if yym1014 {
			z.DecBinaryUnmarshal(yyv1013)
		} else if !yym1014 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1013)
		} else {
			z.DecFallback(yyv1013, false)
		}
	}
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv1015 := &x.LastTransitionTime
		yym1016 := z.DecBinary()
		_ = yym1016
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1015) {
		} else if yym1016 {
			z.DecBinaryUnmarshal(yyv1015)
		} else if !yym1016 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1015)
		} else {
			z.DecFallback(yyv1015, false)
		}
	}
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1010++
		if yyhl1010 {
			yyb1010 = yyj1010 > l
		} else {
			yyb1010 = r.CheckBreak()
		}
		if yyb1010 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1010-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1019 := z.EncBinary()
		_ = yym1019
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1020 := !z.EncBinary()
			yy2arr1020 := z.EncBasicHandle().StructToArray
			var yyq1020 [5]bool
			_, _, _ = yysep1020, yyq1020, yy2arr1020
			const yyr1020 bool = false
			yyq1020[0] = x.Kind != ""
			yyq1020[1] = x.APIVersion != ""
			yyq1020[2] = true
			yyq1020[3] = true
			yyq1020[4] = true
			var yynn1020 int
			if yyr1020 || yy2arr1020 {
				r.EncodeArrayStart(5)
			} else {
				yynn1020 = 0
				for _, b := range yyq1020 {
					if b {
						yynn1020++
					}
				}
				r.EncodeMapStart(yynn1020)
				yynn1020 = 0
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1020[0] {
					yym1022 := z.EncBinary()
					_ = yym1022
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1020[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1023 := z.EncBinary()
					_ = yym1023
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1020[1] {
					yym1025 := z.EncBinary()
					_ = yym1025
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1020[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1020[2] {
					yy1028 := &x.ObjectMeta
					yy1028.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1020[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1029 := &x.ObjectMeta
					yy1029.CodecEncodeSelf(e)
				}
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1020[3] {
					yy1031 := &x.Spec
					yy1031.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1020[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1032 := &x.Spec
					yy1032.CodecEncodeSelf(e)
				}
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1020[4] {
					yy1034 := &x.Status
					yy1034.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1020[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1035 := &x.Status
					yy1035.CodecEncodeSelf(e)
				}
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1036 := z.DecBinary()
	_ = yym1036
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1037 := r.ContainerType()
		if yyct1037 == codecSelferValueTypeMap1234 {
			yyl1037 := r.ReadMapStart()
			if yyl1037 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1037, d)
			}
		} else if yyct1037 == codecSelferValueTypeArray1234 {
			yyl1037 := r.ReadArrayStart()
			if yyl1037 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1037, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1038Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1038Slc
	var yyhl1038 bool = l >= 0
	for yyj1038 := 0; ; yyj1038++ {
		if yyhl1038 {
			if yyj1038 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1038Slc = r.DecodeBytes(yys1038Slc, true, true)
		yys1038 := string(yys1038Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1038 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1041 := &x.ObjectMeta
				yyv1041.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv1042 := &x.Spec
				yyv1042.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv1043 := &x.Status
				yyv1043.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1038)
		} // end switch yys1038
	} // end for yyj1038
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1044 int
	var yyb1044 bool
	var yyhl1044 bool = l >= 0
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1047 := &x.ObjectMeta
		yyv1047.CodecDecodeSelf(d)
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv1048 := &x.Spec
		yyv1048.CodecDecodeSelf(d)
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv1049 := &x.Status
		yyv1049.CodecDecodeSelf(d)
	}
	for {
		yyj1044++
		if yyhl1044 {
			yyb1044 = yyj1044 > l
		} else {
			yyb1044 = r.CheckBreak()
		}
		if yyb1044 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1044-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1050 := z.EncBinary()
		_ = yym1050
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1051 := !z.EncBinary()
			yy2arr1051 := z.EncBasicHandle().StructToArray
			var yyq1051 [4]bool
			_, _, _ = yysep1051, yyq1051, yy2arr1051
			const yyr1051 bool = false
			yyq1051[0] = x.Kind != ""
			yyq1051[1] = x.APIVersion != ""
			yyq1051[2] = true
			var yynn1051 int
			if yyr1051 || yy2arr1051 {
				r.EncodeArrayStart(4)
			} else {
				yynn1051 = 1
				for _, b := range yyq1051 {
					if b {
						yynn1051++
					}
				}
				r.EncodeMapStart(yynn1051)
				yynn1051 = 0
			}
			if yyr1051 || yy2arr1051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1051[0] {
					yym1053 := z.EncBinary()
					_ = yym1053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1051[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1054 := z.EncBinary()
					_ = yym1054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1051 || yy2arr1051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1051[1] {
					yym1056 := z.EncBinary()
					_ = yym1056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1051[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1057 := z.EncBinary()
					_ = yym1057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1051 || yy2arr1051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1051[2] {
					yy1059 := &x.ListMeta
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1059) {
					} else {
						z.EncFallback(yy1059)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1051[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1061 := &x.ListMeta
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1061) {
					} else {
						z.EncFallback(yy1061)
					}
				}
			}
			if yyr1051 || yy2arr1051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1065 := z.EncBinary()
					_ = yym1065
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr1051 || yy2arr1051 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1066 := z.DecBinary()
	_ = yym1066
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1067 := r.ContainerType()
		if yyct1067 == codecSelferValueTypeMap1234 {
			yyl1067 := r.ReadMapStart()
			if yyl1067 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1067, d)
			}
		} else if yyct1067 == codecSelferValueTypeArray1234 {
			yyl1067 := r.ReadArrayStart()
			if yyl1067 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1067, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1068Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1068Slc
	var yyhl1068 bool = l >= 0
	for yyj1068 := 0; ; yyj1068++ {
		if yyhl1068 {
			if yyj1068 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1068Slc = r.DecodeBytes(yys1068Slc, true, true)
		yys1068 := string(yys1068Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1068 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1071 := &x.ListMeta
				yym1072 := z.DecBinary()
				_ = yym1072
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1071) {
				} else {
					z.DecFallback(yyv1071, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1073 := &x.Items
				yym1074 := z.DecBinary()
				_ = yym1074
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv1073), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1068)
		} // end switch yys1068
	} // end for yyj1068
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1075 int
	var yyb1075 bool
	var yyhl1075 bool = l >= 0
	yyj1075++
	if yyhl1075 {
		yyb1075 = yyj1075 > l
	} else {
		yyb1075 = r.CheckBreak()
	}
	if yyb1075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1075++
	if yyhl1075 {
		yyb1075 = yyj1075 > l
	} else {
		yyb1075 = r.CheckBreak()
	}
	if yyb1075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1075++
	if yyhl1075 {
		yyb1075 = yyj1075 > l
	} else {
		yyb1075 = r.CheckBreak()
	}
	if yyb1075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1078 := &x.ListMeta
		yym1079 := z.DecBinary()
		_ = yym1079
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1078) {
		} else {
			z.DecFallback(yyv1078, false)
		}
	}
	yyj1075++
	if yyhl1075 {
		yyb1075 = yyj1075 > l
	} else {
		yyb1075 = r.CheckBreak()
	}
	if yyb1075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1080 := &x.Items
		yym1081 := z.DecBinary()
		_ = yym1081
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv1080), d)
		}
	}
	for {
		yyj1075++
		if yyhl1075 {
			yyb1075 = yyj1075 > l
		} else {
			yyb1075 = r.CheckBreak()
		}
		if yyb1075 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1075-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1082 := z.EncBinary()
		_ = yym1082
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1083 := !z.EncBinary()
			yy2arr1083 := z.EncBasicHandle().StructToArray
			var yyq1083 [2]bool
			_, _, _ = yysep1083, yyq1083, yy2arr1083
			const yyr1083 bool = false
			yyq1083[0] = x.Backend != nil
			yyq1083[1] = len(x.Rules) != 0
			var yynn1083 int
			if yyr1083 || yy2arr1083 {
				r.EncodeArrayStart(2)
			} else {
				yynn1083 = 0
				for _, b := range yyq1083 {
					if b {
						yynn1083++
					}
				}
				r.EncodeMapStart(yynn1083)
				yynn1083 = 0
			}
			if yyr1083 || yy2arr1083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1083[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1083[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1083 || yy2arr1083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1083[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1086 := z.EncBinary()
						_ = yym1086
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1083[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1087 := z.EncBinary()
						_ = yym1087
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr1083 || yy2arr1083 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1088 := z.DecBinary()
	_ = yym1088
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1089 := r.ContainerType()
		if yyct1089 == codecSelferValueTypeMap1234 {
			yyl1089 := r.ReadMapStart()
			if yyl1089 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1089, d)
			}
		} else if yyct1089 == codecSelferValueTypeArray1234 {
			yyl1089 := r.ReadArrayStart()
			if yyl1089 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1089, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1090Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1090Slc
	var yyhl1090 bool = l >= 0
	for yyj1090 := 0; ; yyj1090++ {
		if yyhl1090 {
			if yyj1090 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1090Slc = r.DecodeBytes(yys1090Slc, true, true)
		yys1090 := string(yys1090Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1090 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv1092 := &x.Rules
				yym1093 := z.DecBinary()
				_ = yym1093
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv1092), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1090)
		} // end switch yys1090
	} // end for yyj1090
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1094 int
	var yyb1094 bool
	var yyhl1094 bool = l >= 0
	yyj1094++
	if yyhl1094 {
		yyb1094 = yyj1094 > l
	} else {
		yyb1094 = r.CheckBreak()
	}
	if yyb1094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj1094++
	if yyhl1094 {
		yyb1094 = yyj1094 > l
	} else {
		yyb1094 = r.CheckBreak()
	}
	if yyb1094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv1096 := &x.Rules
		yym1097 := z.DecBinary()
		_ = yym1097
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv1096), d)
		}
	}
	for {
		yyj1094++
		if yyhl1094 {
			yyb1094 = yyj1094 > l
		} else {
			yyb1094 = r.CheckBreak()
		}
		if yyb1094 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1094-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1098 := z.EncBinary()
		_ = yym1098
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1099 := !z.EncBinary()
			yy2arr1099 := z.EncBasicHandle().StructToArray
			var yyq1099 [1]bool
			_, _, _ = yysep1099, yyq1099, yy2arr1099
			const yyr1099 bool = false
			yyq1099[0] = true
			var yynn1099 int
			if yyr1099 || yy2arr1099 {
				r.EncodeArrayStart(1)
			} else {
				yynn1099 = 0
				for _, b := range yyq1099 {
					if b {
						yynn1099++
					}
				}
				r.EncodeMapStart(yynn1099)
				yynn1099 = 0
			}
			if yyr1099 || yy2arr1099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1099[0] {
					yy1101 := &x.LoadBalancer
					yy1101.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1099[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1102 := &x.LoadBalancer
					yy1102.CodecEncodeSelf(e)
				}
			}
			if yyr1099 || yy2arr1099 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1103 := z.DecBinary()
	_ = yym1103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1104 := r.ContainerType()
		if yyct1104 == codecSelferValueTypeMap1234 {
			yyl1104 := r.ReadMapStart()
			if yyl1104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1104, d)
			}
		} else if yyct1104 == codecSelferValueTypeArray1234 {
			yyl1104 := r.ReadArrayStart()
			if yyl1104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1105Slc
	var yyhl1105 bool = l >= 0
	for yyj1105 := 0; ; yyj1105++ {
		if yyhl1105 {
			if yyj1105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1105Slc = r.DecodeBytes(yys1105Slc, true, true)
		yys1105 := string(yys1105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1105 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
			} else {
				yyv1106 := &x.LoadBalancer
				yyv1106.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1105)
		} // end switch yys1105
	} // end for yyj1105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1107 int
	var yyb1107 bool
	var yyhl1107 bool = l >= 0
	yyj1107++
	if yyhl1107 {
		yyb1107 = yyj1107 > l
	} else {
		yyb1107 = r.CheckBreak()
	}
	if yyb1107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
	} else {
		yyv1108 := &x.LoadBalancer
		yyv1108.CodecDecodeSelf(d)
	}
	for {
		yyj1107++
		if yyhl1107 {
			yyb1107 = yyj1107 > l
		} else {
			yyb1107 = r.CheckBreak()
		}
		if yyb1107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1109 := z.EncBinary()
		_ = yym1109
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1110 := !z.EncBinary()
			yy2arr1110 := z.EncBasicHandle().StructToArray
			var yyq1110 [2]bool
			_, _, _ = yysep1110, yyq1110, yy2arr1110
			const yyr1110 bool = false
			yyq1110[0] = x.Host != ""
			yyq1110[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn1110 int
			if yyr1110 || yy2arr1110 {
				r.EncodeArrayStart(2)
			} else {
				yynn1110 = 0
				for _, b := range yyq1110 {
					if b {
						yynn1110++
					}
				}
				r.EncodeMapStart(yynn1110)
				yynn1110 = 0
			}
			if yyr1110 || yy2arr1110 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1110[0] {
					yym1112 := z.EncBinary()
					_ = yym1112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1110[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1113 := z.EncBinary()
					_ = yym1113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn1114 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn1114 = true
				goto LABEL1114
			}
		LABEL1114:
			if yyr1110 || yy2arr1110 {
				if yyn1114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1110[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1110[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1114 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1110 || yy2arr1110 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1115 := z.DecBinary()
	_ = yym1115
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1116 := r.ContainerType()
		if yyct1116 == codecSelferValueTypeMap1234 {
			yyl1116 := r.ReadMapStart()
			if yyl1116 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1116, d)
			}
		} else if yyct1116 == codecSelferValueTypeArray1234 {
			yyl1116 := r.ReadArrayStart()
			if yyl1116 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1116, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1117Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1117Slc
	var yyhl1117 bool = l >= 0
	for yyj1117 := 0; ; yyj1117++ {
		if yyhl1117 {
			if yyj1117 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1117Slc = r.DecodeBytes(yys1117Slc, true, true)
		yys1117 := string(yys1117Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1117 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1117)
		} // end switch yys1117
	} // end for yyj1117
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1120 int
	var yyb1120 bool
	var yyhl1120 bool = l >= 0
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1120++
		if yyhl1120 {
			yyb1120 = yyj1120 > l
		} else {
			yyb1120 = r.CheckBreak()
		}
		if yyb1120 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1120-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1123 := z.EncBinary()
		_ = yym1123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1124 := !z.EncBinary()
			yy2arr1124 := z.EncBasicHandle().StructToArray
			var yyq1124 [1]bool
			_, _, _ = yysep1124, yyq1124, yy2arr1124
			const yyr1124 bool = false
			yyq1124[0] = x.HTTP != nil
			var yynn1124 int
			if yyr1124 || yy2arr1124 {
				r.EncodeArrayStart(1)
			} else {
				yynn1124 = 0
				for _, b := range yyq1124 {
					if b {
						yynn1124++
					}
				}
				r.EncodeMapStart(yynn1124)
				yynn1124 = 0
			}
			if yyr1124 || yy2arr1124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1124[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1124[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1124 || yy2arr1124 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1126 := z.DecBinary()
	_ = yym1126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1127 := r.ContainerType()
		if yyct1127 == codecSelferValueTypeMap1234 {
			yyl1127 := r.ReadMapStart()
			if yyl1127 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1127, d)
			}
		} else if yyct1127 == codecSelferValueTypeArray1234 {
			yyl1127 := r.ReadArrayStart()
			if yyl1127 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1127, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1128Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1128Slc
	var yyhl1128 bool = l >= 0
	for yyj1128 := 0; ; yyj1128++ {
		if yyhl1128 {
			if yyj1128 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1128Slc = r.DecodeBytes(yys1128Slc, true, true)
		yys1128 := string(yys1128Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1128 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1128)
		} // end switch yys1128
	} // end for yyj1128
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1130 int
	var yyb1130 bool
	var yyhl1130 bool = l >= 0
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1130++
		if yyhl1130 {
			yyb1130 = yyj1130 > l
		} else {
			yyb1130 = r.CheckBreak()
		}
		if yyb1130 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1130-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1132 := z.EncBinary()
		_ = yym1132
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1133 := !z.EncBinary()
			yy2arr1133 := z.EncBasicHandle().StructToArray
			var yyq1133 [1]bool
			_, _, _ = yysep1133, yyq1133, yy2arr1133
			const yyr1133 bool = false
			var yynn1133 int
			if yyr1133 || yy2arr1133 {
				r.EncodeArrayStart(1)
			} else {
				yynn1133 = 1
				for _, b := range yyq1133 {
					if b {
						yynn1133++
					}
				}
				r.EncodeMapStart(yynn1133)
				yynn1133 = 0
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1135 := z.EncBinary()
					_ = yym1135
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1136 := z.EncBinary()
					_ = yym1136
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1137 := z.DecBinary()
	_ = yym1137
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1138 := r.ContainerType()
		if yyct1138 == codecSelferValueTypeMap1234 {
			yyl1138 := r.ReadMapStart()
			if yyl1138 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1138, d)
			}
		} else if yyct1138 == codecSelferValueTypeArray1234 {
			yyl1138 := r.ReadArrayStart()
			if yyl1138 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1138, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1139Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1139Slc
	var yyhl1139 bool = l >= 0
	for yyj1139 := 0; ; yyj1139++ {
		if yyhl1139 {
			if yyj1139 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1139Slc = r.DecodeBytes(yys1139Slc, true, true)
		yys1139 := string(yys1139Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1139 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1140 := &x.Paths
				yym1141 := z.DecBinary()
				_ = yym1141
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1140), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1139)
		} // end switch yys1139
	} // end for yyj1139
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1142 int
	var yyb1142 bool
	var yyhl1142 bool = l >= 0
	yyj1142++
	if yyhl1142 {
		yyb1142 = yyj1142 > l
	} else {
		yyb1142 = r.CheckBreak()
	}
	if yyb1142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1143 := &x.Paths
		yym1144 := z.DecBinary()
		_ = yym1144
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1143), d)
		}
	}
	for {
		yyj1142++
		if yyhl1142 {
			yyb1142 = yyj1142 > l
		} else {
			yyb1142 = r.CheckBreak()
		}
		if yyb1142 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1142-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1145 := z.EncBinary()
		_ = yym1145
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1146 := !z.EncBinary()
			yy2arr1146 := z.EncBasicHandle().StructToArray
			var yyq1146 [2]bool
			_, _, _ = yysep1146, yyq1146, yy2arr1146
			const yyr1146 bool = false
			yyq1146[0] = x.Path != ""
			var yynn1146 int
			if yyr1146 || yy2arr1146 {
				r.EncodeArrayStart(2)
			} else {
				yynn1146 = 1
				for _, b := range yyq1146 {
					if b {
						yynn1146++
					}
				}
				r.EncodeMapStart(yynn1146)
				yynn1146 = 0
			}
			if yyr1146 || yy2arr1146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1146[0] {
					yym1148 := z.EncBinary()
					_ = yym1148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1146[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1149 := z.EncBinary()
					_ = yym1149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1146 || yy2arr1146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1151 := &x.Backend
				yy1151.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1152 := &x.Backend
				yy1152.CodecEncodeSelf(e)
			}
			if yyr1146 || yy2arr1146 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1153 := z.DecBinary()
	_ = yym1153
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1154 := r.ContainerType()
		if yyct1154 == codecSelferValueTypeMap1234 {
			yyl1154 := r.ReadMapStart()
			if yyl1154 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1154, d)
			}
		} else if yyct1154 == codecSelferValueTypeArray1234 {
			yyl1154 := r.ReadArrayStart()
			if yyl1154 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1154, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1155Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1155Slc
	var yyhl1155 bool = l >= 0
	for yyj1155 := 0; ; yyj1155++ {
		if yyhl1155 {
			if yyj1155 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1155Slc = r.DecodeBytes(yys1155Slc, true, true)
		yys1155 := string(yys1155Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1155 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1157 := &x.Backend
				yyv1157.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1155)
		} // end switch yys1155
	} // end for yyj1155
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1158 int
	var yyb1158 bool
	var yyhl1158 bool = l >= 0
	yyj1158++
	if yyhl1158 {
		yyb1158 = yyj1158 > l
	} else {
		yyb1158 = r.CheckBreak()
	}
	if yyb1158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1158++
	if yyhl1158 {
		yyb1158 = yyj1158 > l
	} else {
		yyb1158 = r.CheckBreak()
	}
	if yyb1158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1160 := &x.Backend
		yyv1160.CodecDecodeSelf(d)
	}
	for {
		yyj1158++
		if yyhl1158 {
			yyb1158 = yyj1158 > l
		} else {
			yyb1158 = r.CheckBreak()
		}
		if yyb1158 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1158-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1161 := z.EncBinary()
		_ = yym1161
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1162 := !z.EncBinary()
			yy2arr1162 := z.EncBasicHandle().StructToArray
			var yyq1162 [2]bool
			_, _, _ = yysep1162, yyq1162, yy2arr1162
			const yyr1162 bool = false
			var yynn1162 int
			if yyr1162 || yy2arr1162 {
				r.EncodeArrayStart(2)
			} else {
				yynn1162 = 2
				for _, b := range yyq1162 {
					if b {
						yynn1162++
					}
				}
				r.EncodeMapStart(yynn1162)
				yynn1162 = 0
			}
			if yyr1162 || yy2arr1162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1164 := z.EncBinary()
				_ = yym1164
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1165 := z.EncBinary()
				_ = yym1165
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1162 || yy2arr1162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1167 := &x.ServicePort
				yym1168 := z.EncBinary()
				_ = yym1168
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1167) {
				} else if !yym1168 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1167)
				} else {
					z.EncFallback(yy1167)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1169 := &x.ServicePort
				yym1170 := z.EncBinary()
				_ = yym1170
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1169) {
				} else if !yym1170 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1169)
				} else {
					z.EncFallback(yy1169)
				}
			}
			if yyr1162 || yy2arr1162 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1171 := z.DecBinary()
	_ = yym1171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1172 := r.ContainerType()
		if yyct1172 == codecSelferValueTypeMap1234 {
			yyl1172 := r.ReadMapStart()
			if yyl1172 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1172, d)
			}
		} else if yyct1172 == codecSelferValueTypeArray1234 {
			yyl1172 := r.ReadArrayStart()
			if yyl1172 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1172, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1173Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1173Slc
	var yyhl1173 bool = l >= 0
	for yyj1173 := 0; ; yyj1173++ {
		if yyhl1173 {
			if yyj1173 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1173Slc = r.DecodeBytes(yys1173Slc, true, true)
		yys1173 := string(yys1173Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1173 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_intstr.IntOrString{}
			} else {
				yyv1175 := &x.ServicePort
				yym1176 := z.DecBinary()
				_ = yym1176
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1175) {
				} else if !yym1176 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1175)
				} else {
					z.DecFallback(yyv1175, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1173)
		} // end switch yys1173
	} // end for yyj1173
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1177 int
	var yyb1177 bool
	var yyhl1177 bool = l >= 0
	yyj1177++
	if yyhl1177 {
		yyb1177 = yyj1177 > l
	} else {
		yyb1177 = r.CheckBreak()
	}
	if yyb1177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1177++
	if yyhl1177 {
		yyb1177 = yyj1177 > l
	} else {
		yyb1177 = r.CheckBreak()
	}
	if yyb1177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_intstr.IntOrString{}
	} else {
		yyv1179 := &x.ServicePort
		yym1180 := z.DecBinary()
		_ = yym1180
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1179) {
		} else if !yym1180 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1179)
		} else {
			z.DecFallback(yyv1179, false)
		}
	}
	for {
		yyj1177++
		if yyhl1177 {
			yyb1177 = yyj1177 > l
		} else {
			yyb1177 = r.CheckBreak()
		}
		if yyb1177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1181 := z.EncBinary()
	_ = yym1181
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1182 := z.DecBinary()
	_ = yym1182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1183 := z.EncBinary()
		_ = yym1183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1184 := !z.EncBinary()
			yy2arr1184 := z.EncBasicHandle().StructToArray
			var yyq1184 [2]bool
			_, _, _ = yysep1184, yyq1184, yy2arr1184
			const yyr1184 bool = false
			var yynn1184 int
			if yyr1184 || yy2arr1184 {
				r.EncodeArrayStart(2)
			} else {
				yynn1184 = 2
				for _, b := range yyq1184 {
					if b {
						yynn1184++
					}
				}
				r.EncodeMapStart(yynn1184)
				yynn1184 = 0
			}
			if yyr1184 || yy2arr1184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Resource.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1184 || yy2arr1184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1187 := z.EncBinary()
				_ = yym1187
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1188 := z.EncBinary()
				_ = yym1188
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yyr1184 || yy2arr1184 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1189 := z.DecBinary()
	_ = yym1189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1190 := r.ContainerType()
		if yyct1190 == codecSelferValueTypeMap1234 {
			yyl1190 := r.ReadMapStart()
			if yyl1190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1190, d)
			}
		} else if yyct1190 == codecSelferValueTypeArray1234 {
			yyl1190 := r.ReadArrayStart()
			if yyl1190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1191Slc
	var yyhl1191 bool = l >= 0
	for yyj1191 := 0; ; yyj1191++ {
		if yyhl1191 {
			if yyj1191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1191Slc = r.DecodeBytes(yys1191Slc, true, true)
		yys1191 := string(yys1191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1191 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1191)
		} // end switch yys1191
	} // end for yyj1191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1194 int
	var yyb1194 bool
	var yyhl1194 bool = l >= 0
	yyj1194++
	if yyhl1194 {
		yyb1194 = yyj1194 > l
	} else {
		yyb1194 = r.CheckBreak()
	}
	if yyb1194 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1194++
	if yyhl1194 {
		yyb1194 = yyj1194 > l
	} else {
		yyb1194 = r.CheckBreak()
	}
	if yyb1194 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1194++
		if yyhl1194 {
			yyb1194 = yyj1194 > l
		} else {
			yyb1194 = r.CheckBreak()
		}
		if yyb1194 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1194-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1197 := z.EncBinary()
		_ = yym1197
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1198 := !z.EncBinary()
			yy2arr1198 := z.EncBasicHandle().StructToArray
			var yyq1198 [3]bool
			_, _, _ = yysep1198, yyq1198, yy2arr1198
			const yyr1198 bool = false
			var yynn1198 int
			if yyr1198 || yy2arr1198 {
				r.EncodeArrayStart(3)
			} else {
				yynn1198 = 3
				for _, b := range yyq1198 {
					if b {
						yynn1198++
					}
				}
				r.EncodeMapStart(yynn1198)
				yynn1198 = 0
			}
			if yyr1198 || yy2arr1198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1200 := z.EncBinary()
				_ = yym1200
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1201 := z.EncBinary()
				_ = yym1201
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1198 || yy2arr1198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1203 := z.EncBinary()
				_ = yym1203
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1204 := z.EncBinary()
				_ = yym1204
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1198 || yy2arr1198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1207 := z.EncBinary()
					_ = yym1207
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yyr1198 || yy2arr1198 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1208 := z.DecBinary()
	_ = yym1208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1209 := r.ContainerType()
		if yyct1209 == codecSelferValueTypeMap1234 {
			yyl1209 := r.ReadMapStart()
			if yyl1209 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1209, d)
			}
		} else if yyct1209 == codecSelferValueTypeArray1234 {
			yyl1209 := r.ReadArrayStart()
			if yyl1209 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1210Slc
	var yyhl1210 bool = l >= 0
	for yyj1210 := 0; ; yyj1210++ {
		if yyhl1210 {
			if yyj1210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1210Slc = r.DecodeBytes(yys1210Slc, true, true)
		yys1210 := string(yys1210Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1210 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1213 := &x.TargetUtilization
				yym1214 := z.DecBinary()
				_ = yym1214
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1213), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1210)
		} // end switch yys1210
	} // end for yyj1210
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1215 int
	var yyb1215 bool
	var yyhl1215 bool = l >= 0
	yyj1215++
	if yyhl1215 {
		yyb1215 = yyj1215 > l
	} else {
		yyb1215 = r.CheckBreak()
	}
	if yyb1215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1215++
	if yyhl1215 {
		yyb1215 = yyj1215 > l
	} else {
		yyb1215 = r.CheckBreak()
	}
	if yyb1215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1215++
	if yyhl1215 {
		yyb1215 = yyj1215 > l
	} else {
		yyb1215 = r.CheckBreak()
	}
	if yyb1215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1218 := &x.TargetUtilization
		yym1219 := z.DecBinary()
		_ = yym1219
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1218), d)
		}
	}
	for {
		yyj1215++
		if yyhl1215 {
			yyb1215 = yyj1215 > l
		} else {
			yyb1215 = r.CheckBreak()
		}
		if yyb1215 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1215-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1220 := z.EncBinary()
		_ = yym1220
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1221 := !z.EncBinary()
			yy2arr1221 := z.EncBasicHandle().StructToArray
			var yyq1221 [4]bool
			_, _, _ = yysep1221, yyq1221, yy2arr1221
			const yyr1221 bool = false
			yyq1221[0] = x.Kind != ""
			yyq1221[1] = x.APIVersion != ""
			yyq1221[2] = true
			yyq1221[3] = true
			var yynn1221 int
			if yyr1221 || yy2arr1221 {
				r.EncodeArrayStart(4)
			} else {
				yynn1221 = 0
				for _, b := range yyq1221 {
					if b {
						yynn1221++
					}
				}
				r.EncodeMapStart(yynn1221)
				yynn1221 = 0
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1221[0] {
					yym1223 := z.EncBinary()
					_ = yym1223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1221[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1224 := z.EncBinary()
					_ = yym1224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1221[1] {
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1221[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1227 := z.EncBinary()
					_ = yym1227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1221[2] {
					yy1229 := &x.ObjectMeta
					yy1229.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1221[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1230 := &x.ObjectMeta
					yy1230.CodecEncodeSelf(e)
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1221[3] {
					yy1232 := &x.Spec
					yy1232.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1221[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1233 := &x.Spec
					yy1233.CodecEncodeSelf(e)
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1234 := z.DecBinary()
	_ = yym1234
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1235 := r.ContainerType()
		if yyct1235 == codecSelferValueTypeMap1234 {
			yyl1235 := r.ReadMapStart()
			if yyl1235 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1235, d)
			}
		} else if yyct1235 == codecSelferValueTypeArray1234 {
			yyl1235 := r.ReadArrayStart()
			if yyl1235 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1235, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1236Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1236Slc
	var yyhl1236 bool = l >= 0
	for yyj1236 := 0; ; yyj1236++ {
		if yyhl1236 {
			if yyj1236 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1236Slc = r.DecodeBytes(yys1236Slc, true, true)
		yys1236 := string(yys1236Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1236 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1239 := &x.ObjectMeta
				yyv1239.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1240 := &x.Spec
				yyv1240.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1236)
		} // end switch yys1236
	} // end for yyj1236
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1241 int
	var yyb1241 bool
	var yyhl1241 bool = l >= 0
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1244 := &x.ObjectMeta
		yyv1244.CodecDecodeSelf(d)
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1245 := &x.Spec
		yyv1245.CodecDecodeSelf(d)
	}
	for {
		yyj1241++
		if yyhl1241 {
			yyb1241 = yyj1241 > l
		} else {
			yyb1241 = r.CheckBreak()
		}
		if yyb1241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1246 := z.EncBinary()
		_ = yym1246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1247 := !z.EncBinary()
			yy2arr1247 := z.EncBasicHandle().StructToArray
			var yyq1247 [4]bool
			_, _, _ = yysep1247, yyq1247, yy2arr1247
			const yyr1247 bool = false
			yyq1247[0] = x.Kind != ""
			yyq1247[1] = x.APIVersion != ""
			yyq1247[2] = true
			var yynn1247 int
			if yyr1247 || yy2arr1247 {
				r.EncodeArrayStart(4)
			} else {
				yynn1247 = 1
				for _, b := range yyq1247 {
					if b {
						yynn1247++
					}
				}
				r.EncodeMapStart(yynn1247)
				yynn1247 = 0
			}
			if yyr1247 || yy2arr1247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1247[0] {
					yym1249 := z.EncBinary()
					_ = yym1249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1247[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1250 := z.EncBinary()
					_ = yym1250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1247 || yy2arr1247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1247[1] {
					yym1252 := z.EncBinary()
					_ = yym1252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1247[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1253 := z.EncBinary()
					_ = yym1253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1247 || yy2arr1247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1247[2] {
					yy1255 := &x.ListMeta
					yym1256 := z.EncBinary()
					_ = yym1256
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1255) {
					} else {
						z.EncFallback(yy1255)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1247[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1257 := &x.ListMeta
					yym1258 := z.EncBinary()
					_ = yym1258
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1257) {
					} else {
						z.EncFallback(yy1257)
					}
				}
			}
			if yyr1247 || yy2arr1247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1260 := z.EncBinary()
					_ = yym1260
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1261 := z.EncBinary()
					_ = yym1261
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr1247 || yy2arr1247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1262 := z.DecBinary()
	_ = yym1262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1263 := r.ContainerType()
		if yyct1263 == codecSelferValueTypeMap1234 {
			yyl1263 := r.ReadMapStart()
			if yyl1263 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1263, d)
			}
		} else if yyct1263 == codecSelferValueTypeArray1234 {
			yyl1263 := r.ReadArrayStart()
			if yyl1263 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1263, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1264Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1264Slc
	var yyhl1264 bool = l >= 0
	for yyj1264 := 0; ; yyj1264++ {
		if yyhl1264 {
			if yyj1264 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1264Slc = r.DecodeBytes(yys1264Slc, true, true)
		yys1264 := string(yys1264Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1264 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1267 := &x.ListMeta
				yym1268 := z.DecBinary()
				_ = yym1268
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1267) {
				} else {
					z.DecFallback(yyv1267, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1269 := &x.Items
				yym1270 := z.DecBinary()
				_ = yym1270
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1269), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1264)
		} // end switch yys1264
	} // end for yyj1264
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1271 int
	var yyb1271 bool
	var yyhl1271 bool = l >= 0
	yyj1271++
	if yyhl1271 {
		yyb1271 = yyj1271 > l
	} else {
		yyb1271 = r.CheckBreak()
	}
	if yyb1271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1271++
	if yyhl1271 {
		yyb1271 = yyj1271 > l
	} else {
		yyb1271 = r.CheckBreak()
	}
	if yyb1271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1271++
	if yyhl1271 {
		yyb1271 = yyj1271 > l
	} else {
		yyb1271 = r.CheckBreak()
	}
	if yyb1271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1274 := &x.ListMeta
		yym1275 := z.DecBinary()
		_ = yym1275
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1274) {
		} else {
			z.DecFallback(yyv1274, false)
		}
	}
	yyj1271++
	if yyhl1271 {
		yyb1271 = yyj1271 > l
	} else {
		yyb1271 = r.CheckBreak()
	}
	if yyb1271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1276 := &x.Items
		yym1277 := z.DecBinary()
		_ = yym1277
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1276), d)
		}
	}
	for {
		yyj1271++
		if yyhl1271 {
			yyb1271 = yyj1271 > l
		} else {
			yyb1271 = r.CheckBreak()
		}
		if yyb1271 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1271-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1278 := z.EncBinary()
		_ = yym1278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1279 := !z.EncBinary()
			yy2arr1279 := z.EncBasicHandle().StructToArray
			var yyq1279 [5]bool
			_, _, _ = yysep1279, yyq1279, yy2arr1279
			const yyr1279 bool = false
			yyq1279[0] = x.Kind != ""
			yyq1279[1] = x.APIVersion != ""
			yyq1279[2] = true
			yyq1279[3] = true
			yyq1279[4] = true
			var yynn1279 int
			if yyr1279 || yy2arr1279 {
				r.EncodeArrayStart(5)
			} else {
				yynn1279 = 0
				for _, b := range yyq1279 {
					if b {
						yynn1279++
					}
				}
				r.EncodeMapStart(yynn1279)
				yynn1279 = 0
			}
			if yyr1279 || yy2arr1279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1279[0] {
					yym1281 := z.EncBinary()
					_ = yym1281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1279[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1282 := z.EncBinary()
					_ = yym1282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1279 || yy2arr1279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1279[1] {
					yym1284 := z.EncBinary()
					_ = yym1284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1279[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1285 := z.EncBinary()
					_ = yym1285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1279 || yy2arr1279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1279[2] {
					yy1287 := &x.ObjectMeta
					yy1287.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1279[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1288 := &x.ObjectMeta
					yy1288.CodecEncodeSelf(e)
				}
			}
			if yyr1279 || yy2arr1279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1279[3] {
					yy1290 := &x.Spec
					yy1290.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1279[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1291 := &x.Spec
					yy1291.CodecEncodeSelf(e)
				}
			}
			if yyr1279 || yy2arr1279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1279[4] {
					yy1293 := &x.Status
					yy1293.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1279[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1294 := &x.Status
					yy1294.CodecEncodeSelf(e)
				}
			}
			if yyr1279 || yy2arr1279 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1295 := z.DecBinary()
	_ = yym1295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1296 := r.ContainerType()
		if yyct1296 == codecSelferValueTypeMap1234 {
			yyl1296 := r.ReadMapStart()
			if yyl1296 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1296, d)
			}
		} else if yyct1296 == codecSelferValueTypeArray1234 {
			yyl1296 := r.ReadArrayStart()
			if yyl1296 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1296, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1297Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1297Slc
	var yyhl1297 bool = l >= 0
	for yyj1297 := 0; ; yyj1297++ {
		if yyhl1297 {
			if yyj1297 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1297Slc = r.DecodeBytes(yys1297Slc, true, true)
		yys1297 := string(yys1297Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1297 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1300 := &x.ObjectMeta
				yyv1300.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv1301 := &x.Spec
				yyv1301.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv1302 := &x.Status
				yyv1302.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1297)
		} // end switch yys1297
	} // end for yyj1297
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1303 int
	var yyb1303 bool
	var yyhl1303 bool = l >= 0
	yyj1303++
	if yyhl1303 {
		yyb1303 = yyj1303 > l
	} else {
		yyb1303 = r.CheckBreak()
	}
	if yyb1303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1303++
	if yyhl1303 {
		yyb1303 = yyj1303 > l
	} else {
		yyb1303 = r.CheckBreak()
	}
	if yyb1303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1303++
	if yyhl1303 {
		yyb1303 = yyj1303 > l
	} else {
		yyb1303 = r.CheckBreak()
	}
	if yyb1303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1306 := &x.ObjectMeta
		yyv1306.CodecDecodeSelf(d)
	}
	yyj1303++
	if yyhl1303 {
		yyb1303 = yyj1303 > l
	} else {
		yyb1303 = r.CheckBreak()
	}
	if yyb1303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv1307 := &x.Spec
		yyv1307.CodecDecodeSelf(d)
	}
	yyj1303++
	if yyhl1303 {
		yyb1303 = yyj1303 > l
	} else {
		yyb1303 = r.CheckBreak()
	}
	if yyb1303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv1308 := &x.Status
		yyv1308.CodecDecodeSelf(d)
	}
	for {
		yyj1303++
		if yyhl1303 {
			yyb1303 = yyj1303 > l
		} else {
			yyb1303 = r.CheckBreak()
		}
		if yyb1303 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1303-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1309 := z.EncBinary()
		_ = yym1309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1310 := !z.EncBinary()
			yy2arr1310 := z.EncBasicHandle().StructToArray
			var yyq1310 [4]bool
			_, _, _ = yysep1310, yyq1310, yy2arr1310
			const yyr1310 bool = false
			yyq1310[0] = x.Kind != ""
			yyq1310[1] = x.APIVersion != ""
			yyq1310[2] = true
			var yynn1310 int
			if yyr1310 || yy2arr1310 {
				r.EncodeArrayStart(4)
			} else {
				yynn1310 = 1
				for _, b := range yyq1310 {
					if b {
						yynn1310++
					}
				}
				r.EncodeMapStart(yynn1310)
				yynn1310 = 0
			}
			if yyr1310 || yy2arr1310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1310[0] {
					yym1312 := z.EncBinary()
					_ = yym1312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1310[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1313 := z.EncBinary()
					_ = yym1313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1310 || yy2arr1310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1310[1] {
					yym1315 := z.EncBinary()
					_ = yym1315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1310[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1316 := z.EncBinary()
					_ = yym1316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1310 || yy2arr1310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1310[2] {
					yy1318 := &x.ListMeta
					yym1319 := z.EncBinary()
					_ = yym1319
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1318) {
					} else {
						z.EncFallback(yy1318)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1310[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1320 := &x.ListMeta
					yym1321 := z.EncBinary()
					_ = yym1321
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1320) {
					} else {
						z.EncFallback(yy1320)
					}
				}
			}
			if yyr1310 || yy2arr1310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1323 := z.EncBinary()
					_ = yym1323
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1324 := z.EncBinary()
					_ = yym1324
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr1310 || yy2arr1310 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1325 := z.DecBinary()
	_ = yym1325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1326 := r.ContainerType()
		if yyct1326 == codecSelferValueTypeMap1234 {
			yyl1326 := r.ReadMapStart()
			if yyl1326 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1326, d)
			}
		} else if yyct1326 == codecSelferValueTypeArray1234 {
			yyl1326 := r.ReadArrayStart()
			if yyl1326 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1326, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1327Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1327Slc
	var yyhl1327 bool = l >= 0
	for yyj1327 := 0; ; yyj1327++ {
		if yyhl1327 {
			if yyj1327 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1327Slc = r.DecodeBytes(yys1327Slc, true, true)
		yys1327 := string(yys1327Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1327 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1330 := &x.ListMeta
				yym1331 := z.DecBinary()
				_ = yym1331
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1330) {
				} else {
					z.DecFallback(yyv1330, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1332 := &x.Items
				yym1333 := z.DecBinary()
				_ = yym1333
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv1332), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1327)
		} // end switch yys1327
	} // end for yyj1327
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1334 int
	var yyb1334 bool
	var yyhl1334 bool = l >= 0
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1337 := &x.ListMeta
		yym1338 := z.DecBinary()
		_ = yym1338
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1337) {
		} else {
			z.DecFallback(yyv1337, false)
		}
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1339 := &x.Items
		yym1340 := z.DecBinary()
		_ = yym1340
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv1339), d)
		}
	}
	for {
		yyj1334++
		if yyhl1334 {
			yyb1334 = yyj1334 > l
		} else {
			yyb1334 = r.CheckBreak()
		}
		if yyb1334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1341 := z.EncBinary()
		_ = yym1341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1342 := !z.EncBinary()
			yy2arr1342 := z.EncBasicHandle().StructToArray
			var yyq1342 [3]bool
			_, _, _ = yysep1342, yyq1342, yy2arr1342
			const yyr1342 bool = false
			yyq1342[1] = x.Selector != nil
			yyq1342[2] = x.Template != nil
			var yynn1342 int
			if yyr1342 || yy2arr1342 {
				r.EncodeArrayStart(3)
			} else {
				yynn1342 = 1
				for _, b := range yyq1342 {
					if b {
						yynn1342++
					}
				}
				r.EncodeMapStart(yynn1342)
				yynn1342 = 0
			}
			if yyr1342 || yy2arr1342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1344 := z.EncBinary()
				_ = yym1344
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1345 := z.EncBinary()
				_ = yym1345
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1342 || yy2arr1342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1342[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1347 := z.EncBinary()
						_ = yym1347
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1342[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1348 := z.EncBinary()
						_ = yym1348
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr1342 || yy2arr1342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1342[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1342[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1342 || yy2arr1342 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1350 := z.DecBinary()
	_ = yym1350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1351 := r.ContainerType()
		if yyct1351 == codecSelferValueTypeMap1234 {
			yyl1351 := r.ReadMapStart()
			if yyl1351 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1351, d)
			}
		} else if yyct1351 == codecSelferValueTypeArray1234 {
			yyl1351 := r.ReadArrayStart()
			if yyl1351 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1351, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1352Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1352Slc
	var yyhl1352 bool = l >= 0
	for yyj1352 := 0; ; yyj1352++ {
		if yyhl1352 {
			if yyj1352 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1352Slc = r.DecodeBytes(yys1352Slc, true, true)
		yys1352 := string(yys1352Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1352 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym1355 := z.DecBinary()
				_ = yym1355
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_api.PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1352)
		} // end switch yys1352
	} // end for yyj1352
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1357 int
	var yyb1357 bool
	var yyhl1357 bool = l >= 0
	yyj1357++
	if yyhl1357 {
		yyb1357 = yyj1357 > l
	} else {
		yyb1357 = r.CheckBreak()
	}
	if yyb1357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1357++
	if yyhl1357 {
		yyb1357 = yyj1357 > l
	} else {
		yyb1357 = r.CheckBreak()
	}
	if yyb1357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym1360 := z.DecBinary()
		_ = yym1360
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj1357++
	if yyhl1357 {
		yyb1357 = yyj1357 > l
	} else {
		yyb1357 = r.CheckBreak()
	}
	if yyb1357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_api.PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1357++
		if yyhl1357 {
			yyb1357 = yyj1357 > l
		} else {
			yyb1357 = r.CheckBreak()
		}
		if yyb1357 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1357-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1362 := z.EncBinary()
		_ = yym1362
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1363 := !z.EncBinary()
			yy2arr1363 := z.EncBasicHandle().StructToArray
			var yyq1363 [2]bool
			_, _, _ = yysep1363, yyq1363, yy2arr1363
			const yyr1363 bool = false
			yyq1363[1] = x.ObservedGeneration != 0
			var yynn1363 int
			if yyr1363 || yy2arr1363 {
				r.EncodeArrayStart(2)
			} else {
				yynn1363 = 1
				for _, b := range yyq1363 {
					if b {
						yynn1363++
					}
				}
				r.EncodeMapStart(yynn1363)
				yynn1363 = 0
			}
			if yyr1363 || yy2arr1363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1365 := z.EncBinary()
				_ = yym1365
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1366 := z.EncBinary()
				_ = yym1366
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1363 || yy2arr1363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1363[1] {
					yym1368 := z.EncBinary()
					_ = yym1368
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1363[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1369 := z.EncBinary()
					_ = yym1369
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1363 || yy2arr1363 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1370 := z.DecBinary()
	_ = yym1370
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1371 := r.ContainerType()
		if yyct1371 == codecSelferValueTypeMap1234 {
			yyl1371 := r.ReadMapStart()
			if yyl1371 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1371, d)
			}
		} else if yyct1371 == codecSelferValueTypeArray1234 {
			yyl1371 := r.ReadArrayStart()
			if yyl1371 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1371, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1372Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1372Slc
	var yyhl1372 bool = l >= 0
	for yyj1372 := 0; ; yyj1372++ {
		if yyhl1372 {
			if yyj1372 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1372Slc = r.DecodeBytes(yys1372Slc, true, true)
		yys1372 := string(yys1372Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1372 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1372)
		} // end switch yys1372
	} // end for yyj1372
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1375 int
	var yyb1375 bool
	var yyhl1375 bool = l >= 0
	yyj1375++
	if yyhl1375 {
		yyb1375 = yyj1375 > l
	} else {
		yyb1375 = r.CheckBreak()
	}
	if yyb1375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1375++
	if yyhl1375 {
		yyb1375 = yyj1375 > l
	} else {
		yyb1375 = r.CheckBreak()
	}
	if yyb1375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1375++
		if yyhl1375 {
			yyb1375 = yyj1375 > l
		} else {
			yyb1375 = r.CheckBreak()
		}
		if yyb1375 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1375-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1378 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1379 := &yyv1378
		yy1379.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1380 := *v
	yyh1380, yyl1380 := z.DecSliceHelperStart()
	var yyc1380 bool
	if yyl1380 == 0 {
		if yyv1380 == nil {
			yyv1380 = []CustomMetricTarget{}
			yyc1380 = true
		} else if len(yyv1380) != 0 {
			yyv1380 = yyv1380[:0]
			yyc1380 = true
		}
	} else if yyl1380 > 0 {
		var yyrr1380, yyrl1380 int
		var yyrt1380 bool
		if yyl1380 > cap(yyv1380) {

			yyrg1380 := len(yyv1380) > 0
			yyv21380 := yyv1380
			yyrl1380, yyrt1380 = z.DecInferLen(yyl1380, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1380 {
				if yyrl1380 <= cap(yyv1380) {
					yyv1380 = yyv1380[:yyrl1380]
				} else {
					yyv1380 = make([]CustomMetricTarget, yyrl1380)
				}
			} else {
				yyv1380 = make([]CustomMetricTarget, yyrl1380)
			}
			yyc1380 = true
			yyrr1380 = len(yyv1380)
			if yyrg1380 {
				copy(yyv1380, yyv21380)
			}
		} else if yyl1380 != len(yyv1380) {
			yyv1380 = yyv1380[:yyl1380]
			yyc1380 = true
		}
		yyj1380 := 0
		for ; yyj1380 < yyrr1380; yyj1380++ {
			yyh1380.ElemContainerState(yyj1380)
			if r.TryDecodeAsNil() {
				yyv1380[yyj1380] = CustomMetricTarget{}
			} else {
				yyv1381 := &yyv1380[yyj1380]
				yyv1381.CodecDecodeSelf(d)
			}

		}
		if yyrt1380 {
			for ; yyj1380 < yyl1380; yyj1380++ {
				yyv1380 = append(yyv1380, CustomMetricTarget{})
				yyh1380.ElemContainerState(yyj1380)
				if r.TryDecodeAsNil() {
					yyv1380[yyj1380] = CustomMetricTarget{}
				} else {
					yyv1382 := &yyv1380[yyj1380]
					yyv1382.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1380 := 0
		for ; !r.CheckBreak(); yyj1380++ {

			if yyj1380 >= len(yyv1380) {
				yyv1380 = append(yyv1380, CustomMetricTarget{}) // var yyz1380 CustomMetricTarget
				yyc1380 = true
			}
			yyh1380.ElemContainerState(yyj1380)
			if yyj1380 < len(yyv1380) {
				if r.TryDecodeAsNil() {
					yyv1380[yyj1380] = CustomMetricTarget{}
				} else {
					yyv1383 := &yyv1380[yyj1380]
					yyv1383.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1380 < len(yyv1380) {
			yyv1380 = yyv1380[:yyj1380]
			yyc1380 = true
		} else if yyj1380 == 0 && yyv1380 == nil {
			yyv1380 = []CustomMetricTarget{}
			yyc1380 = true
		}
	}
	yyh1380.End()
	if yyc1380 {
		*v = yyv1380
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1384 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1385 := &yyv1384
		yy1385.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1386 := *v
	yyh1386, yyl1386 := z.DecSliceHelperStart()
	var yyc1386 bool
	if yyl1386 == 0 {
		if yyv1386 == nil {
			yyv1386 = []CustomMetricCurrentStatus{}
			yyc1386 = true
		} else if len(yyv1386) != 0 {
			yyv1386 = yyv1386[:0]
			yyc1386 = true
		}
	} else if yyl1386 > 0 {
		var yyrr1386, yyrl1386 int
		var yyrt1386 bool
		if yyl1386 > cap(yyv1386) {

			yyrg1386 := len(yyv1386) > 0
			yyv21386 := yyv1386
			yyrl1386, yyrt1386 = z.DecInferLen(yyl1386, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1386 {
				if yyrl1386 <= cap(yyv1386) {
					yyv1386 = yyv1386[:yyrl1386]
				} else {
					yyv1386 = make([]CustomMetricCurrentStatus, yyrl1386)
				}
			} else {
				yyv1386 = make([]CustomMetricCurrentStatus, yyrl1386)
			}
			yyc1386 = true
			yyrr1386 = len(yyv1386)
			if yyrg1386 {
				copy(yyv1386, yyv21386)
			}
		} else if yyl1386 != len(yyv1386) {
			yyv1386 = yyv1386[:yyl1386]
			yyc1386 = true
		}
		yyj1386 := 0
		for ; yyj1386 < yyrr1386; yyj1386++ {
			yyh1386.ElemContainerState(yyj1386)
			if r.TryDecodeAsNil() {
				yyv1386[yyj1386] = CustomMetricCurrentStatus{}
			} else {
				yyv1387 := &yyv1386[yyj1386]
				yyv1387.CodecDecodeSelf(d)
			}

		}
		if yyrt1386 {
			for ; yyj1386 < yyl1386; yyj1386++ {
				yyv1386 = append(yyv1386, CustomMetricCurrentStatus{})
				yyh1386.ElemContainerState(yyj1386)
				if r.TryDecodeAsNil() {
					yyv1386[yyj1386] = CustomMetricCurrentStatus{}
				} else {
					yyv1388 := &yyv1386[yyj1386]
					yyv1388.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1386 := 0
		for ; !r.CheckBreak(); yyj1386++ {

			if yyj1386 >= len(yyv1386) {
				yyv1386 = append(yyv1386, CustomMetricCurrentStatus{}) // var yyz1386 CustomMetricCurrentStatus
				yyc1386 = true
			}
			yyh1386.ElemContainerState(yyj1386)
			if yyj1386 < len(yyv1386) {
				if r.TryDecodeAsNil() {
					yyv1386[yyj1386] = CustomMetricCurrentStatus{}
				} else {
					yyv1389 := &yyv1386[yyj1386]
					yyv1389.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1386 < len(yyv1386) {
			yyv1386 = yyv1386[:yyj1386]
			yyc1386 = true
		} else if yyj1386 == 0 && yyv1386 == nil {
			yyv1386 = []CustomMetricCurrentStatus{}
			yyc1386 = true
		}
	}
	yyh1386.End()
	if yyc1386 {
		*v = yyv1386
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1390 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1391 := &yyv1390
		yy1391.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1392 := *v
	yyh1392, yyl1392 := z.DecSliceHelperStart()
	var yyc1392 bool
	if yyl1392 == 0 {
		if yyv1392 == nil {
			yyv1392 = []HorizontalPodAutoscaler{}
			yyc1392 = true
		} else if len(yyv1392) != 0 {
			yyv1392 = yyv1392[:0]
			yyc1392 = true
		}
	} else if yyl1392 > 0 {
		var yyrr1392, yyrl1392 int
		var yyrt1392 bool
		if yyl1392 > cap(yyv1392) {

			yyrg1392 := len(yyv1392) > 0
			yyv21392 := yyv1392
			yyrl1392, yyrt1392 = z.DecInferLen(yyl1392, z.DecBasicHandle().MaxInitLen, 320)
			if yyrt1392 {
				if yyrl1392 <= cap(yyv1392) {
					yyv1392 = yyv1392[:yyrl1392]
				} else {
					yyv1392 = make([]HorizontalPodAutoscaler, yyrl1392)
				}
			} else {
				yyv1392 = make([]HorizontalPodAutoscaler, yyrl1392)
			}
			yyc1392 = true
			yyrr1392 = len(yyv1392)
			if yyrg1392 {
				copy(yyv1392, yyv21392)
			}
		} else if yyl1392 != len(yyv1392) {
			yyv1392 = yyv1392[:yyl1392]
			yyc1392 = true
		}
		yyj1392 := 0
		for ; yyj1392 < yyrr1392; yyj1392++ {
			yyh1392.ElemContainerState(yyj1392)
			if r.TryDecodeAsNil() {
				yyv1392[yyj1392] = HorizontalPodAutoscaler{}
			} else {
				yyv1393 := &yyv1392[yyj1392]
				yyv1393.CodecDecodeSelf(d)
			}

		}
		if yyrt1392 {
			for ; yyj1392 < yyl1392; yyj1392++ {
				yyv1392 = append(yyv1392, HorizontalPodAutoscaler{})
				yyh1392.ElemContainerState(yyj1392)
				if r.TryDecodeAsNil() {
					yyv1392[yyj1392] = HorizontalPodAutoscaler{}
				} else {
					yyv1394 := &yyv1392[yyj1392]
					yyv1394.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1392 := 0
		for ; !r.CheckBreak(); yyj1392++ {

			if yyj1392 >= len(yyv1392) {
				yyv1392 = append(yyv1392, HorizontalPodAutoscaler{}) // var yyz1392 HorizontalPodAutoscaler
				yyc1392 = true
			}
			yyh1392.ElemContainerState(yyj1392)
			if yyj1392 < len(yyv1392) {
				if r.TryDecodeAsNil() {
					yyv1392[yyj1392] = HorizontalPodAutoscaler{}
				} else {
					yyv1395 := &yyv1392[yyj1392]
					yyv1395.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1392 < len(yyv1392) {
			yyv1392 = yyv1392[:yyj1392]
			yyc1392 = true
		} else if yyj1392 == 0 && yyv1392 == nil {
			yyv1392 = []HorizontalPodAutoscaler{}
			yyc1392 = true
		}
	}
	yyh1392.End()
	if yyc1392 {
		*v = yyv1392
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1396 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1397 := &yyv1396
		yy1397.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1398 := *v
	yyh1398, yyl1398 := z.DecSliceHelperStart()
	var yyc1398 bool
	if yyl1398 == 0 {
		if yyv1398 == nil {
			yyv1398 = []APIVersion{}
			yyc1398 = true
		} else if len(yyv1398) != 0 {
			yyv1398 = yyv1398[:0]
			yyc1398 = true
		}
	} else if yyl1398 > 0 {
		var yyrr1398, yyrl1398 int
		var yyrt1398 bool
		if yyl1398 > cap(yyv1398) {

			yyrg1398 := len(yyv1398) > 0
			yyv21398 := yyv1398
			yyrl1398, yyrt1398 = z.DecInferLen(yyl1398, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt1398 {
				if yyrl1398 <= cap(yyv1398) {
					yyv1398 = yyv1398[:yyrl1398]
				} else {
					yyv1398 = make([]APIVersion, yyrl1398)
				}
			} else {
				yyv1398 = make([]APIVersion, yyrl1398)
			}
			yyc1398 = true
			yyrr1398 = len(yyv1398)
			if yyrg1398 {
				copy(yyv1398, yyv21398)
			}
		} else if yyl1398 != len(yyv1398) {
			yyv1398 = yyv1398[:yyl1398]
			yyc1398 = true
		}
		yyj1398 := 0
		for ; yyj1398 < yyrr1398; yyj1398++ {
			yyh1398.ElemContainerState(yyj1398)
			if r.TryDecodeAsNil() {
				yyv1398[yyj1398] = APIVersion{}
			} else {
				yyv1399 := &yyv1398[yyj1398]
				yyv1399.CodecDecodeSelf(d)
			}

		}
		if yyrt1398 {
			for ; yyj1398 < yyl1398; yyj1398++ {
				yyv1398 = append(yyv1398, APIVersion{})
				yyh1398.ElemContainerState(yyj1398)
				if r.TryDecodeAsNil() {
					yyv1398[yyj1398] = APIVersion{}
				} else {
					yyv1400 := &yyv1398[yyj1398]
					yyv1400.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1398 := 0
		for ; !r.CheckBreak(); yyj1398++ {

			if yyj1398 >= len(yyv1398) {
				yyv1398 = append(yyv1398, APIVersion{}) // var yyz1398 APIVersion
				yyc1398 = true
			}
			yyh1398.ElemContainerState(yyj1398)
			if yyj1398 < len(yyv1398) {
				if r.TryDecodeAsNil() {
					yyv1398[yyj1398] = APIVersion{}
				} else {
					yyv1401 := &yyv1398[yyj1398]
					yyv1401.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1398 < len(yyv1398) {
			yyv1398 = yyv1398[:yyj1398]
			yyc1398 = true
		} else if yyj1398 == 0 && yyv1398 == nil {
			yyv1398 = []APIVersion{}
			yyc1398 = true
		}
	}
	yyh1398.End()
	if yyc1398 {
		*v = yyv1398
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1402 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1403 := &yyv1402
		yy1403.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1404 := *v
	yyh1404, yyl1404 := z.DecSliceHelperStart()
	var yyc1404 bool
	if yyl1404 == 0 {
		if yyv1404 == nil {
			yyv1404 = []ThirdPartyResource{}
			yyc1404 = true
		} else if len(yyv1404) != 0 {
			yyv1404 = yyv1404[:0]
			yyc1404 = true
		}
	} else if yyl1404 > 0 {
		var yyrr1404, yyrl1404 int
		var yyrt1404 bool
		if yyl1404 > cap(yyv1404) {

			yyrg1404 := len(yyv1404) > 0
			yyv21404 := yyv1404
			yyrl1404, yyrt1404 = z.DecInferLen(yyl1404, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1404 {
				if yyrl1404 <= cap(yyv1404) {
					yyv1404 = yyv1404[:yyrl1404]
				} else {
					yyv1404 = make([]ThirdPartyResource, yyrl1404)
				}
			} else {
				yyv1404 = make([]ThirdPartyResource, yyrl1404)
			}
			yyc1404 = true
			yyrr1404 = len(yyv1404)
			if yyrg1404 {
				copy(yyv1404, yyv21404)
			}
		} else if yyl1404 != len(yyv1404) {
			yyv1404 = yyv1404[:yyl1404]
			yyc1404 = true
		}
		yyj1404 := 0
		for ; yyj1404 < yyrr1404; yyj1404++ {
			yyh1404.ElemContainerState(yyj1404)
			if r.TryDecodeAsNil() {
				yyv1404[yyj1404] = ThirdPartyResource{}
			} else {
				yyv1405 := &yyv1404[yyj1404]
				yyv1405.CodecDecodeSelf(d)
			}

		}
		if yyrt1404 {
			for ; yyj1404 < yyl1404; yyj1404++ {
				yyv1404 = append(yyv1404, ThirdPartyResource{})
				yyh1404.ElemContainerState(yyj1404)
				if r.TryDecodeAsNil() {
					yyv1404[yyj1404] = ThirdPartyResource{}
				} else {
					yyv1406 := &yyv1404[yyj1404]
					yyv1406.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1404 := 0
		for ; !r.CheckBreak(); yyj1404++ {

			if yyj1404 >= len(yyv1404) {
				yyv1404 = append(yyv1404, ThirdPartyResource{}) // var yyz1404 ThirdPartyResource
				yyc1404 = true
			}
			yyh1404.ElemContainerState(yyj1404)
			if yyj1404 < len(yyv1404) {
				if r.TryDecodeAsNil() {
					yyv1404[yyj1404] = ThirdPartyResource{}
				} else {
					yyv1407 := &yyv1404[yyj1404]
					yyv1407.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1404 < len(yyv1404) {
			yyv1404 = yyv1404[:yyj1404]
			yyc1404 = true
		} else if yyj1404 == 0 && yyv1404 == nil {
			yyv1404 = []ThirdPartyResource{}
			yyc1404 = true
		}
	}
	yyh1404.End()
	if yyc1404 {
		*v = yyv1404
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1408 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1409 := &yyv1408
		yy1409.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1410 := *v
	yyh1410, yyl1410 := z.DecSliceHelperStart()
	var yyc1410 bool
	if yyl1410 == 0 {
		if yyv1410 == nil {
			yyv1410 = []Deployment{}
			yyc1410 = true
		} else if len(yyv1410) != 0 {
			yyv1410 = yyv1410[:0]
			yyc1410 = true
		}
	} else if yyl1410 > 0 {
		var yyrr1410, yyrl1410 int
		var yyrt1410 bool
		if yyl1410 > cap(yyv1410) {

			yyrg1410 := len(yyv1410) > 0
			yyv21410 := yyv1410
			yyrl1410, yyrt1410 = z.DecInferLen(yyl1410, z.DecBasicHandle().MaxInitLen, 640)
			if yyrt1410 {
				if yyrl1410 <= cap(yyv1410) {
					yyv1410 = yyv1410[:yyrl1410]
				} else {
					yyv1410 = make([]Deployment, yyrl1410)
				}
			} else {
				yyv1410 = make([]Deployment, yyrl1410)
			}
			yyc1410 = true
			yyrr1410 = len(yyv1410)
			if yyrg1410 {
				copy(yyv1410, yyv21410)
			}
		} else if yyl1410 != len(yyv1410) {
			yyv1410 = yyv1410[:yyl1410]
			yyc1410 = true
		}
		yyj1410 := 0
		for ; yyj1410 < yyrr1410; yyj1410++ {
			yyh1410.ElemContainerState(yyj1410)
			if r.TryDecodeAsNil() {
				yyv1410[yyj1410] = Deployment{}
			} else {
				yyv1411 := &yyv1410[yyj1410]
				yyv1411.CodecDecodeSelf(d)
			}

		}
		if yyrt1410 {
			for ; yyj1410 < yyl1410; yyj1410++ {
				yyv1410 = append(yyv1410, Deployment{})
				yyh1410.ElemContainerState(yyj1410)
				if r.TryDecodeAsNil() {
					yyv1410[yyj1410] = Deployment{}
				} else {
					yyv1412 := &yyv1410[yyj1410]
					yyv1412.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1410 := 0
		for ; !r.CheckBreak(); yyj1410++ {

			if yyj1410 >= len(yyv1410) {
				yyv1410 = append(yyv1410, Deployment{}) // var yyz1410 Deployment
				yyc1410 = true
			}
			yyh1410.ElemContainerState(yyj1410)
			if yyj1410 < len(yyv1410) {
				if r.TryDecodeAsNil() {
					yyv1410[yyj1410] = Deployment{}
				} else {
					yyv1413 := &yyv1410[yyj1410]
					yyv1413.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1410 < len(yyv1410) {
			yyv1410 = yyv1410[:yyj1410]
			yyc1410 = true
		} else if yyj1410 == 0 && yyv1410 == nil {
			yyv1410 = []Deployment{}
			yyc1410 = true
		}
	}
	yyh1410.End()
	if yyc1410 {
		*v = yyv1410
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1414 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1415 := &yyv1414
		yy1415.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1416 := *v
	yyh1416, yyl1416 := z.DecSliceHelperStart()
	var yyc1416 bool
	if yyl1416 == 0 {
		if yyv1416 == nil {
			yyv1416 = []DaemonSet{}
			yyc1416 = true
		} else if len(yyv1416) != 0 {
			yyv1416 = yyv1416[:0]
			yyc1416 = true
		}
	} else if yyl1416 > 0 {
		var yyrr1416, yyrl1416 int
		var yyrt1416 bool
		if yyl1416 > cap(yyv1416) {

			yyrg1416 := len(yyv1416) > 0
			yyv21416 := yyv1416
			yyrl1416, yyrt1416 = z.DecInferLen(yyl1416, z.DecBasicHandle().MaxInitLen, 592)
			if yyrt1416 {
				if yyrl1416 <= cap(yyv1416) {
					yyv1416 = yyv1416[:yyrl1416]
				} else {
					yyv1416 = make([]DaemonSet, yyrl1416)
				}
			} else {
				yyv1416 = make([]DaemonSet, yyrl1416)
			}
			yyc1416 = true
			yyrr1416 = len(yyv1416)
			if yyrg1416 {
				copy(yyv1416, yyv21416)
			}
		} else if yyl1416 != len(yyv1416) {
			yyv1416 = yyv1416[:yyl1416]
			yyc1416 = true
		}
		yyj1416 := 0
		for ; yyj1416 < yyrr1416; yyj1416++ {
			yyh1416.ElemContainerState(yyj1416)
			if r.TryDecodeAsNil() {
				yyv1416[yyj1416] = DaemonSet{}
			} else {
				yyv1417 := &yyv1416[yyj1416]
				yyv1417.CodecDecodeSelf(d)
			}

		}
		if yyrt1416 {
			for ; yyj1416 < yyl1416; yyj1416++ {
				yyv1416 = append(yyv1416, DaemonSet{})
				yyh1416.ElemContainerState(yyj1416)
				if r.TryDecodeAsNil() {
					yyv1416[yyj1416] = DaemonSet{}
				} else {
					yyv1418 := &yyv1416[yyj1416]
					yyv1418.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1416 := 0
		for ; !r.CheckBreak(); yyj1416++ {

			if yyj1416 >= len(yyv1416) {
				yyv1416 = append(yyv1416, DaemonSet{}) // var yyz1416 DaemonSet
				yyc1416 = true
			}
			yyh1416.ElemContainerState(yyj1416)
			if yyj1416 < len(yyv1416) {
				if r.TryDecodeAsNil() {
					yyv1416[yyj1416] = DaemonSet{}
				} else {
					yyv1419 := &yyv1416[yyj1416]
					yyv1419.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1416 < len(yyv1416) {
			yyv1416 = yyv1416[:yyj1416]
			yyc1416 = true
		} else if yyj1416 == 0 && yyv1416 == nil {
			yyv1416 = []DaemonSet{}
			yyc1416 = true
		}
	}
	yyh1416.End()
	if yyc1416 {
		*v = yyv1416
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1420 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1421 := &yyv1420
		yy1421.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1422 := *v
	yyh1422, yyl1422 := z.DecSliceHelperStart()
	var yyc1422 bool
	if yyl1422 == 0 {
		if yyv1422 == nil {
			yyv1422 = []ThirdPartyResourceData{}
			yyc1422 = true
		} else if len(yyv1422) != 0 {
			yyv1422 = yyv1422[:0]
			yyc1422 = true
		}
	} else if yyl1422 > 0 {
		var yyrr1422, yyrl1422 int
		var yyrt1422 bool
		if yyl1422 > cap(yyv1422) {

			yyrg1422 := len(yyv1422) > 0
			yyv21422 := yyv1422
			yyrl1422, yyrt1422 = z.DecInferLen(yyl1422, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt1422 {
				if yyrl1422 <= cap(yyv1422) {
					yyv1422 = yyv1422[:yyrl1422]
				} else {
					yyv1422 = make([]ThirdPartyResourceData, yyrl1422)
				}
			} else {
				yyv1422 = make([]ThirdPartyResourceData, yyrl1422)
			}
			yyc1422 = true
			yyrr1422 = len(yyv1422)
			if yyrg1422 {
				copy(yyv1422, yyv21422)
			}
		} else if yyl1422 != len(yyv1422) {
			yyv1422 = yyv1422[:yyl1422]
			yyc1422 = true
		}
		yyj1422 := 0
		for ; yyj1422 < yyrr1422; yyj1422++ {
			yyh1422.ElemContainerState(yyj1422)
			if r.TryDecodeAsNil() {
				yyv1422[yyj1422] = ThirdPartyResourceData{}
			} else {
				yyv1423 := &yyv1422[yyj1422]
				yyv1423.CodecDecodeSelf(d)
			}

		}
		if yyrt1422 {
			for ; yyj1422 < yyl1422; yyj1422++ {
				yyv1422 = append(yyv1422, ThirdPartyResourceData{})
				yyh1422.ElemContainerState(yyj1422)
				if r.TryDecodeAsNil() {
					yyv1422[yyj1422] = ThirdPartyResourceData{}
				} else {
					yyv1424 := &yyv1422[yyj1422]
					yyv1424.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1422 := 0
		for ; !r.CheckBreak(); yyj1422++ {

			if yyj1422 >= len(yyv1422) {
				yyv1422 = append(yyv1422, ThirdPartyResourceData{}) // var yyz1422 ThirdPartyResourceData
				yyc1422 = true
			}
			yyh1422.ElemContainerState(yyj1422)
			if yyj1422 < len(yyv1422) {
				if r.TryDecodeAsNil() {
					yyv1422[yyj1422] = ThirdPartyResourceData{}
				} else {
					yyv1425 := &yyv1422[yyj1422]
					yyv1425.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1422 < len(yyv1422) {
			yyv1422 = yyv1422[:yyj1422]
			yyc1422 = true
		} else if yyj1422 == 0 && yyv1422 == nil {
			yyv1422 = []ThirdPartyResourceData{}
			yyc1422 = true
		}
	}
	yyh1422.End()
	if yyc1422 {
		*v = yyv1422
	}
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1426 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1427 := &yyv1426
		yy1427.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1428 := *v
	yyh1428, yyl1428 := z.DecSliceHelperStart()
	var yyc1428 bool
	if yyl1428 == 0 {
		if yyv1428 == nil {
			yyv1428 = []Job{}
			yyc1428 = true
		} else if len(yyv1428) != 0 {
			yyv1428 = yyv1428[:0]
			yyc1428 = true
		}
	} else if yyl1428 > 0 {
		var yyrr1428, yyrl1428 int
		var yyrt1428 bool
		if yyl1428 > cap(yyv1428) {

			yyrg1428 := len(yyv1428) > 0
			yyv21428 := yyv1428
			yyrl1428, yyrt1428 = z.DecInferLen(yyl1428, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt1428 {
				if yyrl1428 <= cap(yyv1428) {
					yyv1428 = yyv1428[:yyrl1428]
				} else {
					yyv1428 = make([]Job, yyrl1428)
				}
			} else {
				yyv1428 = make([]Job, yyrl1428)
			}
			yyc1428 = true
			yyrr1428 = len(yyv1428)
			if yyrg1428 {
				copy(yyv1428, yyv21428)
			}
		} else if yyl1428 != len(yyv1428) {
			yyv1428 = yyv1428[:yyl1428]
			yyc1428 = true
		}
		yyj1428 := 0
		for ; yyj1428 < yyrr1428; yyj1428++ {
			yyh1428.ElemContainerState(yyj1428)
			if r.TryDecodeAsNil() {
				yyv1428[yyj1428] = Job{}
			} else {
				yyv1429 := &yyv1428[yyj1428]
				yyv1429.CodecDecodeSelf(d)
			}

		}
		if yyrt1428 {
			for ; yyj1428 < yyl1428; yyj1428++ {
				yyv1428 = append(yyv1428, Job{})
				yyh1428.ElemContainerState(yyj1428)
				if r.TryDecodeAsNil() {
					yyv1428[yyj1428] = Job{}
				} else {
					yyv1430 := &yyv1428[yyj1428]
					yyv1430.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1428 := 0
		for ; !r.CheckBreak(); yyj1428++ {

			if yyj1428 >= len(yyv1428) {
				yyv1428 = append(yyv1428, Job{}) // var yyz1428 Job
				yyc1428 = true
			}
			yyh1428.ElemContainerState(yyj1428)
			if yyj1428 < len(yyv1428) {
				if r.TryDecodeAsNil() {
					yyv1428[yyj1428] = Job{}
				} else {
					yyv1431 := &yyv1428[yyj1428]
					yyv1431.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1428 < len(yyv1428) {
			yyv1428 = yyv1428[:yyj1428]
			yyc1428 = true
		} else if yyj1428 == 0 && yyv1428 == nil {
			yyv1428 = []Job{}
			yyc1428 = true
		}
	}
	yyh1428.End()
	if yyc1428 {
		*v = yyv1428
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1432 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1433 := &yyv1432
		yy1433.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1434 := *v
	yyh1434, yyl1434 := z.DecSliceHelperStart()
	var yyc1434 bool
	if yyl1434 == 0 {
		if yyv1434 == nil {
			yyv1434 = []JobCondition{}
			yyc1434 = true
		} else if len(yyv1434) != 0 {
			yyv1434 = yyv1434[:0]
			yyc1434 = true
		}
	} else if yyl1434 > 0 {
		var yyrr1434, yyrl1434 int
		var yyrt1434 bool
		if yyl1434 > cap(yyv1434) {

			yyrg1434 := len(yyv1434) > 0
			yyv21434 := yyv1434
			yyrl1434, yyrt1434 = z.DecInferLen(yyl1434, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1434 {
				if yyrl1434 <= cap(yyv1434) {
					yyv1434 = yyv1434[:yyrl1434]
				} else {
					yyv1434 = make([]JobCondition, yyrl1434)
				}
			} else {
				yyv1434 = make([]JobCondition, yyrl1434)
			}
			yyc1434 = true
			yyrr1434 = len(yyv1434)
			if yyrg1434 {
				copy(yyv1434, yyv21434)
			}
		} else if yyl1434 != len(yyv1434) {
			yyv1434 = yyv1434[:yyl1434]
			yyc1434 = true
		}
		yyj1434 := 0
		for ; yyj1434 < yyrr1434; yyj1434++ {
			yyh1434.ElemContainerState(yyj1434)
			if r.TryDecodeAsNil() {
				yyv1434[yyj1434] = JobCondition{}
			} else {
				yyv1435 := &yyv1434[yyj1434]
				yyv1435.CodecDecodeSelf(d)
			}

		}
		if yyrt1434 {
			for ; yyj1434 < yyl1434; yyj1434++ {
				yyv1434 = append(yyv1434, JobCondition{})
				yyh1434.ElemContainerState(yyj1434)
				if r.TryDecodeAsNil() {
					yyv1434[yyj1434] = JobCondition{}
				} else {
					yyv1436 := &yyv1434[yyj1434]
					yyv1436.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1434 := 0
		for ; !r.CheckBreak(); yyj1434++ {

			if yyj1434 >= len(yyv1434) {
				yyv1434 = append(yyv1434, JobCondition{}) // var yyz1434 JobCondition
				yyc1434 = true
			}
			yyh1434.ElemContainerState(yyj1434)
			if yyj1434 < len(yyv1434) {
				if r.TryDecodeAsNil() {
					yyv1434[yyj1434] = JobCondition{}
				} else {
					yyv1437 := &yyv1434[yyj1434]
					yyv1437.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1434 < len(yyv1434) {
			yyv1434 = yyv1434[:yyj1434]
			yyc1434 = true
		} else if yyj1434 == 0 && yyv1434 == nil {
			yyv1434 = []JobCondition{}
			yyc1434 = true
		}
	}
	yyh1434.End()
	if yyc1434 {
		*v = yyv1434
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1438 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1439 := &yyv1438
		yy1439.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1440 := *v
	yyh1440, yyl1440 := z.DecSliceHelperStart()
	var yyc1440 bool
	if yyl1440 == 0 {
		if yyv1440 == nil {
			yyv1440 = []Ingress{}
			yyc1440 = true
		} else if len(yyv1440) != 0 {
			yyv1440 = yyv1440[:0]
			yyc1440 = true
		}
	} else if yyl1440 > 0 {
		var yyrr1440, yyrl1440 int
		var yyrt1440 bool
		if yyl1440 > cap(yyv1440) {

			yyrg1440 := len(yyv1440) > 0
			yyv21440 := yyv1440
			yyrl1440, yyrt1440 = z.DecInferLen(yyl1440, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt1440 {
				if yyrl1440 <= cap(yyv1440) {
					yyv1440 = yyv1440[:yyrl1440]
				} else {
					yyv1440 = make([]Ingress, yyrl1440)
				}
			} else {
				yyv1440 = make([]Ingress, yyrl1440)
			}
			yyc1440 = true
			yyrr1440 = len(yyv1440)
			if yyrg1440 {
				copy(yyv1440, yyv21440)
			}
		} else if yyl1440 != len(yyv1440) {
			yyv1440 = yyv1440[:yyl1440]
			yyc1440 = true
		}
		yyj1440 := 0
		for ; yyj1440 < yyrr1440; yyj1440++ {
			yyh1440.ElemContainerState(yyj1440)
			if r.TryDecodeAsNil() {
				yyv1440[yyj1440] = Ingress{}
			} else {
				yyv1441 := &yyv1440[yyj1440]
				yyv1441.CodecDecodeSelf(d)
			}

		}
		if yyrt1440 {
			for ; yyj1440 < yyl1440; yyj1440++ {
				yyv1440 = append(yyv1440, Ingress{})
				yyh1440.ElemContainerState(yyj1440)
				if r.TryDecodeAsNil() {
					yyv1440[yyj1440] = Ingress{}
				} else {
					yyv1442 := &yyv1440[yyj1440]
					yyv1442.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1440 := 0
		for ; !r.CheckBreak(); yyj1440++ {

			if yyj1440 >= len(yyv1440) {
				yyv1440 = append(yyv1440, Ingress{}) // var yyz1440 Ingress
				yyc1440 = true
			}
			yyh1440.ElemContainerState(yyj1440)
			if yyj1440 < len(yyv1440) {
				if r.TryDecodeAsNil() {
					yyv1440[yyj1440] = Ingress{}
				} else {
					yyv1443 := &yyv1440[yyj1440]
					yyv1443.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1440 < len(yyv1440) {
			yyv1440 = yyv1440[:yyj1440]
			yyc1440 = true
		} else if yyj1440 == 0 && yyv1440 == nil {
			yyv1440 = []Ingress{}
			yyc1440 = true
		}
	}
	yyh1440.End()
	if yyc1440 {
		*v = yyv1440
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1444 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1445 := &yyv1444
		yy1445.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1446 := *v
	yyh1446, yyl1446 := z.DecSliceHelperStart()
	var yyc1446 bool
	if yyl1446 == 0 {
		if yyv1446 == nil {
			yyv1446 = []IngressRule{}
			yyc1446 = true
		} else if len(yyv1446) != 0 {
			yyv1446 = yyv1446[:0]
			yyc1446 = true
		}
	} else if yyl1446 > 0 {
		var yyrr1446, yyrl1446 int
		var yyrt1446 bool
		if yyl1446 > cap(yyv1446) {

			yyrg1446 := len(yyv1446) > 0
			yyv21446 := yyv1446
			yyrl1446, yyrt1446 = z.DecInferLen(yyl1446, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1446 {
				if yyrl1446 <= cap(yyv1446) {
					yyv1446 = yyv1446[:yyrl1446]
				} else {
					yyv1446 = make([]IngressRule, yyrl1446)
				}
			} else {
				yyv1446 = make([]IngressRule, yyrl1446)
			}
			yyc1446 = true
			yyrr1446 = len(yyv1446)
			if yyrg1446 {
				copy(yyv1446, yyv21446)
			}
		} else if yyl1446 != len(yyv1446) {
			yyv1446 = yyv1446[:yyl1446]
			yyc1446 = true
		}
		yyj1446 := 0
		for ; yyj1446 < yyrr1446; yyj1446++ {
			yyh1446.ElemContainerState(yyj1446)
			if r.TryDecodeAsNil() {
				yyv1446[yyj1446] = IngressRule{}
			} else {
				yyv1447 := &yyv1446[yyj1446]
				yyv1447.CodecDecodeSelf(d)
			}

		}
		if yyrt1446 {
			for ; yyj1446 < yyl1446; yyj1446++ {
				yyv1446 = append(yyv1446, IngressRule{})
				yyh1446.ElemContainerState(yyj1446)
				if r.TryDecodeAsNil() {
					yyv1446[yyj1446] = IngressRule{}
				} else {
					yyv1448 := &yyv1446[yyj1446]
					yyv1448.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1446 := 0
		for ; !r.CheckBreak(); yyj1446++ {

			if yyj1446 >= len(yyv1446) {
				yyv1446 = append(yyv1446, IngressRule{}) // var yyz1446 IngressRule
				yyc1446 = true
			}
			yyh1446.ElemContainerState(yyj1446)
			if yyj1446 < len(yyv1446) {
				if r.TryDecodeAsNil() {
					yyv1446[yyj1446] = IngressRule{}
				} else {
					yyv1449 := &yyv1446[yyj1446]
					yyv1449.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1446 < len(yyv1446) {
			yyv1446 = yyv1446[:yyj1446]
			yyc1446 = true
		} else if yyj1446 == 0 && yyv1446 == nil {
			yyv1446 = []IngressRule{}
			yyc1446 = true
		}
	}
	yyh1446.End()
	if yyc1446 {
		*v = yyv1446
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1450 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1451 := &yyv1450
		yy1451.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1452 := *v
	yyh1452, yyl1452 := z.DecSliceHelperStart()
	var yyc1452 bool
	if yyl1452 == 0 {
		if yyv1452 == nil {
			yyv1452 = []HTTPIngressPath{}
			yyc1452 = true
		} else if len(yyv1452) != 0 {
			yyv1452 = yyv1452[:0]
			yyc1452 = true
		}
	} else if yyl1452 > 0 {
		var yyrr1452, yyrl1452 int
		var yyrt1452 bool
		if yyl1452 > cap(yyv1452) {

			yyrg1452 := len(yyv1452) > 0
			yyv21452 := yyv1452
			yyrl1452, yyrt1452 = z.DecInferLen(yyl1452, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1452 {
				if yyrl1452 <= cap(yyv1452) {
					yyv1452 = yyv1452[:yyrl1452]
				} else {
					yyv1452 = make([]HTTPIngressPath, yyrl1452)
				}
			} else {
				yyv1452 = make([]HTTPIngressPath, yyrl1452)
			}
			yyc1452 = true
			yyrr1452 = len(yyv1452)
			if yyrg1452 {
				copy(yyv1452, yyv21452)
			}
		} else if yyl1452 != len(yyv1452) {
			yyv1452 = yyv1452[:yyl1452]
			yyc1452 = true
		}
		yyj1452 := 0
		for ; yyj1452 < yyrr1452; yyj1452++ {
			yyh1452.ElemContainerState(yyj1452)
			if r.TryDecodeAsNil() {
				yyv1452[yyj1452] = HTTPIngressPath{}
			} else {
				yyv1453 := &yyv1452[yyj1452]
				yyv1453.CodecDecodeSelf(d)
			}

		}
		if yyrt1452 {
			for ; yyj1452 < yyl1452; yyj1452++ {
				yyv1452 = append(yyv1452, HTTPIngressPath{})
				yyh1452.ElemContainerState(yyj1452)
				if r.TryDecodeAsNil() {
					yyv1452[yyj1452] = HTTPIngressPath{}
				} else {
					yyv1454 := &yyv1452[yyj1452]
					yyv1454.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1452 := 0
		for ; !r.CheckBreak(); yyj1452++ {

			if yyj1452 >= len(yyv1452) {
				yyv1452 = append(yyv1452, HTTPIngressPath{}) // var yyz1452 HTTPIngressPath
				yyc1452 = true
			}
			yyh1452.ElemContainerState(yyj1452)
			if yyj1452 < len(yyv1452) {
				if r.TryDecodeAsNil() {
					yyv1452[yyj1452] = HTTPIngressPath{}
				} else {
					yyv1455 := &yyv1452[yyj1452]
					yyv1455.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1452 < len(yyv1452) {
			yyv1452 = yyv1452[:yyj1452]
			yyc1452 = true
		} else if yyj1452 == 0 && yyv1452 == nil {
			yyv1452 = []HTTPIngressPath{}
			yyc1452 = true
		}
	}
	yyh1452.End()
	if yyc1452 {
		*v = yyv1452
	}
}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1456 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1457 := &yyv1456
		yy1457.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1458 := *v
	yyh1458, yyl1458 := z.DecSliceHelperStart()
	var yyc1458 bool
	if yyl1458 == 0 {
		if yyv1458 == nil {
			yyv1458 = []NodeUtilization{}
			yyc1458 = true
		} else if len(yyv1458) != 0 {
			yyv1458 = yyv1458[:0]
			yyc1458 = true
		}
	} else if yyl1458 > 0 {
		var yyrr1458, yyrl1458 int
		var yyrt1458 bool
		if yyl1458 > cap(yyv1458) {

			yyrg1458 := len(yyv1458) > 0
			yyv21458 := yyv1458
			yyrl1458, yyrt1458 = z.DecInferLen(yyl1458, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1458 {
				if yyrl1458 <= cap(yyv1458) {
					yyv1458 = yyv1458[:yyrl1458]
				} else {
					yyv1458 = make([]NodeUtilization, yyrl1458)
				}
			} else {
				yyv1458 = make([]NodeUtilization, yyrl1458)
			}
			yyc1458 = true
			yyrr1458 = len(yyv1458)
			if yyrg1458 {
				copy(yyv1458, yyv21458)
			}
		} else if yyl1458 != len(yyv1458) {
			yyv1458 = yyv1458[:yyl1458]
			yyc1458 = true
		}
		yyj1458 := 0
		for ; yyj1458 < yyrr1458; yyj1458++ {
			yyh1458.ElemContainerState(yyj1458)
			if r.TryDecodeAsNil() {
				yyv1458[yyj1458] = NodeUtilization{}
			} else {
				yyv1459 := &yyv1458[yyj1458]
				yyv1459.CodecDecodeSelf(d)
			}

		}
		if yyrt1458 {
			for ; yyj1458 < yyl1458; yyj1458++ {
				yyv1458 = append(yyv1458, NodeUtilization{})
				yyh1458.ElemContainerState(yyj1458)
				if r.TryDecodeAsNil() {
					yyv1458[yyj1458] = NodeUtilization{}
				} else {
					yyv1460 := &yyv1458[yyj1458]
					yyv1460.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1458 := 0
		for ; !r.CheckBreak(); yyj1458++ {

			if yyj1458 >= len(yyv1458) {
				yyv1458 = append(yyv1458, NodeUtilization{}) // var yyz1458 NodeUtilization
				yyc1458 = true
			}
			yyh1458.ElemContainerState(yyj1458)
			if yyj1458 < len(yyv1458) {
				if r.TryDecodeAsNil() {
					yyv1458[yyj1458] = NodeUtilization{}
				} else {
					yyv1461 := &yyv1458[yyj1458]
					yyv1461.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1458 < len(yyv1458) {
			yyv1458 = yyv1458[:yyj1458]
			yyc1458 = true
		} else if yyj1458 == 0 && yyv1458 == nil {
			yyv1458 = []NodeUtilization{}
			yyc1458 = true
		}
	}
	yyh1458.End()
	if yyc1458 {
		*v = yyv1458
	}
}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1462 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1463 := &yyv1462
		yy1463.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1464 := *v
	yyh1464, yyl1464 := z.DecSliceHelperStart()
	var yyc1464 bool
	if yyl1464 == 0 {
		if yyv1464 == nil {
			yyv1464 = []ClusterAutoscaler{}
			yyc1464 = true
		} else if len(yyv1464) != 0 {
			yyv1464 = yyv1464[:0]
			yyc1464 = true
		}
	} else if yyl1464 > 0 {
		var yyrr1464, yyrl1464 int
		var yyrt1464 bool
		if yyl1464 > cap(yyv1464) {

			yyrg1464 := len(yyv1464) > 0
			yyv21464 := yyv1464
			yyrl1464, yyrt1464 = z.DecInferLen(yyl1464, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1464 {
				if yyrl1464 <= cap(yyv1464) {
					yyv1464 = yyv1464[:yyrl1464]
				} else {
					yyv1464 = make([]ClusterAutoscaler, yyrl1464)
				}
			} else {
				yyv1464 = make([]ClusterAutoscaler, yyrl1464)
			}
			yyc1464 = true
			yyrr1464 = len(yyv1464)
			if yyrg1464 {
				copy(yyv1464, yyv21464)
			}
		} else if yyl1464 != len(yyv1464) {
			yyv1464 = yyv1464[:yyl1464]
			yyc1464 = true
		}
		yyj1464 := 0
		for ; yyj1464 < yyrr1464; yyj1464++ {
			yyh1464.ElemContainerState(yyj1464)
			if r.TryDecodeAsNil() {
				yyv1464[yyj1464] = ClusterAutoscaler{}
			} else {
				yyv1465 := &yyv1464[yyj1464]
				yyv1465.CodecDecodeSelf(d)
			}

		}
		if yyrt1464 {
			for ; yyj1464 < yyl1464; yyj1464++ {
				yyv1464 = append(yyv1464, ClusterAutoscaler{})
				yyh1464.ElemContainerState(yyj1464)
				if r.TryDecodeAsNil() {
					yyv1464[yyj1464] = ClusterAutoscaler{}
				} else {
					yyv1466 := &yyv1464[yyj1464]
					yyv1466.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1464 := 0
		for ; !r.CheckBreak(); yyj1464++ {

			if yyj1464 >= len(yyv1464) {
				yyv1464 = append(yyv1464, ClusterAutoscaler{}) // var yyz1464 ClusterAutoscaler
				yyc1464 = true
			}
			yyh1464.ElemContainerState(yyj1464)
			if yyj1464 < len(yyv1464) {
				if r.TryDecodeAsNil() {
					yyv1464[yyj1464] = ClusterAutoscaler{}
				} else {
					yyv1467 := &yyv1464[yyj1464]
					yyv1467.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1464 < len(yyv1464) {
			yyv1464 = yyv1464[:yyj1464]
			yyc1464 = true
		} else if yyj1464 == 0 && yyv1464 == nil {
			yyv1464 = []ClusterAutoscaler{}
			yyc1464 = true
		}
	}
	yyh1464.End()
	if yyc1464 {
		*v = yyv1464
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1468 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1469 := &yyv1468
		yy1469.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1470 := *v
	yyh1470, yyl1470 := z.DecSliceHelperStart()
	var yyc1470 bool
	if yyl1470 == 0 {
		if yyv1470 == nil {
			yyv1470 = []ReplicaSet{}
			yyc1470 = true
		} else if len(yyv1470) != 0 {
			yyv1470 = yyv1470[:0]
			yyc1470 = true
		}
	} else if yyl1470 > 0 {
		var yyrr1470, yyrl1470 int
		var yyrt1470 bool
		if yyl1470 > cap(yyv1470) {

			yyrg1470 := len(yyv1470) > 0
			yyv21470 := yyv1470
			yyrl1470, yyrt1470 = z.DecInferLen(yyl1470, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1470 {
				if yyrl1470 <= cap(yyv1470) {
					yyv1470 = yyv1470[:yyrl1470]
				} else {
					yyv1470 = make([]ReplicaSet, yyrl1470)
				}
			} else {
				yyv1470 = make([]ReplicaSet, yyrl1470)
			}
			yyc1470 = true
			yyrr1470 = len(yyv1470)
			if yyrg1470 {
				copy(yyv1470, yyv21470)
			}
		} else if yyl1470 != len(yyv1470) {
			yyv1470 = yyv1470[:yyl1470]
			yyc1470 = true
		}
		yyj1470 := 0
		for ; yyj1470 < yyrr1470; yyj1470++ {
			yyh1470.ElemContainerState(yyj1470)
			if r.TryDecodeAsNil() {
				yyv1470[yyj1470] = ReplicaSet{}
			} else {
				yyv1471 := &yyv1470[yyj1470]
				yyv1471.CodecDecodeSelf(d)
			}

		}
		if yyrt1470 {
			for ; yyj1470 < yyl1470; yyj1470++ {
				yyv1470 = append(yyv1470, ReplicaSet{})
				yyh1470.ElemContainerState(yyj1470)
				if r.TryDecodeAsNil() {
					yyv1470[yyj1470] = ReplicaSet{}
				} else {
					yyv1472 := &yyv1470[yyj1470]
					yyv1472.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1470 := 0
		for ; !r.CheckBreak(); yyj1470++ {

			if yyj1470 >= len(yyv1470) {
				yyv1470 = append(yyv1470, ReplicaSet{}) // var yyz1470 ReplicaSet
				yyc1470 = true
			}
			yyh1470.ElemContainerState(yyj1470)
			if yyj1470 < len(yyv1470) {
				if r.TryDecodeAsNil() {
					yyv1470[yyj1470] = ReplicaSet{}
				} else {
					yyv1473 := &yyv1470[yyj1470]
					yyv1473.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1470 < len(yyv1470) {
			yyv1470 = yyv1470[:yyj1470]
			yyc1470 = true
		} else if yyj1470 == 0 && yyv1470 == nil {
			yyv1470 = []ReplicaSet{}
			yyc1470 = true
		}
	}
	yyh1470.End()
	if yyc1470 {
		*v = yyv1470
	}
}
